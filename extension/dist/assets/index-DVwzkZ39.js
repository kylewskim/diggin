var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __reflectGet = Reflect.get;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var require_index_001 = __commonJS({
  "assets/index-DVwzkZ39.js"(exports) {
    function _mergeNamespaces(n2, m2) {
      for (var i = 0; i < m2.length; i++) {
        const e = m2[i];
        if (typeof e !== "string" && !Array.isArray(e)) {
          for (const k2 in e) {
            if (k2 !== "default" && !(k2 in n2)) {
              const d = Object.getOwnPropertyDescriptor(e, k2);
              if (d) {
                Object.defineProperty(n2, k2, d.get ? d : {
                  enumerable: true,
                  get: () => e[k2]
                });
              }
            }
          }
        }
      }
      return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
    }
    (function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node of mutation.addedNodes) {
            if (node.tagName === "LINK" && node.rel === "modulepreload")
              processPreload(node);
          }
        }
      }).observe(document, { childList: true, subtree: true });
      function getFetchOpts(link) {
        const fetchOpts = {};
        if (link.integrity) fetchOpts.integrity = link.integrity;
        if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
        if (link.crossOrigin === "use-credentials")
          fetchOpts.credentials = "include";
        else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
        else fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link) {
        if (link.ep)
          return;
        link.ep = true;
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
      }
    })();
    function getDefaultExportFromCjs(x2) {
      return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
    }
    var jsxRuntime = { exports: {} };
    var reactJsxRuntime_production_min = {};
    var react = { exports: {} };
    var react_production_min = {};
    /**
     * @license React
     * react.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var l$1 = Symbol.for("react.element"), n$1 = Symbol.for("react.portal"), p$2 = Symbol.for("react.fragment"), q$1 = Symbol.for("react.strict_mode"), r$1 = Symbol.for("react.profiler"), t = Symbol.for("react.provider"), u = Symbol.for("react.context"), v$2 = Symbol.for("react.forward_ref"), w$1 = Symbol.for("react.suspense"), x = Symbol.for("react.memo"), y = Symbol.for("react.lazy"), z$1 = Symbol.iterator;
    function A$1(a) {
      if (null === a || "object" !== typeof a) return null;
      a = z$1 && a[z$1] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var B$1 = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } }, C$2 = Object.assign, D$2 = {};
    function E$1(a, b2, e) {
      this.props = a;
      this.context = b2;
      this.refs = D$2;
      this.updater = e || B$1;
    }
    E$1.prototype.isReactComponent = {};
    E$1.prototype.setState = function(a, b2) {
      if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a, b2, "setState");
    };
    E$1.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function F() {
    }
    F.prototype = E$1.prototype;
    function G$1(a, b2, e) {
      this.props = a;
      this.context = b2;
      this.refs = D$2;
      this.updater = e || B$1;
    }
    var H$1 = G$1.prototype = new F();
    H$1.constructor = G$1;
    C$2(H$1, E$1.prototype);
    H$1.isPureReactComponent = true;
    var I$1 = Array.isArray, J = Object.prototype.hasOwnProperty, K$1 = { current: null }, L$1 = { key: true, ref: true, __self: true, __source: true };
    function M$1(a, b2, e) {
      var d, c = {}, k2 = null, h = null;
      if (null != b2) for (d in void 0 !== b2.ref && (h = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2) J.call(b2, d) && !L$1.hasOwnProperty(d) && (c[d] = b2[d]);
      var g = arguments.length - 2;
      if (1 === g) c.children = e;
      else if (1 < g) {
        for (var f2 = Array(g), m2 = 0; m2 < g; m2++) f2[m2] = arguments[m2 + 2];
        c.children = f2;
      }
      if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
      return { $$typeof: l$1, type: a, key: k2, ref: h, props: c, _owner: K$1.current };
    }
    function N$1(a, b2) {
      return { $$typeof: l$1, type: a.type, key: b2, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function O$1(a) {
      return "object" === typeof a && null !== a && a.$$typeof === l$1;
    }
    function escape(a) {
      var b2 = { "=": "=0", ":": "=2" };
      return "$" + a.replace(/[=:]/g, function(a2) {
        return b2[a2];
      });
    }
    var P$1 = /\/+/g;
    function Q$1(a, b2) {
      return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b2.toString(36);
    }
    function R$1(a, b2, e, d, c) {
      var k2 = typeof a;
      if ("undefined" === k2 || "boolean" === k2) a = null;
      var h = false;
      if (null === a) h = true;
      else switch (k2) {
        case "string":
        case "number":
          h = true;
          break;
        case "object":
          switch (a.$$typeof) {
            case l$1:
            case n$1:
              h = true;
          }
      }
      if (h) return h = a, c = c(h), a = "" === d ? "." + Q$1(h, 0) : d, I$1(c) ? (e = "", null != a && (e = a.replace(P$1, "$&/") + "/"), R$1(c, b2, e, "", function(a2) {
        return a2;
      })) : null != c && (O$1(c) && (c = N$1(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P$1, "$&/") + "/") + a)), b2.push(c)), 1;
      h = 0;
      d = "" === d ? "." : d + ":";
      if (I$1(a)) for (var g = 0; g < a.length; g++) {
        k2 = a[g];
        var f2 = d + Q$1(k2, g);
        h += R$1(k2, b2, e, f2, c);
      }
      else if (f2 = A$1(a), "function" === typeof f2) for (a = f2.call(a), g = 0; !(k2 = a.next()).done; ) k2 = k2.value, f2 = d + Q$1(k2, g++), h += R$1(k2, b2, e, f2, c);
      else if ("object" === k2) throw b2 = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
      return h;
    }
    function S$2(a, b2, e) {
      if (null == a) return a;
      var d = [], c = 0;
      R$1(a, d, "", "", function(a2) {
        return b2.call(e, a2, c++);
      });
      return d;
    }
    function T$1(a) {
      if (-1 === a._status) {
        var b2 = a._result;
        b2 = b2();
        b2.then(function(b3) {
          if (0 === a._status || -1 === a._status) a._status = 1, a._result = b3;
        }, function(b3) {
          if (0 === a._status || -1 === a._status) a._status = 2, a._result = b3;
        });
        -1 === a._status && (a._status = 0, a._result = b2);
      }
      if (1 === a._status) return a._result.default;
      throw a._result;
    }
    var U$1 = { current: null }, V$1 = { transition: null }, W$1 = { ReactCurrentDispatcher: U$1, ReactCurrentBatchConfig: V$1, ReactCurrentOwner: K$1 };
    function X$2() {
      throw Error("act(...) is not supported in production builds of React.");
    }
    react_production_min.Children = { map: S$2, forEach: function(a, b2, e) {
      S$2(a, function() {
        b2.apply(this, arguments);
      }, e);
    }, count: function(a) {
      var b2 = 0;
      S$2(a, function() {
        b2++;
      });
      return b2;
    }, toArray: function(a) {
      return S$2(a, function(a2) {
        return a2;
      }) || [];
    }, only: function(a) {
      if (!O$1(a)) throw Error("React.Children.only expected to receive a single React element child.");
      return a;
    } };
    react_production_min.Component = E$1;
    react_production_min.Fragment = p$2;
    react_production_min.Profiler = r$1;
    react_production_min.PureComponent = G$1;
    react_production_min.StrictMode = q$1;
    react_production_min.Suspense = w$1;
    react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
    react_production_min.act = X$2;
    react_production_min.cloneElement = function(a, b2, e) {
      if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
      var d = C$2({}, a.props), c = a.key, k2 = a.ref, h = a._owner;
      if (null != b2) {
        void 0 !== b2.ref && (k2 = b2.ref, h = K$1.current);
        void 0 !== b2.key && (c = "" + b2.key);
        if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
        for (f2 in b2) J.call(b2, f2) && !L$1.hasOwnProperty(f2) && (d[f2] = void 0 === b2[f2] && void 0 !== g ? g[f2] : b2[f2]);
      }
      var f2 = arguments.length - 2;
      if (1 === f2) d.children = e;
      else if (1 < f2) {
        g = Array(f2);
        for (var m2 = 0; m2 < f2; m2++) g[m2] = arguments[m2 + 2];
        d.children = g;
      }
      return { $$typeof: l$1, type: a.type, key: c, ref: k2, props: d, _owner: h };
    };
    react_production_min.createContext = function(a) {
      a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
      a.Provider = { $$typeof: t, _context: a };
      return a.Consumer = a;
    };
    react_production_min.createElement = M$1;
    react_production_min.createFactory = function(a) {
      var b2 = M$1.bind(null, a);
      b2.type = a;
      return b2;
    };
    react_production_min.createRef = function() {
      return { current: null };
    };
    react_production_min.forwardRef = function(a) {
      return { $$typeof: v$2, render: a };
    };
    react_production_min.isValidElement = O$1;
    react_production_min.lazy = function(a) {
      return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T$1 };
    };
    react_production_min.memo = function(a, b2) {
      return { $$typeof: x, type: a, compare: void 0 === b2 ? null : b2 };
    };
    react_production_min.startTransition = function(a) {
      var b2 = V$1.transition;
      V$1.transition = {};
      try {
        a();
      } finally {
        V$1.transition = b2;
      }
    };
    react_production_min.unstable_act = X$2;
    react_production_min.useCallback = function(a, b2) {
      return U$1.current.useCallback(a, b2);
    };
    react_production_min.useContext = function(a) {
      return U$1.current.useContext(a);
    };
    react_production_min.useDebugValue = function() {
    };
    react_production_min.useDeferredValue = function(a) {
      return U$1.current.useDeferredValue(a);
    };
    react_production_min.useEffect = function(a, b2) {
      return U$1.current.useEffect(a, b2);
    };
    react_production_min.useId = function() {
      return U$1.current.useId();
    };
    react_production_min.useImperativeHandle = function(a, b2, e) {
      return U$1.current.useImperativeHandle(a, b2, e);
    };
    react_production_min.useInsertionEffect = function(a, b2) {
      return U$1.current.useInsertionEffect(a, b2);
    };
    react_production_min.useLayoutEffect = function(a, b2) {
      return U$1.current.useLayoutEffect(a, b2);
    };
    react_production_min.useMemo = function(a, b2) {
      return U$1.current.useMemo(a, b2);
    };
    react_production_min.useReducer = function(a, b2, e) {
      return U$1.current.useReducer(a, b2, e);
    };
    react_production_min.useRef = function(a) {
      return U$1.current.useRef(a);
    };
    react_production_min.useState = function(a) {
      return U$1.current.useState(a);
    };
    react_production_min.useSyncExternalStore = function(a, b2, e) {
      return U$1.current.useSyncExternalStore(a, b2, e);
    };
    react_production_min.useTransition = function() {
      return U$1.current.useTransition();
    };
    react_production_min.version = "18.3.1";
    {
      react.exports = react_production_min;
    }
    var reactExports = react.exports;
    const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
    const React$1 = /* @__PURE__ */ _mergeNamespaces({
      __proto__: null,
      default: React
    }, [reactExports]);
    /**
     * @license React
     * react-jsx-runtime.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var f = reactExports, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m$1 = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$1 = { key: true, ref: true, __self: true, __source: true };
    function q(c, a, g) {
      var b2, d = {}, e = null, h = null;
      void 0 !== g && (e = "" + g);
      void 0 !== a.key && (e = "" + a.key);
      void 0 !== a.ref && (h = a.ref);
      for (b2 in a) m$1.call(a, b2) && !p$1.hasOwnProperty(b2) && (d[b2] = a[b2]);
      if (c && c.defaultProps) for (b2 in a = c.defaultProps, a) void 0 === d[b2] && (d[b2] = a[b2]);
      return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
    }
    reactJsxRuntime_production_min.Fragment = l;
    reactJsxRuntime_production_min.jsx = q;
    reactJsxRuntime_production_min.jsxs = q;
    {
      jsxRuntime.exports = reactJsxRuntime_production_min;
    }
    var jsxRuntimeExports = jsxRuntime.exports;
    var client = {};
    var reactDom = { exports: {} };
    var reactDom_production_min = {};
    var scheduler = { exports: {} };
    var scheduler_production_min = {};
    /**
     * @license React
     * scheduler.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      function f2(a, b2) {
        var c = a.length;
        a.push(b2);
        a: for (; 0 < c; ) {
          var d = c - 1 >>> 1, e = a[d];
          if (0 < g(e, b2)) a[d] = b2, a[c] = e, c = d;
          else break a;
        }
      }
      function h(a) {
        return 0 === a.length ? null : a[0];
      }
      function k2(a) {
        if (0 === a.length) return null;
        var b2 = a[0], c = a.pop();
        if (c !== b2) {
          a[0] = c;
          a: for (var d = 0, e = a.length, w2 = e >>> 1; d < w2; ) {
            var m2 = 2 * (d + 1) - 1, C2 = a[m2], n2 = m2 + 1, x2 = a[n2];
            if (0 > g(C2, c)) n2 < e && 0 > g(x2, C2) ? (a[d] = x2, a[n2] = c, d = n2) : (a[d] = C2, a[m2] = c, d = m2);
            else if (n2 < e && 0 > g(x2, c)) a[d] = x2, a[n2] = c, d = n2;
            else break a;
          }
        }
        return b2;
      }
      function g(a, b2) {
        var c = a.sortIndex - b2.sortIndex;
        return 0 !== c ? c : a.id - b2.id;
      }
      if ("object" === typeof performance && "function" === typeof performance.now) {
        var l2 = performance;
        exports2.unstable_now = function() {
          return l2.now();
        };
      } else {
        var p2 = Date, q2 = p2.now();
        exports2.unstable_now = function() {
          return p2.now() - q2;
        };
      }
      var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
      "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function G2(a) {
        for (var b2 = h(t2); null !== b2; ) {
          if (null === b2.callback) k2(t2);
          else if (b2.startTime <= a) k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
          else break;
          b2 = h(t2);
        }
      }
      function H2(a) {
        B2 = false;
        G2(a);
        if (!A2) if (null !== h(r2)) A2 = true, I2(J2);
        else {
          var b2 = h(t2);
          null !== b2 && K2(H2, b2.startTime - a);
        }
      }
      function J2(a, b2) {
        A2 = false;
        B2 && (B2 = false, E2(L2), L2 = -1);
        z2 = true;
        var c = y2;
        try {
          G2(b2);
          for (v2 = h(r2); null !== v2 && (!(v2.expirationTime > b2) || a && !M2()); ) {
            var d = v2.callback;
            if ("function" === typeof d) {
              v2.callback = null;
              y2 = v2.priorityLevel;
              var e = d(v2.expirationTime <= b2);
              b2 = exports2.unstable_now();
              "function" === typeof e ? v2.callback = e : v2 === h(r2) && k2(r2);
              G2(b2);
            } else k2(r2);
            v2 = h(r2);
          }
          if (null !== v2) var w2 = true;
          else {
            var m2 = h(t2);
            null !== m2 && K2(H2, m2.startTime - b2);
            w2 = false;
          }
          return w2;
        } finally {
          v2 = null, y2 = c, z2 = false;
        }
      }
      var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
      function M2() {
        return exports2.unstable_now() - Q2 < P2 ? false : true;
      }
      function R2() {
        if (null !== O2) {
          var a = exports2.unstable_now();
          Q2 = a;
          var b2 = true;
          try {
            b2 = O2(true, a);
          } finally {
            b2 ? S2() : (N2 = false, O2 = null);
          }
        } else N2 = false;
      }
      var S2;
      if ("function" === typeof F2) S2 = function() {
        F2(R2);
      };
      else if ("undefined" !== typeof MessageChannel) {
        var T2 = new MessageChannel(), U2 = T2.port2;
        T2.port1.onmessage = R2;
        S2 = function() {
          U2.postMessage(null);
        };
      } else S2 = function() {
        D2(R2, 0);
      };
      function I2(a) {
        O2 = a;
        N2 || (N2 = true, S2());
      }
      function K2(a, b2) {
        L2 = D2(function() {
          a(exports2.unstable_now());
        }, b2);
      }
      exports2.unstable_IdlePriority = 5;
      exports2.unstable_ImmediatePriority = 1;
      exports2.unstable_LowPriority = 4;
      exports2.unstable_NormalPriority = 3;
      exports2.unstable_Profiling = null;
      exports2.unstable_UserBlockingPriority = 2;
      exports2.unstable_cancelCallback = function(a) {
        a.callback = null;
      };
      exports2.unstable_continueExecution = function() {
        A2 || z2 || (A2 = true, I2(J2));
      };
      exports2.unstable_forceFrameRate = function(a) {
        0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a ? Math.floor(1e3 / a) : 5;
      };
      exports2.unstable_getCurrentPriorityLevel = function() {
        return y2;
      };
      exports2.unstable_getFirstCallbackNode = function() {
        return h(r2);
      };
      exports2.unstable_next = function(a) {
        switch (y2) {
          case 1:
          case 2:
          case 3:
            var b2 = 3;
            break;
          default:
            b2 = y2;
        }
        var c = y2;
        y2 = b2;
        try {
          return a();
        } finally {
          y2 = c;
        }
      };
      exports2.unstable_pauseExecution = function() {
      };
      exports2.unstable_requestPaint = function() {
      };
      exports2.unstable_runWithPriority = function(a, b2) {
        switch (a) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a = 3;
        }
        var c = y2;
        y2 = a;
        try {
          return b2();
        } finally {
          y2 = c;
        }
      };
      exports2.unstable_scheduleCallback = function(a, b2, c) {
        var d = exports2.unstable_now();
        "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
        switch (a) {
          case 1:
            var e = -1;
            break;
          case 2:
            e = 250;
            break;
          case 5:
            e = 1073741823;
            break;
          case 4:
            e = 1e4;
            break;
          default:
            e = 5e3;
        }
        e = c + e;
        a = { id: u2++, callback: b2, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
        c > d ? (a.sortIndex = c, f2(t2, a), null === h(r2) && a === h(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c - d))) : (a.sortIndex = e, f2(r2, a), A2 || z2 || (A2 = true, I2(J2)));
        return a;
      };
      exports2.unstable_shouldYield = M2;
      exports2.unstable_wrapCallback = function(a) {
        var b2 = y2;
        return function() {
          var c = y2;
          y2 = b2;
          try {
            return a.apply(this, arguments);
          } finally {
            y2 = c;
          }
        };
      };
    })(scheduler_production_min);
    {
      scheduler.exports = scheduler_production_min;
    }
    var schedulerExports = scheduler.exports;
    /**
     * @license React
     * react-dom.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var aa = reactExports, ca = schedulerExports;
    function p(a) {
      for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b2 += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var da = /* @__PURE__ */ new Set(), ea = {};
    function fa(a, b2) {
      ha(a, b2);
      ha(a + "Capture", b2);
    }
    function ha(a, b2) {
      ea[a] = b2;
      for (a = 0; a < b2.length; a++) da.add(b2[a]);
    }
    var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
    function oa(a) {
      if (ja.call(ma, a)) return true;
      if (ja.call(la, a)) return false;
      if (ka.test(a)) return ma[a] = true;
      la[a] = true;
      return false;
    }
    function pa(a, b2, c, d) {
      if (null !== c && 0 === c.type) return false;
      switch (typeof b2) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d) return false;
          if (null !== c) return !c.acceptsBooleans;
          a = a.toLowerCase().slice(0, 5);
          return "data-" !== a && "aria-" !== a;
        default:
          return false;
      }
    }
    function qa(a, b2, c, d) {
      if (null === b2 || "undefined" === typeof b2 || pa(a, b2, c, d)) return true;
      if (d) return false;
      if (null !== c) switch (c.type) {
        case 3:
          return !b2;
        case 4:
          return false === b2;
        case 5:
          return isNaN(b2);
        case 6:
          return isNaN(b2) || 1 > b2;
      }
      return false;
    }
    function v$1(a, b2, c, d, e, f2, g) {
      this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
      this.attributeName = d;
      this.attributeNamespace = e;
      this.mustUseProperty = c;
      this.propertyName = a;
      this.type = b2;
      this.sanitizeURL = f2;
      this.removeEmptyString = g;
    }
    var z = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
      z[a] = new v$1(a, 0, false, a, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
      var b2 = a[0];
      z[b2] = new v$1(b2, 1, false, a[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
      z[a] = new v$1(a, 2, false, a.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
      z[a] = new v$1(a, 2, false, a, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
      z[a] = new v$1(a, 3, false, a.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a) {
      z[a] = new v$1(a, 3, true, a, null, false, false);
    });
    ["capture", "download"].forEach(function(a) {
      z[a] = new v$1(a, 4, false, a, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a) {
      z[a] = new v$1(a, 6, false, a, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a) {
      z[a] = new v$1(a, 5, false, a.toLowerCase(), null, false, false);
    });
    var ra = /[\-:]([a-z])/g;
    function sa(a) {
      return a[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
      var b2 = a.replace(
        ra,
        sa
      );
      z[b2] = new v$1(b2, 1, false, a, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
      var b2 = a.replace(ra, sa);
      z[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
      var b2 = a.replace(ra, sa);
      z[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a) {
      z[a] = new v$1(a, 1, false, a.toLowerCase(), null, false, false);
    });
    z.xlinkHref = new v$1("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a) {
      z[a] = new v$1(a, 1, false, a.toLowerCase(), null, true, true);
    });
    function ta(a, b2, c, d) {
      var e = z.hasOwnProperty(b2) ? z[b2] : null;
      if (null !== e ? 0 !== e.type : d || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1]) qa(b2, c, e, d) && (c = null), d || null === e ? oa(b2) && (null === c ? a.removeAttribute(b2) : a.setAttribute(b2, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? false : "" : c : (b2 = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b2) : (e = e.type, c = 3 === e || 4 === e && true === c ? "" : "" + c, d ? a.setAttributeNS(d, b2, c) : a.setAttribute(b2, c)));
    }
    var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
    var Ia = Symbol.for("react.offscreen");
    var Ja = Symbol.iterator;
    function Ka(a) {
      if (null === a || "object" !== typeof a) return null;
      a = Ja && a[Ja] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var A = Object.assign, La;
    function Ma(a) {
      if (void 0 === La) try {
        throw Error();
      } catch (c) {
        var b2 = c.stack.trim().match(/\n( *(at )?)/);
        La = b2 && b2[1] || "";
      }
      return "\n" + La + a;
    }
    var Na = false;
    function Oa(a, b2) {
      if (!a || Na) return "";
      Na = true;
      var c = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b2) if (b2 = function() {
          throw Error();
        }, Object.defineProperty(b2.prototype, "props", { set: function() {
          throw Error();
        } }), "object" === typeof Reflect && Reflect.construct) {
          try {
            Reflect.construct(b2, []);
          } catch (l2) {
            var d = l2;
          }
          Reflect.construct(a, [], b2);
        } else {
          try {
            b2.call();
          } catch (l2) {
            d = l2;
          }
          a.call(b2.prototype);
        }
        else {
          try {
            throw Error();
          } catch (l2) {
            d = l2;
          }
          a();
        }
      } catch (l2) {
        if (l2 && d && "string" === typeof l2.stack) {
          for (var e = l2.stack.split("\n"), f2 = d.stack.split("\n"), g = e.length - 1, h = f2.length - 1; 1 <= g && 0 <= h && e[g] !== f2[h]; ) h--;
          for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f2[h]) {
            if (1 !== g || 1 !== h) {
              do
                if (g--, h--, 0 > h || e[g] !== f2[h]) {
                  var k2 = "\n" + e[g].replace(" at new ", " at ");
                  a.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a.displayName));
                  return k2;
                }
              while (1 <= g && 0 <= h);
            }
            break;
          }
        }
      } finally {
        Na = false, Error.prepareStackTrace = c;
      }
      return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
    }
    function Pa(a) {
      switch (a.tag) {
        case 5:
          return Ma(a.type);
        case 16:
          return Ma("Lazy");
        case 13:
          return Ma("Suspense");
        case 19:
          return Ma("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a = Oa(a.type, false), a;
        case 11:
          return a = Oa(a.type.render, false), a;
        case 1:
          return a = Oa(a.type, true), a;
        default:
          return "";
      }
    }
    function Qa(a) {
      if (null == a) return null;
      if ("function" === typeof a) return a.displayName || a.name || null;
      if ("string" === typeof a) return a;
      switch (a) {
        case ya:
          return "Fragment";
        case wa:
          return "Portal";
        case Aa:
          return "Profiler";
        case za:
          return "StrictMode";
        case Ea:
          return "Suspense";
        case Fa:
          return "SuspenseList";
      }
      if ("object" === typeof a) switch (a.$$typeof) {
        case Ca:
          return (a.displayName || "Context") + ".Consumer";
        case Ba:
          return (a._context.displayName || "Context") + ".Provider";
        case Da:
          var b2 = a.render;
          a = a.displayName;
          a || (a = b2.displayName || b2.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
          return a;
        case Ga:
          return b2 = a.displayName || null, null !== b2 ? b2 : Qa(a.type) || "Memo";
        case Ha:
          b2 = a._payload;
          a = a._init;
          try {
            return Qa(a(b2));
          } catch (c) {
          }
      }
      return null;
    }
    function Ra(a) {
      var b2 = a.type;
      switch (a.tag) {
        case 24:
          return "Cache";
        case 9:
          return (b2.displayName || "Context") + ".Consumer";
        case 10:
          return (b2._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return a = b2.render, a = a.displayName || a.name || "", b2.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return b2;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return Qa(b2);
        case 8:
          return b2 === za ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if ("function" === typeof b2) return b2.displayName || b2.name || null;
          if ("string" === typeof b2) return b2;
      }
      return null;
    }
    function Sa(a) {
      switch (typeof a) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return a;
        case "object":
          return a;
        default:
          return "";
      }
    }
    function Ta(a) {
      var b2 = a.type;
      return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
    }
    function Ua(a) {
      var b2 = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b2), d = "" + a[b2];
      if (!a.hasOwnProperty(b2) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
        var e = c.get, f2 = c.set;
        Object.defineProperty(a, b2, { configurable: true, get: function() {
          return e.call(this);
        }, set: function(a2) {
          d = "" + a2;
          f2.call(this, a2);
        } });
        Object.defineProperty(a, b2, { enumerable: c.enumerable });
        return { getValue: function() {
          return d;
        }, setValue: function(a2) {
          d = "" + a2;
        }, stopTracking: function() {
          a._valueTracker = null;
          delete a[b2];
        } };
      }
    }
    function Va(a) {
      a._valueTracker || (a._valueTracker = Ua(a));
    }
    function Wa(a) {
      if (!a) return false;
      var b2 = a._valueTracker;
      if (!b2) return true;
      var c = b2.getValue();
      var d = "";
      a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
      a = d;
      return a !== c ? (b2.setValue(a), true) : false;
    }
    function Xa(a) {
      a = a || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof a) return null;
      try {
        return a.activeElement || a.body;
      } catch (b2) {
        return a.body;
      }
    }
    function Ya(a, b2) {
      var c = b2.checked;
      return A({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
    }
    function Za(a, b2) {
      var c = null == b2.defaultValue ? "" : b2.defaultValue, d = null != b2.checked ? b2.checked : b2.defaultChecked;
      c = Sa(null != b2.value ? b2.value : c);
      a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
    }
    function ab(a, b2) {
      b2 = b2.checked;
      null != b2 && ta(a, "checked", b2, false);
    }
    function bb(a, b2) {
      ab(a, b2);
      var c = Sa(b2.value), d = b2.type;
      if (null != c) if ("number" === d) {
        if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
      } else a.value !== "" + c && (a.value = "" + c);
      else if ("submit" === d || "reset" === d) {
        a.removeAttribute("value");
        return;
      }
      b2.hasOwnProperty("value") ? cb(a, b2.type, c) : b2.hasOwnProperty("defaultValue") && cb(a, b2.type, Sa(b2.defaultValue));
      null == b2.checked && null != b2.defaultChecked && (a.defaultChecked = !!b2.defaultChecked);
    }
    function db$1(a, b2, c) {
      if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
        var d = b2.type;
        if (!("submit" !== d && "reset" !== d || void 0 !== b2.value && null !== b2.value)) return;
        b2 = "" + a._wrapperState.initialValue;
        c || b2 === a.value || (a.value = b2);
        a.defaultValue = b2;
      }
      c = a.name;
      "" !== c && (a.name = "");
      a.defaultChecked = !!a._wrapperState.initialChecked;
      "" !== c && (a.name = c);
    }
    function cb(a, b2, c) {
      if ("number" !== b2 || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
    }
    var eb = Array.isArray;
    function fb(a, b2, c, d) {
      a = a.options;
      if (b2) {
        b2 = {};
        for (var e = 0; e < c.length; e++) b2["$" + c[e]] = true;
        for (c = 0; c < a.length; c++) e = b2.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
      } else {
        c = "" + Sa(c);
        b2 = null;
        for (e = 0; e < a.length; e++) {
          if (a[e].value === c) {
            a[e].selected = true;
            d && (a[e].defaultSelected = true);
            return;
          }
          null !== b2 || a[e].disabled || (b2 = a[e]);
        }
        null !== b2 && (b2.selected = true);
      }
    }
    function gb(a, b2) {
      if (null != b2.dangerouslySetInnerHTML) throw Error(p(91));
      return A({}, b2, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
    }
    function hb(a, b2) {
      var c = b2.value;
      if (null == c) {
        c = b2.children;
        b2 = b2.defaultValue;
        if (null != c) {
          if (null != b2) throw Error(p(92));
          if (eb(c)) {
            if (1 < c.length) throw Error(p(93));
            c = c[0];
          }
          b2 = c;
        }
        null == b2 && (b2 = "");
        c = b2;
      }
      a._wrapperState = { initialValue: Sa(c) };
    }
    function ib(a, b2) {
      var c = Sa(b2.value), d = Sa(b2.defaultValue);
      null != c && (c = "" + c, c !== a.value && (a.value = c), null == b2.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
      null != d && (a.defaultValue = "" + d);
    }
    function jb(a) {
      var b2 = a.textContent;
      b2 === a._wrapperState.initialValue && "" !== b2 && null !== b2 && (a.value = b2);
    }
    function kb(a) {
      switch (a) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function lb(a, b2) {
      return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b2) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a;
    }
    var mb, nb = function(a) {
      return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c, d, e) {
        MSApp.execUnsafeLocalFunction(function() {
          return a(b2, c, d, e);
        });
      } : a;
    }(function(a, b2) {
      if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b2;
      else {
        mb = mb || document.createElement("div");
        mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
        for (b2 = mb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
        for (; b2.firstChild; ) a.appendChild(b2.firstChild);
      }
    });
    function ob(a, b2) {
      if (b2) {
        var c = a.firstChild;
        if (c && c === a.lastChild && 3 === c.nodeType) {
          c.nodeValue = b2;
          return;
        }
      }
      a.textContent = b2;
    }
    var pb = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    }, qb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(pb).forEach(function(a) {
      qb.forEach(function(b2) {
        b2 = b2 + a.charAt(0).toUpperCase() + a.substring(1);
        pb[b2] = pb[a];
      });
    });
    function rb(a, b2, c) {
      return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a) && pb[a] ? ("" + b2).trim() : b2 + "px";
    }
    function sb(a, b2) {
      a = a.style;
      for (var c in b2) if (b2.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--"), e = rb(c, b2[c], d);
        "float" === c && (c = "cssFloat");
        d ? a.setProperty(c, e) : a[c] = e;
      }
    }
    var tb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
    function ub(a, b2) {
      if (b2) {
        if (tb[a] && (null != b2.children || null != b2.dangerouslySetInnerHTML)) throw Error(p(137, a));
        if (null != b2.dangerouslySetInnerHTML) {
          if (null != b2.children) throw Error(p(60));
          if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML)) throw Error(p(61));
        }
        if (null != b2.style && "object" !== typeof b2.style) throw Error(p(62));
      }
    }
    function vb(a, b2) {
      if (-1 === a.indexOf("-")) return "string" === typeof b2.is;
      switch (a) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var wb = null;
    function xb(a) {
      a = a.target || a.srcElement || window;
      a.correspondingUseElement && (a = a.correspondingUseElement);
      return 3 === a.nodeType ? a.parentNode : a;
    }
    var yb = null, zb = null, Ab = null;
    function Bb(a) {
      if (a = Cb(a)) {
        if ("function" !== typeof yb) throw Error(p(280));
        var b2 = a.stateNode;
        b2 && (b2 = Db(b2), yb(a.stateNode, a.type, b2));
      }
    }
    function Eb(a) {
      zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
    }
    function Fb() {
      if (zb) {
        var a = zb, b2 = Ab;
        Ab = zb = null;
        Bb(a);
        if (b2) for (a = 0; a < b2.length; a++) Bb(b2[a]);
      }
    }
    function Gb(a, b2) {
      return a(b2);
    }
    function Hb() {
    }
    var Ib = false;
    function Jb(a, b2, c) {
      if (Ib) return a(b2, c);
      Ib = true;
      try {
        return Gb(a, b2, c);
      } finally {
        if (Ib = false, null !== zb || null !== Ab) Hb(), Fb();
      }
    }
    function Kb(a, b2) {
      var c = a.stateNode;
      if (null === c) return null;
      var d = Db(c);
      if (null === d) return null;
      c = d[b2];
      a: switch (b2) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
          a = !d;
          break a;
        default:
          a = false;
      }
      if (a) return null;
      if (c && "function" !== typeof c) throw Error(p(231, b2, typeof c));
      return c;
    }
    var Lb = false;
    if (ia) try {
      var Mb = {};
      Object.defineProperty(Mb, "passive", { get: function() {
        Lb = true;
      } });
      window.addEventListener("test", Mb, Mb);
      window.removeEventListener("test", Mb, Mb);
    } catch (a) {
      Lb = false;
    }
    function Nb(a, b2, c, d, e, f2, g, h, k2) {
      var l2 = Array.prototype.slice.call(arguments, 3);
      try {
        b2.apply(c, l2);
      } catch (m2) {
        this.onError(m2);
      }
    }
    var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a) {
      Ob = true;
      Pb = a;
    } };
    function Tb(a, b2, c, d, e, f2, g, h, k2) {
      Ob = false;
      Pb = null;
      Nb.apply(Sb, arguments);
    }
    function Ub(a, b2, c, d, e, f2, g, h, k2) {
      Tb.apply(this, arguments);
      if (Ob) {
        if (Ob) {
          var l2 = Pb;
          Ob = false;
          Pb = null;
        } else throw Error(p(198));
        Qb || (Qb = true, Rb = l2);
      }
    }
    function Vb(a) {
      var b2 = a, c = a;
      if (a.alternate) for (; b2.return; ) b2 = b2.return;
      else {
        a = b2;
        do
          b2 = a, 0 !== (b2.flags & 4098) && (c = b2.return), a = b2.return;
        while (a);
      }
      return 3 === b2.tag ? c : null;
    }
    function Wb(a) {
      if (13 === a.tag) {
        var b2 = a.memoizedState;
        null === b2 && (a = a.alternate, null !== a && (b2 = a.memoizedState));
        if (null !== b2) return b2.dehydrated;
      }
      return null;
    }
    function Xb(a) {
      if (Vb(a) !== a) throw Error(p(188));
    }
    function Yb(a) {
      var b2 = a.alternate;
      if (!b2) {
        b2 = Vb(a);
        if (null === b2) throw Error(p(188));
        return b2 !== a ? null : a;
      }
      for (var c = a, d = b2; ; ) {
        var e = c.return;
        if (null === e) break;
        var f2 = e.alternate;
        if (null === f2) {
          d = e.return;
          if (null !== d) {
            c = d;
            continue;
          }
          break;
        }
        if (e.child === f2.child) {
          for (f2 = e.child; f2; ) {
            if (f2 === c) return Xb(e), a;
            if (f2 === d) return Xb(e), b2;
            f2 = f2.sibling;
          }
          throw Error(p(188));
        }
        if (c.return !== d.return) c = e, d = f2;
        else {
          for (var g = false, h = e.child; h; ) {
            if (h === c) {
              g = true;
              c = e;
              d = f2;
              break;
            }
            if (h === d) {
              g = true;
              d = e;
              c = f2;
              break;
            }
            h = h.sibling;
          }
          if (!g) {
            for (h = f2.child; h; ) {
              if (h === c) {
                g = true;
                c = f2;
                d = e;
                break;
              }
              if (h === d) {
                g = true;
                d = f2;
                c = e;
                break;
              }
              h = h.sibling;
            }
            if (!g) throw Error(p(189));
          }
        }
        if (c.alternate !== d) throw Error(p(190));
      }
      if (3 !== c.tag) throw Error(p(188));
      return c.stateNode.current === c ? a : b2;
    }
    function Zb(a) {
      a = Yb(a);
      return null !== a ? $b(a) : null;
    }
    function $b(a) {
      if (5 === a.tag || 6 === a.tag) return a;
      for (a = a.child; null !== a; ) {
        var b2 = $b(a);
        if (null !== b2) return b2;
        a = a.sibling;
      }
      return null;
    }
    var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
    function mc(a) {
      if (lc && "function" === typeof lc.onCommitFiberRoot) try {
        lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
      } catch (b2) {
      }
    }
    var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
    function nc(a) {
      a >>>= 0;
      return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
    }
    var rc = 64, sc = 4194304;
    function tc(a) {
      switch (a & -a) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return a & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return a & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return a;
      }
    }
    function uc(a, b2) {
      var c = a.pendingLanes;
      if (0 === c) return 0;
      var d = 0, e = a.suspendedLanes, f2 = a.pingedLanes, g = c & 268435455;
      if (0 !== g) {
        var h = g & ~e;
        0 !== h ? d = tc(h) : (f2 &= g, 0 !== f2 && (d = tc(f2)));
      } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f2 && (d = tc(f2));
      if (0 === d) return 0;
      if (0 !== b2 && b2 !== d && 0 === (b2 & e) && (e = d & -d, f2 = b2 & -b2, e >= f2 || 16 === e && 0 !== (f2 & 4194240))) return b2;
      0 !== (d & 4) && (d |= c & 16);
      b2 = a.entangledLanes;
      if (0 !== b2) for (a = a.entanglements, b2 &= d; 0 < b2; ) c = 31 - oc(b2), e = 1 << c, d |= a[c], b2 &= ~e;
      return d;
    }
    function vc(a, b2) {
      switch (a) {
        case 1:
        case 2:
        case 4:
          return b2 + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return b2 + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function wc(a, b2) {
      for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f2 = a.pendingLanes; 0 < f2; ) {
        var g = 31 - oc(f2), h = 1 << g, k2 = e[g];
        if (-1 === k2) {
          if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b2);
        } else k2 <= b2 && (a.expiredLanes |= h);
        f2 &= ~h;
      }
    }
    function xc(a) {
      a = a.pendingLanes & -1073741825;
      return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
    }
    function yc() {
      var a = rc;
      rc <<= 1;
      0 === (rc & 4194240) && (rc = 64);
      return a;
    }
    function zc(a) {
      for (var b2 = [], c = 0; 31 > c; c++) b2.push(a);
      return b2;
    }
    function Ac(a, b2, c) {
      a.pendingLanes |= b2;
      536870912 !== b2 && (a.suspendedLanes = 0, a.pingedLanes = 0);
      a = a.eventTimes;
      b2 = 31 - oc(b2);
      a[b2] = c;
    }
    function Bc(a, b2) {
      var c = a.pendingLanes & ~b2;
      a.pendingLanes = b2;
      a.suspendedLanes = 0;
      a.pingedLanes = 0;
      a.expiredLanes &= b2;
      a.mutableReadLanes &= b2;
      a.entangledLanes &= b2;
      b2 = a.entanglements;
      var d = a.eventTimes;
      for (a = a.expirationTimes; 0 < c; ) {
        var e = 31 - oc(c), f2 = 1 << e;
        b2[e] = 0;
        d[e] = -1;
        a[e] = -1;
        c &= ~f2;
      }
    }
    function Cc(a, b2) {
      var c = a.entangledLanes |= b2;
      for (a = a.entanglements; c; ) {
        var d = 31 - oc(c), e = 1 << d;
        e & b2 | a[d] & b2 && (a[d] |= b2);
        c &= ~e;
      }
    }
    var C$1 = 0;
    function Dc(a) {
      a &= -a;
      return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
    }
    var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function Sc(a, b2) {
      switch (a) {
        case "focusin":
        case "focusout":
          Lc = null;
          break;
        case "dragenter":
        case "dragleave":
          Mc = null;
          break;
        case "mouseover":
        case "mouseout":
          Nc = null;
          break;
        case "pointerover":
        case "pointerout":
          Oc.delete(b2.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          Pc.delete(b2.pointerId);
      }
    }
    function Tc(a, b2, c, d, e, f2) {
      if (null === a || a.nativeEvent !== f2) return a = { blockedOn: b2, domEventName: c, eventSystemFlags: d, nativeEvent: f2, targetContainers: [e] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a;
      a.eventSystemFlags |= d;
      b2 = a.targetContainers;
      null !== e && -1 === b2.indexOf(e) && b2.push(e);
      return a;
    }
    function Uc(a, b2, c, d, e) {
      switch (b2) {
        case "focusin":
          return Lc = Tc(Lc, a, b2, c, d, e), true;
        case "dragenter":
          return Mc = Tc(Mc, a, b2, c, d, e), true;
        case "mouseover":
          return Nc = Tc(Nc, a, b2, c, d, e), true;
        case "pointerover":
          var f2 = e.pointerId;
          Oc.set(f2, Tc(Oc.get(f2) || null, a, b2, c, d, e));
          return true;
        case "gotpointercapture":
          return f2 = e.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a, b2, c, d, e)), true;
      }
      return false;
    }
    function Vc(a) {
      var b2 = Wc(a.target);
      if (null !== b2) {
        var c = Vb(b2);
        if (null !== c) {
          if (b2 = c.tag, 13 === b2) {
            if (b2 = Wb(c), null !== b2) {
              a.blockedOn = b2;
              Ic(a.priority, function() {
                Gc(c);
              });
              return;
            }
          } else if (3 === b2 && c.stateNode.current.memoizedState.isDehydrated) {
            a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a.blockedOn = null;
    }
    function Xc(a) {
      if (null !== a.blockedOn) return false;
      for (var b2 = a.targetContainers; 0 < b2.length; ) {
        var c = Yc(a.domEventName, a.eventSystemFlags, b2[0], a.nativeEvent);
        if (null === c) {
          c = a.nativeEvent;
          var d = new c.constructor(c.type, c);
          wb = d;
          c.target.dispatchEvent(d);
          wb = null;
        } else return b2 = Cb(c), null !== b2 && Fc(b2), a.blockedOn = c, false;
        b2.shift();
      }
      return true;
    }
    function Zc(a, b2, c) {
      Xc(a) && c.delete(b2);
    }
    function $c() {
      Jc = false;
      null !== Lc && Xc(Lc) && (Lc = null);
      null !== Mc && Xc(Mc) && (Mc = null);
      null !== Nc && Xc(Nc) && (Nc = null);
      Oc.forEach(Zc);
      Pc.forEach(Zc);
    }
    function ad(a, b2) {
      a.blockedOn === b2 && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
    }
    function bd(a) {
      function b2(b3) {
        return ad(b3, a);
      }
      if (0 < Kc.length) {
        ad(Kc[0], a);
        for (var c = 1; c < Kc.length; c++) {
          var d = Kc[c];
          d.blockedOn === a && (d.blockedOn = null);
        }
      }
      null !== Lc && ad(Lc, a);
      null !== Mc && ad(Mc, a);
      null !== Nc && ad(Nc, a);
      Oc.forEach(b2);
      Pc.forEach(b2);
      for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
      for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn); ) Vc(c), null === c.blockedOn && Qc.shift();
    }
    var cd = ua.ReactCurrentBatchConfig, dd = true;
    function ed(a, b2, c, d) {
      var e = C$1, f2 = cd.transition;
      cd.transition = null;
      try {
        C$1 = 1, fd(a, b2, c, d);
      } finally {
        C$1 = e, cd.transition = f2;
      }
    }
    function gd(a, b2, c, d) {
      var e = C$1, f2 = cd.transition;
      cd.transition = null;
      try {
        C$1 = 4, fd(a, b2, c, d);
      } finally {
        C$1 = e, cd.transition = f2;
      }
    }
    function fd(a, b2, c, d) {
      if (dd) {
        var e = Yc(a, b2, c, d);
        if (null === e) hd(a, b2, d, id, c), Sc(a, d);
        else if (Uc(e, a, b2, c, d)) d.stopPropagation();
        else if (Sc(a, d), b2 & 4 && -1 < Rc.indexOf(a)) {
          for (; null !== e; ) {
            var f2 = Cb(e);
            null !== f2 && Ec(f2);
            f2 = Yc(a, b2, c, d);
            null === f2 && hd(a, b2, d, id, c);
            if (f2 === e) break;
            e = f2;
          }
          null !== e && d.stopPropagation();
        } else hd(a, b2, d, null, c);
      }
    }
    var id = null;
    function Yc(a, b2, c, d) {
      id = null;
      a = xb(d);
      a = Wc(a);
      if (null !== a) if (b2 = Vb(a), null === b2) a = null;
      else if (c = b2.tag, 13 === c) {
        a = Wb(b2);
        if (null !== a) return a;
        a = null;
      } else if (3 === c) {
        if (b2.stateNode.current.memoizedState.isDehydrated) return 3 === b2.tag ? b2.stateNode.containerInfo : null;
        a = null;
      } else b2 !== a && (a = null);
      id = a;
      return null;
    }
    function jd(a) {
      switch (a) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 4;
        case "message":
          switch (ec()) {
            case fc:
              return 1;
            case gc:
              return 4;
            case hc:
            case ic:
              return 16;
            case jc:
              return 536870912;
            default:
              return 16;
          }
        default:
          return 16;
      }
    }
    var kd = null, ld = null, md = null;
    function nd() {
      if (md) return md;
      var a, b2 = ld, c = b2.length, d, e = "value" in kd ? kd.value : kd.textContent, f2 = e.length;
      for (a = 0; a < c && b2[a] === e[a]; a++) ;
      var g = c - a;
      for (d = 1; d <= g && b2[c - d] === e[f2 - d]; d++) ;
      return md = e.slice(a, 1 < d ? 1 - d : void 0);
    }
    function od(a) {
      var b2 = a.keyCode;
      "charCode" in a ? (a = a.charCode, 0 === a && 13 === b2 && (a = 13)) : a = b2;
      10 === a && (a = 13);
      return 32 <= a || 13 === a ? a : 0;
    }
    function pd() {
      return true;
    }
    function qd() {
      return false;
    }
    function rd(a) {
      function b2(b3, d, e, f2, g) {
        this._reactName = b3;
        this._targetInst = e;
        this.type = d;
        this.nativeEvent = f2;
        this.target = g;
        this.currentTarget = null;
        for (var c in a) a.hasOwnProperty(c) && (b3 = a[c], this[c] = b3 ? b3(f2) : f2[c]);
        this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
      }
      A(b2.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var a2 = this.nativeEvent;
        a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
      }, stopPropagation: function() {
        var a2 = this.nativeEvent;
        a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
      }, persist: function() {
      }, isPersistent: pd });
      return b2;
    }
    var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
      return a.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    }, movementX: function(a) {
      if ("movementX" in a) return a.movementX;
      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
      return wd;
    }, movementY: function(a) {
      return "movementY" in a ? a.movementY : xd;
    } }), Bd = rd(Ad), Cd = A({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A({}, sd, { clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    } }), Jd = rd(Id), Kd = A({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, Nd = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Pd(a) {
      var b2 = this.nativeEvent;
      return b2.getModifierState ? b2.getModifierState(a) : (a = Od[a]) ? !!b2[a] : false;
    }
    function zd() {
      return Pd;
    }
    var Qd = A({}, ud, { key: function(a) {
      if (a.key) {
        var b2 = Md[a.key] || a.key;
        if ("Unidentified" !== b2) return b2;
      }
      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
      return "keypress" === a.type ? od(a) : 0;
    }, keyCode: function(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }, which: function(a) {
      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    } }), Rd = rd(Qd), Sd = A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A({}, Ad, {
      deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
      },
      deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae$1 = ia && "CompositionEvent" in window, be$1 = null;
    ia && "documentMode" in document && (be$1 = document.documentMode);
    var ce$1 = ia && "TextEvent" in window && !be$1, de$1 = ia && (!ae$1 || be$1 && 8 < be$1 && 11 >= be$1), ee = String.fromCharCode(32), fe$1 = false;
    function ge$1(a, b2) {
      switch (a) {
        case "keyup":
          return -1 !== $d.indexOf(b2.keyCode);
        case "keydown":
          return 229 !== b2.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function he$1(a) {
      a = a.detail;
      return "object" === typeof a && "data" in a ? a.data : null;
    }
    var ie = false;
    function je(a, b2) {
      switch (a) {
        case "compositionend":
          return he$1(b2);
        case "keypress":
          if (32 !== b2.which) return null;
          fe$1 = true;
          return ee;
        case "textInput":
          return a = b2.data, a === ee && fe$1 ? null : a;
        default:
          return null;
      }
    }
    function ke(a, b2) {
      if (ie) return "compositionend" === a || !ae$1 && ge$1(a, b2) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
      switch (a) {
        case "paste":
          return null;
        case "keypress":
          if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
            if (b2.char && 1 < b2.char.length) return b2.char;
            if (b2.which) return String.fromCharCode(b2.which);
          }
          return null;
        case "compositionend":
          return de$1 && "ko" !== b2.locale ? null : b2.data;
        default:
          return null;
      }
    }
    var le$1 = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function me$1(a) {
      var b2 = a && a.nodeName && a.nodeName.toLowerCase();
      return "input" === b2 ? !!le$1[a.type] : "textarea" === b2 ? true : false;
    }
    function ne$1(a, b2, c, d) {
      Eb(d);
      b2 = oe$1(b2, "onChange");
      0 < b2.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b2 }));
    }
    var pe$1 = null, qe = null;
    function re$1(a) {
      se(a, 0);
    }
    function te(a) {
      var b2 = ue$1(a);
      if (Wa(b2)) return a;
    }
    function ve(a, b2) {
      if ("change" === a) return b2;
    }
    var we$1 = false;
    if (ia) {
      var xe;
      if (ia) {
        var ye$1 = "oninput" in document;
        if (!ye$1) {
          var ze = document.createElement("div");
          ze.setAttribute("oninput", "return;");
          ye$1 = "function" === typeof ze.oninput;
        }
        xe = ye$1;
      } else xe = false;
      we$1 = xe && (!document.documentMode || 9 < document.documentMode);
    }
    function Ae() {
      pe$1 && (pe$1.detachEvent("onpropertychange", Be), qe = pe$1 = null);
    }
    function Be(a) {
      if ("value" === a.propertyName && te(qe)) {
        var b2 = [];
        ne$1(b2, qe, a, xb(a));
        Jb(re$1, b2);
      }
    }
    function Ce(a, b2, c) {
      "focusin" === a ? (Ae(), pe$1 = b2, qe = c, pe$1.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
    }
    function De$1(a) {
      if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
    }
    function Ee$1(a, b2) {
      if ("click" === a) return te(b2);
    }
    function Fe(a, b2) {
      if ("input" === a || "change" === a) return te(b2);
    }
    function Ge(a, b2) {
      return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
    }
    var He = "function" === typeof Object.is ? Object.is : Ge;
    function Ie$1(a, b2) {
      if (He(a, b2)) return true;
      if ("object" !== typeof a || null === a || "object" !== typeof b2 || null === b2) return false;
      var c = Object.keys(a), d = Object.keys(b2);
      if (c.length !== d.length) return false;
      for (d = 0; d < c.length; d++) {
        var e = c[d];
        if (!ja.call(b2, e) || !He(a[e], b2[e])) return false;
      }
      return true;
    }
    function Je(a) {
      for (; a && a.firstChild; ) a = a.firstChild;
      return a;
    }
    function Ke(a, b2) {
      var c = Je(a);
      a = 0;
      for (var d; c; ) {
        if (3 === c.nodeType) {
          d = a + c.textContent.length;
          if (a <= b2 && d >= b2) return { node: c, offset: b2 - a };
          a = d;
        }
        a: {
          for (; c; ) {
            if (c.nextSibling) {
              c = c.nextSibling;
              break a;
            }
            c = c.parentNode;
          }
          c = void 0;
        }
        c = Je(c);
      }
    }
    function Le(a, b2) {
      return a && b2 ? a === b2 ? true : a && 3 === a.nodeType ? false : b2 && 3 === b2.nodeType ? Le(a, b2.parentNode) : "contains" in a ? a.contains(b2) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b2) & 16) : false : false;
    }
    function Me() {
      for (var a = window, b2 = Xa(); b2 instanceof a.HTMLIFrameElement; ) {
        try {
          var c = "string" === typeof b2.contentWindow.location.href;
        } catch (d) {
          c = false;
        }
        if (c) a = b2.contentWindow;
        else break;
        b2 = Xa(a.document);
      }
      return b2;
    }
    function Ne(a) {
      var b2 = a && a.nodeName && a.nodeName.toLowerCase();
      return b2 && ("input" === b2 && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b2 || "true" === a.contentEditable);
    }
    function Oe(a) {
      var b2 = Me(), c = a.focusedElem, d = a.selectionRange;
      if (b2 !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
        if (null !== d && Ne(c)) {
          if (b2 = d.start, a = d.end, void 0 === a && (a = b2), "selectionStart" in c) c.selectionStart = b2, c.selectionEnd = Math.min(a, c.value.length);
          else if (a = (b2 = c.ownerDocument || document) && b2.defaultView || window, a.getSelection) {
            a = a.getSelection();
            var e = c.textContent.length, f2 = Math.min(d.start, e);
            d = void 0 === d.end ? f2 : Math.min(d.end, e);
            !a.extend && f2 > d && (e = d, d = f2, f2 = e);
            e = Ke(c, f2);
            var g = Ke(
              c,
              d
            );
            e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b2 = b2.createRange(), b2.setStart(e.node, e.offset), a.removeAllRanges(), f2 > d ? (a.addRange(b2), a.extend(g.node, g.offset)) : (b2.setEnd(g.node, g.offset), a.addRange(b2)));
          }
        }
        b2 = [];
        for (a = c; a = a.parentNode; ) 1 === a.nodeType && b2.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
        "function" === typeof c.focus && c.focus();
        for (c = 0; c < b2.length; c++) a = b2[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
      }
    }
    var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te$1 = false;
    function Ue(a, b2, c) {
      var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
      Te$1 || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se && Ie$1(Se, d) || (Se = d, d = oe$1(Re, "onSelect"), 0 < d.length && (b2 = new td("onSelect", "select", null, b2, c), a.push({ event: b2, listeners: d }), b2.target = Qe)));
    }
    function Ve(a, b2) {
      var c = {};
      c[a.toLowerCase()] = b2.toLowerCase();
      c["Webkit" + a] = "webkit" + b2;
      c["Moz" + a] = "moz" + b2;
      return c;
    }
    var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
    ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
    function Ze(a) {
      if (Xe[a]) return Xe[a];
      if (!We[a]) return a;
      var b2 = We[a], c;
      for (c in b2) if (b2.hasOwnProperty(c) && c in Ye) return Xe[a] = b2[c];
      return a;
    }
    var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    function ff(a, b2) {
      df.set(a, b2);
      fa(b2, [a]);
    }
    for (var gf = 0; gf < ef.length; gf++) {
      var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
      ff(jf, "on" + kf);
    }
    ff($e, "onAnimationEnd");
    ff(af, "onAnimationIteration");
    ff(bf, "onAnimationStart");
    ff("dblclick", "onDoubleClick");
    ff("focusin", "onFocus");
    ff("focusout", "onBlur");
    ff(cf, "onTransitionEnd");
    ha("onMouseEnter", ["mouseout", "mouseover"]);
    ha("onMouseLeave", ["mouseout", "mouseover"]);
    ha("onPointerEnter", ["pointerout", "pointerover"]);
    ha("onPointerLeave", ["pointerout", "pointerover"]);
    fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
    function nf(a, b2, c) {
      var d = a.type || "unknown-event";
      a.currentTarget = c;
      Ub(d, b2, void 0, a);
      a.currentTarget = null;
    }
    function se(a, b2) {
      b2 = 0 !== (b2 & 4);
      for (var c = 0; c < a.length; c++) {
        var d = a[c], e = d.event;
        d = d.listeners;
        a: {
          var f2 = void 0;
          if (b2) for (var g = d.length - 1; 0 <= g; g--) {
            var h = d[g], k2 = h.instance, l2 = h.currentTarget;
            h = h.listener;
            if (k2 !== f2 && e.isPropagationStopped()) break a;
            nf(e, h, l2);
            f2 = k2;
          }
          else for (g = 0; g < d.length; g++) {
            h = d[g];
            k2 = h.instance;
            l2 = h.currentTarget;
            h = h.listener;
            if (k2 !== f2 && e.isPropagationStopped()) break a;
            nf(e, h, l2);
            f2 = k2;
          }
        }
      }
      if (Qb) throw a = Rb, Qb = false, Rb = null, a;
    }
    function D$1(a, b2) {
      var c = b2[of];
      void 0 === c && (c = b2[of] = /* @__PURE__ */ new Set());
      var d = a + "__bubble";
      c.has(d) || (pf(b2, a, 2, false), c.add(d));
    }
    function qf(a, b2, c) {
      var d = 0;
      b2 && (d |= 4);
      pf(c, a, d, b2);
    }
    var rf = "_reactListening" + Math.random().toString(36).slice(2);
    function sf(a) {
      if (!a[rf]) {
        a[rf] = true;
        da.forEach(function(b3) {
          "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a), qf(b3, true, a));
        });
        var b2 = 9 === a.nodeType ? a : a.ownerDocument;
        null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
      }
    }
    function pf(a, b2, c, d) {
      switch (jd(b2)) {
        case 1:
          var e = ed;
          break;
        case 4:
          e = gd;
          break;
        default:
          e = fd;
      }
      c = e.bind(null, b2, c, a);
      e = void 0;
      !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e = true);
      d ? void 0 !== e ? a.addEventListener(b2, c, { capture: true, passive: e }) : a.addEventListener(b2, c, true) : void 0 !== e ? a.addEventListener(b2, c, { passive: e }) : a.addEventListener(b2, c, false);
    }
    function hd(a, b2, c, d, e) {
      var f2 = d;
      if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d) a: for (; ; ) {
        if (null === d) return;
        var g = d.tag;
        if (3 === g || 4 === g) {
          var h = d.stateNode.containerInfo;
          if (h === e || 8 === h.nodeType && h.parentNode === e) break;
          if (4 === g) for (g = d.return; null !== g; ) {
            var k2 = g.tag;
            if (3 === k2 || 4 === k2) {
              if (k2 = g.stateNode.containerInfo, k2 === e || 8 === k2.nodeType && k2.parentNode === e) return;
            }
            g = g.return;
          }
          for (; null !== h; ) {
            g = Wc(h);
            if (null === g) return;
            k2 = g.tag;
            if (5 === k2 || 6 === k2) {
              d = f2 = g;
              continue a;
            }
            h = h.parentNode;
          }
        }
        d = d.return;
      }
      Jb(function() {
        var d2 = f2, e2 = xb(c), g2 = [];
        a: {
          var h2 = df.get(a);
          if (void 0 !== h2) {
            var k3 = td, n2 = a;
            switch (a) {
              case "keypress":
                if (0 === od(c)) break a;
              case "keydown":
              case "keyup":
                k3 = Rd;
                break;
              case "focusin":
                n2 = "focus";
                k3 = Fd;
                break;
              case "focusout":
                n2 = "blur";
                k3 = Fd;
                break;
              case "beforeblur":
              case "afterblur":
                k3 = Fd;
                break;
              case "click":
                if (2 === c.button) break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k3 = Bd;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k3 = Dd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k3 = Vd;
                break;
              case $e:
              case af:
              case bf:
                k3 = Hd;
                break;
              case cf:
                k3 = Xd;
                break;
              case "scroll":
                k3 = vd;
                break;
              case "wheel":
                k3 = Zd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k3 = Jd;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k3 = Td;
            }
            var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a, x2 = t2 ? null !== h2 ? h2 + "Capture" : null : h2;
            t2 = [];
            for (var w2 = d2, u2; null !== w2; ) {
              u2 = w2;
              var F2 = u2.stateNode;
              5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
              if (J2) break;
              w2 = w2.return;
            }
            0 < t2.length && (h2 = new k3(h2, n2, null, c, e2), g2.push({ event: h2, listeners: t2 }));
          }
        }
        if (0 === (b2 & 7)) {
          a: {
            h2 = "mouseover" === a || "pointerover" === a;
            k3 = "mouseout" === a || "pointerout" === a;
            if (h2 && c !== wb && (n2 = c.relatedTarget || c.fromElement) && (Wc(n2) || n2[uf])) break a;
            if (k3 || h2) {
              h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window;
              if (k3) {
                if (n2 = c.relatedTarget || c.toElement, k3 = d2, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag)) n2 = null;
              } else k3 = null, n2 = d2;
              if (k3 !== n2) {
                t2 = Bd;
                F2 = "onMouseLeave";
                x2 = "onMouseEnter";
                w2 = "mouse";
                if ("pointerout" === a || "pointerover" === a) t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
                J2 = null == k3 ? h2 : ue$1(k3);
                u2 = null == n2 ? h2 : ue$1(n2);
                h2 = new t2(F2, w2 + "leave", k3, c, e2);
                h2.target = J2;
                h2.relatedTarget = u2;
                F2 = null;
                Wc(e2) === d2 && (t2 = new t2(x2, w2 + "enter", n2, c, e2), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
                J2 = F2;
                if (k3 && n2) b: {
                  t2 = k3;
                  x2 = n2;
                  w2 = 0;
                  for (u2 = t2; u2; u2 = vf(u2)) w2++;
                  u2 = 0;
                  for (F2 = x2; F2; F2 = vf(F2)) u2++;
                  for (; 0 < w2 - u2; ) t2 = vf(t2), w2--;
                  for (; 0 < u2 - w2; ) x2 = vf(x2), u2--;
                  for (; w2--; ) {
                    if (t2 === x2 || null !== x2 && t2 === x2.alternate) break b;
                    t2 = vf(t2);
                    x2 = vf(x2);
                  }
                  t2 = null;
                }
                else t2 = null;
                null !== k3 && wf(g2, h2, k3, t2, false);
                null !== n2 && null !== J2 && wf(g2, J2, n2, t2, true);
              }
            }
          }
          a: {
            h2 = d2 ? ue$1(d2) : window;
            k3 = h2.nodeName && h2.nodeName.toLowerCase();
            if ("select" === k3 || "input" === k3 && "file" === h2.type) var na = ve;
            else if (me$1(h2)) if (we$1) na = Fe;
            else {
              na = De$1;
              var xa = Ce;
            }
            else (k3 = h2.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h2.type || "radio" === h2.type) && (na = Ee$1);
            if (na && (na = na(a, d2))) {
              ne$1(g2, na, c, e2);
              break a;
            }
            xa && xa(a, h2, d2);
            "focusout" === a && (xa = h2._wrapperState) && xa.controlled && "number" === h2.type && cb(h2, "number", h2.value);
          }
          xa = d2 ? ue$1(d2) : window;
          switch (a) {
            case "focusin":
              if (me$1(xa) || "true" === xa.contentEditable) Qe = xa, Re = d2, Se = null;
              break;
            case "focusout":
              Se = Re = Qe = null;
              break;
            case "mousedown":
              Te$1 = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Te$1 = false;
              Ue(g2, c, e2);
              break;
            case "selectionchange":
              if (Pe) break;
            case "keydown":
            case "keyup":
              Ue(g2, c, e2);
          }
          var $a;
          if (ae$1) b: {
            switch (a) {
              case "compositionstart":
                var ba = "onCompositionStart";
                break b;
              case "compositionend":
                ba = "onCompositionEnd";
                break b;
              case "compositionupdate":
                ba = "onCompositionUpdate";
                break b;
            }
            ba = void 0;
          }
          else ie ? ge$1(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
          ba && (de$1 && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe$1(d2, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e2), g2.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he$1(c), null !== $a && (ba.data = $a))));
          if ($a = ce$1 ? je(a, c) : ke(a, c)) d2 = oe$1(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({ event: e2, listeners: d2 }), e2.data = $a);
        }
        se(g2, b2);
      });
    }
    function tf(a, b2, c) {
      return { instance: a, listener: b2, currentTarget: c };
    }
    function oe$1(a, b2) {
      for (var c = b2 + "Capture", d = []; null !== a; ) {
        var e = a, f2 = e.stateNode;
        5 === e.tag && null !== f2 && (e = f2, f2 = Kb(a, c), null != f2 && d.unshift(tf(a, f2, e)), f2 = Kb(a, b2), null != f2 && d.push(tf(a, f2, e)));
        a = a.return;
      }
      return d;
    }
    function vf(a) {
      if (null === a) return null;
      do
        a = a.return;
      while (a && 5 !== a.tag);
      return a ? a : null;
    }
    function wf(a, b2, c, d, e) {
      for (var f2 = b2._reactName, g = []; null !== c && c !== d; ) {
        var h = c, k2 = h.alternate, l2 = h.stateNode;
        if (null !== k2 && k2 === d) break;
        5 === h.tag && null !== l2 && (h = l2, e ? (k2 = Kb(c, f2), null != k2 && g.unshift(tf(c, k2, h))) : e || (k2 = Kb(c, f2), null != k2 && g.push(tf(c, k2, h))));
        c = c.return;
      }
      0 !== g.length && a.push({ event: b2, listeners: g });
    }
    var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
    function zf(a) {
      return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
    }
    function Af(a, b2, c) {
      b2 = zf(b2);
      if (zf(a) !== b2 && c) throw Error(p(425));
    }
    function Bf() {
    }
    var Cf = null, Df = null;
    function Ef(a, b2) {
      return "textarea" === a || "noscript" === a || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
    }
    var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
      return Hf.resolve(null).then(a).catch(If);
    } : Ff;
    function If(a) {
      setTimeout(function() {
        throw a;
      });
    }
    function Kf(a, b2) {
      var c = b2, d = 0;
      do {
        var e = c.nextSibling;
        a.removeChild(c);
        if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
          if (0 === d) {
            a.removeChild(e);
            bd(b2);
            return;
          }
          d--;
        } else "$" !== c && "$?" !== c && "$!" !== c || d++;
        c = e;
      } while (c);
      bd(b2);
    }
    function Lf(a) {
      for (; null != a; a = a.nextSibling) {
        var b2 = a.nodeType;
        if (1 === b2 || 3 === b2) break;
        if (8 === b2) {
          b2 = a.data;
          if ("$" === b2 || "$!" === b2 || "$?" === b2) break;
          if ("/$" === b2) return null;
        }
      }
      return a;
    }
    function Mf(a) {
      a = a.previousSibling;
      for (var b2 = 0; a; ) {
        if (8 === a.nodeType) {
          var c = a.data;
          if ("$" === c || "$!" === c || "$?" === c) {
            if (0 === b2) return a;
            b2--;
          } else "/$" === c && b2++;
        }
        a = a.previousSibling;
      }
      return null;
    }
    var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
    function Wc(a) {
      var b2 = a[Of];
      if (b2) return b2;
      for (var c = a.parentNode; c; ) {
        if (b2 = c[uf] || c[Of]) {
          c = b2.alternate;
          if (null !== b2.child || null !== c && null !== c.child) for (a = Mf(a); null !== a; ) {
            if (c = a[Of]) return c;
            a = Mf(a);
          }
          return b2;
        }
        a = c;
        c = a.parentNode;
      }
      return null;
    }
    function Cb(a) {
      a = a[Of] || a[uf];
      return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
    }
    function ue$1(a) {
      if (5 === a.tag || 6 === a.tag) return a.stateNode;
      throw Error(p(33));
    }
    function Db(a) {
      return a[Pf] || null;
    }
    var Sf = [], Tf = -1;
    function Uf(a) {
      return { current: a };
    }
    function E(a) {
      0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
    }
    function G(a, b2) {
      Tf++;
      Sf[Tf] = a.current;
      a.current = b2;
    }
    var Vf = {}, H = Uf(Vf), Wf = Uf(false), Xf = Vf;
    function Yf(a, b2) {
      var c = a.type.contextTypes;
      if (!c) return Vf;
      var d = a.stateNode;
      if (d && d.__reactInternalMemoizedUnmaskedChildContext === b2) return d.__reactInternalMemoizedMaskedChildContext;
      var e = {}, f2;
      for (f2 in c) e[f2] = b2[f2];
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b2, a.__reactInternalMemoizedMaskedChildContext = e);
      return e;
    }
    function Zf(a) {
      a = a.childContextTypes;
      return null !== a && void 0 !== a;
    }
    function $f() {
      E(Wf);
      E(H);
    }
    function ag(a, b2, c) {
      if (H.current !== Vf) throw Error(p(168));
      G(H, b2);
      G(Wf, c);
    }
    function bg(a, b2, c) {
      var d = a.stateNode;
      b2 = b2.childContextTypes;
      if ("function" !== typeof d.getChildContext) return c;
      d = d.getChildContext();
      for (var e in d) if (!(e in b2)) throw Error(p(108, Ra(a) || "Unknown", e));
      return A({}, c, d);
    }
    function cg(a) {
      a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
      Xf = H.current;
      G(H, a);
      G(Wf, Wf.current);
      return true;
    }
    function dg(a, b2, c) {
      var d = a.stateNode;
      if (!d) throw Error(p(169));
      c ? (a = bg(a, b2, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
      G(Wf, c);
    }
    var eg = null, fg = false, gg = false;
    function hg(a) {
      null === eg ? eg = [a] : eg.push(a);
    }
    function ig(a) {
      fg = true;
      hg(a);
    }
    function jg() {
      if (!gg && null !== eg) {
        gg = true;
        var a = 0, b2 = C$1;
        try {
          var c = eg;
          for (C$1 = 1; a < c.length; a++) {
            var d = c[a];
            do
              d = d(true);
            while (null !== d);
          }
          eg = null;
          fg = false;
        } catch (e) {
          throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
        } finally {
          C$1 = b2, gg = false;
        }
      }
      return null;
    }
    var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
    function tg(a, b2) {
      kg[lg++] = ng;
      kg[lg++] = mg;
      mg = a;
      ng = b2;
    }
    function ug(a, b2, c) {
      og[pg++] = rg;
      og[pg++] = sg;
      og[pg++] = qg;
      qg = a;
      var d = rg;
      a = sg;
      var e = 32 - oc(d) - 1;
      d &= ~(1 << e);
      c += 1;
      var f2 = 32 - oc(b2) + e;
      if (30 < f2) {
        var g = e - e % 5;
        f2 = (d & (1 << g) - 1).toString(32);
        d >>= g;
        e -= g;
        rg = 1 << 32 - oc(b2) + e | c << e | d;
        sg = f2 + a;
      } else rg = 1 << f2 | c << e | d, sg = a;
    }
    function vg(a) {
      null !== a.return && (tg(a, 1), ug(a, 1, 0));
    }
    function wg(a) {
      for (; a === mg; ) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
      for (; a === qg; ) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
    }
    var xg = null, yg = null, I = false, zg = null;
    function Ag(a, b2) {
      var c = Bg(5, null, null, 0);
      c.elementType = "DELETED";
      c.stateNode = b2;
      c.return = a;
      b2 = a.deletions;
      null === b2 ? (a.deletions = [c], a.flags |= 16) : b2.push(c);
    }
    function Cg(a, b2) {
      switch (a.tag) {
        case 5:
          var c = a.type;
          b2 = 1 !== b2.nodeType || c.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
          return null !== b2 ? (a.stateNode = b2, xg = a, yg = Lf(b2.firstChild), true) : false;
        case 6:
          return b2 = "" === a.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a.stateNode = b2, xg = a, yg = null, true) : false;
        case 13:
          return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b2, treeContext: c, retryLane: 1073741824 }, c = Bg(18, null, null, 0), c.stateNode = b2, c.return = a, a.child = c, xg = a, yg = null, true) : false;
        default:
          return false;
      }
    }
    function Dg(a) {
      return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
    }
    function Eg(a) {
      if (I) {
        var b2 = yg;
        if (b2) {
          var c = b2;
          if (!Cg(a, b2)) {
            if (Dg(a)) throw Error(p(418));
            b2 = Lf(c.nextSibling);
            var d = xg;
            b2 && Cg(a, b2) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
          }
        } else {
          if (Dg(a)) throw Error(p(418));
          a.flags = a.flags & -4097 | 2;
          I = false;
          xg = a;
        }
      }
    }
    function Fg(a) {
      for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; ) a = a.return;
      xg = a;
    }
    function Gg(a) {
      if (a !== xg) return false;
      if (!I) return Fg(a), I = true, false;
      var b2;
      (b2 = 3 !== a.tag) && !(b2 = 5 !== a.tag) && (b2 = a.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a.type, a.memoizedProps));
      if (b2 && (b2 = yg)) {
        if (Dg(a)) throw Hg(), Error(p(418));
        for (; b2; ) Ag(a, b2), b2 = Lf(b2.nextSibling);
      }
      Fg(a);
      if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a) throw Error(p(317));
        a: {
          a = a.nextSibling;
          for (b2 = 0; a; ) {
            if (8 === a.nodeType) {
              var c = a.data;
              if ("/$" === c) {
                if (0 === b2) {
                  yg = Lf(a.nextSibling);
                  break a;
                }
                b2--;
              } else "$" !== c && "$!" !== c && "$?" !== c || b2++;
            }
            a = a.nextSibling;
          }
          yg = null;
        }
      } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
      return true;
    }
    function Hg() {
      for (var a = yg; a; ) a = Lf(a.nextSibling);
    }
    function Ig() {
      yg = xg = null;
      I = false;
    }
    function Jg(a) {
      null === zg ? zg = [a] : zg.push(a);
    }
    var Kg = ua.ReactCurrentBatchConfig;
    function Lg(a, b2, c) {
      a = c.ref;
      if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c._owner) {
          c = c._owner;
          if (c) {
            if (1 !== c.tag) throw Error(p(309));
            var d = c.stateNode;
          }
          if (!d) throw Error(p(147, a));
          var e = d, f2 = "" + a;
          if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2) return b2.ref;
          b2 = function(a2) {
            var b3 = e.refs;
            null === a2 ? delete b3[f2] : b3[f2] = a2;
          };
          b2._stringRef = f2;
          return b2;
        }
        if ("string" !== typeof a) throw Error(p(284));
        if (!c._owner) throw Error(p(290, a));
      }
      return a;
    }
    function Mg(a, b2) {
      a = Object.prototype.toString.call(b2);
      throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a));
    }
    function Ng(a) {
      var b2 = a._init;
      return b2(a._payload);
    }
    function Og(a) {
      function b2(b3, c2) {
        if (a) {
          var d2 = b3.deletions;
          null === d2 ? (b3.deletions = [c2], b3.flags |= 16) : d2.push(c2);
        }
      }
      function c(c2, d2) {
        if (!a) return null;
        for (; null !== d2; ) b2(c2, d2), d2 = d2.sibling;
        return null;
      }
      function d(a2, b3) {
        for (a2 = /* @__PURE__ */ new Map(); null !== b3; ) null !== b3.key ? a2.set(b3.key, b3) : a2.set(b3.index, b3), b3 = b3.sibling;
        return a2;
      }
      function e(a2, b3) {
        a2 = Pg(a2, b3);
        a2.index = 0;
        a2.sibling = null;
        return a2;
      }
      function f2(b3, c2, d2) {
        b3.index = d2;
        if (!a) return b3.flags |= 1048576, c2;
        d2 = b3.alternate;
        if (null !== d2) return d2 = d2.index, d2 < c2 ? (b3.flags |= 2, c2) : d2;
        b3.flags |= 2;
        return c2;
      }
      function g(b3) {
        a && null === b3.alternate && (b3.flags |= 2);
        return b3;
      }
      function h(a2, b3, c2, d2) {
        if (null === b3 || 6 !== b3.tag) return b3 = Qg(c2, a2.mode, d2), b3.return = a2, b3;
        b3 = e(b3, c2);
        b3.return = a2;
        return b3;
      }
      function k2(a2, b3, c2, d2) {
        var f3 = c2.type;
        if (f3 === ya) return m2(a2, b3, c2.props.children, d2, c2.key);
        if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && Ng(f3) === b3.type)) return d2 = e(b3, c2.props), d2.ref = Lg(a2, b3, c2), d2.return = a2, d2;
        d2 = Rg(c2.type, c2.key, c2.props, null, a2.mode, d2);
        d2.ref = Lg(a2, b3, c2);
        d2.return = a2;
        return d2;
      }
      function l2(a2, b3, c2, d2) {
        if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c2.containerInfo || b3.stateNode.implementation !== c2.implementation) return b3 = Sg(c2, a2.mode, d2), b3.return = a2, b3;
        b3 = e(b3, c2.children || []);
        b3.return = a2;
        return b3;
      }
      function m2(a2, b3, c2, d2, f3) {
        if (null === b3 || 7 !== b3.tag) return b3 = Tg(c2, a2.mode, d2, f3), b3.return = a2, b3;
        b3 = e(b3, c2);
        b3.return = a2;
        return b3;
      }
      function q2(a2, b3, c2) {
        if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3) return b3 = Qg("" + b3, a2.mode, c2), b3.return = a2, b3;
        if ("object" === typeof b3 && null !== b3) {
          switch (b3.$$typeof) {
            case va:
              return c2 = Rg(b3.type, b3.key, b3.props, null, a2.mode, c2), c2.ref = Lg(a2, null, b3), c2.return = a2, c2;
            case wa:
              return b3 = Sg(b3, a2.mode, c2), b3.return = a2, b3;
            case Ha:
              var d2 = b3._init;
              return q2(a2, d2(b3._payload), c2);
          }
          if (eb(b3) || Ka(b3)) return b3 = Tg(b3, a2.mode, c2, null), b3.return = a2, b3;
          Mg(a2, b3);
        }
        return null;
      }
      function r2(a2, b3, c2, d2) {
        var e2 = null !== b3 ? b3.key : null;
        if ("string" === typeof c2 && "" !== c2 || "number" === typeof c2) return null !== e2 ? null : h(a2, b3, "" + c2, d2);
        if ("object" === typeof c2 && null !== c2) {
          switch (c2.$$typeof) {
            case va:
              return c2.key === e2 ? k2(a2, b3, c2, d2) : null;
            case wa:
              return c2.key === e2 ? l2(a2, b3, c2, d2) : null;
            case Ha:
              return e2 = c2._init, r2(
                a2,
                b3,
                e2(c2._payload),
                d2
              );
          }
          if (eb(c2) || Ka(c2)) return null !== e2 ? null : m2(a2, b3, c2, d2, null);
          Mg(a2, c2);
        }
        return null;
      }
      function y2(a2, b3, c2, d2, e2) {
        if ("string" === typeof d2 && "" !== d2 || "number" === typeof d2) return a2 = a2.get(c2) || null, h(b3, a2, "" + d2, e2);
        if ("object" === typeof d2 && null !== d2) {
          switch (d2.$$typeof) {
            case va:
              return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, k2(b3, a2, d2, e2);
            case wa:
              return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l2(b3, a2, d2, e2);
            case Ha:
              var f3 = d2._init;
              return y2(a2, b3, c2, f3(d2._payload), e2);
          }
          if (eb(d2) || Ka(d2)) return a2 = a2.get(c2) || null, m2(b3, a2, d2, e2, null);
          Mg(b3, d2);
        }
        return null;
      }
      function n2(e2, g2, h2, k3) {
        for (var l3 = null, m3 = null, u2 = g2, w2 = g2 = 0, x2 = null; null !== u2 && w2 < h2.length; w2++) {
          u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
          var n3 = r2(e2, u2, h2[w2], k3);
          if (null === n3) {
            null === u2 && (u2 = x2);
            break;
          }
          a && u2 && null === n3.alternate && b2(e2, u2);
          g2 = f2(n3, g2, w2);
          null === m3 ? l3 = n3 : m3.sibling = n3;
          m3 = n3;
          u2 = x2;
        }
        if (w2 === h2.length) return c(e2, u2), I && tg(e2, w2), l3;
        if (null === u2) {
          for (; w2 < h2.length; w2++) u2 = q2(e2, h2[w2], k3), null !== u2 && (g2 = f2(u2, g2, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
          I && tg(e2, w2);
          return l3;
        }
        for (u2 = d(e2, u2); w2 < h2.length; w2++) x2 = y2(u2, e2, w2, h2[w2], k3), null !== x2 && (a && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g2 = f2(x2, g2, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
        a && u2.forEach(function(a2) {
          return b2(e2, a2);
        });
        I && tg(e2, w2);
        return l3;
      }
      function t2(e2, g2, h2, k3) {
        var l3 = Ka(h2);
        if ("function" !== typeof l3) throw Error(p(150));
        h2 = l3.call(h2);
        if (null == h2) throw Error(p(151));
        for (var u2 = l3 = null, m3 = g2, w2 = g2 = 0, x2 = null, n3 = h2.next(); null !== m3 && !n3.done; w2++, n3 = h2.next()) {
          m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
          var t3 = r2(e2, m3, n3.value, k3);
          if (null === t3) {
            null === m3 && (m3 = x2);
            break;
          }
          a && m3 && null === t3.alternate && b2(e2, m3);
          g2 = f2(t3, g2, w2);
          null === u2 ? l3 = t3 : u2.sibling = t3;
          u2 = t3;
          m3 = x2;
        }
        if (n3.done) return c(
          e2,
          m3
        ), I && tg(e2, w2), l3;
        if (null === m3) {
          for (; !n3.done; w2++, n3 = h2.next()) n3 = q2(e2, n3.value, k3), null !== n3 && (g2 = f2(n3, g2, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
          I && tg(e2, w2);
          return l3;
        }
        for (m3 = d(e2, m3); !n3.done; w2++, n3 = h2.next()) n3 = y2(m3, e2, w2, n3.value, k3), null !== n3 && (a && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g2 = f2(n3, g2, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
        a && m3.forEach(function(a2) {
          return b2(e2, a2);
        });
        I && tg(e2, w2);
        return l3;
      }
      function J2(a2, d2, f3, h2) {
        "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
        if ("object" === typeof f3 && null !== f3) {
          switch (f3.$$typeof) {
            case va:
              a: {
                for (var k3 = f3.key, l3 = d2; null !== l3; ) {
                  if (l3.key === k3) {
                    k3 = f3.type;
                    if (k3 === ya) {
                      if (7 === l3.tag) {
                        c(a2, l3.sibling);
                        d2 = e(l3, f3.props.children);
                        d2.return = a2;
                        a2 = d2;
                        break a;
                      }
                    } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && Ng(k3) === l3.type) {
                      c(a2, l3.sibling);
                      d2 = e(l3, f3.props);
                      d2.ref = Lg(a2, l3, f3);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    }
                    c(a2, l3);
                    break;
                  } else b2(a2, l3);
                  l3 = l3.sibling;
                }
                f3.type === ya ? (d2 = Tg(f3.props.children, a2.mode, h2, f3.key), d2.return = a2, a2 = d2) : (h2 = Rg(f3.type, f3.key, f3.props, null, a2.mode, h2), h2.ref = Lg(a2, d2, f3), h2.return = a2, a2 = h2);
              }
              return g(a2);
            case wa:
              a: {
                for (l3 = f3.key; null !== d2; ) {
                  if (d2.key === l3) if (4 === d2.tag && d2.stateNode.containerInfo === f3.containerInfo && d2.stateNode.implementation === f3.implementation) {
                    c(a2, d2.sibling);
                    d2 = e(d2, f3.children || []);
                    d2.return = a2;
                    a2 = d2;
                    break a;
                  } else {
                    c(a2, d2);
                    break;
                  }
                  else b2(a2, d2);
                  d2 = d2.sibling;
                }
                d2 = Sg(f3, a2.mode, h2);
                d2.return = a2;
                a2 = d2;
              }
              return g(a2);
            case Ha:
              return l3 = f3._init, J2(a2, d2, l3(f3._payload), h2);
          }
          if (eb(f3)) return n2(a2, d2, f3, h2);
          if (Ka(f3)) return t2(a2, d2, f3, h2);
          Mg(a2, f3);
        }
        return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f3), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Qg(f3, a2.mode, h2), d2.return = a2, a2 = d2), g(a2)) : c(a2, d2);
      }
      return J2;
    }
    var Ug = Og(true), Vg = Og(false), Wg = Uf(null), Xg = null, Yg = null, Zg = null;
    function $g() {
      Zg = Yg = Xg = null;
    }
    function ah(a) {
      var b2 = Wg.current;
      E(Wg);
      a._currentValue = b2;
    }
    function bh(a, b2, c) {
      for (; null !== a; ) {
        var d = a.alternate;
        (a.childLanes & b2) !== b2 ? (a.childLanes |= b2, null !== d && (d.childLanes |= b2)) : null !== d && (d.childLanes & b2) !== b2 && (d.childLanes |= b2);
        if (a === c) break;
        a = a.return;
      }
    }
    function ch(a, b2) {
      Xg = a;
      Zg = Yg = null;
      a = a.dependencies;
      null !== a && null !== a.firstContext && (0 !== (a.lanes & b2) && (dh = true), a.firstContext = null);
    }
    function eh(a) {
      var b2 = a._currentValue;
      if (Zg !== a) if (a = { context: a, memoizedValue: b2, next: null }, null === Yg) {
        if (null === Xg) throw Error(p(308));
        Yg = a;
        Xg.dependencies = { lanes: 0, firstContext: a };
      } else Yg = Yg.next = a;
      return b2;
    }
    var fh = null;
    function gh(a) {
      null === fh ? fh = [a] : fh.push(a);
    }
    function hh(a, b2, c, d) {
      var e = b2.interleaved;
      null === e ? (c.next = c, gh(b2)) : (c.next = e.next, e.next = c);
      b2.interleaved = c;
      return ih(a, d);
    }
    function ih(a, b2) {
      a.lanes |= b2;
      var c = a.alternate;
      null !== c && (c.lanes |= b2);
      c = a;
      for (a = a.return; null !== a; ) a.childLanes |= b2, c = a.alternate, null !== c && (c.childLanes |= b2), c = a, a = a.return;
      return 3 === c.tag ? c.stateNode : null;
    }
    var jh = false;
    function kh(a) {
      a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function lh(a, b2) {
      a = a.updateQueue;
      b2.updateQueue === a && (b2.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
    }
    function mh(a, b2) {
      return { eventTime: a, lane: b2, tag: 0, payload: null, callback: null, next: null };
    }
    function nh(a, b2, c) {
      var d = a.updateQueue;
      if (null === d) return null;
      d = d.shared;
      if (0 !== (K & 2)) {
        var e = d.pending;
        null === e ? b2.next = b2 : (b2.next = e.next, e.next = b2);
        d.pending = b2;
        return ih(a, c);
      }
      e = d.interleaved;
      null === e ? (b2.next = b2, gh(d)) : (b2.next = e.next, e.next = b2);
      d.interleaved = b2;
      return ih(a, c);
    }
    function oh(a, b2, c) {
      b2 = b2.updateQueue;
      if (null !== b2 && (b2 = b2.shared, 0 !== (c & 4194240))) {
        var d = b2.lanes;
        d &= a.pendingLanes;
        c |= d;
        b2.lanes = c;
        Cc(a, c);
      }
    }
    function ph(a, b2) {
      var c = a.updateQueue, d = a.alternate;
      if (null !== d && (d = d.updateQueue, c === d)) {
        var e = null, f2 = null;
        c = c.firstBaseUpdate;
        if (null !== c) {
          do {
            var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
            null === f2 ? e = f2 = g : f2 = f2.next = g;
            c = c.next;
          } while (null !== c);
          null === f2 ? e = f2 = b2 : f2 = f2.next = b2;
        } else e = f2 = b2;
        c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f2, shared: d.shared, effects: d.effects };
        a.updateQueue = c;
        return;
      }
      a = c.lastBaseUpdate;
      null === a ? c.firstBaseUpdate = b2 : a.next = b2;
      c.lastBaseUpdate = b2;
    }
    function qh(a, b2, c, d) {
      var e = a.updateQueue;
      jh = false;
      var f2 = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
      if (null !== h) {
        e.shared.pending = null;
        var k2 = h, l2 = k2.next;
        k2.next = null;
        null === g ? f2 = l2 : g.next = l2;
        g = k2;
        var m2 = a.alternate;
        null !== m2 && (m2 = m2.updateQueue, h = m2.lastBaseUpdate, h !== g && (null === h ? m2.firstBaseUpdate = l2 : h.next = l2, m2.lastBaseUpdate = k2));
      }
      if (null !== f2) {
        var q2 = e.baseState;
        g = 0;
        m2 = l2 = k2 = null;
        h = f2;
        do {
          var r2 = h.lane, y2 = h.eventTime;
          if ((d & r2) === r2) {
            null !== m2 && (m2 = m2.next = {
              eventTime: y2,
              lane: 0,
              tag: h.tag,
              payload: h.payload,
              callback: h.callback,
              next: null
            });
            a: {
              var n2 = a, t2 = h;
              r2 = b2;
              y2 = c;
              switch (t2.tag) {
                case 1:
                  n2 = t2.payload;
                  if ("function" === typeof n2) {
                    q2 = n2.call(y2, q2, r2);
                    break a;
                  }
                  q2 = n2;
                  break a;
                case 3:
                  n2.flags = n2.flags & -65537 | 128;
                case 0:
                  n2 = t2.payload;
                  r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
                  if (null === r2 || void 0 === r2) break a;
                  q2 = A({}, q2, r2);
                  break a;
                case 2:
                  jh = true;
              }
            }
            null !== h.callback && 0 !== h.lane && (a.flags |= 64, r2 = e.effects, null === r2 ? e.effects = [h] : r2.push(h));
          } else y2 = { eventTime: y2, lane: r2, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g |= r2;
          h = h.next;
          if (null === h) if (h = e.shared.pending, null === h) break;
          else r2 = h, h = r2.next, r2.next = null, e.lastBaseUpdate = r2, e.shared.pending = null;
        } while (1);
        null === m2 && (k2 = q2);
        e.baseState = k2;
        e.firstBaseUpdate = l2;
        e.lastBaseUpdate = m2;
        b2 = e.shared.interleaved;
        if (null !== b2) {
          e = b2;
          do
            g |= e.lane, e = e.next;
          while (e !== b2);
        } else null === f2 && (e.shared.lanes = 0);
        rh |= g;
        a.lanes = g;
        a.memoizedState = q2;
      }
    }
    function sh(a, b2, c) {
      a = b2.effects;
      b2.effects = null;
      if (null !== a) for (b2 = 0; b2 < a.length; b2++) {
        var d = a[b2], e = d.callback;
        if (null !== e) {
          d.callback = null;
          d = c;
          if ("function" !== typeof e) throw Error(p(191, e));
          e.call(d);
        }
      }
    }
    var th = {}, uh = Uf(th), vh = Uf(th), wh = Uf(th);
    function xh(a) {
      if (a === th) throw Error(p(174));
      return a;
    }
    function yh(a, b2) {
      G(wh, b2);
      G(vh, a);
      G(uh, th);
      a = b2.nodeType;
      switch (a) {
        case 9:
        case 11:
          b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
          break;
        default:
          a = 8 === a ? b2.parentNode : b2, b2 = a.namespaceURI || null, a = a.tagName, b2 = lb(b2, a);
      }
      E(uh);
      G(uh, b2);
    }
    function zh() {
      E(uh);
      E(vh);
      E(wh);
    }
    function Ah(a) {
      xh(wh.current);
      var b2 = xh(uh.current);
      var c = lb(b2, a.type);
      b2 !== c && (G(vh, a), G(uh, c));
    }
    function Bh(a) {
      vh.current === a && (E(uh), E(vh));
    }
    var L = Uf(0);
    function Ch(a) {
      for (var b2 = a; null !== b2; ) {
        if (13 === b2.tag) {
          var c = b2.memoizedState;
          if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b2;
        } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
          if (0 !== (b2.flags & 128)) return b2;
        } else if (null !== b2.child) {
          b2.child.return = b2;
          b2 = b2.child;
          continue;
        }
        if (b2 === a) break;
        for (; null === b2.sibling; ) {
          if (null === b2.return || b2.return === a) return null;
          b2 = b2.return;
        }
        b2.sibling.return = b2.return;
        b2 = b2.sibling;
      }
      return null;
    }
    var Dh = [];
    function Eh() {
      for (var a = 0; a < Dh.length; a++) Dh[a]._workInProgressVersionPrimary = null;
      Dh.length = 0;
    }
    var Fh = ua.ReactCurrentDispatcher, Gh = ua.ReactCurrentBatchConfig, Hh = 0, M = null, N = null, O = null, Ih = false, Jh = false, Kh = 0, Lh = 0;
    function P() {
      throw Error(p(321));
    }
    function Mh(a, b2) {
      if (null === b2) return false;
      for (var c = 0; c < b2.length && c < a.length; c++) if (!He(a[c], b2[c])) return false;
      return true;
    }
    function Nh(a, b2, c, d, e, f2) {
      Hh = f2;
      M = b2;
      b2.memoizedState = null;
      b2.updateQueue = null;
      b2.lanes = 0;
      Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
      a = c(d, e);
      if (Jh) {
        f2 = 0;
        do {
          Jh = false;
          Kh = 0;
          if (25 <= f2) throw Error(p(301));
          f2 += 1;
          O = N = null;
          b2.updateQueue = null;
          Fh.current = Qh;
          a = c(d, e);
        } while (Jh);
      }
      Fh.current = Rh;
      b2 = null !== N && null !== N.next;
      Hh = 0;
      O = N = M = null;
      Ih = false;
      if (b2) throw Error(p(300));
      return a;
    }
    function Sh() {
      var a = 0 !== Kh;
      Kh = 0;
      return a;
    }
    function Th() {
      var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      null === O ? M.memoizedState = O = a : O = O.next = a;
      return O;
    }
    function Uh() {
      if (null === N) {
        var a = M.alternate;
        a = null !== a ? a.memoizedState : null;
      } else a = N.next;
      var b2 = null === O ? M.memoizedState : O.next;
      if (null !== b2) O = b2, N = a;
      else {
        if (null === a) throw Error(p(310));
        N = a;
        a = { memoizedState: N.memoizedState, baseState: N.baseState, baseQueue: N.baseQueue, queue: N.queue, next: null };
        null === O ? M.memoizedState = O = a : O = O.next = a;
      }
      return O;
    }
    function Vh(a, b2) {
      return "function" === typeof b2 ? b2(a) : b2;
    }
    function Wh(a) {
      var b2 = Uh(), c = b2.queue;
      if (null === c) throw Error(p(311));
      c.lastRenderedReducer = a;
      var d = N, e = d.baseQueue, f2 = c.pending;
      if (null !== f2) {
        if (null !== e) {
          var g = e.next;
          e.next = f2.next;
          f2.next = g;
        }
        d.baseQueue = e = f2;
        c.pending = null;
      }
      if (null !== e) {
        f2 = e.next;
        d = d.baseState;
        var h = g = null, k2 = null, l2 = f2;
        do {
          var m2 = l2.lane;
          if ((Hh & m2) === m2) null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d = l2.hasEagerState ? l2.eagerState : a(d, l2.action);
          else {
            var q2 = {
              lane: m2,
              action: l2.action,
              hasEagerState: l2.hasEagerState,
              eagerState: l2.eagerState,
              next: null
            };
            null === k2 ? (h = k2 = q2, g = d) : k2 = k2.next = q2;
            M.lanes |= m2;
            rh |= m2;
          }
          l2 = l2.next;
        } while (null !== l2 && l2 !== f2);
        null === k2 ? g = d : k2.next = h;
        He(d, b2.memoizedState) || (dh = true);
        b2.memoizedState = d;
        b2.baseState = g;
        b2.baseQueue = k2;
        c.lastRenderedState = d;
      }
      a = c.interleaved;
      if (null !== a) {
        e = a;
        do
          f2 = e.lane, M.lanes |= f2, rh |= f2, e = e.next;
        while (e !== a);
      } else null === e && (c.lanes = 0);
      return [b2.memoizedState, c.dispatch];
    }
    function Xh(a) {
      var b2 = Uh(), c = b2.queue;
      if (null === c) throw Error(p(311));
      c.lastRenderedReducer = a;
      var d = c.dispatch, e = c.pending, f2 = b2.memoizedState;
      if (null !== e) {
        c.pending = null;
        var g = e = e.next;
        do
          f2 = a(f2, g.action), g = g.next;
        while (g !== e);
        He(f2, b2.memoizedState) || (dh = true);
        b2.memoizedState = f2;
        null === b2.baseQueue && (b2.baseState = f2);
        c.lastRenderedState = f2;
      }
      return [f2, d];
    }
    function Yh() {
    }
    function Zh(a, b2) {
      var c = M, d = Uh(), e = b2(), f2 = !He(d.memoizedState, e);
      f2 && (d.memoizedState = e, dh = true);
      d = d.queue;
      $h(ai.bind(null, c, d, a), [a]);
      if (d.getSnapshot !== b2 || f2 || null !== O && O.memoizedState.tag & 1) {
        c.flags |= 2048;
        bi(9, ci.bind(null, c, d, e, b2), void 0, null);
        if (null === Q) throw Error(p(349));
        0 !== (Hh & 30) || di(c, b2, e);
      }
      return e;
    }
    function di(a, b2, c) {
      a.flags |= 16384;
      a = { getSnapshot: b2, value: c };
      b2 = M.updateQueue;
      null === b2 ? (b2 = { lastEffect: null, stores: null }, M.updateQueue = b2, b2.stores = [a]) : (c = b2.stores, null === c ? b2.stores = [a] : c.push(a));
    }
    function ci(a, b2, c, d) {
      b2.value = c;
      b2.getSnapshot = d;
      ei(b2) && fi(a);
    }
    function ai(a, b2, c) {
      return c(function() {
        ei(b2) && fi(a);
      });
    }
    function ei(a) {
      var b2 = a.getSnapshot;
      a = a.value;
      try {
        var c = b2();
        return !He(a, c);
      } catch (d) {
        return true;
      }
    }
    function fi(a) {
      var b2 = ih(a, 1);
      null !== b2 && gi(b2, a, 1, -1);
    }
    function hi(a) {
      var b2 = Th();
      "function" === typeof a && (a = a());
      b2.memoizedState = b2.baseState = a;
      a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a };
      b2.queue = a;
      a = a.dispatch = ii.bind(null, M, a);
      return [b2.memoizedState, a];
    }
    function bi(a, b2, c, d) {
      a = { tag: a, create: b2, destroy: c, deps: d, next: null };
      b2 = M.updateQueue;
      null === b2 ? (b2 = { lastEffect: null, stores: null }, M.updateQueue = b2, b2.lastEffect = a.next = a) : (c = b2.lastEffect, null === c ? b2.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b2.lastEffect = a));
      return a;
    }
    function ji() {
      return Uh().memoizedState;
    }
    function ki(a, b2, c, d) {
      var e = Th();
      M.flags |= a;
      e.memoizedState = bi(1 | b2, c, void 0, void 0 === d ? null : d);
    }
    function li(a, b2, c, d) {
      var e = Uh();
      d = void 0 === d ? null : d;
      var f2 = void 0;
      if (null !== N) {
        var g = N.memoizedState;
        f2 = g.destroy;
        if (null !== d && Mh(d, g.deps)) {
          e.memoizedState = bi(b2, c, f2, d);
          return;
        }
      }
      M.flags |= a;
      e.memoizedState = bi(1 | b2, c, f2, d);
    }
    function mi(a, b2) {
      return ki(8390656, 8, a, b2);
    }
    function $h(a, b2) {
      return li(2048, 8, a, b2);
    }
    function ni(a, b2) {
      return li(4, 2, a, b2);
    }
    function oi(a, b2) {
      return li(4, 4, a, b2);
    }
    function pi(a, b2) {
      if ("function" === typeof b2) return a = a(), b2(a), function() {
        b2(null);
      };
      if (null !== b2 && void 0 !== b2) return a = a(), b2.current = a, function() {
        b2.current = null;
      };
    }
    function qi(a, b2, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return li(4, 4, pi.bind(null, b2, a), c);
    }
    function ri() {
    }
    function si(a, b2) {
      var c = Uh();
      b2 = void 0 === b2 ? null : b2;
      var d = c.memoizedState;
      if (null !== d && null !== b2 && Mh(b2, d[1])) return d[0];
      c.memoizedState = [a, b2];
      return a;
    }
    function ti(a, b2) {
      var c = Uh();
      b2 = void 0 === b2 ? null : b2;
      var d = c.memoizedState;
      if (null !== d && null !== b2 && Mh(b2, d[1])) return d[0];
      a = a();
      c.memoizedState = [a, b2];
      return a;
    }
    function ui(a, b2, c) {
      if (0 === (Hh & 21)) return a.baseState && (a.baseState = false, dh = true), a.memoizedState = c;
      He(c, b2) || (c = yc(), M.lanes |= c, rh |= c, a.baseState = true);
      return b2;
    }
    function vi(a, b2) {
      var c = C$1;
      C$1 = 0 !== c && 4 > c ? c : 4;
      a(true);
      var d = Gh.transition;
      Gh.transition = {};
      try {
        a(false), b2();
      } finally {
        C$1 = c, Gh.transition = d;
      }
    }
    function wi() {
      return Uh().memoizedState;
    }
    function xi(a, b2, c) {
      var d = yi(a);
      c = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
      if (zi(a)) Ai(b2, c);
      else if (c = hh(a, b2, c, d), null !== c) {
        var e = R();
        gi(c, a, d, e);
        Bi(c, b2, d);
      }
    }
    function ii(a, b2, c) {
      var d = yi(a), e = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
      if (zi(a)) Ai(b2, e);
      else {
        var f2 = a.alternate;
        if (0 === a.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2)) try {
          var g = b2.lastRenderedState, h = f2(g, c);
          e.hasEagerState = true;
          e.eagerState = h;
          if (He(h, g)) {
            var k2 = b2.interleaved;
            null === k2 ? (e.next = e, gh(b2)) : (e.next = k2.next, k2.next = e);
            b2.interleaved = e;
            return;
          }
        } catch (l2) {
        } finally {
        }
        c = hh(a, b2, e, d);
        null !== c && (e = R(), gi(c, a, d, e), Bi(c, b2, d));
      }
    }
    function zi(a) {
      var b2 = a.alternate;
      return a === M || null !== b2 && b2 === M;
    }
    function Ai(a, b2) {
      Jh = Ih = true;
      var c = a.pending;
      null === c ? b2.next = b2 : (b2.next = c.next, c.next = b2);
      a.pending = b2;
    }
    function Bi(a, b2, c) {
      if (0 !== (c & 4194240)) {
        var d = b2.lanes;
        d &= a.pendingLanes;
        c |= d;
        b2.lanes = c;
        Cc(a, c);
      }
    }
    var Rh = { readContext: eh, useCallback: P, useContext: P, useEffect: P, useImperativeHandle: P, useInsertionEffect: P, useLayoutEffect: P, useMemo: P, useReducer: P, useRef: P, useState: P, useDebugValue: P, useDeferredValue: P, useTransition: P, useMutableSource: P, useSyncExternalStore: P, useId: P, unstable_isNewReconciler: false }, Oh = { readContext: eh, useCallback: function(a, b2) {
      Th().memoizedState = [a, void 0 === b2 ? null : b2];
      return a;
    }, useContext: eh, useEffect: mi, useImperativeHandle: function(a, b2, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return ki(
        4194308,
        4,
        pi.bind(null, b2, a),
        c
      );
    }, useLayoutEffect: function(a, b2) {
      return ki(4194308, 4, a, b2);
    }, useInsertionEffect: function(a, b2) {
      return ki(4, 2, a, b2);
    }, useMemo: function(a, b2) {
      var c = Th();
      b2 = void 0 === b2 ? null : b2;
      a = a();
      c.memoizedState = [a, b2];
      return a;
    }, useReducer: function(a, b2, c) {
      var d = Th();
      b2 = void 0 !== c ? c(b2) : b2;
      d.memoizedState = d.baseState = b2;
      a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b2 };
      d.queue = a;
      a = a.dispatch = xi.bind(null, M, a);
      return [d.memoizedState, a];
    }, useRef: function(a) {
      var b2 = Th();
      a = { current: a };
      return b2.memoizedState = a;
    }, useState: hi, useDebugValue: ri, useDeferredValue: function(a) {
      return Th().memoizedState = a;
    }, useTransition: function() {
      var a = hi(false), b2 = a[0];
      a = vi.bind(null, a[1]);
      Th().memoizedState = a;
      return [b2, a];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(a, b2, c) {
      var d = M, e = Th();
      if (I) {
        if (void 0 === c) throw Error(p(407));
        c = c();
      } else {
        c = b2();
        if (null === Q) throw Error(p(349));
        0 !== (Hh & 30) || di(d, b2, c);
      }
      e.memoizedState = c;
      var f2 = { value: c, getSnapshot: b2 };
      e.queue = f2;
      mi(ai.bind(
        null,
        d,
        f2,
        a
      ), [a]);
      d.flags |= 2048;
      bi(9, ci.bind(null, d, f2, c, b2), void 0, null);
      return c;
    }, useId: function() {
      var a = Th(), b2 = Q.identifierPrefix;
      if (I) {
        var c = sg;
        var d = rg;
        c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
        b2 = ":" + b2 + "R" + c;
        c = Kh++;
        0 < c && (b2 += "H" + c.toString(32));
        b2 += ":";
      } else c = Lh++, b2 = ":" + b2 + "r" + c.toString(32) + ":";
      return a.memoizedState = b2;
    }, unstable_isNewReconciler: false }, Ph = {
      readContext: eh,
      useCallback: si,
      useContext: eh,
      useEffect: $h,
      useImperativeHandle: qi,
      useInsertionEffect: ni,
      useLayoutEffect: oi,
      useMemo: ti,
      useReducer: Wh,
      useRef: ji,
      useState: function() {
        return Wh(Vh);
      },
      useDebugValue: ri,
      useDeferredValue: function(a) {
        var b2 = Uh();
        return ui(b2, N.memoizedState, a);
      },
      useTransition: function() {
        var a = Wh(Vh)[0], b2 = Uh().memoizedState;
        return [a, b2];
      },
      useMutableSource: Yh,
      useSyncExternalStore: Zh,
      useId: wi,
      unstable_isNewReconciler: false
    }, Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: function() {
      return Xh(Vh);
    }, useDebugValue: ri, useDeferredValue: function(a) {
      var b2 = Uh();
      return null === N ? b2.memoizedState = a : ui(b2, N.memoizedState, a);
    }, useTransition: function() {
      var a = Xh(Vh)[0], b2 = Uh().memoizedState;
      return [a, b2];
    }, useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: false };
    function Ci(a, b2) {
      if (a && a.defaultProps) {
        b2 = A({}, b2);
        a = a.defaultProps;
        for (var c in a) void 0 === b2[c] && (b2[c] = a[c]);
        return b2;
      }
      return b2;
    }
    function Di(a, b2, c, d) {
      b2 = a.memoizedState;
      c = c(d, b2);
      c = null === c || void 0 === c ? b2 : A({}, b2, c);
      a.memoizedState = c;
      0 === a.lanes && (a.updateQueue.baseState = c);
    }
    var Ei = { isMounted: function(a) {
      return (a = a._reactInternals) ? Vb(a) === a : false;
    }, enqueueSetState: function(a, b2, c) {
      a = a._reactInternals;
      var d = R(), e = yi(a), f2 = mh(d, e);
      f2.payload = b2;
      void 0 !== c && null !== c && (f2.callback = c);
      b2 = nh(a, f2, e);
      null !== b2 && (gi(b2, a, e, d), oh(b2, a, e));
    }, enqueueReplaceState: function(a, b2, c) {
      a = a._reactInternals;
      var d = R(), e = yi(a), f2 = mh(d, e);
      f2.tag = 1;
      f2.payload = b2;
      void 0 !== c && null !== c && (f2.callback = c);
      b2 = nh(a, f2, e);
      null !== b2 && (gi(b2, a, e, d), oh(b2, a, e));
    }, enqueueForceUpdate: function(a, b2) {
      a = a._reactInternals;
      var c = R(), d = yi(a), e = mh(c, d);
      e.tag = 2;
      void 0 !== b2 && null !== b2 && (e.callback = b2);
      b2 = nh(a, e, d);
      null !== b2 && (gi(b2, a, d, c), oh(b2, a, d));
    } };
    function Fi(a, b2, c, d, e, f2, g) {
      a = a.stateNode;
      return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f2, g) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie$1(c, d) || !Ie$1(e, f2) : true;
    }
    function Gi(a, b2, c) {
      var d = false, e = Vf;
      var f2 = b2.contextType;
      "object" === typeof f2 && null !== f2 ? f2 = eh(f2) : (e = Zf(b2) ? Xf : H.current, d = b2.contextTypes, f2 = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
      b2 = new b2(c, f2);
      a.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
      b2.updater = Ei;
      a.stateNode = b2;
      b2._reactInternals = a;
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f2);
      return b2;
    }
    function Hi(a, b2, c, d) {
      a = b2.state;
      "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c, d);
      "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c, d);
      b2.state !== a && Ei.enqueueReplaceState(b2, b2.state, null);
    }
    function Ii(a, b2, c, d) {
      var e = a.stateNode;
      e.props = c;
      e.state = a.memoizedState;
      e.refs = {};
      kh(a);
      var f2 = b2.contextType;
      "object" === typeof f2 && null !== f2 ? e.context = eh(f2) : (f2 = Zf(b2) ? Xf : H.current, e.context = Yf(a, f2));
      e.state = a.memoizedState;
      f2 = b2.getDerivedStateFromProps;
      "function" === typeof f2 && (Di(a, b2, f2, c), e.state = a.memoizedState);
      "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b2 = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b2 !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c, e, d), e.state = a.memoizedState);
      "function" === typeof e.componentDidMount && (a.flags |= 4194308);
    }
    function Ji(a, b2) {
      try {
        var c = "", d = b2;
        do
          c += Pa(d), d = d.return;
        while (d);
        var e = c;
      } catch (f2) {
        e = "\nError generating stack: " + f2.message + "\n" + f2.stack;
      }
      return { value: a, source: b2, stack: e, digest: null };
    }
    function Ki(a, b2, c) {
      return { value: a, source: null, stack: null != c ? c : null, digest: null != b2 ? b2 : null };
    }
    function Li(a, b2) {
      try {
        console.error(b2.value);
      } catch (c) {
        setTimeout(function() {
          throw c;
        });
      }
    }
    var Mi = "function" === typeof WeakMap ? WeakMap : Map;
    function Ni(a, b2, c) {
      c = mh(-1, c);
      c.tag = 3;
      c.payload = { element: null };
      var d = b2.value;
      c.callback = function() {
        Oi || (Oi = true, Pi = d);
        Li(a, b2);
      };
      return c;
    }
    function Qi(a, b2, c) {
      c = mh(-1, c);
      c.tag = 3;
      var d = a.type.getDerivedStateFromError;
      if ("function" === typeof d) {
        var e = b2.value;
        c.payload = function() {
          return d(e);
        };
        c.callback = function() {
          Li(a, b2);
        };
      }
      var f2 = a.stateNode;
      null !== f2 && "function" === typeof f2.componentDidCatch && (c.callback = function() {
        Li(a, b2);
        "function" !== typeof d && (null === Ri ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
        var c2 = b2.stack;
        this.componentDidCatch(b2.value, { componentStack: null !== c2 ? c2 : "" });
      });
      return c;
    }
    function Si(a, b2, c) {
      var d = a.pingCache;
      if (null === d) {
        d = a.pingCache = new Mi();
        var e = /* @__PURE__ */ new Set();
        d.set(b2, e);
      } else e = d.get(b2), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b2, e));
      e.has(c) || (e.add(c), a = Ti.bind(null, a, b2, c), b2.then(a, a));
    }
    function Ui(a) {
      do {
        var b2;
        if (b2 = 13 === a.tag) b2 = a.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
        if (b2) return a;
        a = a.return;
      } while (null !== a);
      return null;
    }
    function Vi(a, b2, c, d, e) {
      if (0 === (a.mode & 1)) return a === b2 ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b2 = mh(-1, 1), b2.tag = 2, nh(c, b2, 1))), c.lanes |= 1), a;
      a.flags |= 65536;
      a.lanes = e;
      return a;
    }
    var Wi = ua.ReactCurrentOwner, dh = false;
    function Xi(a, b2, c, d) {
      b2.child = null === a ? Vg(b2, null, c, d) : Ug(b2, a.child, c, d);
    }
    function Yi(a, b2, c, d, e) {
      c = c.render;
      var f2 = b2.ref;
      ch(b2, e);
      d = Nh(a, b2, c, d, f2, e);
      c = Sh();
      if (null !== a && !dh) return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e, Zi(a, b2, e);
      I && c && vg(b2);
      b2.flags |= 1;
      Xi(a, b2, d, e);
      return b2.child;
    }
    function $i(a, b2, c, d, e) {
      if (null === a) {
        var f2 = c.type;
        if ("function" === typeof f2 && !aj(f2) && void 0 === f2.defaultProps && null === c.compare && void 0 === c.defaultProps) return b2.tag = 15, b2.type = f2, bj(a, b2, f2, d, e);
        a = Rg(c.type, null, d, b2, b2.mode, e);
        a.ref = b2.ref;
        a.return = b2;
        return b2.child = a;
      }
      f2 = a.child;
      if (0 === (a.lanes & e)) {
        var g = f2.memoizedProps;
        c = c.compare;
        c = null !== c ? c : Ie$1;
        if (c(g, d) && a.ref === b2.ref) return Zi(a, b2, e);
      }
      b2.flags |= 1;
      a = Pg(f2, d);
      a.ref = b2.ref;
      a.return = b2;
      return b2.child = a;
    }
    function bj(a, b2, c, d, e) {
      if (null !== a) {
        var f2 = a.memoizedProps;
        if (Ie$1(f2, d) && a.ref === b2.ref) if (dh = false, b2.pendingProps = d = f2, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (dh = true);
        else return b2.lanes = a.lanes, Zi(a, b2, e);
      }
      return cj(a, b2, c, d, e);
    }
    function dj(a, b2, c) {
      var d = b2.pendingProps, e = d.children, f2 = null !== a ? a.memoizedState : null;
      if ("hidden" === d.mode) if (0 === (b2.mode & 1)) b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(ej, fj), fj |= c;
      else {
        if (0 === (c & 1073741824)) return a = null !== f2 ? f2.baseLanes | c : c, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b2.updateQueue = null, G(ej, fj), fj |= a, null;
        b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
        d = null !== f2 ? f2.baseLanes : c;
        G(ej, fj);
        fj |= d;
      }
      else null !== f2 ? (d = f2.baseLanes | c, b2.memoizedState = null) : d = c, G(ej, fj), fj |= d;
      Xi(a, b2, e, c);
      return b2.child;
    }
    function gj(a, b2) {
      var c = b2.ref;
      if (null === a && null !== c || null !== a && a.ref !== c) b2.flags |= 512, b2.flags |= 2097152;
    }
    function cj(a, b2, c, d, e) {
      var f2 = Zf(c) ? Xf : H.current;
      f2 = Yf(b2, f2);
      ch(b2, e);
      c = Nh(a, b2, c, d, f2, e);
      d = Sh();
      if (null !== a && !dh) return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e, Zi(a, b2, e);
      I && d && vg(b2);
      b2.flags |= 1;
      Xi(a, b2, c, e);
      return b2.child;
    }
    function hj(a, b2, c, d, e) {
      if (Zf(c)) {
        var f2 = true;
        cg(b2);
      } else f2 = false;
      ch(b2, e);
      if (null === b2.stateNode) ij(a, b2), Gi(b2, c, d), Ii(b2, c, d, e), d = true;
      else if (null === a) {
        var g = b2.stateNode, h = b2.memoizedProps;
        g.props = h;
        var k2 = g.context, l2 = c.contextType;
        "object" === typeof l2 && null !== l2 ? l2 = eh(l2) : (l2 = Zf(c) ? Xf : H.current, l2 = Yf(b2, l2));
        var m2 = c.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g.getSnapshotBeforeUpdate;
        q2 || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k2 !== l2) && Hi(b2, g, d, l2);
        jh = false;
        var r2 = b2.memoizedState;
        g.state = r2;
        qh(b2, d, g, e);
        k2 = b2.memoizedState;
        h !== d || r2 !== k2 || Wf.current || jh ? ("function" === typeof m2 && (Di(b2, c, m2, d), k2 = b2.memoizedState), (h = jh || Fi(b2, c, h, d, r2, k2, l2)) ? (q2 || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d, b2.memoizedState = k2), g.props = d, g.state = k2, g.context = l2, d = h) : ("function" === typeof g.componentDidMount && (b2.flags |= 4194308), d = false);
      } else {
        g = b2.stateNode;
        lh(a, b2);
        h = b2.memoizedProps;
        l2 = b2.type === b2.elementType ? h : Ci(b2.type, h);
        g.props = l2;
        q2 = b2.pendingProps;
        r2 = g.context;
        k2 = c.contextType;
        "object" === typeof k2 && null !== k2 ? k2 = eh(k2) : (k2 = Zf(c) ? Xf : H.current, k2 = Yf(b2, k2));
        var y2 = c.getDerivedStateFromProps;
        (m2 = "function" === typeof y2 || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q2 || r2 !== k2) && Hi(b2, g, d, k2);
        jh = false;
        r2 = b2.memoizedState;
        g.state = r2;
        qh(b2, d, g, e);
        var n2 = b2.memoizedState;
        h !== q2 || r2 !== n2 || Wf.current || jh ? ("function" === typeof y2 && (Di(b2, c, y2, d), n2 = b2.memoizedState), (l2 = jh || Fi(b2, c, l2, d, r2, n2, k2) || false) ? (m2 || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n2, k2), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n2, k2)), "function" === typeof g.componentDidUpdate && (b2.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d, b2.memoizedState = n2), g.props = d, g.state = n2, g.context = k2, d = l2) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), d = false);
      }
      return jj(a, b2, c, d, f2, e);
    }
    function jj(a, b2, c, d, e, f2) {
      gj(a, b2);
      var g = 0 !== (b2.flags & 128);
      if (!d && !g) return e && dg(b2, c, false), Zi(a, b2, f2);
      d = b2.stateNode;
      Wi.current = b2;
      var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
      b2.flags |= 1;
      null !== a && g ? (b2.child = Ug(b2, a.child, null, f2), b2.child = Ug(b2, null, h, f2)) : Xi(a, b2, h, f2);
      b2.memoizedState = d.state;
      e && dg(b2, c, true);
      return b2.child;
    }
    function kj(a) {
      var b2 = a.stateNode;
      b2.pendingContext ? ag(a, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a, b2.context, false);
      yh(a, b2.containerInfo);
    }
    function lj(a, b2, c, d, e) {
      Ig();
      Jg(e);
      b2.flags |= 256;
      Xi(a, b2, c, d);
      return b2.child;
    }
    var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
    function nj(a) {
      return { baseLanes: a, cachePool: null, transitions: null };
    }
    function oj(a, b2, c) {
      var d = b2.pendingProps, e = L.current, f2 = false, g = 0 !== (b2.flags & 128), h;
      (h = g) || (h = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
      if (h) f2 = true, b2.flags &= -129;
      else if (null === a || null !== a.memoizedState) e |= 1;
      G(L, e & 1);
      if (null === a) {
        Eg(b2);
        a = b2.memoizedState;
        if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
        g = d.children;
        a = d.fallback;
        return f2 ? (d = b2.mode, f2 = b2.child, g = { mode: "hidden", children: g }, 0 === (d & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g) : f2 = pj(g, d, 0, null), a = Tg(a, d, c, null), f2.return = b2, a.return = b2, f2.sibling = a, b2.child = f2, b2.child.memoizedState = nj(c), b2.memoizedState = mj, a) : qj(b2, g);
      }
      e = a.memoizedState;
      if (null !== e && (h = e.dehydrated, null !== h)) return rj(a, b2, g, d, h, e, c);
      if (f2) {
        f2 = d.fallback;
        g = b2.mode;
        e = a.child;
        h = e.sibling;
        var k2 = { mode: "hidden", children: d.children };
        0 === (g & 1) && b2.child !== e ? (d = b2.child, d.childLanes = 0, d.pendingProps = k2, b2.deletions = null) : (d = Pg(e, k2), d.subtreeFlags = e.subtreeFlags & 14680064);
        null !== h ? f2 = Pg(h, f2) : (f2 = Tg(f2, g, c, null), f2.flags |= 2);
        f2.return = b2;
        d.return = b2;
        d.sibling = f2;
        b2.child = d;
        d = f2;
        f2 = b2.child;
        g = a.child.memoizedState;
        g = null === g ? nj(c) : { baseLanes: g.baseLanes | c, cachePool: null, transitions: g.transitions };
        f2.memoizedState = g;
        f2.childLanes = a.childLanes & ~c;
        b2.memoizedState = mj;
        return d;
      }
      f2 = a.child;
      a = f2.sibling;
      d = Pg(f2, { mode: "visible", children: d.children });
      0 === (b2.mode & 1) && (d.lanes = c);
      d.return = b2;
      d.sibling = null;
      null !== a && (c = b2.deletions, null === c ? (b2.deletions = [a], b2.flags |= 16) : c.push(a));
      b2.child = d;
      b2.memoizedState = null;
      return d;
    }
    function qj(a, b2) {
      b2 = pj({ mode: "visible", children: b2 }, a.mode, 0, null);
      b2.return = a;
      return a.child = b2;
    }
    function sj(a, b2, c, d) {
      null !== d && Jg(d);
      Ug(b2, a.child, null, c);
      a = qj(b2, b2.pendingProps.children);
      a.flags |= 2;
      b2.memoizedState = null;
      return a;
    }
    function rj(a, b2, c, d, e, f2, g) {
      if (c) {
        if (b2.flags & 256) return b2.flags &= -257, d = Ki(Error(p(422))), sj(a, b2, g, d);
        if (null !== b2.memoizedState) return b2.child = a.child, b2.flags |= 128, null;
        f2 = d.fallback;
        e = b2.mode;
        d = pj({ mode: "visible", children: d.children }, e, 0, null);
        f2 = Tg(f2, e, g, null);
        f2.flags |= 2;
        d.return = b2;
        f2.return = b2;
        d.sibling = f2;
        b2.child = d;
        0 !== (b2.mode & 1) && Ug(b2, a.child, null, g);
        b2.child.memoizedState = nj(g);
        b2.memoizedState = mj;
        return f2;
      }
      if (0 === (b2.mode & 1)) return sj(a, b2, g, null);
      if ("$!" === e.data) {
        d = e.nextSibling && e.nextSibling.dataset;
        if (d) var h = d.dgst;
        d = h;
        f2 = Error(p(419));
        d = Ki(f2, d, void 0);
        return sj(a, b2, g, d);
      }
      h = 0 !== (g & a.childLanes);
      if (dh || h) {
        d = Q;
        if (null !== d) {
          switch (g & -g) {
            case 4:
              e = 2;
              break;
            case 16:
              e = 8;
              break;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              e = 32;
              break;
            case 536870912:
              e = 268435456;
              break;
            default:
              e = 0;
          }
          e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
          0 !== e && e !== f2.retryLane && (f2.retryLane = e, ih(a, e), gi(d, a, e, -1));
        }
        tj();
        d = Ki(Error(p(421)));
        return sj(a, b2, g, d);
      }
      if ("$?" === e.data) return b2.flags |= 128, b2.child = a.child, b2 = uj.bind(null, a), e._reactRetry = b2, null;
      a = f2.treeContext;
      yg = Lf(e.nextSibling);
      xg = b2;
      I = true;
      zg = null;
      null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b2);
      b2 = qj(b2, d.children);
      b2.flags |= 4096;
      return b2;
    }
    function vj(a, b2, c) {
      a.lanes |= b2;
      var d = a.alternate;
      null !== d && (d.lanes |= b2);
      bh(a.return, b2, c);
    }
    function wj(a, b2, c, d, e) {
      var f2 = a.memoizedState;
      null === f2 ? a.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d, f2.tail = c, f2.tailMode = e);
    }
    function xj(a, b2, c) {
      var d = b2.pendingProps, e = d.revealOrder, f2 = d.tail;
      Xi(a, b2, d.children, c);
      d = L.current;
      if (0 !== (d & 2)) d = d & 1 | 2, b2.flags |= 128;
      else {
        if (null !== a && 0 !== (a.flags & 128)) a: for (a = b2.child; null !== a; ) {
          if (13 === a.tag) null !== a.memoizedState && vj(a, c, b2);
          else if (19 === a.tag) vj(a, c, b2);
          else if (null !== a.child) {
            a.child.return = a;
            a = a.child;
            continue;
          }
          if (a === b2) break a;
          for (; null === a.sibling; ) {
            if (null === a.return || a.return === b2) break a;
            a = a.return;
          }
          a.sibling.return = a.return;
          a = a.sibling;
        }
        d &= 1;
      }
      G(L, d);
      if (0 === (b2.mode & 1)) b2.memoizedState = null;
      else switch (e) {
        case "forwards":
          c = b2.child;
          for (e = null; null !== c; ) a = c.alternate, null !== a && null === Ch(a) && (e = c), c = c.sibling;
          c = e;
          null === c ? (e = b2.child, b2.child = null) : (e = c.sibling, c.sibling = null);
          wj(b2, false, e, c, f2);
          break;
        case "backwards":
          c = null;
          e = b2.child;
          for (b2.child = null; null !== e; ) {
            a = e.alternate;
            if (null !== a && null === Ch(a)) {
              b2.child = e;
              break;
            }
            a = e.sibling;
            e.sibling = c;
            c = e;
            e = a;
          }
          wj(b2, true, c, null, f2);
          break;
        case "together":
          wj(b2, false, null, null, void 0);
          break;
        default:
          b2.memoizedState = null;
      }
      return b2.child;
    }
    function ij(a, b2) {
      0 === (b2.mode & 1) && null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2);
    }
    function Zi(a, b2, c) {
      null !== a && (b2.dependencies = a.dependencies);
      rh |= b2.lanes;
      if (0 === (c & b2.childLanes)) return null;
      if (null !== a && b2.child !== a.child) throw Error(p(153));
      if (null !== b2.child) {
        a = b2.child;
        c = Pg(a, a.pendingProps);
        b2.child = c;
        for (c.return = b2; null !== a.sibling; ) a = a.sibling, c = c.sibling = Pg(a, a.pendingProps), c.return = b2;
        c.sibling = null;
      }
      return b2.child;
    }
    function yj(a, b2, c) {
      switch (b2.tag) {
        case 3:
          kj(b2);
          Ig();
          break;
        case 5:
          Ah(b2);
          break;
        case 1:
          Zf(b2.type) && cg(b2);
          break;
        case 4:
          yh(b2, b2.stateNode.containerInfo);
          break;
        case 10:
          var d = b2.type._context, e = b2.memoizedProps.value;
          G(Wg, d._currentValue);
          d._currentValue = e;
          break;
        case 13:
          d = b2.memoizedState;
          if (null !== d) {
            if (null !== d.dehydrated) return G(L, L.current & 1), b2.flags |= 128, null;
            if (0 !== (c & b2.child.childLanes)) return oj(a, b2, c);
            G(L, L.current & 1);
            a = Zi(a, b2, c);
            return null !== a ? a.sibling : null;
          }
          G(L, L.current & 1);
          break;
        case 19:
          d = 0 !== (c & b2.childLanes);
          if (0 !== (a.flags & 128)) {
            if (d) return xj(a, b2, c);
            b2.flags |= 128;
          }
          e = b2.memoizedState;
          null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
          G(L, L.current);
          if (d) break;
          else return null;
        case 22:
        case 23:
          return b2.lanes = 0, dj(a, b2, c);
      }
      return Zi(a, b2, c);
    }
    var zj, Aj, Bj, Cj;
    zj = function(a, b2) {
      for (var c = b2.child; null !== c; ) {
        if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
        else if (4 !== c.tag && null !== c.child) {
          c.child.return = c;
          c = c.child;
          continue;
        }
        if (c === b2) break;
        for (; null === c.sibling; ) {
          if (null === c.return || c.return === b2) return;
          c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
      }
    };
    Aj = function() {
    };
    Bj = function(a, b2, c, d) {
      var e = a.memoizedProps;
      if (e !== d) {
        a = b2.stateNode;
        xh(uh.current);
        var f2 = null;
        switch (c) {
          case "input":
            e = Ya(a, e);
            d = Ya(a, d);
            f2 = [];
            break;
          case "select":
            e = A({}, e, { value: void 0 });
            d = A({}, d, { value: void 0 });
            f2 = [];
            break;
          case "textarea":
            e = gb(a, e);
            d = gb(a, d);
            f2 = [];
            break;
          default:
            "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
        }
        ub(c, d);
        var g;
        c = null;
        for (l2 in e) if (!d.hasOwnProperty(l2) && e.hasOwnProperty(l2) && null != e[l2]) if ("style" === l2) {
          var h = e[l2];
          for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
        } else "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
        for (l2 in d) {
          var k2 = d[l2];
          h = null != e ? e[l2] : void 0;
          if (d.hasOwnProperty(l2) && k2 !== h && (null != k2 || null != h)) if ("style" === l2) if (h) {
            for (g in h) !h.hasOwnProperty(g) || k2 && k2.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
            for (g in k2) k2.hasOwnProperty(g) && h[g] !== k2[g] && (c || (c = {}), c[g] = k2[g]);
          } else c || (f2 || (f2 = []), f2.push(
            l2,
            c
          )), c = k2;
          else "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h = h ? h.__html : void 0, null != k2 && h !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D$1("scroll", a), f2 || h === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
        }
        c && (f2 = f2 || []).push("style", c);
        var l2 = f2;
        if (b2.updateQueue = l2) b2.flags |= 4;
      }
    };
    Cj = function(a, b2, c, d) {
      c !== d && (b2.flags |= 4);
    };
    function Dj(a, b2) {
      if (!I) switch (a.tailMode) {
        case "hidden":
          b2 = a.tail;
          for (var c = null; null !== b2; ) null !== b2.alternate && (c = b2), b2 = b2.sibling;
          null === c ? a.tail = null : c.sibling = null;
          break;
        case "collapsed":
          c = a.tail;
          for (var d = null; null !== c; ) null !== c.alternate && (d = c), c = c.sibling;
          null === d ? b2 || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
      }
    }
    function S$1(a) {
      var b2 = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
      if (b2) for (var e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
      else for (e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
      a.subtreeFlags |= d;
      a.childLanes = c;
      return b2;
    }
    function Ej(a, b2, c) {
      var d = b2.pendingProps;
      wg(b2);
      switch (b2.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return S$1(b2), null;
        case 1:
          return Zf(b2.type) && $f(), S$1(b2), null;
        case 3:
          d = b2.stateNode;
          zh();
          E(Wf);
          E(H);
          Eh();
          d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
          if (null === a || null === a.child) Gg(b2) ? b2.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Fj(zg), zg = null));
          Aj(a, b2);
          S$1(b2);
          return null;
        case 5:
          Bh(b2);
          var e = xh(wh.current);
          c = b2.type;
          if (null !== a && null != b2.stateNode) Bj(a, b2, c, d, e), a.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
          else {
            if (!d) {
              if (null === b2.stateNode) throw Error(p(166));
              S$1(b2);
              return null;
            }
            a = xh(uh.current);
            if (Gg(b2)) {
              d = b2.stateNode;
              c = b2.type;
              var f2 = b2.memoizedProps;
              d[Of] = b2;
              d[Pf] = f2;
              a = 0 !== (b2.mode & 1);
              switch (c) {
                case "dialog":
                  D$1("cancel", d);
                  D$1("close", d);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D$1("load", d);
                  break;
                case "video":
                case "audio":
                  for (e = 0; e < lf.length; e++) D$1(lf[e], d);
                  break;
                case "source":
                  D$1("error", d);
                  break;
                case "img":
                case "image":
                case "link":
                  D$1(
                    "error",
                    d
                  );
                  D$1("load", d);
                  break;
                case "details":
                  D$1("toggle", d);
                  break;
                case "input":
                  Za(d, f2);
                  D$1("invalid", d);
                  break;
                case "select":
                  d._wrapperState = { wasMultiple: !!f2.multiple };
                  D$1("invalid", d);
                  break;
                case "textarea":
                  hb(d, f2), D$1("invalid", d);
              }
              ub(c, f2);
              e = null;
              for (var g in f2) if (f2.hasOwnProperty(g)) {
                var h = f2[g];
                "children" === g ? "string" === typeof h ? d.textContent !== h && (true !== f2.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (true !== f2.suppressHydrationWarning && Af(
                  d.textContent,
                  h,
                  a
                ), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D$1("scroll", d);
              }
              switch (c) {
                case "input":
                  Va(d);
                  db$1(d, f2, true);
                  break;
                case "textarea":
                  Va(d);
                  jb(d);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  "function" === typeof f2.onClick && (d.onclick = Bf);
              }
              d = e;
              b2.updateQueue = d;
              null !== d && (b2.flags |= 4);
            } else {
              g = 9 === e.nodeType ? e : e.ownerDocument;
              "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
              "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, { is: d.is }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = true : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
              a[Of] = b2;
              a[Pf] = d;
              zj(a, b2, false, false);
              b2.stateNode = a;
              a: {
                g = vb(c, d);
                switch (c) {
                  case "dialog":
                    D$1("cancel", a);
                    D$1("close", a);
                    e = d;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D$1("load", a);
                    e = d;
                    break;
                  case "video":
                  case "audio":
                    for (e = 0; e < lf.length; e++) D$1(lf[e], a);
                    e = d;
                    break;
                  case "source":
                    D$1("error", a);
                    e = d;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D$1(
                      "error",
                      a
                    );
                    D$1("load", a);
                    e = d;
                    break;
                  case "details":
                    D$1("toggle", a);
                    e = d;
                    break;
                  case "input":
                    Za(a, d);
                    e = Ya(a, d);
                    D$1("invalid", a);
                    break;
                  case "option":
                    e = d;
                    break;
                  case "select":
                    a._wrapperState = { wasMultiple: !!d.multiple };
                    e = A({}, d, { value: void 0 });
                    D$1("invalid", a);
                    break;
                  case "textarea":
                    hb(a, d);
                    e = gb(a, d);
                    D$1("invalid", a);
                    break;
                  default:
                    e = d;
                }
                ub(c, e);
                h = e;
                for (f2 in h) if (h.hasOwnProperty(f2)) {
                  var k2 = h[f2];
                  "style" === f2 ? sb(a, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c || "" !== k2) && ob(a, k2) : "number" === typeof k2 && ob(a, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D$1("scroll", a) : null != k2 && ta(a, f2, k2, g));
                }
                switch (c) {
                  case "input":
                    Va(a);
                    db$1(a, d, false);
                    break;
                  case "textarea":
                    Va(a);
                    jb(a);
                    break;
                  case "option":
                    null != d.value && a.setAttribute("value", "" + Sa(d.value));
                    break;
                  case "select":
                    a.multiple = !!d.multiple;
                    f2 = d.value;
                    null != f2 ? fb(a, !!d.multiple, f2, false) : null != d.defaultValue && fb(
                      a,
                      !!d.multiple,
                      d.defaultValue,
                      true
                    );
                    break;
                  default:
                    "function" === typeof e.onClick && (a.onclick = Bf);
                }
                switch (c) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    d = !!d.autoFocus;
                    break a;
                  case "img":
                    d = true;
                    break a;
                  default:
                    d = false;
                }
              }
              d && (b2.flags |= 4);
            }
            null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
          }
          S$1(b2);
          return null;
        case 6:
          if (a && null != b2.stateNode) Cj(a, b2, a.memoizedProps, d);
          else {
            if ("string" !== typeof d && null === b2.stateNode) throw Error(p(166));
            c = xh(wh.current);
            xh(uh.current);
            if (Gg(b2)) {
              d = b2.stateNode;
              c = b2.memoizedProps;
              d[Of] = b2;
              if (f2 = d.nodeValue !== c) {
                if (a = xg, null !== a) switch (a.tag) {
                  case 3:
                    Af(d.nodeValue, c, 0 !== (a.mode & 1));
                    break;
                  case 5:
                    true !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
                }
              }
              f2 && (b2.flags |= 4);
            } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b2, b2.stateNode = d;
          }
          S$1(b2);
          return null;
        case 13:
          E(L);
          d = b2.memoizedState;
          if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
            if (I && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128)) Hg(), Ig(), b2.flags |= 98560, f2 = false;
            else if (f2 = Gg(b2), null !== d && null !== d.dehydrated) {
              if (null === a) {
                if (!f2) throw Error(p(318));
                f2 = b2.memoizedState;
                f2 = null !== f2 ? f2.dehydrated : null;
                if (!f2) throw Error(p(317));
                f2[Of] = b2;
              } else Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
              S$1(b2);
              f2 = false;
            } else null !== zg && (Fj(zg), zg = null), f2 = true;
            if (!f2) return b2.flags & 65536 ? b2 : null;
          }
          if (0 !== (b2.flags & 128)) return b2.lanes = c, b2;
          d = null !== d;
          d !== (null !== a && null !== a.memoizedState) && d && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a || 0 !== (L.current & 1) ? 0 === T && (T = 3) : tj()));
          null !== b2.updateQueue && (b2.flags |= 4);
          S$1(b2);
          return null;
        case 4:
          return zh(), Aj(a, b2), null === a && sf(b2.stateNode.containerInfo), S$1(b2), null;
        case 10:
          return ah(b2.type._context), S$1(b2), null;
        case 17:
          return Zf(b2.type) && $f(), S$1(b2), null;
        case 19:
          E(L);
          f2 = b2.memoizedState;
          if (null === f2) return S$1(b2), null;
          d = 0 !== (b2.flags & 128);
          g = f2.rendering;
          if (null === g) if (d) Dj(f2, false);
          else {
            if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b2.child; null !== a; ) {
              g = Ch(a);
              if (null !== g) {
                b2.flags |= 128;
                Dj(f2, false);
                d = g.updateQueue;
                null !== d && (b2.updateQueue = d, b2.flags |= 4);
                b2.subtreeFlags = 0;
                d = c;
                for (c = b2.child; null !== c; ) f2 = c, a = d, f2.flags &= 14680066, g = f2.alternate, null === g ? (f2.childLanes = 0, f2.lanes = a, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g.childLanes, f2.lanes = g.lanes, f2.child = g.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g.memoizedProps, f2.memoizedState = g.memoizedState, f2.updateQueue = g.updateQueue, f2.type = g.type, a = g.dependencies, f2.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;
                G(L, L.current & 1 | 2);
                return b2.child;
              }
              a = a.sibling;
            }
            null !== f2.tail && B() > Gj && (b2.flags |= 128, d = true, Dj(f2, false), b2.lanes = 4194304);
          }
          else {
            if (!d) if (a = Ch(g), null !== a) {
              if (b2.flags |= 128, d = true, c = a.updateQueue, null !== c && (b2.updateQueue = c, b2.flags |= 4), Dj(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g.alternate && !I) return S$1(b2), null;
            } else 2 * B() - f2.renderingStartTime > Gj && 1073741824 !== c && (b2.flags |= 128, d = true, Dj(f2, false), b2.lanes = 4194304);
            f2.isBackwards ? (g.sibling = b2.child, b2.child = g) : (c = f2.last, null !== c ? c.sibling = g : b2.child = g, f2.last = g);
          }
          if (null !== f2.tail) return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B(), b2.sibling = null, c = L.current, G(L, d ? c & 1 | 2 : c & 1), b2;
          S$1(b2);
          return null;
        case 22:
        case 23:
          return Hj(), d = null !== b2.memoizedState, null !== a && null !== a.memoizedState !== d && (b2.flags |= 8192), d && 0 !== (b2.mode & 1) ? 0 !== (fj & 1073741824) && (S$1(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S$1(b2), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(p(156, b2.tag));
    }
    function Ij(a, b2) {
      wg(b2);
      switch (b2.tag) {
        case 1:
          return Zf(b2.type) && $f(), a = b2.flags, a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
        case 3:
          return zh(), E(Wf), E(H), Eh(), a = b2.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b2.flags = a & -65537 | 128, b2) : null;
        case 5:
          return Bh(b2), null;
        case 13:
          E(L);
          a = b2.memoizedState;
          if (null !== a && null !== a.dehydrated) {
            if (null === b2.alternate) throw Error(p(340));
            Ig();
          }
          a = b2.flags;
          return a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
        case 19:
          return E(L), null;
        case 4:
          return zh(), null;
        case 10:
          return ah(b2.type._context), null;
        case 22:
        case 23:
          return Hj(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var Jj = false, U = false, Kj = "function" === typeof WeakSet ? WeakSet : Set, V = null;
    function Lj(a, b2) {
      var c = a.ref;
      if (null !== c) if ("function" === typeof c) try {
        c(null);
      } catch (d) {
        W(a, b2, d);
      }
      else c.current = null;
    }
    function Mj(a, b2, c) {
      try {
        c();
      } catch (d) {
        W(a, b2, d);
      }
    }
    var Nj = false;
    function Oj(a, b2) {
      Cf = dd;
      a = Me();
      if (Ne(a)) {
        if ("selectionStart" in a) var c = { start: a.selectionStart, end: a.selectionEnd };
        else a: {
          c = (c = a.ownerDocument) && c.defaultView || window;
          var d = c.getSelection && c.getSelection();
          if (d && 0 !== d.rangeCount) {
            c = d.anchorNode;
            var e = d.anchorOffset, f2 = d.focusNode;
            d = d.focusOffset;
            try {
              c.nodeType, f2.nodeType;
            } catch (F2) {
              c = null;
              break a;
            }
            var g = 0, h = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a, r2 = null;
            b: for (; ; ) {
              for (var y2; ; ) {
                q2 !== c || 0 !== e && 3 !== q2.nodeType || (h = g + e);
                q2 !== f2 || 0 !== d && 3 !== q2.nodeType || (k2 = g + d);
                3 === q2.nodeType && (g += q2.nodeValue.length);
                if (null === (y2 = q2.firstChild)) break;
                r2 = q2;
                q2 = y2;
              }
              for (; ; ) {
                if (q2 === a) break b;
                r2 === c && ++l2 === e && (h = g);
                r2 === f2 && ++m2 === d && (k2 = g);
                if (null !== (y2 = q2.nextSibling)) break;
                q2 = r2;
                r2 = q2.parentNode;
              }
              q2 = y2;
            }
            c = -1 === h || -1 === k2 ? null : { start: h, end: k2 };
          } else c = null;
        }
        c = c || { start: 0, end: 0 };
      } else c = null;
      Df = { focusedElem: a, selectionRange: c };
      dd = false;
      for (V = b2; null !== V; ) if (b2 = V, a = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a) a.return = b2, V = a;
      else for (; null !== V; ) {
        b2 = V;
        try {
          var n2 = b2.alternate;
          if (0 !== (b2.flags & 1024)) switch (b2.tag) {
            case 0:
            case 11:
            case 15:
              break;
            case 1:
              if (null !== n2) {
                var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Ci(b2.type, t2), J2);
                x2.__reactInternalSnapshotBeforeUpdate = w2;
              }
              break;
            case 3:
              var u2 = b2.stateNode.containerInfo;
              1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
              break;
            case 5:
            case 6:
            case 4:
            case 17:
              break;
            default:
              throw Error(p(163));
          }
        } catch (F2) {
          W(b2, b2.return, F2);
        }
        a = b2.sibling;
        if (null !== a) {
          a.return = b2.return;
          V = a;
          break;
        }
        V = b2.return;
      }
      n2 = Nj;
      Nj = false;
      return n2;
    }
    function Pj(a, b2, c) {
      var d = b2.updateQueue;
      d = null !== d ? d.lastEffect : null;
      if (null !== d) {
        var e = d = d.next;
        do {
          if ((e.tag & a) === a) {
            var f2 = e.destroy;
            e.destroy = void 0;
            void 0 !== f2 && Mj(b2, c, f2);
          }
          e = e.next;
        } while (e !== d);
      }
    }
    function Qj(a, b2) {
      b2 = b2.updateQueue;
      b2 = null !== b2 ? b2.lastEffect : null;
      if (null !== b2) {
        var c = b2 = b2.next;
        do {
          if ((c.tag & a) === a) {
            var d = c.create;
            c.destroy = d();
          }
          c = c.next;
        } while (c !== b2);
      }
    }
    function Rj(a) {
      var b2 = a.ref;
      if (null !== b2) {
        var c = a.stateNode;
        switch (a.tag) {
          case 5:
            a = c;
            break;
          default:
            a = c;
        }
        "function" === typeof b2 ? b2(a) : b2.current = a;
      }
    }
    function Sj(a) {
      var b2 = a.alternate;
      null !== b2 && (a.alternate = null, Sj(b2));
      a.child = null;
      a.deletions = null;
      a.sibling = null;
      5 === a.tag && (b2 = a.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
      a.stateNode = null;
      a.return = null;
      a.dependencies = null;
      a.memoizedProps = null;
      a.memoizedState = null;
      a.pendingProps = null;
      a.stateNode = null;
      a.updateQueue = null;
    }
    function Tj(a) {
      return 5 === a.tag || 3 === a.tag || 4 === a.tag;
    }
    function Uj(a) {
      a: for (; ; ) {
        for (; null === a.sibling; ) {
          if (null === a.return || Tj(a.return)) return null;
          a = a.return;
        }
        a.sibling.return = a.return;
        for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
          if (a.flags & 2) continue a;
          if (null === a.child || 4 === a.tag) continue a;
          else a.child.return = a, a = a.child;
        }
        if (!(a.flags & 2)) return a.stateNode;
      }
    }
    function Vj(a, b2, c) {
      var d = a.tag;
      if (5 === d || 6 === d) a = a.stateNode, b2 ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b2) : c.insertBefore(a, b2) : (8 === c.nodeType ? (b2 = c.parentNode, b2.insertBefore(a, c)) : (b2 = c, b2.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b2.onclick || (b2.onclick = Bf));
      else if (4 !== d && (a = a.child, null !== a)) for (Vj(a, b2, c), a = a.sibling; null !== a; ) Vj(a, b2, c), a = a.sibling;
    }
    function Wj(a, b2, c) {
      var d = a.tag;
      if (5 === d || 6 === d) a = a.stateNode, b2 ? c.insertBefore(a, b2) : c.appendChild(a);
      else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b2, c), a = a.sibling; null !== a; ) Wj(a, b2, c), a = a.sibling;
    }
    var X$1 = null, Xj = false;
    function Yj(a, b2, c) {
      for (c = c.child; null !== c; ) Zj(a, b2, c), c = c.sibling;
    }
    function Zj(a, b2, c) {
      if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
        lc.onCommitFiberUnmount(kc, c);
      } catch (h) {
      }
      switch (c.tag) {
        case 5:
          U || Lj(c, b2);
        case 6:
          var d = X$1, e = Xj;
          X$1 = null;
          Yj(a, b2, c);
          X$1 = d;
          Xj = e;
          null !== X$1 && (Xj ? (a = X$1, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X$1.removeChild(c.stateNode));
          break;
        case 18:
          null !== X$1 && (Xj ? (a = X$1, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X$1, c.stateNode));
          break;
        case 4:
          d = X$1;
          e = Xj;
          X$1 = c.stateNode.containerInfo;
          Xj = true;
          Yj(a, b2, c);
          X$1 = d;
          Xj = e;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
            e = d = d.next;
            do {
              var f2 = e, g = f2.destroy;
              f2 = f2.tag;
              void 0 !== g && (0 !== (f2 & 2) ? Mj(c, b2, g) : 0 !== (f2 & 4) && Mj(c, b2, g));
              e = e.next;
            } while (e !== d);
          }
          Yj(a, b2, c);
          break;
        case 1:
          if (!U && (Lj(c, b2), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
            d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
          } catch (h) {
            W(c, b2, h);
          }
          Yj(a, b2, c);
          break;
        case 21:
          Yj(a, b2, c);
          break;
        case 22:
          c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Yj(a, b2, c), U = d) : Yj(a, b2, c);
          break;
        default:
          Yj(a, b2, c);
      }
    }
    function ak(a) {
      var b2 = a.updateQueue;
      if (null !== b2) {
        a.updateQueue = null;
        var c = a.stateNode;
        null === c && (c = a.stateNode = new Kj());
        b2.forEach(function(b3) {
          var d = bk.bind(null, a, b3);
          c.has(b3) || (c.add(b3), b3.then(d, d));
        });
      }
    }
    function ck(a, b2) {
      var c = b2.deletions;
      if (null !== c) for (var d = 0; d < c.length; d++) {
        var e = c[d];
        try {
          var f2 = a, g = b2, h = g;
          a: for (; null !== h; ) {
            switch (h.tag) {
              case 5:
                X$1 = h.stateNode;
                Xj = false;
                break a;
              case 3:
                X$1 = h.stateNode.containerInfo;
                Xj = true;
                break a;
              case 4:
                X$1 = h.stateNode.containerInfo;
                Xj = true;
                break a;
            }
            h = h.return;
          }
          if (null === X$1) throw Error(p(160));
          Zj(f2, g, e);
          X$1 = null;
          Xj = false;
          var k2 = e.alternate;
          null !== k2 && (k2.return = null);
          e.return = null;
        } catch (l2) {
          W(e, b2, l2);
        }
      }
      if (b2.subtreeFlags & 12854) for (b2 = b2.child; null !== b2; ) dk(b2, a), b2 = b2.sibling;
    }
    function dk(a, b2) {
      var c = a.alternate, d = a.flags;
      switch (a.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          ck(b2, a);
          ek(a);
          if (d & 4) {
            try {
              Pj(3, a, a.return), Qj(3, a);
            } catch (t2) {
              W(a, a.return, t2);
            }
            try {
              Pj(5, a, a.return);
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          break;
        case 1:
          ck(b2, a);
          ek(a);
          d & 512 && null !== c && Lj(c, c.return);
          break;
        case 5:
          ck(b2, a);
          ek(a);
          d & 512 && null !== c && Lj(c, c.return);
          if (a.flags & 32) {
            var e = a.stateNode;
            try {
              ob(e, "");
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          if (d & 4 && (e = a.stateNode, null != e)) {
            var f2 = a.memoizedProps, g = null !== c ? c.memoizedProps : f2, h = a.type, k2 = a.updateQueue;
            a.updateQueue = null;
            if (null !== k2) try {
              "input" === h && "radio" === f2.type && null != f2.name && ab(e, f2);
              vb(h, g);
              var l2 = vb(h, f2);
              for (g = 0; g < k2.length; g += 2) {
                var m2 = k2[g], q2 = k2[g + 1];
                "style" === m2 ? sb(e, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e, q2) : "children" === m2 ? ob(e, q2) : ta(e, m2, q2, l2);
              }
              switch (h) {
                case "input":
                  bb(e, f2);
                  break;
                case "textarea":
                  ib(e, f2);
                  break;
                case "select":
                  var r2 = e._wrapperState.wasMultiple;
                  e._wrapperState.wasMultiple = !!f2.multiple;
                  var y2 = f2.value;
                  null != y2 ? fb(e, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                    e,
                    !!f2.multiple,
                    f2.defaultValue,
                    true
                  ) : fb(e, !!f2.multiple, f2.multiple ? [] : "", false));
              }
              e[Pf] = f2;
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          break;
        case 6:
          ck(b2, a);
          ek(a);
          if (d & 4) {
            if (null === a.stateNode) throw Error(p(162));
            e = a.stateNode;
            f2 = a.memoizedProps;
            try {
              e.nodeValue = f2;
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          break;
        case 3:
          ck(b2, a);
          ek(a);
          if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
            bd(b2.containerInfo);
          } catch (t2) {
            W(a, a.return, t2);
          }
          break;
        case 4:
          ck(b2, a);
          ek(a);
          break;
        case 13:
          ck(b2, a);
          ek(a);
          e = a.child;
          e.flags & 8192 && (f2 = null !== e.memoizedState, e.stateNode.isHidden = f2, !f2 || null !== e.alternate && null !== e.alternate.memoizedState || (fk = B()));
          d & 4 && ak(a);
          break;
        case 22:
          m2 = null !== c && null !== c.memoizedState;
          a.mode & 1 ? (U = (l2 = U) || m2, ck(b2, a), U = l2) : ck(b2, a);
          ek(a);
          if (d & 8192) {
            l2 = null !== a.memoizedState;
            if ((a.stateNode.isHidden = l2) && !m2 && 0 !== (a.mode & 1)) for (V = a, m2 = a.child; null !== m2; ) {
              for (q2 = V = m2; null !== V; ) {
                r2 = V;
                y2 = r2.child;
                switch (r2.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    Pj(4, r2, r2.return);
                    break;
                  case 1:
                    Lj(r2, r2.return);
                    var n2 = r2.stateNode;
                    if ("function" === typeof n2.componentWillUnmount) {
                      d = r2;
                      c = r2.return;
                      try {
                        b2 = d, n2.props = b2.memoizedProps, n2.state = b2.memoizedState, n2.componentWillUnmount();
                      } catch (t2) {
                        W(d, c, t2);
                      }
                    }
                    break;
                  case 5:
                    Lj(r2, r2.return);
                    break;
                  case 22:
                    if (null !== r2.memoizedState) {
                      gk(q2);
                      continue;
                    }
                }
                null !== y2 ? (y2.return = r2, V = y2) : gk(q2);
              }
              m2 = m2.sibling;
            }
            a: for (m2 = null, q2 = a; ; ) {
              if (5 === q2.tag) {
                if (null === m2) {
                  m2 = q2;
                  try {
                    e = q2.stateNode, l2 ? (f2 = e.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h = q2.stateNode, k2 = q2.memoizedProps.style, g = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h.style.display = rb("display", g));
                  } catch (t2) {
                    W(a, a.return, t2);
                  }
                }
              } else if (6 === q2.tag) {
                if (null === m2) try {
                  q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                } catch (t2) {
                  W(a, a.return, t2);
                }
              } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a) && null !== q2.child) {
                q2.child.return = q2;
                q2 = q2.child;
                continue;
              }
              if (q2 === a) break a;
              for (; null === q2.sibling; ) {
                if (null === q2.return || q2.return === a) break a;
                m2 === q2 && (m2 = null);
                q2 = q2.return;
              }
              m2 === q2 && (m2 = null);
              q2.sibling.return = q2.return;
              q2 = q2.sibling;
            }
          }
          break;
        case 19:
          ck(b2, a);
          ek(a);
          d & 4 && ak(a);
          break;
        case 21:
          break;
        default:
          ck(
            b2,
            a
          ), ek(a);
      }
    }
    function ek(a) {
      var b2 = a.flags;
      if (b2 & 2) {
        try {
          a: {
            for (var c = a.return; null !== c; ) {
              if (Tj(c)) {
                var d = c;
                break a;
              }
              c = c.return;
            }
            throw Error(p(160));
          }
          switch (d.tag) {
            case 5:
              var e = d.stateNode;
              d.flags & 32 && (ob(e, ""), d.flags &= -33);
              var f2 = Uj(a);
              Wj(a, f2, e);
              break;
            case 3:
            case 4:
              var g = d.stateNode.containerInfo, h = Uj(a);
              Vj(a, h, g);
              break;
            default:
              throw Error(p(161));
          }
        } catch (k2) {
          W(a, a.return, k2);
        }
        a.flags &= -3;
      }
      b2 & 4096 && (a.flags &= -4097);
    }
    function hk(a, b2, c) {
      V = a;
      ik(a);
    }
    function ik(a, b2, c) {
      for (var d = 0 !== (a.mode & 1); null !== V; ) {
        var e = V, f2 = e.child;
        if (22 === e.tag && d) {
          var g = null !== e.memoizedState || Jj;
          if (!g) {
            var h = e.alternate, k2 = null !== h && null !== h.memoizedState || U;
            h = Jj;
            var l2 = U;
            Jj = g;
            if ((U = k2) && !l2) for (V = e; null !== V; ) g = V, k2 = g.child, 22 === g.tag && null !== g.memoizedState ? jk(e) : null !== k2 ? (k2.return = g, V = k2) : jk(e);
            for (; null !== f2; ) V = f2, ik(f2), f2 = f2.sibling;
            V = e;
            Jj = h;
            U = l2;
          }
          kk(a);
        } else 0 !== (e.subtreeFlags & 8772) && null !== f2 ? (f2.return = e, V = f2) : kk(a);
      }
    }
    function kk(a) {
      for (; null !== V; ) {
        var b2 = V;
        if (0 !== (b2.flags & 8772)) {
          var c = b2.alternate;
          try {
            if (0 !== (b2.flags & 8772)) switch (b2.tag) {
              case 0:
              case 11:
              case 15:
                U || Qj(5, b2);
                break;
              case 1:
                var d = b2.stateNode;
                if (b2.flags & 4 && !U) if (null === c) d.componentDidMount();
                else {
                  var e = b2.elementType === b2.type ? c.memoizedProps : Ci(b2.type, c.memoizedProps);
                  d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                }
                var f2 = b2.updateQueue;
                null !== f2 && sh(b2, f2, d);
                break;
              case 3:
                var g = b2.updateQueue;
                if (null !== g) {
                  c = null;
                  if (null !== b2.child) switch (b2.child.tag) {
                    case 5:
                      c = b2.child.stateNode;
                      break;
                    case 1:
                      c = b2.child.stateNode;
                  }
                  sh(b2, g, c);
                }
                break;
              case 5:
                var h = b2.stateNode;
                if (null === c && b2.flags & 4) {
                  c = h;
                  var k2 = b2.memoizedProps;
                  switch (b2.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      k2.autoFocus && c.focus();
                      break;
                    case "img":
                      k2.src && (c.src = k2.src);
                  }
                }
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (null === b2.memoizedState) {
                  var l2 = b2.alternate;
                  if (null !== l2) {
                    var m2 = l2.memoizedState;
                    if (null !== m2) {
                      var q2 = m2.dehydrated;
                      null !== q2 && bd(q2);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error(p(163));
            }
            U || b2.flags & 512 && Rj(b2);
          } catch (r2) {
            W(b2, b2.return, r2);
          }
        }
        if (b2 === a) {
          V = null;
          break;
        }
        c = b2.sibling;
        if (null !== c) {
          c.return = b2.return;
          V = c;
          break;
        }
        V = b2.return;
      }
    }
    function gk(a) {
      for (; null !== V; ) {
        var b2 = V;
        if (b2 === a) {
          V = null;
          break;
        }
        var c = b2.sibling;
        if (null !== c) {
          c.return = b2.return;
          V = c;
          break;
        }
        V = b2.return;
      }
    }
    function jk(a) {
      for (; null !== V; ) {
        var b2 = V;
        try {
          switch (b2.tag) {
            case 0:
            case 11:
            case 15:
              var c = b2.return;
              try {
                Qj(4, b2);
              } catch (k2) {
                W(b2, c, k2);
              }
              break;
            case 1:
              var d = b2.stateNode;
              if ("function" === typeof d.componentDidMount) {
                var e = b2.return;
                try {
                  d.componentDidMount();
                } catch (k2) {
                  W(b2, e, k2);
                }
              }
              var f2 = b2.return;
              try {
                Rj(b2);
              } catch (k2) {
                W(b2, f2, k2);
              }
              break;
            case 5:
              var g = b2.return;
              try {
                Rj(b2);
              } catch (k2) {
                W(b2, g, k2);
              }
          }
        } catch (k2) {
          W(b2, b2.return, k2);
        }
        if (b2 === a) {
          V = null;
          break;
        }
        var h = b2.sibling;
        if (null !== h) {
          h.return = b2.return;
          V = h;
          break;
        }
        V = b2.return;
      }
    }
    var lk = Math.ceil, mk = ua.ReactCurrentDispatcher, nk = ua.ReactCurrentOwner, ok = ua.ReactCurrentBatchConfig, K = 0, Q = null, Y = null, Z = 0, fj = 0, ej = Uf(0), T = 0, pk = null, rh = 0, qk = 0, rk = 0, sk = null, tk = null, fk = 0, Gj = Infinity, uk = null, Oi = false, Pi = null, Ri = null, vk = false, wk = null, xk = 0, yk = 0, zk = null, Ak = -1, Bk = 0;
    function R() {
      return 0 !== (K & 6) ? B() : -1 !== Ak ? Ak : Ak = B();
    }
    function yi(a) {
      if (0 === (a.mode & 1)) return 1;
      if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
      if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
      a = C$1;
      if (0 !== a) return a;
      a = window.event;
      a = void 0 === a ? 16 : jd(a.type);
      return a;
    }
    function gi(a, b2, c, d) {
      if (50 < yk) throw yk = 0, zk = null, Error(p(185));
      Ac(a, c, d);
      if (0 === (K & 2) || a !== Q) a === Q && (0 === (K & 2) && (qk |= c), 4 === T && Ck(a, Z)), Dk(a, d), 1 === c && 0 === K && 0 === (b2.mode & 1) && (Gj = B() + 500, fg && jg());
    }
    function Dk(a, b2) {
      var c = a.callbackNode;
      wc(a, b2);
      var d = uc(a, a === Q ? Z : 0);
      if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;
      else if (b2 = d & -d, a.callbackPriority !== b2) {
        null != c && bc(c);
        if (1 === b2) 0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function() {
          0 === (K & 6) && jg();
        }), c = null;
        else {
          switch (Dc(d)) {
            case 1:
              c = fc;
              break;
            case 4:
              c = gc;
              break;
            case 16:
              c = hc;
              break;
            case 536870912:
              c = jc;
              break;
            default:
              c = hc;
          }
          c = Fk(c, Gk.bind(null, a));
        }
        a.callbackPriority = b2;
        a.callbackNode = c;
      }
    }
    function Gk(a, b2) {
      Ak = -1;
      Bk = 0;
      if (0 !== (K & 6)) throw Error(p(327));
      var c = a.callbackNode;
      if (Hk() && a.callbackNode !== c) return null;
      var d = uc(a, a === Q ? Z : 0);
      if (0 === d) return null;
      if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b2) b2 = Ik(a, d);
      else {
        b2 = d;
        var e = K;
        K |= 2;
        var f2 = Jk();
        if (Q !== a || Z !== b2) uk = null, Gj = B() + 500, Kk(a, b2);
        do
          try {
            Lk();
            break;
          } catch (h) {
            Mk(a, h);
          }
        while (1);
        $g();
        mk.current = f2;
        K = e;
        null !== Y ? b2 = 0 : (Q = null, Z = 0, b2 = T);
      }
      if (0 !== b2) {
        2 === b2 && (e = xc(a), 0 !== e && (d = e, b2 = Nk(a, e)));
        if (1 === b2) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
        if (6 === b2) Ck(a, d);
        else {
          e = a.current.alternate;
          if (0 === (d & 30) && !Ok(e) && (b2 = Ik(a, d), 2 === b2 && (f2 = xc(a), 0 !== f2 && (d = f2, b2 = Nk(a, f2))), 1 === b2)) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
          a.finishedWork = e;
          a.finishedLanes = d;
          switch (b2) {
            case 0:
            case 1:
              throw Error(p(345));
            case 2:
              Pk(a, tk, uk);
              break;
            case 3:
              Ck(a, d);
              if ((d & 130023424) === d && (b2 = fk + 500 - B(), 10 < b2)) {
                if (0 !== uc(a, 0)) break;
                e = a.suspendedLanes;
                if ((e & d) !== d) {
                  R();
                  a.pingedLanes |= a.suspendedLanes & e;
                  break;
                }
                a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b2);
                break;
              }
              Pk(a, tk, uk);
              break;
            case 4:
              Ck(a, d);
              if ((d & 4194240) === d) break;
              b2 = a.eventTimes;
              for (e = -1; 0 < d; ) {
                var g = 31 - oc(d);
                f2 = 1 << g;
                g = b2[g];
                g > e && (e = g);
                d &= ~f2;
              }
              d = e;
              d = B() - d;
              d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * lk(d / 1960)) - d;
              if (10 < d) {
                a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
                break;
              }
              Pk(a, tk, uk);
              break;
            case 5:
              Pk(a, tk, uk);
              break;
            default:
              throw Error(p(329));
          }
        }
      }
      Dk(a, B());
      return a.callbackNode === c ? Gk.bind(null, a) : null;
    }
    function Nk(a, b2) {
      var c = sk;
      a.current.memoizedState.isDehydrated && (Kk(a, b2).flags |= 256);
      a = Ik(a, b2);
      2 !== a && (b2 = tk, tk = c, null !== b2 && Fj(b2));
      return a;
    }
    function Fj(a) {
      null === tk ? tk = a : tk.push.apply(tk, a);
    }
    function Ok(a) {
      for (var b2 = a; ; ) {
        if (b2.flags & 16384) {
          var c = b2.updateQueue;
          if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
            var e = c[d], f2 = e.getSnapshot;
            e = e.value;
            try {
              if (!He(f2(), e)) return false;
            } catch (g) {
              return false;
            }
          }
        }
        c = b2.child;
        if (b2.subtreeFlags & 16384 && null !== c) c.return = b2, b2 = c;
        else {
          if (b2 === a) break;
          for (; null === b2.sibling; ) {
            if (null === b2.return || b2.return === a) return true;
            b2 = b2.return;
          }
          b2.sibling.return = b2.return;
          b2 = b2.sibling;
        }
      }
      return true;
    }
    function Ck(a, b2) {
      b2 &= ~rk;
      b2 &= ~qk;
      a.suspendedLanes |= b2;
      a.pingedLanes &= ~b2;
      for (a = a.expirationTimes; 0 < b2; ) {
        var c = 31 - oc(b2), d = 1 << c;
        a[c] = -1;
        b2 &= ~d;
      }
    }
    function Ek(a) {
      if (0 !== (K & 6)) throw Error(p(327));
      Hk();
      var b2 = uc(a, 0);
      if (0 === (b2 & 1)) return Dk(a, B()), null;
      var c = Ik(a, b2);
      if (0 !== a.tag && 2 === c) {
        var d = xc(a);
        0 !== d && (b2 = d, c = Nk(a, d));
      }
      if (1 === c) throw c = pk, Kk(a, 0), Ck(a, b2), Dk(a, B()), c;
      if (6 === c) throw Error(p(345));
      a.finishedWork = a.current.alternate;
      a.finishedLanes = b2;
      Pk(a, tk, uk);
      Dk(a, B());
      return null;
    }
    function Qk(a, b2) {
      var c = K;
      K |= 1;
      try {
        return a(b2);
      } finally {
        K = c, 0 === K && (Gj = B() + 500, fg && jg());
      }
    }
    function Rk(a) {
      null !== wk && 0 === wk.tag && 0 === (K & 6) && Hk();
      var b2 = K;
      K |= 1;
      var c = ok.transition, d = C$1;
      try {
        if (ok.transition = null, C$1 = 1, a) return a();
      } finally {
        C$1 = d, ok.transition = c, K = b2, 0 === (K & 6) && jg();
      }
    }
    function Hj() {
      fj = ej.current;
      E(ej);
    }
    function Kk(a, b2) {
      a.finishedWork = null;
      a.finishedLanes = 0;
      var c = a.timeoutHandle;
      -1 !== c && (a.timeoutHandle = -1, Gf(c));
      if (null !== Y) for (c = Y.return; null !== c; ) {
        var d = c;
        wg(d);
        switch (d.tag) {
          case 1:
            d = d.type.childContextTypes;
            null !== d && void 0 !== d && $f();
            break;
          case 3:
            zh();
            E(Wf);
            E(H);
            Eh();
            break;
          case 5:
            Bh(d);
            break;
          case 4:
            zh();
            break;
          case 13:
            E(L);
            break;
          case 19:
            E(L);
            break;
          case 10:
            ah(d.type._context);
            break;
          case 22:
          case 23:
            Hj();
        }
        c = c.return;
      }
      Q = a;
      Y = a = Pg(a.current, null);
      Z = fj = b2;
      T = 0;
      pk = null;
      rk = qk = rh = 0;
      tk = sk = null;
      if (null !== fh) {
        for (b2 = 0; b2 < fh.length; b2++) if (c = fh[b2], d = c.interleaved, null !== d) {
          c.interleaved = null;
          var e = d.next, f2 = c.pending;
          if (null !== f2) {
            var g = f2.next;
            f2.next = e;
            d.next = g;
          }
          c.pending = d;
        }
        fh = null;
      }
      return a;
    }
    function Mk(a, b2) {
      do {
        var c = Y;
        try {
          $g();
          Fh.current = Rh;
          if (Ih) {
            for (var d = M.memoizedState; null !== d; ) {
              var e = d.queue;
              null !== e && (e.pending = null);
              d = d.next;
            }
            Ih = false;
          }
          Hh = 0;
          O = N = M = null;
          Jh = false;
          Kh = 0;
          nk.current = null;
          if (null === c || null === c.return) {
            T = 1;
            pk = b2;
            Y = null;
            break;
          }
          a: {
            var f2 = a, g = c.return, h = c, k2 = b2;
            b2 = Z;
            h.flags |= 32768;
            if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
              var l2 = k2, m2 = h, q2 = m2.tag;
              if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
                var r2 = m2.alternate;
                r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
              }
              var y2 = Ui(g);
              if (null !== y2) {
                y2.flags &= -257;
                Vi(y2, g, h, f2, b2);
                y2.mode & 1 && Si(f2, l2, b2);
                b2 = y2;
                k2 = l2;
                var n2 = b2.updateQueue;
                if (null === n2) {
                  var t2 = /* @__PURE__ */ new Set();
                  t2.add(k2);
                  b2.updateQueue = t2;
                } else n2.add(k2);
                break a;
              } else {
                if (0 === (b2 & 1)) {
                  Si(f2, l2, b2);
                  tj();
                  break a;
                }
                k2 = Error(p(426));
              }
            } else if (I && h.mode & 1) {
              var J2 = Ui(g);
              if (null !== J2) {
                0 === (J2.flags & 65536) && (J2.flags |= 256);
                Vi(J2, g, h, f2, b2);
                Jg(Ji(k2, h));
                break a;
              }
            }
            f2 = k2 = Ji(k2, h);
            4 !== T && (T = 2);
            null === sk ? sk = [f2] : sk.push(f2);
            f2 = g;
            do {
              switch (f2.tag) {
                case 3:
                  f2.flags |= 65536;
                  b2 &= -b2;
                  f2.lanes |= b2;
                  var x2 = Ni(f2, k2, b2);
                  ph(f2, x2);
                  break a;
                case 1:
                  h = k2;
                  var w2 = f2.type, u2 = f2.stateNode;
                  if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Ri || !Ri.has(u2)))) {
                    f2.flags |= 65536;
                    b2 &= -b2;
                    f2.lanes |= b2;
                    var F2 = Qi(f2, h, b2);
                    ph(f2, F2);
                    break a;
                  }
              }
              f2 = f2.return;
            } while (null !== f2);
          }
          Sk(c);
        } catch (na) {
          b2 = na;
          Y === c && null !== c && (Y = c = c.return);
          continue;
        }
        break;
      } while (1);
    }
    function Jk() {
      var a = mk.current;
      mk.current = Rh;
      return null === a ? Rh : a;
    }
    function tj() {
      if (0 === T || 3 === T || 2 === T) T = 4;
      null === Q || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q, Z);
    }
    function Ik(a, b2) {
      var c = K;
      K |= 2;
      var d = Jk();
      if (Q !== a || Z !== b2) uk = null, Kk(a, b2);
      do
        try {
          Tk();
          break;
        } catch (e) {
          Mk(a, e);
        }
      while (1);
      $g();
      K = c;
      mk.current = d;
      if (null !== Y) throw Error(p(261));
      Q = null;
      Z = 0;
      return T;
    }
    function Tk() {
      for (; null !== Y; ) Uk(Y);
    }
    function Lk() {
      for (; null !== Y && !cc(); ) Uk(Y);
    }
    function Uk(a) {
      var b2 = Vk(a.alternate, a, fj);
      a.memoizedProps = a.pendingProps;
      null === b2 ? Sk(a) : Y = b2;
      nk.current = null;
    }
    function Sk(a) {
      var b2 = a;
      do {
        var c = b2.alternate;
        a = b2.return;
        if (0 === (b2.flags & 32768)) {
          if (c = Ej(c, b2, fj), null !== c) {
            Y = c;
            return;
          }
        } else {
          c = Ij(c, b2);
          if (null !== c) {
            c.flags &= 32767;
            Y = c;
            return;
          }
          if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
          else {
            T = 6;
            Y = null;
            return;
          }
        }
        b2 = b2.sibling;
        if (null !== b2) {
          Y = b2;
          return;
        }
        Y = b2 = a;
      } while (null !== b2);
      0 === T && (T = 5);
    }
    function Pk(a, b2, c) {
      var d = C$1, e = ok.transition;
      try {
        ok.transition = null, C$1 = 1, Wk(a, b2, c, d);
      } finally {
        ok.transition = e, C$1 = d;
      }
      return null;
    }
    function Wk(a, b2, c, d) {
      do
        Hk();
      while (null !== wk);
      if (0 !== (K & 6)) throw Error(p(327));
      c = a.finishedWork;
      var e = a.finishedLanes;
      if (null === c) return null;
      a.finishedWork = null;
      a.finishedLanes = 0;
      if (c === a.current) throw Error(p(177));
      a.callbackNode = null;
      a.callbackPriority = 0;
      var f2 = c.lanes | c.childLanes;
      Bc(a, f2);
      a === Q && (Y = Q = null, Z = 0);
      0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || vk || (vk = true, Fk(hc, function() {
        Hk();
        return null;
      }));
      f2 = 0 !== (c.flags & 15990);
      if (0 !== (c.subtreeFlags & 15990) || f2) {
        f2 = ok.transition;
        ok.transition = null;
        var g = C$1;
        C$1 = 1;
        var h = K;
        K |= 4;
        nk.current = null;
        Oj(a, c);
        dk(c, a);
        Oe(Df);
        dd = !!Cf;
        Df = Cf = null;
        a.current = c;
        hk(c);
        dc();
        K = h;
        C$1 = g;
        ok.transition = f2;
      } else a.current = c;
      vk && (vk = false, wk = a, xk = e);
      f2 = a.pendingLanes;
      0 === f2 && (Ri = null);
      mc(c.stateNode);
      Dk(a, B());
      if (null !== b2) for (d = a.onRecoverableError, c = 0; c < b2.length; c++) e = b2[c], d(e.value, { componentStack: e.stack, digest: e.digest });
      if (Oi) throw Oi = false, a = Pi, Pi = null, a;
      0 !== (xk & 1) && 0 !== a.tag && Hk();
      f2 = a.pendingLanes;
      0 !== (f2 & 1) ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0;
      jg();
      return null;
    }
    function Hk() {
      if (null !== wk) {
        var a = Dc(xk), b2 = ok.transition, c = C$1;
        try {
          ok.transition = null;
          C$1 = 16 > a ? 16 : a;
          if (null === wk) var d = false;
          else {
            a = wk;
            wk = null;
            xk = 0;
            if (0 !== (K & 6)) throw Error(p(331));
            var e = K;
            K |= 4;
            for (V = a.current; null !== V; ) {
              var f2 = V, g = f2.child;
              if (0 !== (V.flags & 16)) {
                var h = f2.deletions;
                if (null !== h) {
                  for (var k2 = 0; k2 < h.length; k2++) {
                    var l2 = h[k2];
                    for (V = l2; null !== V; ) {
                      var m2 = V;
                      switch (m2.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Pj(8, m2, f2);
                      }
                      var q2 = m2.child;
                      if (null !== q2) q2.return = m2, V = q2;
                      else for (; null !== V; ) {
                        m2 = V;
                        var r2 = m2.sibling, y2 = m2.return;
                        Sj(m2);
                        if (m2 === l2) {
                          V = null;
                          break;
                        }
                        if (null !== r2) {
                          r2.return = y2;
                          V = r2;
                          break;
                        }
                        V = y2;
                      }
                    }
                  }
                  var n2 = f2.alternate;
                  if (null !== n2) {
                    var t2 = n2.child;
                    if (null !== t2) {
                      n2.child = null;
                      do {
                        var J2 = t2.sibling;
                        t2.sibling = null;
                        t2 = J2;
                      } while (null !== t2);
                    }
                  }
                  V = f2;
                }
              }
              if (0 !== (f2.subtreeFlags & 2064) && null !== g) g.return = f2, V = g;
              else b: for (; null !== V; ) {
                f2 = V;
                if (0 !== (f2.flags & 2048)) switch (f2.tag) {
                  case 0:
                  case 11:
                  case 15:
                    Pj(9, f2, f2.return);
                }
                var x2 = f2.sibling;
                if (null !== x2) {
                  x2.return = f2.return;
                  V = x2;
                  break b;
                }
                V = f2.return;
              }
            }
            var w2 = a.current;
            for (V = w2; null !== V; ) {
              g = V;
              var u2 = g.child;
              if (0 !== (g.subtreeFlags & 2064) && null !== u2) u2.return = g, V = u2;
              else b: for (g = w2; null !== V; ) {
                h = V;
                if (0 !== (h.flags & 2048)) try {
                  switch (h.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(9, h);
                  }
                } catch (na) {
                  W(h, h.return, na);
                }
                if (h === g) {
                  V = null;
                  break b;
                }
                var F2 = h.sibling;
                if (null !== F2) {
                  F2.return = h.return;
                  V = F2;
                  break b;
                }
                V = h.return;
              }
            }
            K = e;
            jg();
            if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
              lc.onPostCommitFiberRoot(kc, a);
            } catch (na) {
            }
            d = true;
          }
          return d;
        } finally {
          C$1 = c, ok.transition = b2;
        }
      }
      return false;
    }
    function Xk(a, b2, c) {
      b2 = Ji(c, b2);
      b2 = Ni(a, b2, 1);
      a = nh(a, b2, 1);
      b2 = R();
      null !== a && (Ac(a, 1, b2), Dk(a, b2));
    }
    function W(a, b2, c) {
      if (3 === a.tag) Xk(a, a, c);
      else for (; null !== b2; ) {
        if (3 === b2.tag) {
          Xk(b2, a, c);
          break;
        } else if (1 === b2.tag) {
          var d = b2.stateNode;
          if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ri || !Ri.has(d))) {
            a = Ji(c, a);
            a = Qi(b2, a, 1);
            b2 = nh(b2, a, 1);
            a = R();
            null !== b2 && (Ac(b2, 1, a), Dk(b2, a));
            break;
          }
        }
        b2 = b2.return;
      }
    }
    function Ti(a, b2, c) {
      var d = a.pingCache;
      null !== d && d.delete(b2);
      b2 = R();
      a.pingedLanes |= a.suspendedLanes & c;
      Q === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - fk ? Kk(a, 0) : rk |= c);
      Dk(a, b2);
    }
    function Yk(a, b2) {
      0 === b2 && (0 === (a.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
      var c = R();
      a = ih(a, b2);
      null !== a && (Ac(a, b2, c), Dk(a, c));
    }
    function uj(a) {
      var b2 = a.memoizedState, c = 0;
      null !== b2 && (c = b2.retryLane);
      Yk(a, c);
    }
    function bk(a, b2) {
      var c = 0;
      switch (a.tag) {
        case 13:
          var d = a.stateNode;
          var e = a.memoizedState;
          null !== e && (c = e.retryLane);
          break;
        case 19:
          d = a.stateNode;
          break;
        default:
          throw Error(p(314));
      }
      null !== d && d.delete(b2);
      Yk(a, c);
    }
    var Vk;
    Vk = function(a, b2, c) {
      if (null !== a) if (a.memoizedProps !== b2.pendingProps || Wf.current) dh = true;
      else {
        if (0 === (a.lanes & c) && 0 === (b2.flags & 128)) return dh = false, yj(a, b2, c);
        dh = 0 !== (a.flags & 131072) ? true : false;
      }
      else dh = false, I && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
      b2.lanes = 0;
      switch (b2.tag) {
        case 2:
          var d = b2.type;
          ij(a, b2);
          a = b2.pendingProps;
          var e = Yf(b2, H.current);
          ch(b2, c);
          e = Nh(null, b2, d, a, e, c);
          var f2 = Sh();
          b2.flags |= 1;
          "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, kh(b2), e.updater = Ei, b2.stateNode = e, e._reactInternals = b2, Ii(b2, d, a, c), b2 = jj(null, b2, d, true, f2, c)) : (b2.tag = 0, I && f2 && vg(b2), Xi(null, b2, e, c), b2 = b2.child);
          return b2;
        case 16:
          d = b2.elementType;
          a: {
            ij(a, b2);
            a = b2.pendingProps;
            e = d._init;
            d = e(d._payload);
            b2.type = d;
            e = b2.tag = Zk(d);
            a = Ci(d, a);
            switch (e) {
              case 0:
                b2 = cj(null, b2, d, a, c);
                break a;
              case 1:
                b2 = hj(null, b2, d, a, c);
                break a;
              case 11:
                b2 = Yi(null, b2, d, a, c);
                break a;
              case 14:
                b2 = $i(null, b2, d, Ci(d.type, a), c);
                break a;
            }
            throw Error(p(
              306,
              d,
              ""
            ));
          }
          return b2;
        case 0:
          return d = b2.type, e = b2.pendingProps, e = b2.elementType === d ? e : Ci(d, e), cj(a, b2, d, e, c);
        case 1:
          return d = b2.type, e = b2.pendingProps, e = b2.elementType === d ? e : Ci(d, e), hj(a, b2, d, e, c);
        case 3:
          a: {
            kj(b2);
            if (null === a) throw Error(p(387));
            d = b2.pendingProps;
            f2 = b2.memoizedState;
            e = f2.element;
            lh(a, b2);
            qh(b2, d, null, c);
            var g = b2.memoizedState;
            d = g.element;
            if (f2.isDehydrated) if (f2 = { element: d, isDehydrated: false, cache: g.cache, pendingSuspenseBoundaries: g.pendingSuspenseBoundaries, transitions: g.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
              e = Ji(Error(p(423)), b2);
              b2 = lj(a, b2, d, c, e);
              break a;
            } else if (d !== e) {
              e = Ji(Error(p(424)), b2);
              b2 = lj(a, b2, d, c, e);
              break a;
            } else for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I = true, zg = null, c = Vg(b2, null, d, c), b2.child = c; c; ) c.flags = c.flags & -3 | 4096, c = c.sibling;
            else {
              Ig();
              if (d === e) {
                b2 = Zi(a, b2, c);
                break a;
              }
              Xi(a, b2, d, c);
            }
            b2 = b2.child;
          }
          return b2;
        case 5:
          return Ah(b2), null === a && Eg(b2), d = b2.type, e = b2.pendingProps, f2 = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f2 && Ef(d, f2) && (b2.flags |= 32), gj(a, b2), Xi(a, b2, g, c), b2.child;
        case 6:
          return null === a && Eg(b2), null;
        case 13:
          return oj(a, b2, c);
        case 4:
          return yh(b2, b2.stateNode.containerInfo), d = b2.pendingProps, null === a ? b2.child = Ug(b2, null, d, c) : Xi(a, b2, d, c), b2.child;
        case 11:
          return d = b2.type, e = b2.pendingProps, e = b2.elementType === d ? e : Ci(d, e), Yi(a, b2, d, e, c);
        case 7:
          return Xi(a, b2, b2.pendingProps, c), b2.child;
        case 8:
          return Xi(a, b2, b2.pendingProps.children, c), b2.child;
        case 12:
          return Xi(a, b2, b2.pendingProps.children, c), b2.child;
        case 10:
          a: {
            d = b2.type._context;
            e = b2.pendingProps;
            f2 = b2.memoizedProps;
            g = e.value;
            G(Wg, d._currentValue);
            d._currentValue = g;
            if (null !== f2) if (He(f2.value, g)) {
              if (f2.children === e.children && !Wf.current) {
                b2 = Zi(a, b2, c);
                break a;
              }
            } else for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
              var h = f2.dependencies;
              if (null !== h) {
                g = f2.child;
                for (var k2 = h.firstContext; null !== k2; ) {
                  if (k2.context === d) {
                    if (1 === f2.tag) {
                      k2 = mh(-1, c & -c);
                      k2.tag = 2;
                      var l2 = f2.updateQueue;
                      if (null !== l2) {
                        l2 = l2.shared;
                        var m2 = l2.pending;
                        null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                        l2.pending = k2;
                      }
                    }
                    f2.lanes |= c;
                    k2 = f2.alternate;
                    null !== k2 && (k2.lanes |= c);
                    bh(
                      f2.return,
                      c,
                      b2
                    );
                    h.lanes |= c;
                    break;
                  }
                  k2 = k2.next;
                }
              } else if (10 === f2.tag) g = f2.type === b2.type ? null : f2.child;
              else if (18 === f2.tag) {
                g = f2.return;
                if (null === g) throw Error(p(341));
                g.lanes |= c;
                h = g.alternate;
                null !== h && (h.lanes |= c);
                bh(g, c, b2);
                g = f2.sibling;
              } else g = f2.child;
              if (null !== g) g.return = f2;
              else for (g = f2; null !== g; ) {
                if (g === b2) {
                  g = null;
                  break;
                }
                f2 = g.sibling;
                if (null !== f2) {
                  f2.return = g.return;
                  g = f2;
                  break;
                }
                g = g.return;
              }
              f2 = g;
            }
            Xi(a, b2, e.children, c);
            b2 = b2.child;
          }
          return b2;
        case 9:
          return e = b2.type, d = b2.pendingProps.children, ch(b2, c), e = eh(e), d = d(e), b2.flags |= 1, Xi(a, b2, d, c), b2.child;
        case 14:
          return d = b2.type, e = Ci(d, b2.pendingProps), e = Ci(d.type, e), $i(a, b2, d, e, c);
        case 15:
          return bj(a, b2, b2.type, b2.pendingProps, c);
        case 17:
          return d = b2.type, e = b2.pendingProps, e = b2.elementType === d ? e : Ci(d, e), ij(a, b2), b2.tag = 1, Zf(d) ? (a = true, cg(b2)) : a = false, ch(b2, c), Gi(b2, d, e), Ii(b2, d, e, c), jj(null, b2, d, true, a, c);
        case 19:
          return xj(a, b2, c);
        case 22:
          return dj(a, b2, c);
      }
      throw Error(p(156, b2.tag));
    };
    function Fk(a, b2) {
      return ac(a, b2);
    }
    function $k(a, b2, c, d) {
      this.tag = a;
      this.key = c;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b2;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function Bg(a, b2, c, d) {
      return new $k(a, b2, c, d);
    }
    function aj(a) {
      a = a.prototype;
      return !(!a || !a.isReactComponent);
    }
    function Zk(a) {
      if ("function" === typeof a) return aj(a) ? 1 : 0;
      if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === Da) return 11;
        if (a === Ga) return 14;
      }
      return 2;
    }
    function Pg(a, b2) {
      var c = a.alternate;
      null === c ? (c = Bg(a.tag, b2, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b2, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
      c.flags = a.flags & 14680064;
      c.childLanes = a.childLanes;
      c.lanes = a.lanes;
      c.child = a.child;
      c.memoizedProps = a.memoizedProps;
      c.memoizedState = a.memoizedState;
      c.updateQueue = a.updateQueue;
      b2 = a.dependencies;
      c.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
      c.sibling = a.sibling;
      c.index = a.index;
      c.ref = a.ref;
      return c;
    }
    function Rg(a, b2, c, d, e, f2) {
      var g = 2;
      d = a;
      if ("function" === typeof a) aj(a) && (g = 1);
      else if ("string" === typeof a) g = 5;
      else a: switch (a) {
        case ya:
          return Tg(c.children, e, f2, b2);
        case za:
          g = 8;
          e |= 8;
          break;
        case Aa:
          return a = Bg(12, c, b2, e | 2), a.elementType = Aa, a.lanes = f2, a;
        case Ea:
          return a = Bg(13, c, b2, e), a.elementType = Ea, a.lanes = f2, a;
        case Fa:
          return a = Bg(19, c, b2, e), a.elementType = Fa, a.lanes = f2, a;
        case Ia:
          return pj(c, e, f2, b2);
        default:
          if ("object" === typeof a && null !== a) switch (a.$$typeof) {
            case Ba:
              g = 10;
              break a;
            case Ca:
              g = 9;
              break a;
            case Da:
              g = 11;
              break a;
            case Ga:
              g = 14;
              break a;
            case Ha:
              g = 16;
              d = null;
              break a;
          }
          throw Error(p(130, null == a ? a : typeof a, ""));
      }
      b2 = Bg(g, c, b2, e);
      b2.elementType = a;
      b2.type = d;
      b2.lanes = f2;
      return b2;
    }
    function Tg(a, b2, c, d) {
      a = Bg(7, a, d, b2);
      a.lanes = c;
      return a;
    }
    function pj(a, b2, c, d) {
      a = Bg(22, a, d, b2);
      a.elementType = Ia;
      a.lanes = c;
      a.stateNode = { isHidden: false };
      return a;
    }
    function Qg(a, b2, c) {
      a = Bg(6, a, null, b2);
      a.lanes = c;
      return a;
    }
    function Sg(a, b2, c) {
      b2 = Bg(4, null !== a.children ? a.children : [], a.key, b2);
      b2.lanes = c;
      b2.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
      return b2;
    }
    function al(a, b2, c, d, e) {
      this.tag = b2;
      this.containerInfo = a;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = zc(0);
      this.expirationTimes = zc(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = zc(0);
      this.identifierPrefix = d;
      this.onRecoverableError = e;
      this.mutableSourceEagerHydrationData = null;
    }
    function bl(a, b2, c, d, e, f2, g, h, k2) {
      a = new al(a, b2, c, h, k2);
      1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
      f2 = Bg(3, null, null, b2);
      a.current = f2;
      f2.stateNode = a;
      f2.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null };
      kh(f2);
      return a;
    }
    function cl(a, b2, c) {
      var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return { $$typeof: wa, key: null == d ? null : "" + d, children: a, containerInfo: b2, implementation: c };
    }
    function dl(a) {
      if (!a) return Vf;
      a = a._reactInternals;
      a: {
        if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
        var b2 = a;
        do {
          switch (b2.tag) {
            case 3:
              b2 = b2.stateNode.context;
              break a;
            case 1:
              if (Zf(b2.type)) {
                b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          b2 = b2.return;
        } while (null !== b2);
        throw Error(p(171));
      }
      if (1 === a.tag) {
        var c = a.type;
        if (Zf(c)) return bg(a, c, b2);
      }
      return b2;
    }
    function el(a, b2, c, d, e, f2, g, h, k2) {
      a = bl(c, d, true, a, e, f2, g, h, k2);
      a.context = dl(null);
      c = a.current;
      d = R();
      e = yi(c);
      f2 = mh(d, e);
      f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
      nh(c, f2, e);
      a.current.lanes = e;
      Ac(a, e, d);
      Dk(a, d);
      return a;
    }
    function fl(a, b2, c, d) {
      var e = b2.current, f2 = R(), g = yi(e);
      c = dl(c);
      null === b2.context ? b2.context = c : b2.pendingContext = c;
      b2 = mh(f2, g);
      b2.payload = { element: a };
      d = void 0 === d ? null : d;
      null !== d && (b2.callback = d);
      a = nh(e, b2, g);
      null !== a && (gi(a, e, g, f2), oh(a, e, g));
      return g;
    }
    function gl(a) {
      a = a.current;
      if (!a.child) return null;
      switch (a.child.tag) {
        case 5:
          return a.child.stateNode;
        default:
          return a.child.stateNode;
      }
    }
    function hl(a, b2) {
      a = a.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        var c = a.retryLane;
        a.retryLane = 0 !== c && c < b2 ? c : b2;
      }
    }
    function il(a, b2) {
      hl(a, b2);
      (a = a.alternate) && hl(a, b2);
    }
    function jl() {
      return null;
    }
    var kl = "function" === typeof reportError ? reportError : function(a) {
      console.error(a);
    };
    function ll(a) {
      this._internalRoot = a;
    }
    ml.prototype.render = ll.prototype.render = function(a) {
      var b2 = this._internalRoot;
      if (null === b2) throw Error(p(409));
      fl(a, b2, null, null);
    };
    ml.prototype.unmount = ll.prototype.unmount = function() {
      var a = this._internalRoot;
      if (null !== a) {
        this._internalRoot = null;
        var b2 = a.containerInfo;
        Rk(function() {
          fl(null, a, null, null);
        });
        b2[uf] = null;
      }
    };
    function ml(a) {
      this._internalRoot = a;
    }
    ml.prototype.unstable_scheduleHydration = function(a) {
      if (a) {
        var b2 = Hc();
        a = { blockedOn: null, target: a, priority: b2 };
        for (var c = 0; c < Qc.length && 0 !== b2 && b2 < Qc[c].priority; c++) ;
        Qc.splice(c, 0, a);
        0 === c && Vc(a);
      }
    };
    function nl(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
    }
    function ol(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
    }
    function pl() {
    }
    function ql(a, b2, c, d, e) {
      if (e) {
        if ("function" === typeof d) {
          var f2 = d;
          d = function() {
            var a2 = gl(g);
            f2.call(a2);
          };
        }
        var g = el(b2, d, a, 0, null, false, false, "", pl);
        a._reactRootContainer = g;
        a[uf] = g.current;
        sf(8 === a.nodeType ? a.parentNode : a);
        Rk();
        return g;
      }
      for (; e = a.lastChild; ) a.removeChild(e);
      if ("function" === typeof d) {
        var h = d;
        d = function() {
          var a2 = gl(k2);
          h.call(a2);
        };
      }
      var k2 = bl(a, 0, false, null, null, false, false, "", pl);
      a._reactRootContainer = k2;
      a[uf] = k2.current;
      sf(8 === a.nodeType ? a.parentNode : a);
      Rk(function() {
        fl(b2, k2, c, d);
      });
      return k2;
    }
    function rl(a, b2, c, d, e) {
      var f2 = c._reactRootContainer;
      if (f2) {
        var g = f2;
        if ("function" === typeof e) {
          var h = e;
          e = function() {
            var a2 = gl(g);
            h.call(a2);
          };
        }
        fl(b2, g, a, e);
      } else g = ql(c, b2, a, e, d);
      return gl(g);
    }
    Ec = function(a) {
      switch (a.tag) {
        case 3:
          var b2 = a.stateNode;
          if (b2.current.memoizedState.isDehydrated) {
            var c = tc(b2.pendingLanes);
            0 !== c && (Cc(b2, c | 1), Dk(b2, B()), 0 === (K & 6) && (Gj = B() + 500, jg()));
          }
          break;
        case 13:
          Rk(function() {
            var b3 = ih(a, 1);
            if (null !== b3) {
              var c2 = R();
              gi(b3, a, 1, c2);
            }
          }), il(a, 1);
      }
    };
    Fc = function(a) {
      if (13 === a.tag) {
        var b2 = ih(a, 134217728);
        if (null !== b2) {
          var c = R();
          gi(b2, a, 134217728, c);
        }
        il(a, 134217728);
      }
    };
    Gc = function(a) {
      if (13 === a.tag) {
        var b2 = yi(a), c = ih(a, b2);
        if (null !== c) {
          var d = R();
          gi(c, a, b2, d);
        }
        il(a, b2);
      }
    };
    Hc = function() {
      return C$1;
    };
    Ic = function(a, b2) {
      var c = C$1;
      try {
        return C$1 = a, b2();
      } finally {
        C$1 = c;
      }
    };
    yb = function(a, b2, c) {
      switch (b2) {
        case "input":
          bb(a, c);
          b2 = c.name;
          if ("radio" === c.type && null != b2) {
            for (c = a; c.parentNode; ) c = c.parentNode;
            c = c.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
            for (b2 = 0; b2 < c.length; b2++) {
              var d = c[b2];
              if (d !== a && d.form === a.form) {
                var e = Db(d);
                if (!e) throw Error(p(90));
                Wa(d);
                bb(d, e);
              }
            }
          }
          break;
        case "textarea":
          ib(a, c);
          break;
        case "select":
          b2 = c.value, null != b2 && fb(a, !!c.multiple, b2, false);
      }
    };
    Gb = Qk;
    Hb = Rk;
    var sl = { usingClientEntryPoint: false, Events: [Cb, ue$1, Db, Eb, Fb, Qk] }, tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" };
    var ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
      a = Zb(a);
      return null === a ? null : a.stateNode;
    }, findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      var vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!vl.isDisabled && vl.supportsFiber) try {
        kc = vl.inject(ul), lc = vl;
      } catch (a) {
      }
    }
    reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
    reactDom_production_min.createPortal = function(a, b2) {
      var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!nl(b2)) throw Error(p(200));
      return cl(a, b2, null, c);
    };
    reactDom_production_min.createRoot = function(a, b2) {
      if (!nl(a)) throw Error(p(299));
      var c = false, d = "", e = kl;
      null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c = true), void 0 !== b2.identifierPrefix && (d = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e = b2.onRecoverableError));
      b2 = bl(a, 1, false, null, null, c, false, d, e);
      a[uf] = b2.current;
      sf(8 === a.nodeType ? a.parentNode : a);
      return new ll(b2);
    };
    reactDom_production_min.findDOMNode = function(a) {
      if (null == a) return null;
      if (1 === a.nodeType) return a;
      var b2 = a._reactInternals;
      if (void 0 === b2) {
        if ("function" === typeof a.render) throw Error(p(188));
        a = Object.keys(a).join(",");
        throw Error(p(268, a));
      }
      a = Zb(b2);
      a = null === a ? null : a.stateNode;
      return a;
    };
    reactDom_production_min.flushSync = function(a) {
      return Rk(a);
    };
    reactDom_production_min.hydrate = function(a, b2, c) {
      if (!ol(b2)) throw Error(p(200));
      return rl(null, a, b2, true, c);
    };
    reactDom_production_min.hydrateRoot = function(a, b2, c) {
      if (!nl(a)) throw Error(p(405));
      var d = null != c && c.hydratedSources || null, e = false, f2 = "", g = kl;
      null !== c && void 0 !== c && (true === c.unstable_strictMode && (e = true), void 0 !== c.identifierPrefix && (f2 = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
      b2 = el(b2, null, a, 1, null != c ? c : null, e, false, f2, g);
      a[uf] = b2.current;
      sf(a);
      if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c, e] : b2.mutableSourceEagerHydrationData.push(
        c,
        e
      );
      return new ml(b2);
    };
    reactDom_production_min.render = function(a, b2, c) {
      if (!ol(b2)) throw Error(p(200));
      return rl(null, a, b2, false, c);
    };
    reactDom_production_min.unmountComponentAtNode = function(a) {
      if (!ol(a)) throw Error(p(40));
      return a._reactRootContainer ? (Rk(function() {
        rl(null, null, a, false, function() {
          a._reactRootContainer = null;
          a[uf] = null;
        });
      }), true) : false;
    };
    reactDom_production_min.unstable_batchedUpdates = Qk;
    reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b2, c, d) {
      if (!ol(c)) throw Error(p(200));
      if (null == a || void 0 === a._reactInternals) throw Error(p(38));
      return rl(a, b2, c, false, d);
    };
    reactDom_production_min.version = "18.3.1-next-f1338f8080-20240426";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    {
      checkDCE();
      reactDom.exports = reactDom_production_min;
    }
    var reactDomExports = reactDom.exports;
    var m = reactDomExports;
    {
      client.createRoot = m.createRoot;
      client.hydrateRoot = m.hydrateRoot;
    }
    /**
     * @remix-run/router v1.23.0
     *
     * Copyright (c) Remix Software Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.md file in the root directory of this source tree.
     *
     * @license MIT
     */
    function _extends$1() {
      _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$1.apply(this, arguments);
    }
    var Action;
    (function(Action2) {
      Action2["Pop"] = "POP";
      Action2["Push"] = "PUSH";
      Action2["Replace"] = "REPLACE";
    })(Action || (Action = {}));
    function createMemoryHistory(options) {
      if (options === void 0) {
        options = {};
      }
      let {
        initialEntries = ["/"],
        initialIndex,
        v5Compat = false
      } = options;
      let entries;
      entries = initialEntries.map((entry, index2) => createMemoryLocation(entry, typeof entry === "string" ? null : entry.state, index2 === 0 ? "default" : void 0));
      let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);
      let action = Action.Pop;
      let listener = null;
      function clampIndex(n2) {
        return Math.min(Math.max(n2, 0), entries.length - 1);
      }
      function getCurrentLocation() {
        return entries[index];
      }
      function createMemoryLocation(to, state, key) {
        if (state === void 0) {
          state = null;
        }
        let location2 = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
        warning(location2.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to));
        return location2;
      }
      function createHref(to) {
        return typeof to === "string" ? to : createPath(to);
      }
      let history = {
        get index() {
          return index;
        },
        get action() {
          return action;
        },
        get location() {
          return getCurrentLocation();
        },
        createHref,
        createURL(to) {
          return new URL(createHref(to), "http://localhost");
        },
        encodeLocation(to) {
          let path = typeof to === "string" ? parsePath(to) : to;
          return {
            pathname: path.pathname || "",
            search: path.search || "",
            hash: path.hash || ""
          };
        },
        push(to, state) {
          action = Action.Push;
          let nextLocation = createMemoryLocation(to, state);
          index += 1;
          entries.splice(index, entries.length, nextLocation);
          if (v5Compat && listener) {
            listener({
              action,
              location: nextLocation,
              delta: 1
            });
          }
        },
        replace(to, state) {
          action = Action.Replace;
          let nextLocation = createMemoryLocation(to, state);
          entries[index] = nextLocation;
          if (v5Compat && listener) {
            listener({
              action,
              location: nextLocation,
              delta: 0
            });
          }
        },
        go(delta) {
          action = Action.Pop;
          let nextIndex = clampIndex(index + delta);
          let nextLocation = entries[nextIndex];
          index = nextIndex;
          if (listener) {
            listener({
              action,
              location: nextLocation,
              delta
            });
          }
        },
        listen(fn) {
          listener = fn;
          return () => {
            listener = null;
          };
        }
      };
      return history;
    }
    function invariant(value, message) {
      if (value === false || value === null || typeof value === "undefined") {
        throw new Error(message);
      }
    }
    function warning(cond, message) {
      if (!cond) {
        if (typeof console !== "undefined") console.warn(message);
        try {
          throw new Error(message);
        } catch (e) {
        }
      }
    }
    function createKey() {
      return Math.random().toString(36).substr(2, 8);
    }
    function createLocation(current, to, state, key) {
      if (state === void 0) {
        state = null;
      }
      let location2 = _extends$1({
        pathname: typeof current === "string" ? current : current.pathname,
        search: "",
        hash: ""
      }, typeof to === "string" ? parsePath(to) : to, {
        state,
        // TODO: This could be cleaned up.  push/replace should probably just take
        // full Locations now and avoid the need to run through this flow at all
        // But that's a pretty big refactor to the current test suite so going to
        // keep as is for the time being and just let any incoming keys take precedence
        key: to && to.key || key || createKey()
      });
      return location2;
    }
    function createPath(_ref) {
      let {
        pathname = "/",
        search = "",
        hash = ""
      } = _ref;
      if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
      if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
      return pathname;
    }
    function parsePath(path) {
      let parsedPath = {};
      if (path) {
        let hashIndex = path.indexOf("#");
        if (hashIndex >= 0) {
          parsedPath.hash = path.substr(hashIndex);
          path = path.substr(0, hashIndex);
        }
        let searchIndex = path.indexOf("?");
        if (searchIndex >= 0) {
          parsedPath.search = path.substr(searchIndex);
          path = path.substr(0, searchIndex);
        }
        if (path) {
          parsedPath.pathname = path;
        }
      }
      return parsedPath;
    }
    var ResultType;
    (function(ResultType2) {
      ResultType2["data"] = "data";
      ResultType2["deferred"] = "deferred";
      ResultType2["redirect"] = "redirect";
      ResultType2["error"] = "error";
    })(ResultType || (ResultType = {}));
    function matchRoutes(routes, locationArg, basename) {
      if (basename === void 0) {
        basename = "/";
      }
      return matchRoutesImpl(routes, locationArg, basename);
    }
    function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
      let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      let pathname = stripBasename(location2.pathname || "/", basename);
      if (pathname == null) {
        return null;
      }
      let branches = flattenRoutes(routes);
      rankRouteBranches(branches);
      let matches = null;
      for (let i = 0; matches == null && i < branches.length; ++i) {
        let decoded = decodePath$1(pathname);
        matches = matchRouteBranch(branches[i], decoded);
      }
      return matches;
    }
    function flattenRoutes(routes, branches, parentsMeta, parentPath) {
      if (branches === void 0) {
        branches = [];
      }
      if (parentsMeta === void 0) {
        parentsMeta = [];
      }
      if (parentPath === void 0) {
        parentPath = "";
      }
      let flattenRoute = (route, index, relativePath) => {
        let meta = {
          relativePath: relativePath === void 0 ? route.path || "" : relativePath,
          caseSensitive: route.caseSensitive === true,
          childrenIndex: index,
          route
        };
        if (meta.relativePath.startsWith("/")) {
          invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
          meta.relativePath = meta.relativePath.slice(parentPath.length);
        }
        let path = joinPaths([parentPath, meta.relativePath]);
        let routesMeta = parentsMeta.concat(meta);
        if (route.children && route.children.length > 0) {
          invariant(
            // Our types know better, but runtime JS may not!
            // @ts-expect-error
            route.index !== true,
            "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
          );
          flattenRoutes(route.children, branches, routesMeta, path);
        }
        if (route.path == null && !route.index) {
          return;
        }
        branches.push({
          path,
          score: computeScore(path, route.index),
          routesMeta
        });
      };
      routes.forEach((route, index) => {
        var _route$path;
        if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
          flattenRoute(route, index);
        } else {
          for (let exploded of explodeOptionalSegments(route.path)) {
            flattenRoute(route, index, exploded);
          }
        }
      });
      return branches;
    }
    function explodeOptionalSegments(path) {
      let segments = path.split("/");
      if (segments.length === 0) return [];
      let [first, ...rest] = segments;
      let isOptional = first.endsWith("?");
      let required = first.replace(/\?$/, "");
      if (rest.length === 0) {
        return isOptional ? [required, ""] : [required];
      }
      let restExploded = explodeOptionalSegments(rest.join("/"));
      let result = [];
      result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
      if (isOptional) {
        result.push(...restExploded);
      }
      return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
    }
    function rankRouteBranches(branches) {
      branches.sort((a, b2) => a.score !== b2.score ? b2.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b2.routesMeta.map((meta) => meta.childrenIndex)));
    }
    const paramRe = /^:[\w-]+$/;
    const dynamicSegmentValue = 3;
    const indexRouteValue = 2;
    const emptySegmentValue = 1;
    const staticSegmentValue = 10;
    const splatPenalty = -2;
    const isSplat = (s) => s === "*";
    function computeScore(path, index) {
      let segments = path.split("/");
      let initialScore = segments.length;
      if (segments.some(isSplat)) {
        initialScore += splatPenalty;
      }
      if (index) {
        initialScore += indexRouteValue;
      }
      return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
    }
    function compareIndexes(a, b2) {
      let siblings = a.length === b2.length && a.slice(0, -1).every((n2, i) => n2 === b2[i]);
      return siblings ? (
        // If two routes are siblings, we should try to match the earlier sibling
        // first. This allows people to have fine-grained control over the matching
        // behavior by simply putting routes with identical paths in the order they
        // want them tried.
        a[a.length - 1] - b2[b2.length - 1]
      ) : (
        // Otherwise, it doesn't really make sense to rank non-siblings by index,
        // so they sort equally.
        0
      );
    }
    function matchRouteBranch(branch, pathname, allowPartial) {
      let {
        routesMeta
      } = branch;
      let matchedParams = {};
      let matchedPathname = "/";
      let matches = [];
      for (let i = 0; i < routesMeta.length; ++i) {
        let meta = routesMeta[i];
        let end = i === routesMeta.length - 1;
        let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
        let match = matchPath({
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end
        }, remainingPathname);
        let route = meta.route;
        if (!match) {
          return null;
        }
        Object.assign(matchedParams, match.params);
        matches.push({
          // TODO: Can this as be avoided?
          params: matchedParams,
          pathname: joinPaths([matchedPathname, match.pathname]),
          pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
          route
        });
        if (match.pathnameBase !== "/") {
          matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
        }
      }
      return matches;
    }
    function matchPath(pattern, pathname) {
      if (typeof pattern === "string") {
        pattern = {
          path: pattern,
          caseSensitive: false,
          end: true
        };
      }
      let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
      let match = pathname.match(matcher);
      if (!match) return null;
      let matchedPathname = match[0];
      let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
      let captureGroups = match.slice(1);
      let params = compiledParams.reduce((memo, _ref, index) => {
        let {
          paramName,
          isOptional
        } = _ref;
        if (paramName === "*") {
          let splatValue = captureGroups[index] || "";
          pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        const value = captureGroups[index];
        if (isOptional && !value) {
          memo[paramName] = void 0;
        } else {
          memo[paramName] = (value || "").replace(/%2F/g, "/");
        }
        return memo;
      }, {});
      return {
        params,
        pathname: matchedPathname,
        pathnameBase,
        pattern
      };
    }
    function compilePath(path, caseSensitive, end) {
      if (caseSensitive === void 0) {
        caseSensitive = false;
      }
      if (end === void 0) {
        end = true;
      }
      warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
      let params = [];
      let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
        params.push({
          paramName,
          isOptional: isOptional != null
        });
        return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
      });
      if (path.endsWith("*")) {
        params.push({
          paramName: "*"
        });
        regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
      } else if (end) {
        regexpSource += "\\/*$";
      } else if (path !== "" && path !== "/") {
        regexpSource += "(?:(?=\\/|$))";
      } else ;
      let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
      return [matcher, params];
    }
    function decodePath$1(value) {
      try {
        return value.split("/").map((v2) => decodeURIComponent(v2).replace(/\//g, "%2F")).join("/");
      } catch (error2) {
        warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error2 + ")."));
        return value;
      }
    }
    function stripBasename(pathname, basename) {
      if (basename === "/") return pathname;
      if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
        return null;
      }
      let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
      let nextChar = pathname.charAt(startIndex);
      if (nextChar && nextChar !== "/") {
        return null;
      }
      return pathname.slice(startIndex) || "/";
    }
    function resolvePath(to, fromPathname) {
      if (fromPathname === void 0) {
        fromPathname = "/";
      }
      let {
        pathname: toPathname,
        search = "",
        hash = ""
      } = typeof to === "string" ? parsePath(to) : to;
      let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
      return {
        pathname,
        search: normalizeSearch(search),
        hash: normalizeHash(hash)
      };
    }
    function resolvePathname(relativePath, fromPathname) {
      let segments = fromPathname.replace(/\/+$/, "").split("/");
      let relativeSegments = relativePath.split("/");
      relativeSegments.forEach((segment) => {
        if (segment === "..") {
          if (segments.length > 1) segments.pop();
        } else if (segment !== ".") {
          segments.push(segment);
        }
      });
      return segments.length > 1 ? segments.join("/") : "/";
    }
    function getInvalidPathError(char, field, dest, path) {
      return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
    }
    function getPathContributingMatches(matches) {
      return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);
    }
    function getResolveToMatches(matches, v7_relativeSplatPath) {
      let pathMatches = getPathContributingMatches(matches);
      if (v7_relativeSplatPath) {
        return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);
      }
      return pathMatches.map((match) => match.pathnameBase);
    }
    function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
      if (isPathRelative === void 0) {
        isPathRelative = false;
      }
      let to;
      if (typeof toArg === "string") {
        to = parsePath(toArg);
      } else {
        to = _extends$1({}, toArg);
        invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
        invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
        invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
      }
      let isEmptyPath = toArg === "" || to.pathname === "";
      let toPathname = isEmptyPath ? "/" : to.pathname;
      let from;
      if (toPathname == null) {
        from = locationPathname;
      } else {
        let routePathnameIndex = routePathnames.length - 1;
        if (!isPathRelative && toPathname.startsWith("..")) {
          let toSegments = toPathname.split("/");
          while (toSegments[0] === "..") {
            toSegments.shift();
            routePathnameIndex -= 1;
          }
          to.pathname = toSegments.join("/");
        }
        from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
      }
      let path = resolvePath(to, from);
      let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
      let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
      if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
        path.pathname += "/";
      }
      return path;
    }
    const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
    const normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
    const normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
    const normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
    function isRouteErrorResponse(error2) {
      return error2 != null && typeof error2.status === "number" && typeof error2.statusText === "string" && typeof error2.internal === "boolean" && "data" in error2;
    }
    const validMutationMethodsArr = ["post", "put", "patch", "delete"];
    new Set(validMutationMethodsArr);
    const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
    new Set(validRequestMethodsArr);
    /**
     * React Router v6.30.1
     *
     * Copyright (c) Remix Software Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.md file in the root directory of this source tree.
     *
     * @license MIT
     */
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    const DataRouterContext = /* @__PURE__ */ reactExports.createContext(null);
    const DataRouterStateContext = /* @__PURE__ */ reactExports.createContext(null);
    const NavigationContext = /* @__PURE__ */ reactExports.createContext(null);
    const LocationContext = /* @__PURE__ */ reactExports.createContext(null);
    const RouteContext = /* @__PURE__ */ reactExports.createContext({
      outlet: null,
      matches: [],
      isDataRoute: false
    });
    const RouteErrorContext = /* @__PURE__ */ reactExports.createContext(null);
    function useInRouterContext() {
      return reactExports.useContext(LocationContext) != null;
    }
    function useLocation() {
      !useInRouterContext() ? invariant(false) : void 0;
      return reactExports.useContext(LocationContext).location;
    }
    function useIsomorphicLayoutEffect(cb2) {
      let isStatic = reactExports.useContext(NavigationContext).static;
      if (!isStatic) {
        reactExports.useLayoutEffect(cb2);
      }
    }
    function useNavigate() {
      let {
        isDataRoute
      } = reactExports.useContext(RouteContext);
      return isDataRoute ? useNavigateStable() : useNavigateUnstable();
    }
    function useNavigateUnstable() {
      !useInRouterContext() ? invariant(false) : void 0;
      let dataRouterContext = reactExports.useContext(DataRouterContext);
      let {
        basename,
        future,
        navigator: navigator2
      } = reactExports.useContext(NavigationContext);
      let {
        matches
      } = reactExports.useContext(RouteContext);
      let {
        pathname: locationPathname
      } = useLocation();
      let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
      let activeRef = reactExports.useRef(false);
      useIsomorphicLayoutEffect(() => {
        activeRef.current = true;
      });
      let navigate = reactExports.useCallback(function(to, options) {
        if (options === void 0) {
          options = {};
        }
        if (!activeRef.current) return;
        if (typeof to === "number") {
          navigator2.go(to);
          return;
        }
        let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
        if (dataRouterContext == null && basename !== "/") {
          path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
        }
        (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
      }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
      return navigate;
    }
    function useRoutes(routes, locationArg) {
      return useRoutesImpl(routes, locationArg);
    }
    function useRoutesImpl(routes, locationArg, dataRouterState, future) {
      !useInRouterContext() ? invariant(false) : void 0;
      let {
        navigator: navigator2
      } = reactExports.useContext(NavigationContext);
      let {
        matches: parentMatches
      } = reactExports.useContext(RouteContext);
      let routeMatch = parentMatches[parentMatches.length - 1];
      let parentParams = routeMatch ? routeMatch.params : {};
      routeMatch ? routeMatch.pathname : "/";
      let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
      routeMatch && routeMatch.route;
      let locationFromContext = useLocation();
      let location2;
      if (locationArg) {
        var _parsedLocationArg$pa;
        let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
        !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false) : void 0;
        location2 = parsedLocationArg;
      } else {
        location2 = locationFromContext;
      }
      let pathname = location2.pathname || "/";
      let remainingPathname = pathname;
      if (parentPathnameBase !== "/") {
        let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
        let segments = pathname.replace(/^\//, "").split("/");
        remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
      }
      let matches = matchRoutes(routes, {
        pathname: remainingPathname
      });
      let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
        params: Object.assign({}, parentParams, match.params),
        pathname: joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
        ]),
        pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
        ])
      })), parentMatches, dataRouterState, future);
      if (locationArg && renderedMatches) {
        return /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
          value: {
            location: _extends({
              pathname: "/",
              search: "",
              hash: "",
              state: null,
              key: "default"
            }, location2),
            navigationType: Action.Pop
          }
        }, renderedMatches);
      }
      return renderedMatches;
    }
    function DefaultErrorComponent() {
      let error2 = useRouteError();
      let message = isRouteErrorResponse(error2) ? error2.status + " " + error2.statusText : error2 instanceof Error ? error2.message : JSON.stringify(error2);
      let stack = error2 instanceof Error ? error2.stack : null;
      let lightgrey = "rgba(200,200,200, 0.5)";
      let preStyles = {
        padding: "0.5rem",
        backgroundColor: lightgrey
      };
      let devInfo = null;
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", {
        style: {
          fontStyle: "italic"
        }
      }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", {
        style: preStyles
      }, stack) : null, devInfo);
    }
    const defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
    class RenderErrorBoundary extends reactExports.Component {
      constructor(props) {
        super(props);
        this.state = {
          location: props.location,
          revalidation: props.revalidation,
          error: props.error
        };
      }
      static getDerivedStateFromError(error2) {
        return {
          error: error2
        };
      }
      static getDerivedStateFromProps(props, state) {
        if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
          return {
            error: props.error,
            location: props.location,
            revalidation: props.revalidation
          };
        }
        return {
          error: props.error !== void 0 ? props.error : state.error,
          location: state.location,
          revalidation: props.revalidation || state.revalidation
        };
      }
      componentDidCatch(error2, errorInfo) {
        console.error("React Router caught the following error during render", error2, errorInfo);
      }
      render() {
        return this.state.error !== void 0 ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
          value: this.props.routeContext
        }, /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
          value: this.state.error,
          children: this.props.component
        })) : this.props.children;
      }
    }
    function RenderedRoute(_ref) {
      let {
        routeContext,
        match,
        children
      } = _ref;
      let dataRouterContext = reactExports.useContext(DataRouterContext);
      if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
        dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
      }
      return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
        value: routeContext
      }, children);
    }
    function _renderMatches(matches, parentMatches, dataRouterState, future) {
      var _dataRouterState;
      if (parentMatches === void 0) {
        parentMatches = [];
      }
      if (dataRouterState === void 0) {
        dataRouterState = null;
      }
      if (future === void 0) {
        future = null;
      }
      if (matches == null) {
        var _future;
        if (!dataRouterState) {
          return null;
        }
        if (dataRouterState.errors) {
          matches = dataRouterState.matches;
        } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
          matches = dataRouterState.matches;
        } else {
          return null;
        }
      }
      let renderedMatches = matches;
      let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;
      if (errors != null) {
        let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]) !== void 0);
        !(errorIndex >= 0) ? invariant(false) : void 0;
        renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
      }
      let renderFallback = false;
      let fallbackIndex = -1;
      if (dataRouterState && future && future.v7_partialHydration) {
        for (let i = 0; i < renderedMatches.length; i++) {
          let match = renderedMatches[i];
          if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
            fallbackIndex = i;
          }
          if (match.route.id) {
            let {
              loaderData,
              errors: errors2
            } = dataRouterState;
            let needsToRunLoader = match.route.loader && loaderData[match.route.id] === void 0 && (!errors2 || errors2[match.route.id] === void 0);
            if (match.route.lazy || needsToRunLoader) {
              renderFallback = true;
              if (fallbackIndex >= 0) {
                renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
              } else {
                renderedMatches = [renderedMatches[0]];
              }
              break;
            }
          }
        }
      }
      return renderedMatches.reduceRight((outlet, match, index) => {
        let error2;
        let shouldRenderHydrateFallback = false;
        let errorElement = null;
        let hydrateFallbackElement = null;
        if (dataRouterState) {
          error2 = errors && match.route.id ? errors[match.route.id] : void 0;
          errorElement = match.route.errorElement || defaultErrorElement;
          if (renderFallback) {
            if (fallbackIndex < 0 && index === 0) {
              warningOnce("route-fallback");
              shouldRenderHydrateFallback = true;
              hydrateFallbackElement = null;
            } else if (fallbackIndex === index) {
              shouldRenderHydrateFallback = true;
              hydrateFallbackElement = match.route.hydrateFallbackElement || null;
            }
          }
        }
        let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
        let getChildren = () => {
          let children;
          if (error2) {
            children = errorElement;
          } else if (shouldRenderHydrateFallback) {
            children = hydrateFallbackElement;
          } else if (match.route.Component) {
            children = /* @__PURE__ */ reactExports.createElement(match.route.Component, null);
          } else if (match.route.element) {
            children = match.route.element;
          } else {
            children = outlet;
          }
          return /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
            match,
            routeContext: {
              outlet,
              matches: matches2,
              isDataRoute: dataRouterState != null
            },
            children
          });
        };
        return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
          location: dataRouterState.location,
          revalidation: dataRouterState.revalidation,
          component: errorElement,
          error: error2,
          children: getChildren(),
          routeContext: {
            outlet: null,
            matches: matches2,
            isDataRoute: true
          }
        }) : getChildren();
      }, null);
    }
    var DataRouterHook = /* @__PURE__ */ function(DataRouterHook2) {
      DataRouterHook2["UseBlocker"] = "useBlocker";
      DataRouterHook2["UseRevalidator"] = "useRevalidator";
      DataRouterHook2["UseNavigateStable"] = "useNavigate";
      return DataRouterHook2;
    }(DataRouterHook || {});
    var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook2) {
      DataRouterStateHook2["UseBlocker"] = "useBlocker";
      DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
      DataRouterStateHook2["UseActionData"] = "useActionData";
      DataRouterStateHook2["UseRouteError"] = "useRouteError";
      DataRouterStateHook2["UseNavigation"] = "useNavigation";
      DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
      DataRouterStateHook2["UseMatches"] = "useMatches";
      DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
      DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
      DataRouterStateHook2["UseRouteId"] = "useRouteId";
      return DataRouterStateHook2;
    }(DataRouterStateHook || {});
    function useDataRouterContext(hookName) {
      let ctx = reactExports.useContext(DataRouterContext);
      !ctx ? invariant(false) : void 0;
      return ctx;
    }
    function useDataRouterState(hookName) {
      let state = reactExports.useContext(DataRouterStateContext);
      !state ? invariant(false) : void 0;
      return state;
    }
    function useRouteContext(hookName) {
      let route = reactExports.useContext(RouteContext);
      !route ? invariant(false) : void 0;
      return route;
    }
    function useCurrentRouteId(hookName) {
      let route = useRouteContext();
      let thisRoute = route.matches[route.matches.length - 1];
      !thisRoute.route.id ? invariant(false) : void 0;
      return thisRoute.route.id;
    }
    function useRouteError() {
      var _state$errors;
      let error2 = reactExports.useContext(RouteErrorContext);
      let state = useDataRouterState();
      let routeId = useCurrentRouteId();
      if (error2 !== void 0) {
        return error2;
      }
      return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
    }
    function useNavigateStable() {
      let {
        router
      } = useDataRouterContext(DataRouterHook.UseNavigateStable);
      let id2 = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
      let activeRef = reactExports.useRef(false);
      useIsomorphicLayoutEffect(() => {
        activeRef.current = true;
      });
      let navigate = reactExports.useCallback(function(to, options) {
        if (options === void 0) {
          options = {};
        }
        if (!activeRef.current) return;
        if (typeof to === "number") {
          router.navigate(to);
        } else {
          router.navigate(to, _extends({
            fromRouteId: id2
          }, options));
        }
      }, [router, id2]);
      return navigate;
    }
    const alreadyWarned$1 = {};
    function warningOnce(key, cond, message) {
      if (!alreadyWarned$1[key]) {
        alreadyWarned$1[key] = true;
      }
    }
    function logV6DeprecationWarnings(renderFuture, routerFuture) {
      if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === void 0) ;
      if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === void 0 && true) ;
    }
    const START_TRANSITION = "startTransition";
    const startTransitionImpl = React$1[START_TRANSITION];
    function MemoryRouter(_ref3) {
      let {
        basename,
        children,
        initialEntries,
        initialIndex,
        future
      } = _ref3;
      let historyRef = reactExports.useRef();
      if (historyRef.current == null) {
        historyRef.current = createMemoryHistory({
          initialEntries,
          initialIndex,
          v5Compat: true
        });
      }
      let history = historyRef.current;
      let [state, setStateImpl] = reactExports.useState({
        action: history.action,
        location: history.location
      });
      let {
        v7_startTransition
      } = future || {};
      let setState = reactExports.useCallback((newState) => {
        v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
      }, [setStateImpl, v7_startTransition]);
      reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
      reactExports.useEffect(() => logV6DeprecationWarnings(future), [future]);
      return /* @__PURE__ */ reactExports.createElement(Router, {
        basename,
        children,
        location: state.location,
        navigationType: state.action,
        navigator: history,
        future
      });
    }
    function Navigate(_ref4) {
      let {
        to,
        replace: replace2,
        state,
        relative
      } = _ref4;
      !useInRouterContext() ? invariant(false) : void 0;
      let {
        future,
        static: isStatic
      } = reactExports.useContext(NavigationContext);
      let {
        matches
      } = reactExports.useContext(RouteContext);
      let {
        pathname: locationPathname
      } = useLocation();
      let navigate = useNavigate();
      let path = resolveTo(to, getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === "path");
      let jsonPath = JSON.stringify(path);
      reactExports.useEffect(() => navigate(JSON.parse(jsonPath), {
        replace: replace2,
        state,
        relative
      }), [navigate, jsonPath, relative, replace2, state]);
      return null;
    }
    function Route(_props) {
      invariant(false);
    }
    function Router(_ref5) {
      let {
        basename: basenameProp = "/",
        children = null,
        location: locationProp,
        navigationType = Action.Pop,
        navigator: navigator2,
        static: staticProp = false,
        future
      } = _ref5;
      !!useInRouterContext() ? invariant(false) : void 0;
      let basename = basenameProp.replace(/^\/*/, "/");
      let navigationContext = reactExports.useMemo(() => ({
        basename,
        navigator: navigator2,
        static: staticProp,
        future: _extends({
          v7_relativeSplatPath: false
        }, future)
      }), [basename, future, navigator2, staticProp]);
      if (typeof locationProp === "string") {
        locationProp = parsePath(locationProp);
      }
      let {
        pathname = "/",
        search = "",
        hash = "",
        state = null,
        key = "default"
      } = locationProp;
      let locationContext = reactExports.useMemo(() => {
        let trailingPathname = stripBasename(pathname, basename);
        if (trailingPathname == null) {
          return null;
        }
        return {
          location: {
            pathname: trailingPathname,
            search,
            hash,
            state,
            key
          },
          navigationType
        };
      }, [basename, pathname, search, hash, state, key, navigationType]);
      if (locationContext == null) {
        return null;
      }
      return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, {
        value: navigationContext
      }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
        children,
        value: locationContext
      }));
    }
    function Routes(_ref6) {
      let {
        children,
        location: location2
      } = _ref6;
      return useRoutes(createRoutesFromChildren(children), location2);
    }
    new Promise(() => {
    });
    function createRoutesFromChildren(children, parentPath) {
      if (parentPath === void 0) {
        parentPath = [];
      }
      let routes = [];
      reactExports.Children.forEach(children, (element, index) => {
        if (!/* @__PURE__ */ reactExports.isValidElement(element)) {
          return;
        }
        let treePath = [...parentPath, index];
        if (element.type === reactExports.Fragment) {
          routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
          return;
        }
        !(element.type === Route) ? invariant(false) : void 0;
        !(!element.props.index || !element.props.children) ? invariant(false) : void 0;
        let route = {
          id: element.props.id || treePath.join("-"),
          caseSensitive: element.props.caseSensitive,
          element: element.props.element,
          Component: element.props.Component,
          index: element.props.index,
          path: element.props.path,
          loader: element.props.loader,
          action: element.props.action,
          errorElement: element.props.errorElement,
          ErrorBoundary: element.props.ErrorBoundary,
          hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
          shouldRevalidate: element.props.shouldRevalidate,
          handle: element.props.handle,
          lazy: element.props.lazy
        };
        if (element.props.children) {
          route.children = createRoutesFromChildren(element.props.children, treePath);
        }
        routes.push(route);
      });
      return routes;
    }
    function r(e) {
      var t2, f2, n2 = "";
      if ("string" == typeof e || "number" == typeof e) n2 += e;
      else if ("object" == typeof e) if (Array.isArray(e)) {
        var o = e.length;
        for (t2 = 0; t2 < o; t2++) e[t2] && (f2 = r(e[t2])) && (n2 && (n2 += " "), n2 += f2);
      } else for (f2 in e) e[f2] && (n2 && (n2 += " "), n2 += f2);
      return n2;
    }
    function clsx() {
      for (var e, t2, f2 = 0, n2 = "", o = arguments.length; f2 < o; f2++) (e = arguments[f2]) && (t2 = r(e)) && (n2 && (n2 += " "), n2 += t2);
      return n2;
    }
    const CLASS_PART_SEPARATOR = "-";
    const createClassGroupUtils = (config) => {
      const classMap = createClassMap(config);
      const {
        conflictingClassGroups,
        conflictingClassGroupModifiers
      } = config;
      const getClassGroupId = (className) => {
        const classParts = className.split(CLASS_PART_SEPARATOR);
        if (classParts[0] === "" && classParts.length !== 1) {
          classParts.shift();
        }
        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
      };
      const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {
        const conflicts = conflictingClassGroups[classGroupId] || [];
        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
          return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
        }
        return conflicts;
      };
      return {
        getClassGroupId,
        getConflictingClassGroupIds
      };
    };
    const getGroupRecursive = (classParts, classPartObject) => {
      var _a;
      if (classParts.length === 0) {
        return classPartObject.classGroupId;
      }
      const currentClassPart = classParts[0];
      const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
      const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
      if (classGroupFromNextClassPart) {
        return classGroupFromNextClassPart;
      }
      if (classPartObject.validators.length === 0) {
        return void 0;
      }
      const classRest = classParts.join(CLASS_PART_SEPARATOR);
      return (_a = classPartObject.validators.find(({
        validator
      }) => validator(classRest))) == null ? void 0 : _a.classGroupId;
    };
    const arbitraryPropertyRegex = /^\[(.+)\]$/;
    const getGroupIdForArbitraryProperty = (className) => {
      if (arbitraryPropertyRegex.test(className)) {
        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
        const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
        if (property) {
          return "arbitrary.." + property;
        }
      }
    };
    const createClassMap = (config) => {
      const {
        theme,
        prefix
      } = config;
      const classMap = {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      };
      const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
      prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
        processClassesRecursively(classGroup, classMap, classGroupId, theme);
      });
      return classMap;
    };
    const processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {
      classGroup.forEach((classDefinition) => {
        if (typeof classDefinition === "string") {
          const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
          classPartObjectToEdit.classGroupId = classGroupId;
          return;
        }
        if (typeof classDefinition === "function") {
          if (isThemeGetter(classDefinition)) {
            processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
            return;
          }
          classPartObject.validators.push({
            validator: classDefinition,
            classGroupId
          });
          return;
        }
        Object.entries(classDefinition).forEach(([key, classGroup2]) => {
          processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
        });
      });
    };
    const getPart = (classPartObject, path) => {
      let currentClassPartObject = classPartObject;
      path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
        if (!currentClassPartObject.nextPart.has(pathPart)) {
          currentClassPartObject.nextPart.set(pathPart, {
            nextPart: /* @__PURE__ */ new Map(),
            validators: []
          });
        }
        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
      });
      return currentClassPartObject;
    };
    const isThemeGetter = (func) => func.isThemeGetter;
    const getPrefixedClassGroupEntries = (classGroupEntries, prefix) => {
      if (!prefix) {
        return classGroupEntries;
      }
      return classGroupEntries.map(([classGroupId, classGroup]) => {
        const prefixedClassGroup = classGroup.map((classDefinition) => {
          if (typeof classDefinition === "string") {
            return prefix + classDefinition;
          }
          if (typeof classDefinition === "object") {
            return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
          }
          return classDefinition;
        });
        return [classGroupId, prefixedClassGroup];
      });
    };
    const createLruCache = (maxCacheSize) => {
      if (maxCacheSize < 1) {
        return {
          get: () => void 0,
          set: () => {
          }
        };
      }
      let cacheSize = 0;
      let cache = /* @__PURE__ */ new Map();
      let previousCache = /* @__PURE__ */ new Map();
      const update = (key, value) => {
        cache.set(key, value);
        cacheSize++;
        if (cacheSize > maxCacheSize) {
          cacheSize = 0;
          previousCache = cache;
          cache = /* @__PURE__ */ new Map();
        }
      };
      return {
        get(key) {
          let value = cache.get(key);
          if (value !== void 0) {
            return value;
          }
          if ((value = previousCache.get(key)) !== void 0) {
            update(key, value);
            return value;
          }
        },
        set(key, value) {
          if (cache.has(key)) {
            cache.set(key, value);
          } else {
            update(key, value);
          }
        }
      };
    };
    const IMPORTANT_MODIFIER = "!";
    const createParseClassName = (config) => {
      const {
        separator,
        experimentalParseClassName
      } = config;
      const isSeparatorSingleCharacter = separator.length === 1;
      const firstSeparatorCharacter = separator[0];
      const separatorLength = separator.length;
      const parseClassName = (className) => {
        const modifiers = [];
        let bracketDepth = 0;
        let modifierStart = 0;
        let postfixModifierPosition;
        for (let index = 0; index < className.length; index++) {
          let currentCharacter = className[index];
          if (bracketDepth === 0) {
            if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {
              modifiers.push(className.slice(modifierStart, index));
              modifierStart = index + separatorLength;
              continue;
            }
            if (currentCharacter === "/") {
              postfixModifierPosition = index;
              continue;
            }
          }
          if (currentCharacter === "[") {
            bracketDepth++;
          } else if (currentCharacter === "]") {
            bracketDepth--;
          }
        }
        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
        const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
        const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
        return {
          modifiers,
          hasImportantModifier,
          baseClassName,
          maybePostfixModifierPosition
        };
      };
      if (experimentalParseClassName) {
        return (className) => experimentalParseClassName({
          className,
          parseClassName
        });
      }
      return parseClassName;
    };
    const sortModifiers = (modifiers) => {
      if (modifiers.length <= 1) {
        return modifiers;
      }
      const sortedModifiers = [];
      let unsortedModifiers = [];
      modifiers.forEach((modifier) => {
        const isArbitraryVariant = modifier[0] === "[";
        if (isArbitraryVariant) {
          sortedModifiers.push(...unsortedModifiers.sort(), modifier);
          unsortedModifiers = [];
        } else {
          unsortedModifiers.push(modifier);
        }
      });
      sortedModifiers.push(...unsortedModifiers.sort());
      return sortedModifiers;
    };
    const createConfigUtils = (config) => __spreadValues({
      cache: createLruCache(config.cacheSize),
      parseClassName: createParseClassName(config)
    }, createClassGroupUtils(config));
    const SPLIT_CLASSES_REGEX = /\s+/;
    const mergeClassList = (classList, configUtils) => {
      const {
        parseClassName,
        getClassGroupId,
        getConflictingClassGroupIds
      } = configUtils;
      const classGroupsInConflict = [];
      const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
      let result = "";
      for (let index = classNames.length - 1; index >= 0; index -= 1) {
        const originalClassName = classNames[index];
        const {
          modifiers,
          hasImportantModifier,
          baseClassName,
          maybePostfixModifierPosition
        } = parseClassName(originalClassName);
        let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
        let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
        if (!classGroupId) {
          if (!hasPostfixModifier) {
            result = originalClassName + (result.length > 0 ? " " + result : result);
            continue;
          }
          classGroupId = getClassGroupId(baseClassName);
          if (!classGroupId) {
            result = originalClassName + (result.length > 0 ? " " + result : result);
            continue;
          }
          hasPostfixModifier = false;
        }
        const variantModifier = sortModifiers(modifiers).join(":");
        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
        const classId = modifierId + classGroupId;
        if (classGroupsInConflict.includes(classId)) {
          continue;
        }
        classGroupsInConflict.push(classId);
        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
        for (let i = 0; i < conflictGroups.length; ++i) {
          const group = conflictGroups[i];
          classGroupsInConflict.push(modifierId + group);
        }
        result = originalClassName + (result.length > 0 ? " " + result : result);
      }
      return result;
    };
    function twJoin() {
      let index = 0;
      let argument;
      let resolvedValue;
      let string = "";
      while (index < arguments.length) {
        if (argument = arguments[index++]) {
          if (resolvedValue = toValue(argument)) {
            string && (string += " ");
            string += resolvedValue;
          }
        }
      }
      return string;
    }
    const toValue = (mix) => {
      if (typeof mix === "string") {
        return mix;
      }
      let resolvedValue;
      let string = "";
      for (let k2 = 0; k2 < mix.length; k2++) {
        if (mix[k2]) {
          if (resolvedValue = toValue(mix[k2])) {
            string && (string += " ");
            string += resolvedValue;
          }
        }
      }
      return string;
    };
    function createTailwindMerge(createConfigFirst, ...createConfigRest) {
      let configUtils;
      let cacheGet;
      let cacheSet;
      let functionToCall = initTailwindMerge;
      function initTailwindMerge(classList) {
        const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
        configUtils = createConfigUtils(config);
        cacheGet = configUtils.cache.get;
        cacheSet = configUtils.cache.set;
        functionToCall = tailwindMerge;
        return tailwindMerge(classList);
      }
      function tailwindMerge(classList) {
        const cachedResult = cacheGet(classList);
        if (cachedResult) {
          return cachedResult;
        }
        const result = mergeClassList(classList, configUtils);
        cacheSet(classList, result);
        return result;
      }
      return function callTailwindMerge() {
        return functionToCall(twJoin.apply(null, arguments));
      };
    }
    const fromTheme = (key) => {
      const themeGetter = (theme) => theme[key] || [];
      themeGetter.isThemeGetter = true;
      return themeGetter;
    };
    const arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
    const fractionRegex = /^\d+\/\d+$/;
    const stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
    const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
    const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
    const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
    const shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
    const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
    const isLength = (value) => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);
    const isArbitraryLength = (value) => getIsArbitraryValue(value, "length", isLengthOnly);
    const isNumber = (value) => Boolean(value) && !Number.isNaN(Number(value));
    const isArbitraryNumber = (value) => getIsArbitraryValue(value, "number", isNumber);
    const isInteger$1 = (value) => Boolean(value) && Number.isInteger(Number(value));
    const isPercent = (value) => value.endsWith("%") && isNumber(value.slice(0, -1));
    const isArbitraryValue = (value) => arbitraryValueRegex.test(value);
    const isTshirtSize = (value) => tshirtUnitRegex.test(value);
    const sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
    const isArbitrarySize = (value) => getIsArbitraryValue(value, sizeLabels, isNever);
    const isArbitraryPosition = (value) => getIsArbitraryValue(value, "position", isNever);
    const imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
    const isArbitraryImage = (value) => getIsArbitraryValue(value, imageLabels, isImage);
    const isArbitraryShadow = (value) => getIsArbitraryValue(value, "", isShadow);
    const isAny = () => true;
    const getIsArbitraryValue = (value, label, testValue) => {
      const result = arbitraryValueRegex.exec(value);
      if (result) {
        if (result[1]) {
          return typeof label === "string" ? result[1] === label : label.has(result[1]);
        }
        return testValue(result[2]);
      }
      return false;
    };
    const isLengthOnly = (value) => (
      // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
      // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
      // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
      lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)
    );
    const isNever = () => false;
    const isShadow = (value) => shadowRegex.test(value);
    const isImage = (value) => imageRegex.test(value);
    const getDefaultConfig = () => {
      const colors = fromTheme("colors");
      const spacing = fromTheme("spacing");
      const blur = fromTheme("blur");
      const brightness = fromTheme("brightness");
      const borderColor = fromTheme("borderColor");
      const borderRadius = fromTheme("borderRadius");
      const borderSpacing = fromTheme("borderSpacing");
      const borderWidth = fromTheme("borderWidth");
      const contrast = fromTheme("contrast");
      const grayscale = fromTheme("grayscale");
      const hueRotate = fromTheme("hueRotate");
      const invert = fromTheme("invert");
      const gap = fromTheme("gap");
      const gradientColorStops = fromTheme("gradientColorStops");
      const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
      const inset = fromTheme("inset");
      const margin = fromTheme("margin");
      const opacity = fromTheme("opacity");
      const padding = fromTheme("padding");
      const saturate = fromTheme("saturate");
      const scale = fromTheme("scale");
      const sepia = fromTheme("sepia");
      const skew = fromTheme("skew");
      const space = fromTheme("space");
      const translate = fromTheme("translate");
      const getOverscroll = () => ["auto", "contain", "none"];
      const getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
      const getSpacingWithAutoAndArbitrary = () => ["auto", isArbitraryValue, spacing];
      const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
      const getLengthWithEmptyAndArbitrary = () => ["", isLength, isArbitraryLength];
      const getNumberWithAutoAndArbitrary = () => ["auto", isNumber, isArbitraryValue];
      const getPositions = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
      const getLineStyles = () => ["solid", "dashed", "dotted", "double", "none"];
      const getBlendModes = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
      const getAlign = () => ["start", "end", "center", "between", "around", "evenly", "stretch"];
      const getZeroAndEmpty = () => ["", "0", isArbitraryValue];
      const getBreaks = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
      const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
      return {
        cacheSize: 500,
        separator: ":",
        theme: {
          colors: [isAny],
          spacing: [isLength, isArbitraryLength],
          blur: ["none", "", isTshirtSize, isArbitraryValue],
          brightness: getNumberAndArbitrary(),
          borderColor: [colors],
          borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
          borderSpacing: getSpacingWithArbitrary(),
          borderWidth: getLengthWithEmptyAndArbitrary(),
          contrast: getNumberAndArbitrary(),
          grayscale: getZeroAndEmpty(),
          hueRotate: getNumberAndArbitrary(),
          invert: getZeroAndEmpty(),
          gap: getSpacingWithArbitrary(),
          gradientColorStops: [colors],
          gradientColorStopPositions: [isPercent, isArbitraryLength],
          inset: getSpacingWithAutoAndArbitrary(),
          margin: getSpacingWithAutoAndArbitrary(),
          opacity: getNumberAndArbitrary(),
          padding: getSpacingWithArbitrary(),
          saturate: getNumberAndArbitrary(),
          scale: getNumberAndArbitrary(),
          sepia: getZeroAndEmpty(),
          skew: getNumberAndArbitrary(),
          space: getSpacingWithArbitrary(),
          translate: getSpacingWithArbitrary()
        },
        classGroups: {
          // Layout
          /**
           * Aspect Ratio
           * @see https://tailwindcss.com/docs/aspect-ratio
           */
          aspect: [{
            aspect: ["auto", "square", "video", isArbitraryValue]
          }],
          /**
           * Container
           * @see https://tailwindcss.com/docs/container
           */
          container: ["container"],
          /**
           * Columns
           * @see https://tailwindcss.com/docs/columns
           */
          columns: [{
            columns: [isTshirtSize]
          }],
          /**
           * Break After
           * @see https://tailwindcss.com/docs/break-after
           */
          "break-after": [{
            "break-after": getBreaks()
          }],
          /**
           * Break Before
           * @see https://tailwindcss.com/docs/break-before
           */
          "break-before": [{
            "break-before": getBreaks()
          }],
          /**
           * Break Inside
           * @see https://tailwindcss.com/docs/break-inside
           */
          "break-inside": [{
            "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
          }],
          /**
           * Box Decoration Break
           * @see https://tailwindcss.com/docs/box-decoration-break
           */
          "box-decoration": [{
            "box-decoration": ["slice", "clone"]
          }],
          /**
           * Box Sizing
           * @see https://tailwindcss.com/docs/box-sizing
           */
          box: [{
            box: ["border", "content"]
          }],
          /**
           * Display
           * @see https://tailwindcss.com/docs/display
           */
          display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
          /**
           * Floats
           * @see https://tailwindcss.com/docs/float
           */
          float: [{
            float: ["right", "left", "none", "start", "end"]
          }],
          /**
           * Clear
           * @see https://tailwindcss.com/docs/clear
           */
          clear: [{
            clear: ["left", "right", "both", "none", "start", "end"]
          }],
          /**
           * Isolation
           * @see https://tailwindcss.com/docs/isolation
           */
          isolation: ["isolate", "isolation-auto"],
          /**
           * Object Fit
           * @see https://tailwindcss.com/docs/object-fit
           */
          "object-fit": [{
            object: ["contain", "cover", "fill", "none", "scale-down"]
          }],
          /**
           * Object Position
           * @see https://tailwindcss.com/docs/object-position
           */
          "object-position": [{
            object: [...getPositions(), isArbitraryValue]
          }],
          /**
           * Overflow
           * @see https://tailwindcss.com/docs/overflow
           */
          overflow: [{
            overflow: getOverflow()
          }],
          /**
           * Overflow X
           * @see https://tailwindcss.com/docs/overflow
           */
          "overflow-x": [{
            "overflow-x": getOverflow()
          }],
          /**
           * Overflow Y
           * @see https://tailwindcss.com/docs/overflow
           */
          "overflow-y": [{
            "overflow-y": getOverflow()
          }],
          /**
           * Overscroll Behavior
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          overscroll: [{
            overscroll: getOverscroll()
          }],
          /**
           * Overscroll Behavior X
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          "overscroll-x": [{
            "overscroll-x": getOverscroll()
          }],
          /**
           * Overscroll Behavior Y
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          "overscroll-y": [{
            "overscroll-y": getOverscroll()
          }],
          /**
           * Position
           * @see https://tailwindcss.com/docs/position
           */
          position: ["static", "fixed", "absolute", "relative", "sticky"],
          /**
           * Top / Right / Bottom / Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          inset: [{
            inset: [inset]
          }],
          /**
           * Right / Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          "inset-x": [{
            "inset-x": [inset]
          }],
          /**
           * Top / Bottom
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          "inset-y": [{
            "inset-y": [inset]
          }],
          /**
           * Start
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          start: [{
            start: [inset]
          }],
          /**
           * End
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          end: [{
            end: [inset]
          }],
          /**
           * Top
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          top: [{
            top: [inset]
          }],
          /**
           * Right
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          right: [{
            right: [inset]
          }],
          /**
           * Bottom
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          bottom: [{
            bottom: [inset]
          }],
          /**
           * Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          left: [{
            left: [inset]
          }],
          /**
           * Visibility
           * @see https://tailwindcss.com/docs/visibility
           */
          visibility: ["visible", "invisible", "collapse"],
          /**
           * Z-Index
           * @see https://tailwindcss.com/docs/z-index
           */
          z: [{
            z: ["auto", isInteger$1, isArbitraryValue]
          }],
          // Flexbox and Grid
          /**
           * Flex Basis
           * @see https://tailwindcss.com/docs/flex-basis
           */
          basis: [{
            basis: getSpacingWithAutoAndArbitrary()
          }],
          /**
           * Flex Direction
           * @see https://tailwindcss.com/docs/flex-direction
           */
          "flex-direction": [{
            flex: ["row", "row-reverse", "col", "col-reverse"]
          }],
          /**
           * Flex Wrap
           * @see https://tailwindcss.com/docs/flex-wrap
           */
          "flex-wrap": [{
            flex: ["wrap", "wrap-reverse", "nowrap"]
          }],
          /**
           * Flex
           * @see https://tailwindcss.com/docs/flex
           */
          flex: [{
            flex: ["1", "auto", "initial", "none", isArbitraryValue]
          }],
          /**
           * Flex Grow
           * @see https://tailwindcss.com/docs/flex-grow
           */
          grow: [{
            grow: getZeroAndEmpty()
          }],
          /**
           * Flex Shrink
           * @see https://tailwindcss.com/docs/flex-shrink
           */
          shrink: [{
            shrink: getZeroAndEmpty()
          }],
          /**
           * Order
           * @see https://tailwindcss.com/docs/order
           */
          order: [{
            order: ["first", "last", "none", isInteger$1, isArbitraryValue]
          }],
          /**
           * Grid Template Columns
           * @see https://tailwindcss.com/docs/grid-template-columns
           */
          "grid-cols": [{
            "grid-cols": [isAny]
          }],
          /**
           * Grid Column Start / End
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-start-end": [{
            col: ["auto", {
              span: ["full", isInteger$1, isArbitraryValue]
            }, isArbitraryValue]
          }],
          /**
           * Grid Column Start
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-start": [{
            "col-start": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Column End
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-end": [{
            "col-end": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Template Rows
           * @see https://tailwindcss.com/docs/grid-template-rows
           */
          "grid-rows": [{
            "grid-rows": [isAny]
          }],
          /**
           * Grid Row Start / End
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-start-end": [{
            row: ["auto", {
              span: [isInteger$1, isArbitraryValue]
            }, isArbitraryValue]
          }],
          /**
           * Grid Row Start
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-start": [{
            "row-start": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Row End
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-end": [{
            "row-end": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Auto Flow
           * @see https://tailwindcss.com/docs/grid-auto-flow
           */
          "grid-flow": [{
            "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
          }],
          /**
           * Grid Auto Columns
           * @see https://tailwindcss.com/docs/grid-auto-columns
           */
          "auto-cols": [{
            "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
          }],
          /**
           * Grid Auto Rows
           * @see https://tailwindcss.com/docs/grid-auto-rows
           */
          "auto-rows": [{
            "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
          }],
          /**
           * Gap
           * @see https://tailwindcss.com/docs/gap
           */
          gap: [{
            gap: [gap]
          }],
          /**
           * Gap X
           * @see https://tailwindcss.com/docs/gap
           */
          "gap-x": [{
            "gap-x": [gap]
          }],
          /**
           * Gap Y
           * @see https://tailwindcss.com/docs/gap
           */
          "gap-y": [{
            "gap-y": [gap]
          }],
          /**
           * Justify Content
           * @see https://tailwindcss.com/docs/justify-content
           */
          "justify-content": [{
            justify: ["normal", ...getAlign()]
          }],
          /**
           * Justify Items
           * @see https://tailwindcss.com/docs/justify-items
           */
          "justify-items": [{
            "justify-items": ["start", "end", "center", "stretch"]
          }],
          /**
           * Justify Self
           * @see https://tailwindcss.com/docs/justify-self
           */
          "justify-self": [{
            "justify-self": ["auto", "start", "end", "center", "stretch"]
          }],
          /**
           * Align Content
           * @see https://tailwindcss.com/docs/align-content
           */
          "align-content": [{
            content: ["normal", ...getAlign(), "baseline"]
          }],
          /**
           * Align Items
           * @see https://tailwindcss.com/docs/align-items
           */
          "align-items": [{
            items: ["start", "end", "center", "baseline", "stretch"]
          }],
          /**
           * Align Self
           * @see https://tailwindcss.com/docs/align-self
           */
          "align-self": [{
            self: ["auto", "start", "end", "center", "stretch", "baseline"]
          }],
          /**
           * Place Content
           * @see https://tailwindcss.com/docs/place-content
           */
          "place-content": [{
            "place-content": [...getAlign(), "baseline"]
          }],
          /**
           * Place Items
           * @see https://tailwindcss.com/docs/place-items
           */
          "place-items": [{
            "place-items": ["start", "end", "center", "baseline", "stretch"]
          }],
          /**
           * Place Self
           * @see https://tailwindcss.com/docs/place-self
           */
          "place-self": [{
            "place-self": ["auto", "start", "end", "center", "stretch"]
          }],
          // Spacing
          /**
           * Padding
           * @see https://tailwindcss.com/docs/padding
           */
          p: [{
            p: [padding]
          }],
          /**
           * Padding X
           * @see https://tailwindcss.com/docs/padding
           */
          px: [{
            px: [padding]
          }],
          /**
           * Padding Y
           * @see https://tailwindcss.com/docs/padding
           */
          py: [{
            py: [padding]
          }],
          /**
           * Padding Start
           * @see https://tailwindcss.com/docs/padding
           */
          ps: [{
            ps: [padding]
          }],
          /**
           * Padding End
           * @see https://tailwindcss.com/docs/padding
           */
          pe: [{
            pe: [padding]
          }],
          /**
           * Padding Top
           * @see https://tailwindcss.com/docs/padding
           */
          pt: [{
            pt: [padding]
          }],
          /**
           * Padding Right
           * @see https://tailwindcss.com/docs/padding
           */
          pr: [{
            pr: [padding]
          }],
          /**
           * Padding Bottom
           * @see https://tailwindcss.com/docs/padding
           */
          pb: [{
            pb: [padding]
          }],
          /**
           * Padding Left
           * @see https://tailwindcss.com/docs/padding
           */
          pl: [{
            pl: [padding]
          }],
          /**
           * Margin
           * @see https://tailwindcss.com/docs/margin
           */
          m: [{
            m: [margin]
          }],
          /**
           * Margin X
           * @see https://tailwindcss.com/docs/margin
           */
          mx: [{
            mx: [margin]
          }],
          /**
           * Margin Y
           * @see https://tailwindcss.com/docs/margin
           */
          my: [{
            my: [margin]
          }],
          /**
           * Margin Start
           * @see https://tailwindcss.com/docs/margin
           */
          ms: [{
            ms: [margin]
          }],
          /**
           * Margin End
           * @see https://tailwindcss.com/docs/margin
           */
          me: [{
            me: [margin]
          }],
          /**
           * Margin Top
           * @see https://tailwindcss.com/docs/margin
           */
          mt: [{
            mt: [margin]
          }],
          /**
           * Margin Right
           * @see https://tailwindcss.com/docs/margin
           */
          mr: [{
            mr: [margin]
          }],
          /**
           * Margin Bottom
           * @see https://tailwindcss.com/docs/margin
           */
          mb: [{
            mb: [margin]
          }],
          /**
           * Margin Left
           * @see https://tailwindcss.com/docs/margin
           */
          ml: [{
            ml: [margin]
          }],
          /**
           * Space Between X
           * @see https://tailwindcss.com/docs/space
           */
          "space-x": [{
            "space-x": [space]
          }],
          /**
           * Space Between X Reverse
           * @see https://tailwindcss.com/docs/space
           */
          "space-x-reverse": ["space-x-reverse"],
          /**
           * Space Between Y
           * @see https://tailwindcss.com/docs/space
           */
          "space-y": [{
            "space-y": [space]
          }],
          /**
           * Space Between Y Reverse
           * @see https://tailwindcss.com/docs/space
           */
          "space-y-reverse": ["space-y-reverse"],
          // Sizing
          /**
           * Width
           * @see https://tailwindcss.com/docs/width
           */
          w: [{
            w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, spacing]
          }],
          /**
           * Min-Width
           * @see https://tailwindcss.com/docs/min-width
           */
          "min-w": [{
            "min-w": [isArbitraryValue, spacing, "min", "max", "fit"]
          }],
          /**
           * Max-Width
           * @see https://tailwindcss.com/docs/max-width
           */
          "max-w": [{
            "max-w": [isArbitraryValue, spacing, "none", "full", "min", "max", "fit", "prose", {
              screen: [isTshirtSize]
            }, isTshirtSize]
          }],
          /**
           * Height
           * @see https://tailwindcss.com/docs/height
           */
          h: [{
            h: [isArbitraryValue, spacing, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
          }],
          /**
           * Min-Height
           * @see https://tailwindcss.com/docs/min-height
           */
          "min-h": [{
            "min-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
          }],
          /**
           * Max-Height
           * @see https://tailwindcss.com/docs/max-height
           */
          "max-h": [{
            "max-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
          }],
          /**
           * Size
           * @see https://tailwindcss.com/docs/size
           */
          size: [{
            size: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
          }],
          // Typography
          /**
           * Font Size
           * @see https://tailwindcss.com/docs/font-size
           */
          "font-size": [{
            text: ["base", isTshirtSize, isArbitraryLength]
          }],
          /**
           * Font Smoothing
           * @see https://tailwindcss.com/docs/font-smoothing
           */
          "font-smoothing": ["antialiased", "subpixel-antialiased"],
          /**
           * Font Style
           * @see https://tailwindcss.com/docs/font-style
           */
          "font-style": ["italic", "not-italic"],
          /**
           * Font Weight
           * @see https://tailwindcss.com/docs/font-weight
           */
          "font-weight": [{
            font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
          }],
          /**
           * Font Family
           * @see https://tailwindcss.com/docs/font-family
           */
          "font-family": [{
            font: [isAny]
          }],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-normal": ["normal-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-ordinal": ["ordinal"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-slashed-zero": ["slashed-zero"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-figure": ["lining-nums", "oldstyle-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-spacing": ["proportional-nums", "tabular-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
          /**
           * Letter Spacing
           * @see https://tailwindcss.com/docs/letter-spacing
           */
          tracking: [{
            tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
          }],
          /**
           * Line Clamp
           * @see https://tailwindcss.com/docs/line-clamp
           */
          "line-clamp": [{
            "line-clamp": ["none", isNumber, isArbitraryNumber]
          }],
          /**
           * Line Height
           * @see https://tailwindcss.com/docs/line-height
           */
          leading: [{
            leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
          }],
          /**
           * List Style Image
           * @see https://tailwindcss.com/docs/list-style-image
           */
          "list-image": [{
            "list-image": ["none", isArbitraryValue]
          }],
          /**
           * List Style Type
           * @see https://tailwindcss.com/docs/list-style-type
           */
          "list-style-type": [{
            list: ["none", "disc", "decimal", isArbitraryValue]
          }],
          /**
           * List Style Position
           * @see https://tailwindcss.com/docs/list-style-position
           */
          "list-style-position": [{
            list: ["inside", "outside"]
          }],
          /**
           * Placeholder Color
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/placeholder-color
           */
          "placeholder-color": [{
            placeholder: [colors]
          }],
          /**
           * Placeholder Opacity
           * @see https://tailwindcss.com/docs/placeholder-opacity
           */
          "placeholder-opacity": [{
            "placeholder-opacity": [opacity]
          }],
          /**
           * Text Alignment
           * @see https://tailwindcss.com/docs/text-align
           */
          "text-alignment": [{
            text: ["left", "center", "right", "justify", "start", "end"]
          }],
          /**
           * Text Color
           * @see https://tailwindcss.com/docs/text-color
           */
          "text-color": [{
            text: [colors]
          }],
          /**
           * Text Opacity
           * @see https://tailwindcss.com/docs/text-opacity
           */
          "text-opacity": [{
            "text-opacity": [opacity]
          }],
          /**
           * Text Decoration
           * @see https://tailwindcss.com/docs/text-decoration
           */
          "text-decoration": ["underline", "overline", "line-through", "no-underline"],
          /**
           * Text Decoration Style
           * @see https://tailwindcss.com/docs/text-decoration-style
           */
          "text-decoration-style": [{
            decoration: [...getLineStyles(), "wavy"]
          }],
          /**
           * Text Decoration Thickness
           * @see https://tailwindcss.com/docs/text-decoration-thickness
           */
          "text-decoration-thickness": [{
            decoration: ["auto", "from-font", isLength, isArbitraryLength]
          }],
          /**
           * Text Underline Offset
           * @see https://tailwindcss.com/docs/text-underline-offset
           */
          "underline-offset": [{
            "underline-offset": ["auto", isLength, isArbitraryValue]
          }],
          /**
           * Text Decoration Color
           * @see https://tailwindcss.com/docs/text-decoration-color
           */
          "text-decoration-color": [{
            decoration: [colors]
          }],
          /**
           * Text Transform
           * @see https://tailwindcss.com/docs/text-transform
           */
          "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
          /**
           * Text Overflow
           * @see https://tailwindcss.com/docs/text-overflow
           */
          "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
          /**
           * Text Wrap
           * @see https://tailwindcss.com/docs/text-wrap
           */
          "text-wrap": [{
            text: ["wrap", "nowrap", "balance", "pretty"]
          }],
          /**
           * Text Indent
           * @see https://tailwindcss.com/docs/text-indent
           */
          indent: [{
            indent: getSpacingWithArbitrary()
          }],
          /**
           * Vertical Alignment
           * @see https://tailwindcss.com/docs/vertical-align
           */
          "vertical-align": [{
            align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
          }],
          /**
           * Whitespace
           * @see https://tailwindcss.com/docs/whitespace
           */
          whitespace: [{
            whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
          }],
          /**
           * Word Break
           * @see https://tailwindcss.com/docs/word-break
           */
          break: [{
            break: ["normal", "words", "all", "keep"]
          }],
          /**
           * Hyphens
           * @see https://tailwindcss.com/docs/hyphens
           */
          hyphens: [{
            hyphens: ["none", "manual", "auto"]
          }],
          /**
           * Content
           * @see https://tailwindcss.com/docs/content
           */
          content: [{
            content: ["none", isArbitraryValue]
          }],
          // Backgrounds
          /**
           * Background Attachment
           * @see https://tailwindcss.com/docs/background-attachment
           */
          "bg-attachment": [{
            bg: ["fixed", "local", "scroll"]
          }],
          /**
           * Background Clip
           * @see https://tailwindcss.com/docs/background-clip
           */
          "bg-clip": [{
            "bg-clip": ["border", "padding", "content", "text"]
          }],
          /**
           * Background Opacity
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/background-opacity
           */
          "bg-opacity": [{
            "bg-opacity": [opacity]
          }],
          /**
           * Background Origin
           * @see https://tailwindcss.com/docs/background-origin
           */
          "bg-origin": [{
            "bg-origin": ["border", "padding", "content"]
          }],
          /**
           * Background Position
           * @see https://tailwindcss.com/docs/background-position
           */
          "bg-position": [{
            bg: [...getPositions(), isArbitraryPosition]
          }],
          /**
           * Background Repeat
           * @see https://tailwindcss.com/docs/background-repeat
           */
          "bg-repeat": [{
            bg: ["no-repeat", {
              repeat: ["", "x", "y", "round", "space"]
            }]
          }],
          /**
           * Background Size
           * @see https://tailwindcss.com/docs/background-size
           */
          "bg-size": [{
            bg: ["auto", "cover", "contain", isArbitrarySize]
          }],
          /**
           * Background Image
           * @see https://tailwindcss.com/docs/background-image
           */
          "bg-image": [{
            bg: ["none", {
              "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
            }, isArbitraryImage]
          }],
          /**
           * Background Color
           * @see https://tailwindcss.com/docs/background-color
           */
          "bg-color": [{
            bg: [colors]
          }],
          /**
           * Gradient Color Stops From Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-from-pos": [{
            from: [gradientColorStopPositions]
          }],
          /**
           * Gradient Color Stops Via Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-via-pos": [{
            via: [gradientColorStopPositions]
          }],
          /**
           * Gradient Color Stops To Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-to-pos": [{
            to: [gradientColorStopPositions]
          }],
          /**
           * Gradient Color Stops From
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-from": [{
            from: [gradientColorStops]
          }],
          /**
           * Gradient Color Stops Via
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-via": [{
            via: [gradientColorStops]
          }],
          /**
           * Gradient Color Stops To
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-to": [{
            to: [gradientColorStops]
          }],
          // Borders
          /**
           * Border Radius
           * @see https://tailwindcss.com/docs/border-radius
           */
          rounded: [{
            rounded: [borderRadius]
          }],
          /**
           * Border Radius Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-s": [{
            "rounded-s": [borderRadius]
          }],
          /**
           * Border Radius End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-e": [{
            "rounded-e": [borderRadius]
          }],
          /**
           * Border Radius Top
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-t": [{
            "rounded-t": [borderRadius]
          }],
          /**
           * Border Radius Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-r": [{
            "rounded-r": [borderRadius]
          }],
          /**
           * Border Radius Bottom
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-b": [{
            "rounded-b": [borderRadius]
          }],
          /**
           * Border Radius Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-l": [{
            "rounded-l": [borderRadius]
          }],
          /**
           * Border Radius Start Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-ss": [{
            "rounded-ss": [borderRadius]
          }],
          /**
           * Border Radius Start End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-se": [{
            "rounded-se": [borderRadius]
          }],
          /**
           * Border Radius End End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-ee": [{
            "rounded-ee": [borderRadius]
          }],
          /**
           * Border Radius End Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-es": [{
            "rounded-es": [borderRadius]
          }],
          /**
           * Border Radius Top Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-tl": [{
            "rounded-tl": [borderRadius]
          }],
          /**
           * Border Radius Top Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-tr": [{
            "rounded-tr": [borderRadius]
          }],
          /**
           * Border Radius Bottom Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-br": [{
            "rounded-br": [borderRadius]
          }],
          /**
           * Border Radius Bottom Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-bl": [{
            "rounded-bl": [borderRadius]
          }],
          /**
           * Border Width
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w": [{
            border: [borderWidth]
          }],
          /**
           * Border Width X
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-x": [{
            "border-x": [borderWidth]
          }],
          /**
           * Border Width Y
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-y": [{
            "border-y": [borderWidth]
          }],
          /**
           * Border Width Start
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-s": [{
            "border-s": [borderWidth]
          }],
          /**
           * Border Width End
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-e": [{
            "border-e": [borderWidth]
          }],
          /**
           * Border Width Top
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-t": [{
            "border-t": [borderWidth]
          }],
          /**
           * Border Width Right
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-r": [{
            "border-r": [borderWidth]
          }],
          /**
           * Border Width Bottom
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-b": [{
            "border-b": [borderWidth]
          }],
          /**
           * Border Width Left
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-l": [{
            "border-l": [borderWidth]
          }],
          /**
           * Border Opacity
           * @see https://tailwindcss.com/docs/border-opacity
           */
          "border-opacity": [{
            "border-opacity": [opacity]
          }],
          /**
           * Border Style
           * @see https://tailwindcss.com/docs/border-style
           */
          "border-style": [{
            border: [...getLineStyles(), "hidden"]
          }],
          /**
           * Divide Width X
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-x": [{
            "divide-x": [borderWidth]
          }],
          /**
           * Divide Width X Reverse
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-x-reverse": ["divide-x-reverse"],
          /**
           * Divide Width Y
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-y": [{
            "divide-y": [borderWidth]
          }],
          /**
           * Divide Width Y Reverse
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-y-reverse": ["divide-y-reverse"],
          /**
           * Divide Opacity
           * @see https://tailwindcss.com/docs/divide-opacity
           */
          "divide-opacity": [{
            "divide-opacity": [opacity]
          }],
          /**
           * Divide Style
           * @see https://tailwindcss.com/docs/divide-style
           */
          "divide-style": [{
            divide: getLineStyles()
          }],
          /**
           * Border Color
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color": [{
            border: [borderColor]
          }],
          /**
           * Border Color X
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-x": [{
            "border-x": [borderColor]
          }],
          /**
           * Border Color Y
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-y": [{
            "border-y": [borderColor]
          }],
          /**
           * Border Color S
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-s": [{
            "border-s": [borderColor]
          }],
          /**
           * Border Color E
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-e": [{
            "border-e": [borderColor]
          }],
          /**
           * Border Color Top
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-t": [{
            "border-t": [borderColor]
          }],
          /**
           * Border Color Right
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-r": [{
            "border-r": [borderColor]
          }],
          /**
           * Border Color Bottom
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-b": [{
            "border-b": [borderColor]
          }],
          /**
           * Border Color Left
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-l": [{
            "border-l": [borderColor]
          }],
          /**
           * Divide Color
           * @see https://tailwindcss.com/docs/divide-color
           */
          "divide-color": [{
            divide: [borderColor]
          }],
          /**
           * Outline Style
           * @see https://tailwindcss.com/docs/outline-style
           */
          "outline-style": [{
            outline: ["", ...getLineStyles()]
          }],
          /**
           * Outline Offset
           * @see https://tailwindcss.com/docs/outline-offset
           */
          "outline-offset": [{
            "outline-offset": [isLength, isArbitraryValue]
          }],
          /**
           * Outline Width
           * @see https://tailwindcss.com/docs/outline-width
           */
          "outline-w": [{
            outline: [isLength, isArbitraryLength]
          }],
          /**
           * Outline Color
           * @see https://tailwindcss.com/docs/outline-color
           */
          "outline-color": [{
            outline: [colors]
          }],
          /**
           * Ring Width
           * @see https://tailwindcss.com/docs/ring-width
           */
          "ring-w": [{
            ring: getLengthWithEmptyAndArbitrary()
          }],
          /**
           * Ring Width Inset
           * @see https://tailwindcss.com/docs/ring-width
           */
          "ring-w-inset": ["ring-inset"],
          /**
           * Ring Color
           * @see https://tailwindcss.com/docs/ring-color
           */
          "ring-color": [{
            ring: [colors]
          }],
          /**
           * Ring Opacity
           * @see https://tailwindcss.com/docs/ring-opacity
           */
          "ring-opacity": [{
            "ring-opacity": [opacity]
          }],
          /**
           * Ring Offset Width
           * @see https://tailwindcss.com/docs/ring-offset-width
           */
          "ring-offset-w": [{
            "ring-offset": [isLength, isArbitraryLength]
          }],
          /**
           * Ring Offset Color
           * @see https://tailwindcss.com/docs/ring-offset-color
           */
          "ring-offset-color": [{
            "ring-offset": [colors]
          }],
          // Effects
          /**
           * Box Shadow
           * @see https://tailwindcss.com/docs/box-shadow
           */
          shadow: [{
            shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
          }],
          /**
           * Box Shadow Color
           * @see https://tailwindcss.com/docs/box-shadow-color
           */
          "shadow-color": [{
            shadow: [isAny]
          }],
          /**
           * Opacity
           * @see https://tailwindcss.com/docs/opacity
           */
          opacity: [{
            opacity: [opacity]
          }],
          /**
           * Mix Blend Mode
           * @see https://tailwindcss.com/docs/mix-blend-mode
           */
          "mix-blend": [{
            "mix-blend": [...getBlendModes(), "plus-lighter", "plus-darker"]
          }],
          /**
           * Background Blend Mode
           * @see https://tailwindcss.com/docs/background-blend-mode
           */
          "bg-blend": [{
            "bg-blend": getBlendModes()
          }],
          // Filters
          /**
           * Filter
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/filter
           */
          filter: [{
            filter: ["", "none"]
          }],
          /**
           * Blur
           * @see https://tailwindcss.com/docs/blur
           */
          blur: [{
            blur: [blur]
          }],
          /**
           * Brightness
           * @see https://tailwindcss.com/docs/brightness
           */
          brightness: [{
            brightness: [brightness]
          }],
          /**
           * Contrast
           * @see https://tailwindcss.com/docs/contrast
           */
          contrast: [{
            contrast: [contrast]
          }],
          /**
           * Drop Shadow
           * @see https://tailwindcss.com/docs/drop-shadow
           */
          "drop-shadow": [{
            "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
          }],
          /**
           * Grayscale
           * @see https://tailwindcss.com/docs/grayscale
           */
          grayscale: [{
            grayscale: [grayscale]
          }],
          /**
           * Hue Rotate
           * @see https://tailwindcss.com/docs/hue-rotate
           */
          "hue-rotate": [{
            "hue-rotate": [hueRotate]
          }],
          /**
           * Invert
           * @see https://tailwindcss.com/docs/invert
           */
          invert: [{
            invert: [invert]
          }],
          /**
           * Saturate
           * @see https://tailwindcss.com/docs/saturate
           */
          saturate: [{
            saturate: [saturate]
          }],
          /**
           * Sepia
           * @see https://tailwindcss.com/docs/sepia
           */
          sepia: [{
            sepia: [sepia]
          }],
          /**
           * Backdrop Filter
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/backdrop-filter
           */
          "backdrop-filter": [{
            "backdrop-filter": ["", "none"]
          }],
          /**
           * Backdrop Blur
           * @see https://tailwindcss.com/docs/backdrop-blur
           */
          "backdrop-blur": [{
            "backdrop-blur": [blur]
          }],
          /**
           * Backdrop Brightness
           * @see https://tailwindcss.com/docs/backdrop-brightness
           */
          "backdrop-brightness": [{
            "backdrop-brightness": [brightness]
          }],
          /**
           * Backdrop Contrast
           * @see https://tailwindcss.com/docs/backdrop-contrast
           */
          "backdrop-contrast": [{
            "backdrop-contrast": [contrast]
          }],
          /**
           * Backdrop Grayscale
           * @see https://tailwindcss.com/docs/backdrop-grayscale
           */
          "backdrop-grayscale": [{
            "backdrop-grayscale": [grayscale]
          }],
          /**
           * Backdrop Hue Rotate
           * @see https://tailwindcss.com/docs/backdrop-hue-rotate
           */
          "backdrop-hue-rotate": [{
            "backdrop-hue-rotate": [hueRotate]
          }],
          /**
           * Backdrop Invert
           * @see https://tailwindcss.com/docs/backdrop-invert
           */
          "backdrop-invert": [{
            "backdrop-invert": [invert]
          }],
          /**
           * Backdrop Opacity
           * @see https://tailwindcss.com/docs/backdrop-opacity
           */
          "backdrop-opacity": [{
            "backdrop-opacity": [opacity]
          }],
          /**
           * Backdrop Saturate
           * @see https://tailwindcss.com/docs/backdrop-saturate
           */
          "backdrop-saturate": [{
            "backdrop-saturate": [saturate]
          }],
          /**
           * Backdrop Sepia
           * @see https://tailwindcss.com/docs/backdrop-sepia
           */
          "backdrop-sepia": [{
            "backdrop-sepia": [sepia]
          }],
          // Tables
          /**
           * Border Collapse
           * @see https://tailwindcss.com/docs/border-collapse
           */
          "border-collapse": [{
            border: ["collapse", "separate"]
          }],
          /**
           * Border Spacing
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing": [{
            "border-spacing": [borderSpacing]
          }],
          /**
           * Border Spacing X
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing-x": [{
            "border-spacing-x": [borderSpacing]
          }],
          /**
           * Border Spacing Y
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing-y": [{
            "border-spacing-y": [borderSpacing]
          }],
          /**
           * Table Layout
           * @see https://tailwindcss.com/docs/table-layout
           */
          "table-layout": [{
            table: ["auto", "fixed"]
          }],
          /**
           * Caption Side
           * @see https://tailwindcss.com/docs/caption-side
           */
          caption: [{
            caption: ["top", "bottom"]
          }],
          // Transitions and Animation
          /**
           * Tranisition Property
           * @see https://tailwindcss.com/docs/transition-property
           */
          transition: [{
            transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
          }],
          /**
           * Transition Duration
           * @see https://tailwindcss.com/docs/transition-duration
           */
          duration: [{
            duration: getNumberAndArbitrary()
          }],
          /**
           * Transition Timing Function
           * @see https://tailwindcss.com/docs/transition-timing-function
           */
          ease: [{
            ease: ["linear", "in", "out", "in-out", isArbitraryValue]
          }],
          /**
           * Transition Delay
           * @see https://tailwindcss.com/docs/transition-delay
           */
          delay: [{
            delay: getNumberAndArbitrary()
          }],
          /**
           * Animation
           * @see https://tailwindcss.com/docs/animation
           */
          animate: [{
            animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
          }],
          // Transforms
          /**
           * Transform
           * @see https://tailwindcss.com/docs/transform
           */
          transform: [{
            transform: ["", "gpu", "none"]
          }],
          /**
           * Scale
           * @see https://tailwindcss.com/docs/scale
           */
          scale: [{
            scale: [scale]
          }],
          /**
           * Scale X
           * @see https://tailwindcss.com/docs/scale
           */
          "scale-x": [{
            "scale-x": [scale]
          }],
          /**
           * Scale Y
           * @see https://tailwindcss.com/docs/scale
           */
          "scale-y": [{
            "scale-y": [scale]
          }],
          /**
           * Rotate
           * @see https://tailwindcss.com/docs/rotate
           */
          rotate: [{
            rotate: [isInteger$1, isArbitraryValue]
          }],
          /**
           * Translate X
           * @see https://tailwindcss.com/docs/translate
           */
          "translate-x": [{
            "translate-x": [translate]
          }],
          /**
           * Translate Y
           * @see https://tailwindcss.com/docs/translate
           */
          "translate-y": [{
            "translate-y": [translate]
          }],
          /**
           * Skew X
           * @see https://tailwindcss.com/docs/skew
           */
          "skew-x": [{
            "skew-x": [skew]
          }],
          /**
           * Skew Y
           * @see https://tailwindcss.com/docs/skew
           */
          "skew-y": [{
            "skew-y": [skew]
          }],
          /**
           * Transform Origin
           * @see https://tailwindcss.com/docs/transform-origin
           */
          "transform-origin": [{
            origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
          }],
          // Interactivity
          /**
           * Accent Color
           * @see https://tailwindcss.com/docs/accent-color
           */
          accent: [{
            accent: ["auto", colors]
          }],
          /**
           * Appearance
           * @see https://tailwindcss.com/docs/appearance
           */
          appearance: [{
            appearance: ["none", "auto"]
          }],
          /**
           * Cursor
           * @see https://tailwindcss.com/docs/cursor
           */
          cursor: [{
            cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
          }],
          /**
           * Caret Color
           * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
           */
          "caret-color": [{
            caret: [colors]
          }],
          /**
           * Pointer Events
           * @see https://tailwindcss.com/docs/pointer-events
           */
          "pointer-events": [{
            "pointer-events": ["none", "auto"]
          }],
          /**
           * Resize
           * @see https://tailwindcss.com/docs/resize
           */
          resize: [{
            resize: ["none", "y", "x", ""]
          }],
          /**
           * Scroll Behavior
           * @see https://tailwindcss.com/docs/scroll-behavior
           */
          "scroll-behavior": [{
            scroll: ["auto", "smooth"]
          }],
          /**
           * Scroll Margin
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-m": [{
            "scroll-m": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin X
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mx": [{
            "scroll-mx": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Y
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-my": [{
            "scroll-my": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Start
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-ms": [{
            "scroll-ms": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin End
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-me": [{
            "scroll-me": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Top
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mt": [{
            "scroll-mt": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Right
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mr": [{
            "scroll-mr": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Bottom
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mb": [{
            "scroll-mb": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Left
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-ml": [{
            "scroll-ml": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-p": [{
            "scroll-p": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding X
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-px": [{
            "scroll-px": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Y
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-py": [{
            "scroll-py": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Start
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-ps": [{
            "scroll-ps": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding End
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pe": [{
            "scroll-pe": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Top
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pt": [{
            "scroll-pt": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Right
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pr": [{
            "scroll-pr": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Bottom
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pb": [{
            "scroll-pb": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Left
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pl": [{
            "scroll-pl": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Snap Align
           * @see https://tailwindcss.com/docs/scroll-snap-align
           */
          "snap-align": [{
            snap: ["start", "end", "center", "align-none"]
          }],
          /**
           * Scroll Snap Stop
           * @see https://tailwindcss.com/docs/scroll-snap-stop
           */
          "snap-stop": [{
            snap: ["normal", "always"]
          }],
          /**
           * Scroll Snap Type
           * @see https://tailwindcss.com/docs/scroll-snap-type
           */
          "snap-type": [{
            snap: ["none", "x", "y", "both"]
          }],
          /**
           * Scroll Snap Type Strictness
           * @see https://tailwindcss.com/docs/scroll-snap-type
           */
          "snap-strictness": [{
            snap: ["mandatory", "proximity"]
          }],
          /**
           * Touch Action
           * @see https://tailwindcss.com/docs/touch-action
           */
          touch: [{
            touch: ["auto", "none", "manipulation"]
          }],
          /**
           * Touch Action X
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-x": [{
            "touch-pan": ["x", "left", "right"]
          }],
          /**
           * Touch Action Y
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-y": [{
            "touch-pan": ["y", "up", "down"]
          }],
          /**
           * Touch Action Pinch Zoom
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-pz": ["touch-pinch-zoom"],
          /**
           * User Select
           * @see https://tailwindcss.com/docs/user-select
           */
          select: [{
            select: ["none", "text", "all", "auto"]
          }],
          /**
           * Will Change
           * @see https://tailwindcss.com/docs/will-change
           */
          "will-change": [{
            "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
          }],
          // SVG
          /**
           * Fill
           * @see https://tailwindcss.com/docs/fill
           */
          fill: [{
            fill: [colors, "none"]
          }],
          /**
           * Stroke Width
           * @see https://tailwindcss.com/docs/stroke-width
           */
          "stroke-w": [{
            stroke: [isLength, isArbitraryLength, isArbitraryNumber]
          }],
          /**
           * Stroke
           * @see https://tailwindcss.com/docs/stroke
           */
          stroke: [{
            stroke: [colors, "none"]
          }],
          // Accessibility
          /**
           * Screen Readers
           * @see https://tailwindcss.com/docs/screen-readers
           */
          sr: ["sr-only", "not-sr-only"],
          /**
           * Forced Color Adjust
           * @see https://tailwindcss.com/docs/forced-color-adjust
           */
          "forced-color-adjust": [{
            "forced-color-adjust": ["auto", "none"]
          }]
        },
        conflictingClassGroups: {
          overflow: ["overflow-x", "overflow-y"],
          overscroll: ["overscroll-x", "overscroll-y"],
          inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
          "inset-x": ["right", "left"],
          "inset-y": ["top", "bottom"],
          flex: ["basis", "grow", "shrink"],
          gap: ["gap-x", "gap-y"],
          p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
          px: ["pr", "pl"],
          py: ["pt", "pb"],
          m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
          mx: ["mr", "ml"],
          my: ["mt", "mb"],
          size: ["w", "h"],
          "font-size": ["leading"],
          "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
          "fvn-ordinal": ["fvn-normal"],
          "fvn-slashed-zero": ["fvn-normal"],
          "fvn-figure": ["fvn-normal"],
          "fvn-spacing": ["fvn-normal"],
          "fvn-fraction": ["fvn-normal"],
          "line-clamp": ["display", "overflow"],
          rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
          "rounded-s": ["rounded-ss", "rounded-es"],
          "rounded-e": ["rounded-se", "rounded-ee"],
          "rounded-t": ["rounded-tl", "rounded-tr"],
          "rounded-r": ["rounded-tr", "rounded-br"],
          "rounded-b": ["rounded-br", "rounded-bl"],
          "rounded-l": ["rounded-tl", "rounded-bl"],
          "border-spacing": ["border-spacing-x", "border-spacing-y"],
          "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
          "border-w-x": ["border-w-r", "border-w-l"],
          "border-w-y": ["border-w-t", "border-w-b"],
          "border-color": ["border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
          "border-color-x": ["border-color-r", "border-color-l"],
          "border-color-y": ["border-color-t", "border-color-b"],
          "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
          "scroll-mx": ["scroll-mr", "scroll-ml"],
          "scroll-my": ["scroll-mt", "scroll-mb"],
          "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
          "scroll-px": ["scroll-pr", "scroll-pl"],
          "scroll-py": ["scroll-pt", "scroll-pb"],
          touch: ["touch-x", "touch-y", "touch-pz"],
          "touch-x": ["touch"],
          "touch-y": ["touch"],
          "touch-pz": ["touch"]
        },
        conflictingClassGroupModifiers: {
          "font-size": ["leading"]
        }
      };
    };
    const twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);
    function cn$1(...inputs) {
      return twMerge(clsx(inputs));
    }
    const Button$1 = React.forwardRef(
      (_a, ref) => {
        var _b = _a, {
          variant = "primary",
          size = "md",
          disabled = false,
          isIconOnly = false,
          showTooltip = false,
          leftIcon,
          rightIcon,
          showLeftIcon = false,
          showRightIcon = false,
          tooltip,
          className,
          children
        } = _b, props = __objRest(_b, [
          "variant",
          "size",
          "disabled",
          "isIconOnly",
          "showTooltip",
          "leftIcon",
          "rightIcon",
          "showLeftIcon",
          "showRightIcon",
          "tooltip",
          "className",
          "children"
        ]);
        const baseStyles = cn$1(
          "inline-flex items-center justify-center rounded-lg transition-colors duration-200",
          "focus:outline-none focus-visible:ring-2 focus-visible:ring-line-primary-light dark:focus-visible:ring-line-primary-dark focus-visible:ring-offset-2",
          "relative group"
        );
        const variantStyles = {
          primary: cn$1(
            "bg-fill-primary-light dark:bg-fill-primary-dark",
            "!text-text-inverted-light dark:!text-text-inverted-dark",
            "hover:bg-gray-850 dark:hover:bg-gray-100",
            "disabled:bg-fill-disabled-light dark:disabled:bg-fill-disabled-dark",
            "disabled:text-text-disabled-light dark:disabled:text-text-disabled-dark",
            "disabled:cursor-not-allowed"
          ),
          secondary: cn$1(
            "bg-fill-secondary-light dark:bg-fill-secondary-dark",
            "text-text-primary-light dark:text-text-primary-dark",
            "border border-line-secondary-light dark:border-line-secondary-dark",
            "hover:bg-gray-50 dark:hover:bg-gray-800",
            "disabled:text-text-disabled-light dark:disabled:text-text-disabled-dark",
            "disabled:border-line-disabled-light dark:disabled:border-line-disabled-dark",
            "disabled:cursor-not-allowed"
          ),
          tertiary: cn$1(
            "bg-transparent",
            "text-text-primary-light dark:text-text-primary-dark",
            "hover:bg-gray-50 dark:hover:bg-gray-800",
            "disabled:text-text-disabled-light dark:disabled:text-text-disabled-dark",
            "disabled:cursor-not-allowed"
          )
        };
        const sizeStyles2 = {
          sm: isIconOnly ? "w-7 h-7" : cn$1(
            "px-4",
            "h-[32px] min-w-[100px]",
            "text-body-md-md leading-none gap-1.5"
          ),
          md: isIconOnly ? "w-9 h-9" : cn$1(
            "px-4",
            "h-[40px] min-w-[100px]",
            "text-body-md-md leading-none gap-2"
          ),
          lg: isIconOnly ? "w-9 h-9" : cn$1(
            "px-5",
            "h-[48px] min-w-[100px]",
            "text-body-lg-md leading-none gap-2"
          )
        };
        const iconColorStyles = {
          primary: cn$1(
            "[&>svg]:text-icon-inverted-light dark:[&>svg]:text-icon-inverted-dark",
            "disabled:[&>svg]:text-icon-disabled-light dark:disabled:[&>svg]:text-icon-disabled-dark"
          ),
          secondary: cn$1(
            "[&>svg]:text-icon-primary-light dark:[&>svg]:text-icon-primary-dark",
            "disabled:[&>svg]:text-icon-disabled-light dark:disabled:[&>svg]:text-icon-disabled-dark"
          ),
          tertiary: cn$1(
            "[&>svg]:text-icon-primary-light dark:[&>svg]:text-icon-primary-dark",
            "disabled:[&>svg]:text-icon-disabled-light dark:disabled:[&>svg]:text-icon-disabled-dark"
          )
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          __spreadProps(__spreadValues({
            ref,
            type: "button",
            disabled,
            className: cn$1(
              baseStyles,
              variantStyles[variant],
              sizeStyles2[size],
              iconColorStyles[variant],
              isIconOnly && "flex items-center justify-center p-0",
              isIconOnly ? size === "sm" ? "[&_svg]:w-4 [&_svg]:h-4" : size === "md" ? "[&_svg]:w-5 [&_svg]:h-5" : "[&_svg]:w-6 [&_svg]:h-6" : "[&_svg]:w-4 [&_svg]:h-4",
              className
            )
          }, props), {
            children: [
              showLeftIcon && leftIcon && !isIconOnly && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "flex items-center justify-center", children: leftIcon }),
              !isIconOnly && children,
              isIconOnly && leftIcon && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "flex items-center justify-center", children: leftIcon }),
              showRightIcon && rightIcon && !isIconOnly && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "flex items-center justify-center", children: rightIcon }),
              isIconOnly && showTooltip && tooltip && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-1 bg-fill-dim50-light/50 dark:bg-fill-dim50-dark/50 rounded opacity-0 group-hover:opacity-100 transition-opacity", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-text-inverted-light dark:text-text-inverted-dark text-xs font-medium leading-none whitespace-nowrap", children: tooltip }) })
            ]
          })
        );
      }
    );
    Button$1.displayName = "Button";
    const Button = React.forwardRef(
      (props, ref) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Button$1, __spreadProps(__spreadValues({}, props), { ref }));
      }
    );
    Button.displayName = "Button";
    var define_process_env_default$1 = {};
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const CONSTANTS = {
      /**
       * @define {boolean} Whether this is the Admin Node.js SDK.
       */
      NODE_ADMIN: false,
      /**
       * Firebase SDK Version
       */
      SDK_VERSION: "${JSCORE_VERSION}"
    };
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const assert = function(assertion, message) {
      if (!assertion) {
        throw assertionError(message);
      }
    };
    const assertionError = function(message) {
      return new Error("Firebase Database (" + CONSTANTS.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + message);
    };
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const stringToByteArray$1 = function(str) {
      const out = [];
      let p2 = 0;
      for (let i = 0; i < str.length; i++) {
        let c = str.charCodeAt(i);
        if (c < 128) {
          out[p2++] = c;
        } else if (c < 2048) {
          out[p2++] = c >> 6 | 192;
          out[p2++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
          c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
          out[p2++] = c >> 18 | 240;
          out[p2++] = c >> 12 & 63 | 128;
          out[p2++] = c >> 6 & 63 | 128;
          out[p2++] = c & 63 | 128;
        } else {
          out[p2++] = c >> 12 | 224;
          out[p2++] = c >> 6 & 63 | 128;
          out[p2++] = c & 63 | 128;
        }
      }
      return out;
    };
    const byteArrayToString = function(bytes) {
      const out = [];
      let pos = 0, c = 0;
      while (pos < bytes.length) {
        const c1 = bytes[pos++];
        if (c1 < 128) {
          out[c++] = String.fromCharCode(c1);
        } else if (c1 > 191 && c1 < 224) {
          const c2 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
          const c2 = bytes[pos++];
          const c3 = bytes[pos++];
          const c4 = bytes[pos++];
          const u2 = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
          out[c++] = String.fromCharCode(55296 + (u2 >> 10));
          out[c++] = String.fromCharCode(56320 + (u2 & 1023));
        } else {
          const c2 = bytes[pos++];
          const c3 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
      }
      return out.join("");
    };
    const base64 = {
      /**
       * Maps bytes to characters.
       */
      byteToCharMap_: null,
      /**
       * Maps characters to bytes.
       */
      charToByteMap_: null,
      /**
       * Maps bytes to websafe characters.
       * @private
       */
      byteToCharMapWebSafe_: null,
      /**
       * Maps websafe characters to bytes.
       * @private
       */
      charToByteMapWebSafe_: null,
      /**
       * Our default alphabet, shared between
       * ENCODED_VALS and ENCODED_VALS_WEBSAFE
       */
      ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      /**
       * Our default alphabet. Value 64 (=) is special; it means "nothing."
       */
      get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + "+/=";
      },
      /**
       * Our websafe alphabet.
       */
      get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + "-_.";
      },
      /**
       * Whether this browser supports the atob and btoa functions. This extension
       * started at Mozilla but is now implemented by many browsers. We use the
       * ASSUME_* variables to avoid pulling in the full useragent detection library
       * but still allowing the standard per-browser compilations.
       *
       */
      HAS_NATIVE_SUPPORT: typeof atob === "function",
      /**
       * Base64-encode an array of bytes.
       *
       * @param input An array of bytes (numbers with
       *     value in [0, 255]) to encode.
       * @param webSafe Boolean indicating we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeByteArray(input, webSafe) {
        if (!Array.isArray(input)) {
          throw Error("encodeByteArray takes an array as a parameter");
        }
        this.init_();
        const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        const output = [];
        for (let i = 0; i < input.length; i += 3) {
          const byte1 = input[i];
          const haveByte2 = i + 1 < input.length;
          const byte2 = haveByte2 ? input[i + 1] : 0;
          const haveByte3 = i + 2 < input.length;
          const byte3 = haveByte3 ? input[i + 2] : 0;
          const outByte1 = byte1 >> 2;
          const outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
          let outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
          let outByte4 = byte3 & 63;
          if (!haveByte3) {
            outByte4 = 64;
            if (!haveByte2) {
              outByte3 = 64;
            }
          }
          output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join("");
      },
      /**
       * Base64-encode a string.
       *
       * @param input A string to encode.
       * @param webSafe If true, we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeString(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
      },
      /**
       * Base64-decode a string.
       *
       * @param input to decode.
       * @param webSafe True if we should use the
       *     alternative alphabet.
       * @return string representing the decoded value.
       */
      decodeString(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
      },
      /**
       * Base64-decode a string.
       *
       * In base-64 decoding, groups of four characters are converted into three
       * bytes.  If the encoder did not apply padding, the input length may not
       * be a multiple of 4.
       *
       * In this case, the last group will have fewer than 4 characters, and
       * padding will be inferred.  If the group has one or two characters, it decodes
       * to one byte.  If the group has three characters, it decodes to two bytes.
       *
       * @param input Input to decode.
       * @param webSafe True if we should use the web-safe alphabet.
       * @return bytes representing the decoded value.
       */
      decodeStringToByteArray(input, webSafe) {
        this.init_();
        const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        const output = [];
        for (let i = 0; i < input.length; ) {
          const byte1 = charToByteMap[input.charAt(i++)];
          const haveByte2 = i < input.length;
          const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
          ++i;
          const haveByte3 = i < input.length;
          const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          const haveByte4 = i < input.length;
          const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
            throw new DecodeBase64StringError();
          }
          const outByte1 = byte1 << 2 | byte2 >> 4;
          output.push(outByte1);
          if (byte3 !== 64) {
            const outByte2 = byte2 << 4 & 240 | byte3 >> 2;
            output.push(outByte2);
            if (byte4 !== 64) {
              const outByte3 = byte3 << 6 & 192 | byte4;
              output.push(outByte3);
            }
          }
        }
        return output;
      },
      /**
       * Lazy static initialization function. Called before
       * accessing any of the static map variables.
       * @private
       */
      init_() {
        if (!this.byteToCharMap_) {
          this.byteToCharMap_ = {};
          this.charToByteMap_ = {};
          this.byteToCharMapWebSafe_ = {};
          this.charToByteMapWebSafe_ = {};
          for (let i = 0; i < this.ENCODED_VALS.length; i++) {
            this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
            this.charToByteMap_[this.byteToCharMap_[i]] = i;
            this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
            this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
            if (i >= this.ENCODED_VALS_BASE.length) {
              this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
              this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
            }
          }
        }
      }
    };
    class DecodeBase64StringError extends Error {
      constructor() {
        super(...arguments);
        this.name = "DecodeBase64StringError";
      }
    }
    const base64Encode = function(str) {
      const utf8Bytes = stringToByteArray$1(str);
      return base64.encodeByteArray(utf8Bytes, true);
    };
    const base64urlEncodeWithoutPadding = function(str) {
      return base64Encode(str).replace(/\./g, "");
    };
    const base64Decode = function(str) {
      try {
        return base64.decodeString(str, true);
      } catch (e) {
        console.error("base64Decode failed: ", e);
      }
      return null;
    };
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deepCopy(value) {
      return deepExtend(void 0, value);
    }
    function deepExtend(target, source) {
      if (!(source instanceof Object)) {
        return source;
      }
      switch (source.constructor) {
        case Date:
          const dateValue = source;
          return new Date(dateValue.getTime());
        case Object:
          if (target === void 0) {
            target = {};
          }
          break;
        case Array:
          target = [];
          break;
        default:
          return source;
      }
      for (const prop in source) {
        if (!source.hasOwnProperty(prop) || !isValidKey$1(prop)) {
          continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
      }
      return target;
    }
    function isValidKey$1(key) {
      return key !== "__proto__";
    }
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getGlobal() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("Unable to locate global object.");
    }
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
    const getDefaultsFromEnvVariable = () => {
      if (typeof process === "undefined" || typeof define_process_env_default$1 === "undefined") {
        return;
      }
      const defaultsJsonString = define_process_env_default$1.__FIREBASE_DEFAULTS__;
      if (defaultsJsonString) {
        return JSON.parse(defaultsJsonString);
      }
    };
    const getDefaultsFromCookie = () => {
      if (typeof document === "undefined") {
        return;
      }
      let match;
      try {
        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
      } catch (e) {
        return;
      }
      const decoded = match && base64Decode(match[1]);
      return decoded && JSON.parse(decoded);
    };
    const getDefaults = () => {
      try {
        return getDefaultsFromGlobal() || getDefaultsFromEnvVariable() || getDefaultsFromCookie();
      } catch (e) {
        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
        return;
      }
    };
    const getDefaultEmulatorHost = (productName) => {
      var _a, _b;
      return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName];
    };
    const getDefaultEmulatorHostnameAndPort = (productName) => {
      const host = getDefaultEmulatorHost(productName);
      if (!host) {
        return void 0;
      }
      const separatorIndex = host.lastIndexOf(":");
      if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
        throw new Error(`Invalid host ${host} with no separate hostname and port!`);
      }
      const port = parseInt(host.substring(separatorIndex + 1), 10);
      if (host[0] === "[") {
        return [host.substring(1, separatorIndex - 1), port];
      } else {
        return [host.substring(0, separatorIndex), port];
      }
    };
    const getDefaultAppConfig = () => {
      var _a;
      return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config;
    };
    const getExperimentalSetting = (name2) => {
      var _a;
      return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name2}`];
    };
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Deferred {
      constructor() {
        this.reject = () => {
        };
        this.resolve = () => {
        };
        this.promise = new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
      }
      /**
       * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around
       * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
       * and returns a node-style callback which will resolve or reject the Deferred's promise.
       */
      wrapCallback(callback) {
        return (error2, value) => {
          if (error2) {
            this.reject(error2);
          } else {
            this.resolve(value);
          }
          if (typeof callback === "function") {
            this.promise.catch(() => {
            });
            if (callback.length === 1) {
              callback(error2);
            } else {
              callback(error2, value);
            }
          }
        };
      }
    }
    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createMockUserToken(token, projectId) {
      if (token.uid) {
        throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
      }
      const header = {
        alg: "none",
        type: "JWT"
      };
      const project = projectId || "demo-project";
      const iat = token.iat || 0;
      const sub = token.sub || token.user_id;
      if (!sub) {
        throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
      }
      const payload = Object.assign({
        // Set all required fields to decent defaults
        iss: `https://securetoken.google.com/${project}`,
        aud: project,
        iat,
        exp: iat + 3600,
        auth_time: iat,
        sub,
        user_id: sub,
        firebase: {
          sign_in_provider: "custom",
          identities: {}
        }
      }, token);
      const signature = "";
      return [
        base64urlEncodeWithoutPadding(JSON.stringify(header)),
        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
        signature
      ].join(".");
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getUA() {
      if (typeof navigator !== "undefined" && typeof navigator["userAgent"] === "string") {
        return navigator["userAgent"];
      } else {
        return "";
      }
    }
    function isMobileCordova() {
      return typeof window !== "undefined" && // @ts-ignore Setting up an broadly applicable index signature for Window
      // just to deal with this case would probably be a bad idea.
      !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
    }
    function isNode() {
      var _a;
      const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;
      if (forceEnvironment === "node") {
        return true;
      } else if (forceEnvironment === "browser") {
        return false;
      }
      try {
        return Object.prototype.toString.call(global.process) === "[object process]";
      } catch (e) {
        return false;
      }
    }
    function isCloudflareWorker() {
      return typeof navigator !== "undefined" && navigator.userAgent === "Cloudflare-Workers";
    }
    function isBrowserExtension() {
      const runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : void 0;
      return typeof runtime === "object" && runtime.id !== void 0;
    }
    function isReactNative() {
      return typeof navigator === "object" && navigator["product"] === "ReactNative";
    }
    function isIE() {
      const ua2 = getUA();
      return ua2.indexOf("MSIE ") >= 0 || ua2.indexOf("Trident/") >= 0;
    }
    function isNodeSdk() {
      return CONSTANTS.NODE_ADMIN === true;
    }
    function isSafari() {
      return !isNode() && !!navigator.userAgent && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
    }
    function isIndexedDBAvailable() {
      try {
        return typeof indexedDB === "object";
      } catch (e) {
        return false;
      }
    }
    function validateIndexedDBOpenable() {
      return new Promise((resolve, reject) => {
        try {
          let preExist = true;
          const DB_CHECK_NAME = "validate-browser-context-for-indexeddb-analytics-module";
          const request = self.indexedDB.open(DB_CHECK_NAME);
          request.onsuccess = () => {
            request.result.close();
            if (!preExist) {
              self.indexedDB.deleteDatabase(DB_CHECK_NAME);
            }
            resolve(true);
          };
          request.onupgradeneeded = () => {
            preExist = false;
          };
          request.onerror = () => {
            var _a;
            reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || "");
          };
        } catch (error2) {
          reject(error2);
        }
      });
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const ERROR_NAME = "FirebaseError";
    class FirebaseError extends Error {
      constructor(code, message, customData) {
        super(message);
        this.code = code;
        this.customData = customData;
        this.name = ERROR_NAME;
        Object.setPrototypeOf(this, FirebaseError.prototype);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, ErrorFactory.prototype.create);
        }
      }
    }
    class ErrorFactory {
      constructor(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
      }
      create(code, ...data) {
        const customData = data[0] || {};
        const fullCode = `${this.service}/${code}`;
        const template = this.errors[code];
        const message = template ? replaceTemplate(template, customData) : "Error";
        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
        const error2 = new FirebaseError(fullCode, fullMessage, customData);
        return error2;
      }
    }
    function replaceTemplate(template, data) {
      return template.replace(PATTERN, (_, key) => {
        const value = data[key];
        return value != null ? String(value) : `<${key}?>`;
      });
    }
    const PATTERN = /\{\$([^}]+)}/g;
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function jsonEval(str) {
      return JSON.parse(str);
    }
    function stringify(data) {
      return JSON.stringify(data);
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const decode = function(token) {
      let header = {}, claims = {}, data = {}, signature = "";
      try {
        const parts = token.split(".");
        header = jsonEval(base64Decode(parts[0]) || "");
        claims = jsonEval(base64Decode(parts[1]) || "");
        signature = parts[2];
        data = claims["d"] || {};
        delete claims["d"];
      } catch (e) {
      }
      return {
        header,
        claims,
        data,
        signature
      };
    };
    const isValidFormat = function(token) {
      const decoded = decode(token), claims = decoded.claims;
      return !!claims && typeof claims === "object" && claims.hasOwnProperty("iat");
    };
    const isAdmin = function(token) {
      const claims = decode(token).claims;
      return typeof claims === "object" && claims["admin"] === true;
    };
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function contains(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function safeGet(obj, key) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        return obj[key];
      } else {
        return void 0;
      }
    }
    function isEmpty$1(obj) {
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return false;
        }
      }
      return true;
    }
    function map(obj, fn, contextObj) {
      const res = {};
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          res[key] = fn.call(contextObj, obj[key], key, obj);
        }
      }
      return res;
    }
    function deepEqual(a, b2) {
      if (a === b2) {
        return true;
      }
      const aKeys = Object.keys(a);
      const bKeys = Object.keys(b2);
      for (const k2 of aKeys) {
        if (!bKeys.includes(k2)) {
          return false;
        }
        const aProp = a[k2];
        const bProp = b2[k2];
        if (isObject(aProp) && isObject(bProp)) {
          if (!deepEqual(aProp, bProp)) {
            return false;
          }
        } else if (aProp !== bProp) {
          return false;
        }
      }
      for (const k2 of bKeys) {
        if (!aKeys.includes(k2)) {
          return false;
        }
      }
      return true;
    }
    function isObject(thing) {
      return thing !== null && typeof thing === "object";
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function querystring(querystringParams) {
      const params = [];
      for (const [key, value] of Object.entries(querystringParams)) {
        if (Array.isArray(value)) {
          value.forEach((arrayVal) => {
            params.push(encodeURIComponent(key) + "=" + encodeURIComponent(arrayVal));
          });
        } else {
          params.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
        }
      }
      return params.length ? "&" + params.join("&") : "";
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Sha1 {
      constructor() {
        this.chain_ = [];
        this.buf_ = [];
        this.W_ = [];
        this.pad_ = [];
        this.inbuf_ = 0;
        this.total_ = 0;
        this.blockSize = 512 / 8;
        this.pad_[0] = 128;
        for (let i = 1; i < this.blockSize; ++i) {
          this.pad_[i] = 0;
        }
        this.reset();
      }
      reset() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
      }
      /**
       * Internal compress helper function.
       * @param buf Block to compress.
       * @param offset Offset of the block in the buffer.
       * @private
       */
      compress_(buf, offset) {
        if (!offset) {
          offset = 0;
        }
        const W2 = this.W_;
        if (typeof buf === "string") {
          for (let i = 0; i < 16; i++) {
            W2[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
          }
        } else {
          for (let i = 0; i < 16; i++) {
            W2[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
          }
        }
        for (let i = 16; i < 80; i++) {
          const t2 = W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16];
          W2[i] = (t2 << 1 | t2 >>> 31) & 4294967295;
        }
        let a = this.chain_[0];
        let b2 = this.chain_[1];
        let c = this.chain_[2];
        let d = this.chain_[3];
        let e = this.chain_[4];
        let f2, k2;
        for (let i = 0; i < 80; i++) {
          if (i < 40) {
            if (i < 20) {
              f2 = d ^ b2 & (c ^ d);
              k2 = 1518500249;
            } else {
              f2 = b2 ^ c ^ d;
              k2 = 1859775393;
            }
          } else {
            if (i < 60) {
              f2 = b2 & c | d & (b2 | c);
              k2 = 2400959708;
            } else {
              f2 = b2 ^ c ^ d;
              k2 = 3395469782;
            }
          }
          const t2 = (a << 5 | a >>> 27) + f2 + e + k2 + W2[i] & 4294967295;
          e = d;
          d = c;
          c = (b2 << 30 | b2 >>> 2) & 4294967295;
          b2 = a;
          a = t2;
        }
        this.chain_[0] = this.chain_[0] + a & 4294967295;
        this.chain_[1] = this.chain_[1] + b2 & 4294967295;
        this.chain_[2] = this.chain_[2] + c & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
      }
      update(bytes, length) {
        if (bytes == null) {
          return;
        }
        if (length === void 0) {
          length = bytes.length;
        }
        const lengthMinusBlock = length - this.blockSize;
        let n2 = 0;
        const buf = this.buf_;
        let inbuf = this.inbuf_;
        while (n2 < length) {
          if (inbuf === 0) {
            while (n2 <= lengthMinusBlock) {
              this.compress_(bytes, n2);
              n2 += this.blockSize;
            }
          }
          if (typeof bytes === "string") {
            while (n2 < length) {
              buf[inbuf] = bytes.charCodeAt(n2);
              ++inbuf;
              ++n2;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          } else {
            while (n2 < length) {
              buf[inbuf] = bytes[n2];
              ++inbuf;
              ++n2;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
      }
      /** @override */
      digest() {
        const digest = [];
        let totalBits = this.total_ * 8;
        if (this.inbuf_ < 56) {
          this.update(this.pad_, 56 - this.inbuf_);
        } else {
          this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        for (let i = this.blockSize - 1; i >= 56; i--) {
          this.buf_[i] = totalBits & 255;
          totalBits /= 256;
        }
        this.compress_(this.buf_);
        let n2 = 0;
        for (let i = 0; i < 5; i++) {
          for (let j = 24; j >= 0; j -= 8) {
            digest[n2] = this.chain_[i] >> j & 255;
            ++n2;
          }
        }
        return digest;
      }
    }
    function createSubscribe(executor, onNoObservers) {
      const proxy = new ObserverProxy(executor, onNoObservers);
      return proxy.subscribe.bind(proxy);
    }
    class ObserverProxy {
      /**
       * @param executor Function which can make calls to a single Observer
       *     as a proxy.
       * @param onNoObservers Callback when count of Observers goes to zero.
       */
      constructor(executor, onNoObservers) {
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        this.task.then(() => {
          executor(this);
        }).catch((e) => {
          this.error(e);
        });
      }
      next(value) {
        this.forEachObserver((observer) => {
          observer.next(value);
        });
      }
      error(error2) {
        this.forEachObserver((observer) => {
          observer.error(error2);
        });
        this.close(error2);
      }
      complete() {
        this.forEachObserver((observer) => {
          observer.complete();
        });
        this.close();
      }
      /**
       * Subscribe function that can be used to add an Observer to the fan-out list.
       *
       * - We require that no event is sent to a subscriber synchronously to their
       *   call to subscribe().
       */
      subscribe(nextOrObserver, error2, complete) {
        let observer;
        if (nextOrObserver === void 0 && error2 === void 0 && complete === void 0) {
          throw new Error("Missing Observer.");
        }
        if (implementsAnyMethods(nextOrObserver, [
          "next",
          "error",
          "complete"
        ])) {
          observer = nextOrObserver;
        } else {
          observer = {
            next: nextOrObserver,
            error: error2,
            complete
          };
        }
        if (observer.next === void 0) {
          observer.next = noop;
        }
        if (observer.error === void 0) {
          observer.error = noop;
        }
        if (observer.complete === void 0) {
          observer.complete = noop;
        }
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        if (this.finalized) {
          this.task.then(() => {
            try {
              if (this.finalError) {
                observer.error(this.finalError);
              } else {
                observer.complete();
              }
            } catch (e) {
            }
            return;
          });
        }
        this.observers.push(observer);
        return unsub;
      }
      // Unsubscribe is synchronous - we guarantee that no events are sent to
      // any unsubscribed Observer.
      unsubscribeOne(i) {
        if (this.observers === void 0 || this.observers[i] === void 0) {
          return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== void 0) {
          this.onNoObservers(this);
        }
      }
      forEachObserver(fn) {
        if (this.finalized) {
          return;
        }
        for (let i = 0; i < this.observers.length; i++) {
          this.sendOne(i, fn);
        }
      }
      // Call the Observer via one of it's callback function. We are careful to
      // confirm that the observe has not been unsubscribed since this asynchronous
      // function had been queued.
      sendOne(i, fn) {
        this.task.then(() => {
          if (this.observers !== void 0 && this.observers[i] !== void 0) {
            try {
              fn(this.observers[i]);
            } catch (e) {
              if (typeof console !== "undefined" && console.error) {
                console.error(e);
              }
            }
          }
        });
      }
      close(err) {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        if (err !== void 0) {
          this.finalError = err;
        }
        this.task.then(() => {
          this.observers = void 0;
          this.onNoObservers = void 0;
        });
      }
    }
    function implementsAnyMethods(obj, methods) {
      if (typeof obj !== "object" || obj === null) {
        return false;
      }
      for (const method of methods) {
        if (method in obj && typeof obj[method] === "function") {
          return true;
        }
      }
      return false;
    }
    function noop() {
    }
    function errorPrefix(fnName, argName) {
      return `${fnName} failed: ${argName} argument `;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const stringToByteArray = function(str) {
      const out = [];
      let p2 = 0;
      for (let i = 0; i < str.length; i++) {
        let c = str.charCodeAt(i);
        if (c >= 55296 && c <= 56319) {
          const high = c - 55296;
          i++;
          assert(i < str.length, "Surrogate pair missing trail surrogate.");
          const low = str.charCodeAt(i) - 56320;
          c = 65536 + (high << 10) + low;
        }
        if (c < 128) {
          out[p2++] = c;
        } else if (c < 2048) {
          out[p2++] = c >> 6 | 192;
          out[p2++] = c & 63 | 128;
        } else if (c < 65536) {
          out[p2++] = c >> 12 | 224;
          out[p2++] = c >> 6 & 63 | 128;
          out[p2++] = c & 63 | 128;
        } else {
          out[p2++] = c >> 18 | 240;
          out[p2++] = c >> 12 & 63 | 128;
          out[p2++] = c >> 6 & 63 | 128;
          out[p2++] = c & 63 | 128;
        }
      }
      return out;
    };
    const stringLength = function(str) {
      let p2 = 0;
      for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        if (c < 128) {
          p2++;
        } else if (c < 2048) {
          p2 += 2;
        } else if (c >= 55296 && c <= 56319) {
          p2 += 4;
          i++;
        } else {
          p2 += 3;
        }
      }
      return p2;
    };
    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getModularInstance(service) {
      if (service && service._delegate) {
        return service._delegate;
      } else {
        return service;
      }
    }
    class Component {
      /**
       *
       * @param name The public service name, e.g. app, auth, firestore, database
       * @param instanceFactory Service factory responsible for creating the public interface
       * @param type whether the service provided by the component is public or private
       */
      constructor(name2, instanceFactory, type) {
        this.name = name2;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        this.serviceProps = {};
        this.instantiationMode = "LAZY";
        this.onInstanceCreated = null;
      }
      setInstantiationMode(mode) {
        this.instantiationMode = mode;
        return this;
      }
      setMultipleInstances(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
      }
      setServiceProps(props) {
        this.serviceProps = props;
        return this;
      }
      setInstanceCreatedCallback(callback) {
        this.onInstanceCreated = callback;
        return this;
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DEFAULT_ENTRY_NAME$1 = "[DEFAULT]";
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Provider {
      constructor(name2, container) {
        this.name = name2;
        this.container = container;
        this.component = null;
        this.instances = /* @__PURE__ */ new Map();
        this.instancesDeferred = /* @__PURE__ */ new Map();
        this.instancesOptions = /* @__PURE__ */ new Map();
        this.onInitCallbacks = /* @__PURE__ */ new Map();
      }
      /**
       * @param identifier A provider can provide multiple instances of a service
       * if this.component.multipleInstances is true.
       */
      get(identifier) {
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
          const deferred = new Deferred();
          this.instancesDeferred.set(normalizedIdentifier, deferred);
          if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
            try {
              const instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
              });
              if (instance) {
                deferred.resolve(instance);
              }
            } catch (e) {
            }
          }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
      }
      getImmediate(options) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
          try {
            return this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });
          } catch (e) {
            if (optional) {
              return null;
            } else {
              throw e;
            }
          }
        } else {
          if (optional) {
            return null;
          } else {
            throw Error(`Service ${this.name} is not available`);
          }
        }
      }
      getComponent() {
        return this.component;
      }
      setComponent(component) {
        if (component.name !== this.name) {
          throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
        }
        if (this.component) {
          throw Error(`Component for ${this.name} has already been provided`);
        }
        this.component = component;
        if (!this.shouldAutoInitialize()) {
          return;
        }
        if (isComponentEager(component)) {
          try {
            this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME$1 });
          } catch (e) {
          }
        }
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
          const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
          try {
            const instance = this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });
            instanceDeferred.resolve(instance);
          } catch (e) {
          }
        }
      }
      clearInstance(identifier = DEFAULT_ENTRY_NAME$1) {
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
      }
      // app.delete() will call this method on every provider to delete the services
      // TODO: should we mark the provider as deleted?
      delete() {
        return __async(this, null, function* () {
          const services = Array.from(this.instances.values());
          yield Promise.all([
            ...services.filter((service) => "INTERNAL" in service).map((service) => service.INTERNAL.delete()),
            ...services.filter((service) => "_delete" in service).map((service) => service._delete())
          ]);
        });
      }
      isComponentSet() {
        return this.component != null;
      }
      isInitialized(identifier = DEFAULT_ENTRY_NAME$1) {
        return this.instances.has(identifier);
      }
      getOptions(identifier = DEFAULT_ENTRY_NAME$1) {
        return this.instancesOptions.get(identifier) || {};
      }
      initialize(opts = {}) {
        const { options = {} } = opts;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) {
          throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
        }
        if (!this.isComponentSet()) {
          throw Error(`Component ${this.name} has not been registered yet`);
        }
        const instance = this.getOrInitializeService({
          instanceIdentifier: normalizedIdentifier,
          options
        });
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
          const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
          if (normalizedIdentifier === normalizedDeferredIdentifier) {
            instanceDeferred.resolve(instance);
          }
        }
        return instance;
      }
      /**
       *
       * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
       * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
       *
       * @param identifier An optional instance identifier
       * @returns a function to unregister the callback
       */
      onInit(callback, identifier) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : /* @__PURE__ */ new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        const existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) {
          callback(existingInstance, normalizedIdentifier);
        }
        return () => {
          existingCallbacks.delete(callback);
        };
      }
      /**
       * Invoke onInit callbacks synchronously
       * @param instance the service instance`
       */
      invokeOnInitCallbacks(instance, identifier) {
        const callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) {
          return;
        }
        for (const callback of callbacks) {
          try {
            callback(instance, identifier);
          } catch (_a) {
          }
        }
      }
      getOrInitializeService({ instanceIdentifier, options = {} }) {
        let instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
          instance = this.component.instanceFactory(this.container, {
            instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
            options
          });
          this.instances.set(instanceIdentifier, instance);
          this.instancesOptions.set(instanceIdentifier, options);
          this.invokeOnInitCallbacks(instance, instanceIdentifier);
          if (this.component.onInstanceCreated) {
            try {
              this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch (_a) {
            }
          }
        }
        return instance || null;
      }
      normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME$1) {
        if (this.component) {
          return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$1;
        } else {
          return identifier;
        }
      }
      shouldAutoInitialize() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT";
      }
    }
    function normalizeIdentifierForFactory(identifier) {
      return identifier === DEFAULT_ENTRY_NAME$1 ? void 0 : identifier;
    }
    function isComponentEager(component) {
      return component.instantiationMode === "EAGER";
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ComponentContainer {
      constructor(name2) {
        this.name = name2;
        this.providers = /* @__PURE__ */ new Map();
      }
      /**
       *
       * @param component Component being added
       * @param overwrite When a component with the same name has already been registered,
       * if overwrite is true: overwrite the existing component with the new component and create a new
       * provider with the new component. It can be useful in tests where you want to use different mocks
       * for different tests.
       * if overwrite is false: throw an exception
       */
      addComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
          throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
        }
        provider.setComponent(component);
      }
      addOrOverwriteComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
          this.providers.delete(component.name);
        }
        this.addComponent(component);
      }
      /**
       * getProvider provides a type safe interface where it can only be called with a field name
       * present in NameServiceMapping interface.
       *
       * Firebase SDKs providing services should extend NameServiceMapping interface to register
       * themselves.
       */
      getProvider(name2) {
        if (this.providers.has(name2)) {
          return this.providers.get(name2);
        }
        const provider = new Provider(name2, this);
        this.providers.set(name2, provider);
        return provider;
      }
      getProviders() {
        return Array.from(this.providers.values());
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LogLevel;
    (function(LogLevel2) {
      LogLevel2[LogLevel2["DEBUG"] = 0] = "DEBUG";
      LogLevel2[LogLevel2["VERBOSE"] = 1] = "VERBOSE";
      LogLevel2[LogLevel2["INFO"] = 2] = "INFO";
      LogLevel2[LogLevel2["WARN"] = 3] = "WARN";
      LogLevel2[LogLevel2["ERROR"] = 4] = "ERROR";
      LogLevel2[LogLevel2["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    const levelStringToEnum = {
      "debug": LogLevel.DEBUG,
      "verbose": LogLevel.VERBOSE,
      "info": LogLevel.INFO,
      "warn": LogLevel.WARN,
      "error": LogLevel.ERROR,
      "silent": LogLevel.SILENT
    };
    const defaultLogLevel = LogLevel.INFO;
    const ConsoleMethod = {
      [LogLevel.DEBUG]: "log",
      [LogLevel.VERBOSE]: "log",
      [LogLevel.INFO]: "info",
      [LogLevel.WARN]: "warn",
      [LogLevel.ERROR]: "error"
    };
    const defaultLogHandler = (instance, logType, ...args) => {
      if (logType < instance.logLevel) {
        return;
      }
      const now = (/* @__PURE__ */ new Date()).toISOString();
      const method = ConsoleMethod[logType];
      if (method) {
        console[method](`[${now}]  ${instance.name}:`, ...args);
      } else {
        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
      }
    };
    class Logger {
      /**
       * Gives you an instance of a Logger to capture messages according to
       * Firebase's logging scheme.
       *
       * @param name The name that the logs will be associated with
       */
      constructor(name2) {
        this.name = name2;
        this._logLevel = defaultLogLevel;
        this._logHandler = defaultLogHandler;
        this._userLogHandler = null;
      }
      get logLevel() {
        return this._logLevel;
      }
      set logLevel(val) {
        if (!(val in LogLevel)) {
          throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
        }
        this._logLevel = val;
      }
      // Workaround for setter/getter having to be the same type.
      setLogLevel(val) {
        this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
      }
      get logHandler() {
        return this._logHandler;
      }
      set logHandler(val) {
        if (typeof val !== "function") {
          throw new TypeError("Value assigned to `logHandler` must be a function");
        }
        this._logHandler = val;
      }
      get userLogHandler() {
        return this._userLogHandler;
      }
      set userLogHandler(val) {
        this._userLogHandler = val;
      }
      /**
       * The functions below are all based on the `console` interface
       */
      debug(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
        this._logHandler(this, LogLevel.DEBUG, ...args);
      }
      log(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);
        this._logHandler(this, LogLevel.VERBOSE, ...args);
      }
      info(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
        this._logHandler(this, LogLevel.INFO, ...args);
      }
      warn(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
        this._logHandler(this, LogLevel.WARN, ...args);
      }
      error(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
        this._logHandler(this, LogLevel.ERROR, ...args);
      }
    }
    const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);
    let idbProxyableTypes;
    let cursorAdvanceMethods;
    function getIdbProxyableTypes() {
      return idbProxyableTypes || (idbProxyableTypes = [
        IDBDatabase,
        IDBObjectStore,
        IDBIndex,
        IDBCursor,
        IDBTransaction
      ]);
    }
    function getCursorAdvanceMethods() {
      return cursorAdvanceMethods || (cursorAdvanceMethods = [
        IDBCursor.prototype.advance,
        IDBCursor.prototype.continue,
        IDBCursor.prototype.continuePrimaryKey
      ]);
    }
    const cursorRequestMap = /* @__PURE__ */ new WeakMap();
    const transactionDoneMap = /* @__PURE__ */ new WeakMap();
    const transactionStoreNamesMap = /* @__PURE__ */ new WeakMap();
    const transformCache = /* @__PURE__ */ new WeakMap();
    const reverseTransformCache = /* @__PURE__ */ new WeakMap();
    function promisifyRequest(request) {
      const promise = new Promise((resolve, reject) => {
        const unlisten = () => {
          request.removeEventListener("success", success);
          request.removeEventListener("error", error2);
        };
        const success = () => {
          resolve(wrap(request.result));
          unlisten();
        };
        const error2 = () => {
          reject(request.error);
          unlisten();
        };
        request.addEventListener("success", success);
        request.addEventListener("error", error2);
      });
      promise.then((value) => {
        if (value instanceof IDBCursor) {
          cursorRequestMap.set(value, request);
        }
      }).catch(() => {
      });
      reverseTransformCache.set(promise, request);
      return promise;
    }
    function cacheDonePromiseForTransaction(tx) {
      if (transactionDoneMap.has(tx))
        return;
      const done = new Promise((resolve, reject) => {
        const unlisten = () => {
          tx.removeEventListener("complete", complete);
          tx.removeEventListener("error", error2);
          tx.removeEventListener("abort", error2);
        };
        const complete = () => {
          resolve();
          unlisten();
        };
        const error2 = () => {
          reject(tx.error || new DOMException("AbortError", "AbortError"));
          unlisten();
        };
        tx.addEventListener("complete", complete);
        tx.addEventListener("error", error2);
        tx.addEventListener("abort", error2);
      });
      transactionDoneMap.set(tx, done);
    }
    let idbProxyTraps = {
      get(target, prop, receiver) {
        if (target instanceof IDBTransaction) {
          if (prop === "done")
            return transactionDoneMap.get(target);
          if (prop === "objectStoreNames") {
            return target.objectStoreNames || transactionStoreNamesMap.get(target);
          }
          if (prop === "store") {
            return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
          }
        }
        return wrap(target[prop]);
      },
      set(target, prop, value) {
        target[prop] = value;
        return true;
      },
      has(target, prop) {
        if (target instanceof IDBTransaction && (prop === "done" || prop === "store")) {
          return true;
        }
        return prop in target;
      }
    };
    function replaceTraps(callback) {
      idbProxyTraps = callback(idbProxyTraps);
    }
    function wrapFunction(func) {
      if (func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype)) {
        return function(storeNames, ...args) {
          const tx = func.call(unwrap(this), storeNames, ...args);
          transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
          return wrap(tx);
        };
      }
      if (getCursorAdvanceMethods().includes(func)) {
        return function(...args) {
          func.apply(unwrap(this), args);
          return wrap(cursorRequestMap.get(this));
        };
      }
      return function(...args) {
        return wrap(func.apply(unwrap(this), args));
      };
    }
    function transformCachableValue(value) {
      if (typeof value === "function")
        return wrapFunction(value);
      if (value instanceof IDBTransaction)
        cacheDonePromiseForTransaction(value);
      if (instanceOfAny(value, getIdbProxyableTypes()))
        return new Proxy(value, idbProxyTraps);
      return value;
    }
    function wrap(value) {
      if (value instanceof IDBRequest)
        return promisifyRequest(value);
      if (transformCache.has(value))
        return transformCache.get(value);
      const newValue = transformCachableValue(value);
      if (newValue !== value) {
        transformCache.set(value, newValue);
        reverseTransformCache.set(newValue, value);
      }
      return newValue;
    }
    const unwrap = (value) => reverseTransformCache.get(value);
    function openDB(name2, version2, { blocked, upgrade, blocking, terminated } = {}) {
      const request = indexedDB.open(name2, version2);
      const openPromise = wrap(request);
      if (upgrade) {
        request.addEventListener("upgradeneeded", (event) => {
          upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
        });
      }
      if (blocked) {
        request.addEventListener("blocked", (event) => blocked(
          // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
          event.oldVersion,
          event.newVersion,
          event
        ));
      }
      openPromise.then((db2) => {
        if (terminated)
          db2.addEventListener("close", () => terminated());
        if (blocking) {
          db2.addEventListener("versionchange", (event) => blocking(event.oldVersion, event.newVersion, event));
        }
      }).catch(() => {
      });
      return openPromise;
    }
    const readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"];
    const writeMethods = ["put", "add", "delete", "clear"];
    const cachedMethods = /* @__PURE__ */ new Map();
    function getMethod(target, prop) {
      if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === "string")) {
        return;
      }
      if (cachedMethods.get(prop))
        return cachedMethods.get(prop);
      const targetFuncName = prop.replace(/FromIndex$/, "");
      const useIndex = prop !== targetFuncName;
      const isWrite = writeMethods.includes(targetFuncName);
      if (
        // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
        !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))
      ) {
        return;
      }
      const method = function(storeName, ...args) {
        return __async(this, null, function* () {
          const tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly");
          let target2 = tx.store;
          if (useIndex)
            target2 = target2.index(args.shift());
          return (yield Promise.all([
            target2[targetFuncName](...args),
            isWrite && tx.done
          ]))[0];
        });
      };
      cachedMethods.set(prop, method);
      return method;
    }
    replaceTraps((oldTraps) => __spreadProps(__spreadValues({}, oldTraps), {
      get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
      has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
    }));
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class PlatformLoggerServiceImpl {
      constructor(container) {
        this.container = container;
      }
      // In initial implementation, this will be called by installations on
      // auth token refresh, and installations will send this string.
      getPlatformInfoString() {
        const providers = this.container.getProviders();
        return providers.map((provider) => {
          if (isVersionServiceProvider(provider)) {
            const service = provider.getImmediate();
            return `${service.library}/${service.version}`;
          } else {
            return null;
          }
        }).filter((logString) => logString).join(" ");
      }
    }
    function isVersionServiceProvider(provider) {
      const component = provider.getComponent();
      return (component === null || component === void 0 ? void 0 : component.type) === "VERSION";
    }
    const name$q = "@firebase/app";
    const version$1$1 = "0.10.13";
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const logger$1 = new Logger("@firebase/app");
    const name$p = "@firebase/app-compat";
    const name$o = "@firebase/analytics-compat";
    const name$n = "@firebase/analytics";
    const name$m = "@firebase/app-check-compat";
    const name$l = "@firebase/app-check";
    const name$k = "@firebase/auth";
    const name$j = "@firebase/auth-compat";
    const name$i = "@firebase/database";
    const name$h = "@firebase/data-connect";
    const name$g = "@firebase/database-compat";
    const name$f = "@firebase/functions";
    const name$e = "@firebase/functions-compat";
    const name$d = "@firebase/installations";
    const name$c = "@firebase/installations-compat";
    const name$b = "@firebase/messaging";
    const name$a = "@firebase/messaging-compat";
    const name$9 = "@firebase/performance";
    const name$8 = "@firebase/performance-compat";
    const name$7 = "@firebase/remote-config";
    const name$6 = "@firebase/remote-config-compat";
    const name$5 = "@firebase/storage";
    const name$4 = "@firebase/storage-compat";
    const name$3 = "@firebase/firestore";
    const name$2$1 = "@firebase/vertexai-preview";
    const name$1$1 = "@firebase/firestore-compat";
    const name$r = "firebase";
    const version$3 = "10.14.1";
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DEFAULT_ENTRY_NAME = "[DEFAULT]";
    const PLATFORM_LOG_STRING = {
      [name$q]: "fire-core",
      [name$p]: "fire-core-compat",
      [name$n]: "fire-analytics",
      [name$o]: "fire-analytics-compat",
      [name$l]: "fire-app-check",
      [name$m]: "fire-app-check-compat",
      [name$k]: "fire-auth",
      [name$j]: "fire-auth-compat",
      [name$i]: "fire-rtdb",
      [name$h]: "fire-data-connect",
      [name$g]: "fire-rtdb-compat",
      [name$f]: "fire-fn",
      [name$e]: "fire-fn-compat",
      [name$d]: "fire-iid",
      [name$c]: "fire-iid-compat",
      [name$b]: "fire-fcm",
      [name$a]: "fire-fcm-compat",
      [name$9]: "fire-perf",
      [name$8]: "fire-perf-compat",
      [name$7]: "fire-rc",
      [name$6]: "fire-rc-compat",
      [name$5]: "fire-gcs",
      [name$4]: "fire-gcs-compat",
      [name$3]: "fire-fst",
      [name$1$1]: "fire-fst-compat",
      [name$2$1]: "fire-vertex",
      "fire-js": "fire-js",
      [name$r]: "fire-js-all"
    };
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const _apps = /* @__PURE__ */ new Map();
    const _serverApps = /* @__PURE__ */ new Map();
    const _components = /* @__PURE__ */ new Map();
    function _addComponent(app2, component) {
      try {
        app2.container.addComponent(component);
      } catch (e) {
        logger$1.debug(`Component ${component.name} failed to register with FirebaseApp ${app2.name}`, e);
      }
    }
    function _registerComponent(component) {
      const componentName = component.name;
      if (_components.has(componentName)) {
        logger$1.debug(`There were multiple attempts to register component ${componentName}.`);
        return false;
      }
      _components.set(componentName, component);
      for (const app2 of _apps.values()) {
        _addComponent(app2, component);
      }
      for (const serverApp of _serverApps.values()) {
        _addComponent(serverApp, component);
      }
      return true;
    }
    function _getProvider(app2, name2) {
      const heartbeatController = app2.container.getProvider("heartbeat").getImmediate({ optional: true });
      if (heartbeatController) {
        void heartbeatController.triggerHeartbeat();
      }
      return app2.container.getProvider(name2);
    }
    function _isFirebaseServerApp(obj) {
      return obj.settings !== void 0;
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const ERRORS = {
      [
        "no-app"
        /* AppError.NO_APP */
      ]: "No Firebase App '{$appName}' has been created - call initializeApp() first",
      [
        "bad-app-name"
        /* AppError.BAD_APP_NAME */
      ]: "Illegal App name: '{$appName}'",
      [
        "duplicate-app"
        /* AppError.DUPLICATE_APP */
      ]: "Firebase App named '{$appName}' already exists with different options or config",
      [
        "app-deleted"
        /* AppError.APP_DELETED */
      ]: "Firebase App named '{$appName}' already deleted",
      [
        "server-app-deleted"
        /* AppError.SERVER_APP_DELETED */
      ]: "Firebase Server App has been deleted",
      [
        "no-options"
        /* AppError.NO_OPTIONS */
      ]: "Need to provide options, when not being deployed to hosting via source.",
      [
        "invalid-app-argument"
        /* AppError.INVALID_APP_ARGUMENT */
      ]: "firebase.{$appName}() takes either no argument or a Firebase App instance.",
      [
        "invalid-log-argument"
        /* AppError.INVALID_LOG_ARGUMENT */
      ]: "First argument to `onLog` must be null or a function.",
      [
        "idb-open"
        /* AppError.IDB_OPEN */
      ]: "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "idb-get"
        /* AppError.IDB_GET */
      ]: "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "idb-set"
        /* AppError.IDB_WRITE */
      ]: "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "idb-delete"
        /* AppError.IDB_DELETE */
      ]: "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "finalization-registry-not-supported"
        /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */
      ]: "FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.",
      [
        "invalid-server-app-environment"
        /* AppError.INVALID_SERVER_APP_ENVIRONMENT */
      ]: "FirebaseServerApp is not for use in browser environments."
    };
    const ERROR_FACTORY = new ErrorFactory("app", "Firebase", ERRORS);
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FirebaseAppImpl {
      constructor(options, config, container) {
        this._isDeleted = false;
        this._options = Object.assign({}, options);
        this._config = Object.assign({}, config);
        this._name = config.name;
        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new Component(
          "app",
          () => this,
          "PUBLIC"
          /* ComponentType.PUBLIC */
        ));
      }
      get automaticDataCollectionEnabled() {
        this.checkDestroyed();
        return this._automaticDataCollectionEnabled;
      }
      set automaticDataCollectionEnabled(val) {
        this.checkDestroyed();
        this._automaticDataCollectionEnabled = val;
      }
      get name() {
        this.checkDestroyed();
        return this._name;
      }
      get options() {
        this.checkDestroyed();
        return this._options;
      }
      get config() {
        this.checkDestroyed();
        return this._config;
      }
      get container() {
        return this._container;
      }
      get isDeleted() {
        return this._isDeleted;
      }
      set isDeleted(val) {
        this._isDeleted = val;
      }
      /**
       * This function will throw an Error if the App has already been deleted -
       * use before performing API actions on the App.
       */
      checkDestroyed() {
        if (this.isDeleted) {
          throw ERROR_FACTORY.create("app-deleted", { appName: this._name });
        }
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const SDK_VERSION$1 = version$3;
    function initializeApp(_options, rawConfig = {}) {
      let options = _options;
      if (typeof rawConfig !== "object") {
        const name3 = rawConfig;
        rawConfig = { name: name3 };
      }
      const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
      const name2 = config.name;
      if (typeof name2 !== "string" || !name2) {
        throw ERROR_FACTORY.create("bad-app-name", {
          appName: String(name2)
        });
      }
      options || (options = getDefaultAppConfig());
      if (!options) {
        throw ERROR_FACTORY.create(
          "no-options"
          /* AppError.NO_OPTIONS */
        );
      }
      const existingApp = _apps.get(name2);
      if (existingApp) {
        if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {
          return existingApp;
        } else {
          throw ERROR_FACTORY.create("duplicate-app", { appName: name2 });
        }
      }
      const container = new ComponentContainer(name2);
      for (const component of _components.values()) {
        container.addComponent(component);
      }
      const newApp = new FirebaseAppImpl(options, config, container);
      _apps.set(name2, newApp);
      return newApp;
    }
    function getApp(name2 = DEFAULT_ENTRY_NAME) {
      const app2 = _apps.get(name2);
      if (!app2 && name2 === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {
        return initializeApp();
      }
      if (!app2) {
        throw ERROR_FACTORY.create("no-app", { appName: name2 });
      }
      return app2;
    }
    function registerVersion(libraryKeyOrName, version2, variant) {
      var _a;
      let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
      if (variant) {
        library += `-${variant}`;
      }
      const libraryMismatch = library.match(/\s|\//);
      const versionMismatch = version2.match(/\s|\//);
      if (libraryMismatch || versionMismatch) {
        const warning2 = [
          `Unable to register library "${library}" with version "${version2}":`
        ];
        if (libraryMismatch) {
          warning2.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
        }
        if (libraryMismatch && versionMismatch) {
          warning2.push("and");
        }
        if (versionMismatch) {
          warning2.push(`version name "${version2}" contains illegal characters (whitespace or "/")`);
        }
        logger$1.warn(warning2.join(" "));
        return;
      }
      _registerComponent(new Component(
        `${library}-version`,
        () => ({ library, version: version2 }),
        "VERSION"
        /* ComponentType.VERSION */
      ));
    }
    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DB_NAME$1 = "firebase-heartbeat-database";
    const DB_VERSION$1 = 1;
    const STORE_NAME = "firebase-heartbeat-store";
    let dbPromise = null;
    function getDbPromise() {
      if (!dbPromise) {
        dbPromise = openDB(DB_NAME$1, DB_VERSION$1, {
          upgrade: (db2, oldVersion) => {
            switch (oldVersion) {
              case 0:
                try {
                  db2.createObjectStore(STORE_NAME);
                } catch (e) {
                  console.warn(e);
                }
            }
          }
        }).catch((e) => {
          throw ERROR_FACTORY.create("idb-open", {
            originalErrorMessage: e.message
          });
        });
      }
      return dbPromise;
    }
    function readHeartbeatsFromIndexedDB(app2) {
      return __async(this, null, function* () {
        try {
          const db2 = yield getDbPromise();
          const tx = db2.transaction(STORE_NAME);
          const result = yield tx.objectStore(STORE_NAME).get(computeKey(app2));
          yield tx.done;
          return result;
        } catch (e) {
          if (e instanceof FirebaseError) {
            logger$1.warn(e.message);
          } else {
            const idbGetError = ERROR_FACTORY.create("idb-get", {
              originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
            });
            logger$1.warn(idbGetError.message);
          }
        }
      });
    }
    function writeHeartbeatsToIndexedDB(app2, heartbeatObject) {
      return __async(this, null, function* () {
        try {
          const db2 = yield getDbPromise();
          const tx = db2.transaction(STORE_NAME, "readwrite");
          const objectStore = tx.objectStore(STORE_NAME);
          yield objectStore.put(heartbeatObject, computeKey(app2));
          yield tx.done;
        } catch (e) {
          if (e instanceof FirebaseError) {
            logger$1.warn(e.message);
          } else {
            const idbGetError = ERROR_FACTORY.create("idb-set", {
              originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
            });
            logger$1.warn(idbGetError.message);
          }
        }
      });
    }
    function computeKey(app2) {
      return `${app2.name}!${app2.options.appId}`;
    }
    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const MAX_HEADER_BYTES = 1024;
    const STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1e3;
    class HeartbeatServiceImpl {
      constructor(container) {
        this.container = container;
        this._heartbeatsCache = null;
        const app2 = this.container.getProvider("app").getImmediate();
        this._storage = new HeartbeatStorageImpl(app2);
        this._heartbeatsCachePromise = this._storage.read().then((result) => {
          this._heartbeatsCache = result;
          return result;
        });
      }
      /**
       * Called to report a heartbeat. The function will generate
       * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
       * to IndexedDB.
       * Note that we only store one heartbeat per day. So if a heartbeat for today is
       * already logged, subsequent calls to this function in the same day will be ignored.
       */
      triggerHeartbeat() {
        return __async(this, null, function* () {
          var _a, _b;
          try {
            const platformLogger = this.container.getProvider("platform-logger").getImmediate();
            const agent = platformLogger.getPlatformInfoString();
            const date = getUTCDateString();
            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {
              this._heartbeatsCache = yield this._heartbeatsCachePromise;
              if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {
                return;
              }
            }
            if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some((singleDateHeartbeat) => singleDateHeartbeat.date === date)) {
              return;
            } else {
              this._heartbeatsCache.heartbeats.push({ date, agent });
            }
            this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter((singleDateHeartbeat) => {
              const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
              const now = Date.now();
              return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
            });
            return this._storage.overwrite(this._heartbeatsCache);
          } catch (e) {
            logger$1.warn(e);
          }
        });
      }
      /**
       * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
       * It also clears all heartbeats from memory as well as in IndexedDB.
       *
       * NOTE: Consuming product SDKs should not send the header if this method
       * returns an empty string.
       */
      getHeartbeatsHeader() {
        return __async(this, null, function* () {
          var _a;
          try {
            if (this._heartbeatsCache === null) {
              yield this._heartbeatsCachePromise;
            }
            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0) {
              return "";
            }
            const date = getUTCDateString();
            const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
            const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
            this._heartbeatsCache.lastSentHeartbeatDate = date;
            if (unsentEntries.length > 0) {
              this._heartbeatsCache.heartbeats = unsentEntries;
              yield this._storage.overwrite(this._heartbeatsCache);
            } else {
              this._heartbeatsCache.heartbeats = [];
              void this._storage.overwrite(this._heartbeatsCache);
            }
            return headerString;
          } catch (e) {
            logger$1.warn(e);
            return "";
          }
        });
      }
    }
    function getUTCDateString() {
      const today = /* @__PURE__ */ new Date();
      return today.toISOString().substring(0, 10);
    }
    function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
      const heartbeatsToSend = [];
      let unsentEntries = heartbeatsCache.slice();
      for (const singleDateHeartbeat of heartbeatsCache) {
        const heartbeatEntry = heartbeatsToSend.find((hb2) => hb2.agent === singleDateHeartbeat.agent);
        if (!heartbeatEntry) {
          heartbeatsToSend.push({
            agent: singleDateHeartbeat.agent,
            dates: [singleDateHeartbeat.date]
          });
          if (countBytes(heartbeatsToSend) > maxSize) {
            heartbeatsToSend.pop();
            break;
          }
        } else {
          heartbeatEntry.dates.push(singleDateHeartbeat.date);
          if (countBytes(heartbeatsToSend) > maxSize) {
            heartbeatEntry.dates.pop();
            break;
          }
        }
        unsentEntries = unsentEntries.slice(1);
      }
      return {
        heartbeatsToSend,
        unsentEntries
      };
    }
    class HeartbeatStorageImpl {
      constructor(app2) {
        this.app = app2;
        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
      }
      runIndexedDBEnvironmentCheck() {
        return __async(this, null, function* () {
          if (!isIndexedDBAvailable()) {
            return false;
          } else {
            return validateIndexedDBOpenable().then(() => true).catch(() => false);
          }
        });
      }
      /**
       * Read all heartbeats.
       */
      read() {
        return __async(this, null, function* () {
          const canUseIndexedDB = yield this._canUseIndexedDBPromise;
          if (!canUseIndexedDB) {
            return { heartbeats: [] };
          } else {
            const idbHeartbeatObject = yield readHeartbeatsFromIndexedDB(this.app);
            if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {
              return idbHeartbeatObject;
            } else {
              return { heartbeats: [] };
            }
          }
        });
      }
      // overwrite the storage with the provided heartbeats
      overwrite(heartbeatsObject) {
        return __async(this, null, function* () {
          var _a;
          const canUseIndexedDB = yield this._canUseIndexedDBPromise;
          if (!canUseIndexedDB) {
            return;
          } else {
            const existingHeartbeatsObject = yield this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
              lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
              heartbeats: heartbeatsObject.heartbeats
            });
          }
        });
      }
      // add heartbeats
      add(heartbeatsObject) {
        return __async(this, null, function* () {
          var _a;
          const canUseIndexedDB = yield this._canUseIndexedDBPromise;
          if (!canUseIndexedDB) {
            return;
          } else {
            const existingHeartbeatsObject = yield this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
              lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
              heartbeats: [
                ...existingHeartbeatsObject.heartbeats,
                ...heartbeatsObject.heartbeats
              ]
            });
          }
        });
      }
    }
    function countBytes(heartbeatsCache) {
      return base64urlEncodeWithoutPadding(
        // heartbeatsCache wrapper properties
        JSON.stringify({ version: 2, heartbeats: heartbeatsCache })
      ).length;
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerCoreComponents(variant) {
      _registerComponent(new Component(
        "platform-logger",
        (container) => new PlatformLoggerServiceImpl(container),
        "PRIVATE"
        /* ComponentType.PRIVATE */
      ));
      _registerComponent(new Component(
        "heartbeat",
        (container) => new HeartbeatServiceImpl(container),
        "PRIVATE"
        /* ComponentType.PRIVATE */
      ));
      registerVersion(name$q, version$1$1, variant);
      registerVersion(name$q, version$1$1, "esm2017");
      registerVersion("fire-js", "");
    }
    registerCoreComponents("");
    var name$2 = "firebase";
    var version$2 = "10.14.1";
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    registerVersion(name$2, version$2, "app");
    function __rest(s, e) {
      var t2 = {};
      for (var p2 in s) if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
        t2[p2] = s[p2];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
          if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
            t2[p2[i]] = s[p2[i]];
        }
      return t2;
    }
    typeof SuppressedError === "function" ? SuppressedError : function(error2, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error2, e.suppressed = suppressed, e;
    };
    function _prodErrorMap() {
      return {
        [
          "dependent-sdk-initialized-before-auth"
          /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */
        ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
      };
    }
    const prodErrorMap = _prodErrorMap;
    const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory("auth", "Firebase", _prodErrorMap());
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const logClient$1 = new Logger("@firebase/auth");
    function _logWarn(msg, ...args) {
      if (logClient$1.logLevel <= LogLevel.WARN) {
        logClient$1.warn(`Auth (${SDK_VERSION$1}): ${msg}`, ...args);
      }
    }
    function _logError(msg, ...args) {
      if (logClient$1.logLevel <= LogLevel.ERROR) {
        logClient$1.error(`Auth (${SDK_VERSION$1}): ${msg}`, ...args);
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _fail(authOrCode, ...rest) {
      throw createErrorInternal(authOrCode, ...rest);
    }
    function _createError(authOrCode, ...rest) {
      return createErrorInternal(authOrCode, ...rest);
    }
    function _errorWithCustomMessage(auth2, code, message) {
      const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });
      const factory = new ErrorFactory("auth", "Firebase", errorMap);
      return factory.create(code, {
        appName: auth2.name
      });
    }
    function _serverAppCurrentUserOperationNotSupportedError(auth2) {
      return _errorWithCustomMessage(auth2, "operation-not-supported-in-this-environment", "Operations that alter the current user are not supported in conjunction with FirebaseServerApp");
    }
    function _assertInstanceOf(auth2, object, instance) {
      const constructorInstance = instance;
      if (!(object instanceof constructorInstance)) {
        if (constructorInstance.name !== object.constructor.name) {
          _fail(
            auth2,
            "argument-error"
            /* AuthErrorCode.ARGUMENT_ERROR */
          );
        }
        throw _errorWithCustomMessage(auth2, "argument-error", `Type of ${object.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`);
      }
    }
    function createErrorInternal(authOrCode, ...rest) {
      if (typeof authOrCode !== "string") {
        const code = rest[0];
        const fullParams = [...rest.slice(1)];
        if (fullParams[0]) {
          fullParams[0].appName = authOrCode.name;
        }
        return authOrCode._errorFactory.create(code, ...fullParams);
      }
      return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
    }
    function _assert(assertion, authOrCode, ...rest) {
      if (!assertion) {
        throw createErrorInternal(authOrCode, ...rest);
      }
    }
    function debugFail(failure) {
      const message = `INTERNAL ASSERTION FAILED: ` + failure;
      _logError(message);
      throw new Error(message);
    }
    function debugAssert(assertion, message) {
      if (!assertion) {
        debugFail(message);
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getCurrentUrl() {
      var _a;
      return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || "";
    }
    function _isHttpOrHttps() {
      return _getCurrentScheme() === "http:" || _getCurrentScheme() === "https:";
    }
    function _getCurrentScheme() {
      var _a;
      return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _isOnline() {
      if (typeof navigator !== "undefined" && navigator && "onLine" in navigator && typeof navigator.onLine === "boolean" && // Apply only for traditional web apps and Chrome extensions.
      // This is especially true for Cordova apps which have unreliable
      // navigator.onLine behavior unless cordova-plugin-network-information is
      // installed which overwrites the native navigator.onLine value and
      // defines navigator.connection.
      (_isHttpOrHttps() || isBrowserExtension() || "connection" in navigator)) {
        return navigator.onLine;
      }
      return true;
    }
    function _getUserLanguage() {
      if (typeof navigator === "undefined") {
        return null;
      }
      const navigatorLanguage = navigator;
      return (
        // Most reliable, but only supported in Chrome/Firefox.
        navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser
        // UI, not the language set in browser settings.
        navigatorLanguage.language || // Couldn't determine language.
        null
      );
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Delay {
      constructor(shortDelay, longDelay) {
        this.shortDelay = shortDelay;
        this.longDelay = longDelay;
        debugAssert(longDelay > shortDelay, "Short delay should be less than long delay!");
        this.isMobile = isMobileCordova() || isReactNative();
      }
      get() {
        if (!_isOnline()) {
          return Math.min(5e3, this.shortDelay);
        }
        return this.isMobile ? this.longDelay : this.shortDelay;
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _emulatorUrl(config, path) {
      debugAssert(config.emulator, "Emulator should always be set here");
      const { url } = config.emulator;
      if (!path) {
        return url;
      }
      return `${url}${path.startsWith("/") ? path.slice(1) : path}`;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FetchProvider {
      static initialize(fetchImpl, headersImpl, responseImpl) {
        this.fetchImpl = fetchImpl;
        if (headersImpl) {
          this.headersImpl = headersImpl;
        }
        if (responseImpl) {
          this.responseImpl = responseImpl;
        }
      }
      static fetch() {
        if (this.fetchImpl) {
          return this.fetchImpl;
        }
        if (typeof self !== "undefined" && "fetch" in self) {
          return self.fetch;
        }
        if (typeof globalThis !== "undefined" && globalThis.fetch) {
          return globalThis.fetch;
        }
        if (typeof fetch !== "undefined") {
          return fetch;
        }
        debugFail("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      }
      static headers() {
        if (this.headersImpl) {
          return this.headersImpl;
        }
        if (typeof self !== "undefined" && "Headers" in self) {
          return self.Headers;
        }
        if (typeof globalThis !== "undefined" && globalThis.Headers) {
          return globalThis.Headers;
        }
        if (typeof Headers !== "undefined") {
          return Headers;
        }
        debugFail("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      }
      static response() {
        if (this.responseImpl) {
          return this.responseImpl;
        }
        if (typeof self !== "undefined" && "Response" in self) {
          return self.Response;
        }
        if (typeof globalThis !== "undefined" && globalThis.Response) {
          return globalThis.Response;
        }
        if (typeof Response !== "undefined") {
          return Response;
        }
        debugFail("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const SERVER_ERROR_MAP = {
      // Custom token errors.
      [
        "CREDENTIAL_MISMATCH"
        /* ServerError.CREDENTIAL_MISMATCH */
      ]: "custom-token-mismatch",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_CUSTOM_TOKEN"
        /* ServerError.MISSING_CUSTOM_TOKEN */
      ]: "internal-error",
      // Create Auth URI errors.
      [
        "INVALID_IDENTIFIER"
        /* ServerError.INVALID_IDENTIFIER */
      ]: "invalid-email",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_CONTINUE_URI"
        /* ServerError.MISSING_CONTINUE_URI */
      ]: "internal-error",
      // Sign in with email and password errors (some apply to sign up too).
      [
        "INVALID_PASSWORD"
        /* ServerError.INVALID_PASSWORD */
      ]: "wrong-password",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_PASSWORD"
        /* ServerError.MISSING_PASSWORD */
      ]: "missing-password",
      // Thrown if Email Enumeration Protection is enabled in the project and the email or password is
      // invalid.
      [
        "INVALID_LOGIN_CREDENTIALS"
        /* ServerError.INVALID_LOGIN_CREDENTIALS */
      ]: "invalid-credential",
      // Sign up with email and password errors.
      [
        "EMAIL_EXISTS"
        /* ServerError.EMAIL_EXISTS */
      ]: "email-already-in-use",
      [
        "PASSWORD_LOGIN_DISABLED"
        /* ServerError.PASSWORD_LOGIN_DISABLED */
      ]: "operation-not-allowed",
      // Verify assertion for sign in with credential errors:
      [
        "INVALID_IDP_RESPONSE"
        /* ServerError.INVALID_IDP_RESPONSE */
      ]: "invalid-credential",
      [
        "INVALID_PENDING_TOKEN"
        /* ServerError.INVALID_PENDING_TOKEN */
      ]: "invalid-credential",
      [
        "FEDERATED_USER_ID_ALREADY_LINKED"
        /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */
      ]: "credential-already-in-use",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_REQ_TYPE"
        /* ServerError.MISSING_REQ_TYPE */
      ]: "internal-error",
      // Send Password reset email errors:
      [
        "EMAIL_NOT_FOUND"
        /* ServerError.EMAIL_NOT_FOUND */
      ]: "user-not-found",
      [
        "RESET_PASSWORD_EXCEED_LIMIT"
        /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */
      ]: "too-many-requests",
      [
        "EXPIRED_OOB_CODE"
        /* ServerError.EXPIRED_OOB_CODE */
      ]: "expired-action-code",
      [
        "INVALID_OOB_CODE"
        /* ServerError.INVALID_OOB_CODE */
      ]: "invalid-action-code",
      // This can only happen if the SDK sends a bad request.
      [
        "MISSING_OOB_CODE"
        /* ServerError.MISSING_OOB_CODE */
      ]: "internal-error",
      // Operations that require ID token in request:
      [
        "CREDENTIAL_TOO_OLD_LOGIN_AGAIN"
        /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */
      ]: "requires-recent-login",
      [
        "INVALID_ID_TOKEN"
        /* ServerError.INVALID_ID_TOKEN */
      ]: "invalid-user-token",
      [
        "TOKEN_EXPIRED"
        /* ServerError.TOKEN_EXPIRED */
      ]: "user-token-expired",
      [
        "USER_NOT_FOUND"
        /* ServerError.USER_NOT_FOUND */
      ]: "user-token-expired",
      // Other errors.
      [
        "TOO_MANY_ATTEMPTS_TRY_LATER"
        /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */
      ]: "too-many-requests",
      [
        "PASSWORD_DOES_NOT_MEET_REQUIREMENTS"
        /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */
      ]: "password-does-not-meet-requirements",
      // Phone Auth related errors.
      [
        "INVALID_CODE"
        /* ServerError.INVALID_CODE */
      ]: "invalid-verification-code",
      [
        "INVALID_SESSION_INFO"
        /* ServerError.INVALID_SESSION_INFO */
      ]: "invalid-verification-id",
      [
        "INVALID_TEMPORARY_PROOF"
        /* ServerError.INVALID_TEMPORARY_PROOF */
      ]: "invalid-credential",
      [
        "MISSING_SESSION_INFO"
        /* ServerError.MISSING_SESSION_INFO */
      ]: "missing-verification-id",
      [
        "SESSION_EXPIRED"
        /* ServerError.SESSION_EXPIRED */
      ]: "code-expired",
      // Other action code errors when additional settings passed.
      // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
      // This is OK as this error will be caught by client side validation.
      [
        "MISSING_ANDROID_PACKAGE_NAME"
        /* ServerError.MISSING_ANDROID_PACKAGE_NAME */
      ]: "missing-android-pkg-name",
      [
        "UNAUTHORIZED_DOMAIN"
        /* ServerError.UNAUTHORIZED_DOMAIN */
      ]: "unauthorized-continue-uri",
      // getProjectConfig errors when clientId is passed.
      [
        "INVALID_OAUTH_CLIENT_ID"
        /* ServerError.INVALID_OAUTH_CLIENT_ID */
      ]: "invalid-oauth-client-id",
      // User actions (sign-up or deletion) disabled errors.
      [
        "ADMIN_ONLY_OPERATION"
        /* ServerError.ADMIN_ONLY_OPERATION */
      ]: "admin-restricted-operation",
      // Multi factor related errors.
      [
        "INVALID_MFA_PENDING_CREDENTIAL"
        /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */
      ]: "invalid-multi-factor-session",
      [
        "MFA_ENROLLMENT_NOT_FOUND"
        /* ServerError.MFA_ENROLLMENT_NOT_FOUND */
      ]: "multi-factor-info-not-found",
      [
        "MISSING_MFA_ENROLLMENT_ID"
        /* ServerError.MISSING_MFA_ENROLLMENT_ID */
      ]: "missing-multi-factor-info",
      [
        "MISSING_MFA_PENDING_CREDENTIAL"
        /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */
      ]: "missing-multi-factor-session",
      [
        "SECOND_FACTOR_EXISTS"
        /* ServerError.SECOND_FACTOR_EXISTS */
      ]: "second-factor-already-in-use",
      [
        "SECOND_FACTOR_LIMIT_EXCEEDED"
        /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */
      ]: "maximum-second-factor-count-exceeded",
      // Blocking functions related errors.
      [
        "BLOCKING_FUNCTION_ERROR_RESPONSE"
        /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */
      ]: "internal-error",
      // Recaptcha related errors.
      [
        "RECAPTCHA_NOT_ENABLED"
        /* ServerError.RECAPTCHA_NOT_ENABLED */
      ]: "recaptcha-not-enabled",
      [
        "MISSING_RECAPTCHA_TOKEN"
        /* ServerError.MISSING_RECAPTCHA_TOKEN */
      ]: "missing-recaptcha-token",
      [
        "INVALID_RECAPTCHA_TOKEN"
        /* ServerError.INVALID_RECAPTCHA_TOKEN */
      ]: "invalid-recaptcha-token",
      [
        "INVALID_RECAPTCHA_ACTION"
        /* ServerError.INVALID_RECAPTCHA_ACTION */
      ]: "invalid-recaptcha-action",
      [
        "MISSING_CLIENT_TYPE"
        /* ServerError.MISSING_CLIENT_TYPE */
      ]: "missing-client-type",
      [
        "MISSING_RECAPTCHA_VERSION"
        /* ServerError.MISSING_RECAPTCHA_VERSION */
      ]: "missing-recaptcha-version",
      [
        "INVALID_RECAPTCHA_VERSION"
        /* ServerError.INVALID_RECAPTCHA_VERSION */
      ]: "invalid-recaptcha-version",
      [
        "INVALID_REQ_TYPE"
        /* ServerError.INVALID_REQ_TYPE */
      ]: "invalid-req-type"
      /* AuthErrorCode.INVALID_REQ_TYPE */
    };
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DEFAULT_API_TIMEOUT_MS = new Delay(3e4, 6e4);
    function _addTidIfNecessary(auth2, request) {
      if (auth2.tenantId && !request.tenantId) {
        return Object.assign(Object.assign({}, request), { tenantId: auth2.tenantId });
      }
      return request;
    }
    function _performApiRequest(_0, _1, _2, _3) {
      return __async(this, arguments, function* (auth2, method, path, request, customErrorMap = {}) {
        return _performFetchWithErrorHandling(auth2, customErrorMap, () => __async(this, null, function* () {
          let body = {};
          let params = {};
          if (request) {
            if (method === "GET") {
              params = request;
            } else {
              body = {
                body: JSON.stringify(request)
              };
            }
          }
          const query2 = querystring(Object.assign({ key: auth2.config.apiKey }, params)).slice(1);
          const headers = yield auth2._getAdditionalHeaders();
          headers[
            "Content-Type"
            /* HttpHeader.CONTENT_TYPE */
          ] = "application/json";
          if (auth2.languageCode) {
            headers[
              "X-Firebase-Locale"
              /* HttpHeader.X_FIREBASE_LOCALE */
            ] = auth2.languageCode;
          }
          const fetchArgs = Object.assign({
            method,
            headers
          }, body);
          if (!isCloudflareWorker()) {
            fetchArgs.referrerPolicy = "no-referrer";
          }
          return FetchProvider.fetch()(_getFinalTarget(auth2, auth2.config.apiHost, path, query2), fetchArgs);
        }));
      });
    }
    function _performFetchWithErrorHandling(auth2, customErrorMap, fetchFn) {
      return __async(this, null, function* () {
        auth2._canInitEmulator = false;
        const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
        try {
          const networkTimeout = new NetworkTimeout(auth2);
          const response = yield Promise.race([
            fetchFn(),
            networkTimeout.promise
          ]);
          networkTimeout.clearNetworkTimeout();
          const json = yield response.json();
          if ("needConfirmation" in json) {
            throw _makeTaggedError(auth2, "account-exists-with-different-credential", json);
          }
          if (response.ok && !("errorMessage" in json)) {
            return json;
          } else {
            const errorMessage = response.ok ? json.errorMessage : json.error.message;
            const [serverErrorCode, serverErrorMessage] = errorMessage.split(" : ");
            if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED") {
              throw _makeTaggedError(auth2, "credential-already-in-use", json);
            } else if (serverErrorCode === "EMAIL_EXISTS") {
              throw _makeTaggedError(auth2, "email-already-in-use", json);
            } else if (serverErrorCode === "USER_DISABLED") {
              throw _makeTaggedError(auth2, "user-disabled", json);
            }
            const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, "-");
            if (serverErrorMessage) {
              throw _errorWithCustomMessage(auth2, authError, serverErrorMessage);
            } else {
              _fail(auth2, authError);
            }
          }
        } catch (e) {
          if (e instanceof FirebaseError) {
            throw e;
          }
          _fail(auth2, "network-request-failed", { "message": String(e) });
        }
      });
    }
    function _performSignInRequest(_0, _1, _2, _3) {
      return __async(this, arguments, function* (auth2, method, path, request, customErrorMap = {}) {
        const serverResponse = yield _performApiRequest(auth2, method, path, request, customErrorMap);
        if ("mfaPendingCredential" in serverResponse) {
          _fail(auth2, "multi-factor-auth-required", {
            _serverResponse: serverResponse
          });
        }
        return serverResponse;
      });
    }
    function _getFinalTarget(auth2, host, path, query2) {
      const base = `${host}${path}?${query2}`;
      if (!auth2.config.emulator) {
        return `${auth2.config.apiScheme}://${base}`;
      }
      return _emulatorUrl(auth2.config, base);
    }
    class NetworkTimeout {
      constructor(auth2) {
        this.auth = auth2;
        this.timer = null;
        this.promise = new Promise((_, reject) => {
          this.timer = setTimeout(() => {
            return reject(_createError(
              this.auth,
              "network-request-failed"
              /* AuthErrorCode.NETWORK_REQUEST_FAILED */
            ));
          }, DEFAULT_API_TIMEOUT_MS.get());
        });
      }
      clearNetworkTimeout() {
        clearTimeout(this.timer);
      }
    }
    function _makeTaggedError(auth2, code, response) {
      const errorParams = {
        appName: auth2.name
      };
      if (response.email) {
        errorParams.email = response.email;
      }
      if (response.phoneNumber) {
        errorParams.phoneNumber = response.phoneNumber;
      }
      const error2 = _createError(auth2, code, errorParams);
      error2.customData._tokenResponse = response;
      return error2;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deleteAccount(auth2, request) {
      return __async(this, null, function* () {
        return _performApiRequest(auth2, "POST", "/v1/accounts:delete", request);
      });
    }
    function getAccountInfo(auth2, request) {
      return __async(this, null, function* () {
        return _performApiRequest(auth2, "POST", "/v1/accounts:lookup", request);
      });
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function utcTimestampToDateString(utcTimestamp) {
      if (!utcTimestamp) {
        return void 0;
      }
      try {
        const date = new Date(Number(utcTimestamp));
        if (!isNaN(date.getTime())) {
          return date.toUTCString();
        }
      } catch (e) {
      }
      return void 0;
    }
    function getIdTokenResult(user, forceRefresh = false) {
      return __async(this, null, function* () {
        const userInternal = getModularInstance(user);
        const token = yield userInternal.getIdToken(forceRefresh);
        const claims = _parseToken(token);
        _assert(
          claims && claims.exp && claims.auth_time && claims.iat,
          userInternal.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const firebase = typeof claims.firebase === "object" ? claims.firebase : void 0;
        const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_provider"];
        return {
          claims,
          token,
          authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
          issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
          expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
          signInProvider: signInProvider || null,
          signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_second_factor"]) || null
        };
      });
    }
    function secondsStringToMilliseconds(seconds) {
      return Number(seconds) * 1e3;
    }
    function _parseToken(token) {
      const [algorithm, payload, signature] = token.split(".");
      if (algorithm === void 0 || payload === void 0 || signature === void 0) {
        _logError("JWT malformed, contained fewer than 3 sections");
        return null;
      }
      try {
        const decoded = base64Decode(payload);
        if (!decoded) {
          _logError("Failed to decode base64 JWT payload");
          return null;
        }
        return JSON.parse(decoded);
      } catch (e) {
        _logError("Caught error parsing JWT payload as JSON", e === null || e === void 0 ? void 0 : e.toString());
        return null;
      }
    }
    function _tokenExpiresIn(token) {
      const parsedToken = _parseToken(token);
      _assert(
        parsedToken,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      _assert(
        typeof parsedToken.exp !== "undefined",
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      _assert(
        typeof parsedToken.iat !== "undefined",
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      return Number(parsedToken.exp) - Number(parsedToken.iat);
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
      return __async(this, null, function* () {
        if (bypassAuthState) {
          return promise;
        }
        try {
          return yield promise;
        } catch (e) {
          if (e instanceof FirebaseError && isUserInvalidated(e)) {
            if (user.auth.currentUser === user) {
              yield user.auth.signOut();
            }
          }
          throw e;
        }
      });
    }
    function isUserInvalidated({ code }) {
      return code === `auth/${"user-disabled"}` || code === `auth/${"user-token-expired"}`;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ProactiveRefresh {
      constructor(user) {
        this.user = user;
        this.isRunning = false;
        this.timerId = null;
        this.errorBackoff = 3e4;
      }
      _start() {
        if (this.isRunning) {
          return;
        }
        this.isRunning = true;
        this.schedule();
      }
      _stop() {
        if (!this.isRunning) {
          return;
        }
        this.isRunning = false;
        if (this.timerId !== null) {
          clearTimeout(this.timerId);
        }
      }
      getInterval(wasError) {
        var _a;
        if (wasError) {
          const interval = this.errorBackoff;
          this.errorBackoff = Math.min(
            this.errorBackoff * 2,
            96e4
            /* Duration.RETRY_BACKOFF_MAX */
          );
          return interval;
        } else {
          this.errorBackoff = 3e4;
          const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
          const interval = expTime - Date.now() - 3e5;
          return Math.max(0, interval);
        }
      }
      schedule(wasError = false) {
        if (!this.isRunning) {
          return;
        }
        const interval = this.getInterval(wasError);
        this.timerId = setTimeout(() => __async(this, null, function* () {
          yield this.iteration();
        }), interval);
      }
      iteration() {
        return __async(this, null, function* () {
          try {
            yield this.user.getIdToken(true);
          } catch (e) {
            if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"network-request-failed"}`) {
              this.schedule(
                /* wasError */
                true
              );
            }
            return;
          }
          this.schedule();
        });
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class UserMetadata {
      constructor(createdAt, lastLoginAt) {
        this.createdAt = createdAt;
        this.lastLoginAt = lastLoginAt;
        this._initializeTime();
      }
      _initializeTime() {
        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
        this.creationTime = utcTimestampToDateString(this.createdAt);
      }
      _copy(metadata) {
        this.createdAt = metadata.createdAt;
        this.lastLoginAt = metadata.lastLoginAt;
        this._initializeTime();
      }
      toJSON() {
        return {
          createdAt: this.createdAt,
          lastLoginAt: this.lastLoginAt
        };
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _reloadWithoutSaving(user) {
      return __async(this, null, function* () {
        var _a;
        const auth2 = user.auth;
        const idToken = yield user.getIdToken();
        const response = yield _logoutIfInvalidated(user, getAccountInfo(auth2, { idToken }));
        _assert(
          response === null || response === void 0 ? void 0 : response.users.length,
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const coreAccount = response.users[0];
        user._notifyReloadListener(coreAccount);
        const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
        const providerData = mergeProviderData(user.providerData, newProviderData);
        const oldIsAnonymous = user.isAnonymous;
        const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
        const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
        const updates = {
          uid: coreAccount.localId,
          displayName: coreAccount.displayName || null,
          photoURL: coreAccount.photoUrl || null,
          email: coreAccount.email || null,
          emailVerified: coreAccount.emailVerified || false,
          phoneNumber: coreAccount.phoneNumber || null,
          tenantId: coreAccount.tenantId || null,
          providerData,
          metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
          isAnonymous
        };
        Object.assign(user, updates);
      });
    }
    function reload(user) {
      return __async(this, null, function* () {
        const userInternal = getModularInstance(user);
        yield _reloadWithoutSaving(userInternal);
        yield userInternal.auth._persistUserIfCurrent(userInternal);
        userInternal.auth._notifyListenersIfCurrent(userInternal);
      });
    }
    function mergeProviderData(original, newData) {
      const deduped = original.filter((o) => !newData.some((n2) => n2.providerId === o.providerId));
      return [...deduped, ...newData];
    }
    function extractProviderData(providers) {
      return providers.map((_a) => {
        var { providerId } = _a, provider = __rest(_a, ["providerId"]);
        return {
          providerId,
          uid: provider.rawId || "",
          displayName: provider.displayName || null,
          email: provider.email || null,
          phoneNumber: provider.phoneNumber || null,
          photoURL: provider.photoUrl || null
        };
      });
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function requestStsToken(auth2, refreshToken) {
      return __async(this, null, function* () {
        const response = yield _performFetchWithErrorHandling(auth2, {}, () => __async(this, null, function* () {
          const body = querystring({
            "grant_type": "refresh_token",
            "refresh_token": refreshToken
          }).slice(1);
          const { tokenApiHost, apiKey } = auth2.config;
          const url = _getFinalTarget(auth2, tokenApiHost, "/v1/token", `key=${apiKey}`);
          const headers = yield auth2._getAdditionalHeaders();
          headers[
            "Content-Type"
            /* HttpHeader.CONTENT_TYPE */
          ] = "application/x-www-form-urlencoded";
          return FetchProvider.fetch()(url, {
            method: "POST",
            headers,
            body
          });
        }));
        return {
          accessToken: response.access_token,
          expiresIn: response.expires_in,
          refreshToken: response.refresh_token
        };
      });
    }
    function revokeToken(auth2, request) {
      return __async(this, null, function* () {
        return _performApiRequest(auth2, "POST", "/v2/accounts:revokeToken", _addTidIfNecessary(auth2, request));
      });
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class StsTokenManager {
      constructor() {
        this.refreshToken = null;
        this.accessToken = null;
        this.expirationTime = null;
      }
      get isExpired() {
        return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
      }
      updateFromServerResponse(response) {
        _assert(
          response.idToken,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        _assert(
          typeof response.idToken !== "undefined",
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        _assert(
          typeof response.refreshToken !== "undefined",
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const expiresIn = "expiresIn" in response && typeof response.expiresIn !== "undefined" ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
      }
      updateFromIdToken(idToken) {
        _assert(
          idToken.length !== 0,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const expiresIn = _tokenExpiresIn(idToken);
        this.updateTokensAndExpiration(idToken, null, expiresIn);
      }
      getToken(auth2, forceRefresh = false) {
        return __async(this, null, function* () {
          if (!forceRefresh && this.accessToken && !this.isExpired) {
            return this.accessToken;
          }
          _assert(
            this.refreshToken,
            auth2,
            "user-token-expired"
            /* AuthErrorCode.TOKEN_EXPIRED */
          );
          if (this.refreshToken) {
            yield this.refresh(auth2, this.refreshToken);
            return this.accessToken;
          }
          return null;
        });
      }
      clearRefreshToken() {
        this.refreshToken = null;
      }
      refresh(auth2, oldToken) {
        return __async(this, null, function* () {
          const { accessToken, refreshToken, expiresIn } = yield requestStsToken(auth2, oldToken);
          this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
        });
      }
      updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
        this.refreshToken = refreshToken || null;
        this.accessToken = accessToken || null;
        this.expirationTime = Date.now() + expiresInSec * 1e3;
      }
      static fromJSON(appName, object) {
        const { refreshToken, accessToken, expirationTime } = object;
        const manager = new StsTokenManager();
        if (refreshToken) {
          _assert(typeof refreshToken === "string", "internal-error", {
            appName
          });
          manager.refreshToken = refreshToken;
        }
        if (accessToken) {
          _assert(typeof accessToken === "string", "internal-error", {
            appName
          });
          manager.accessToken = accessToken;
        }
        if (expirationTime) {
          _assert(typeof expirationTime === "number", "internal-error", {
            appName
          });
          manager.expirationTime = expirationTime;
        }
        return manager;
      }
      toJSON() {
        return {
          refreshToken: this.refreshToken,
          accessToken: this.accessToken,
          expirationTime: this.expirationTime
        };
      }
      _assign(stsTokenManager) {
        this.accessToken = stsTokenManager.accessToken;
        this.refreshToken = stsTokenManager.refreshToken;
        this.expirationTime = stsTokenManager.expirationTime;
      }
      _clone() {
        return Object.assign(new StsTokenManager(), this.toJSON());
      }
      _performRefresh() {
        return debugFail("not implemented");
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function assertStringOrUndefined(assertion, appName) {
      _assert(typeof assertion === "string" || typeof assertion === "undefined", "internal-error", { appName });
    }
    class UserImpl {
      constructor(_a) {
        var { uid, auth: auth2, stsTokenManager } = _a, opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
        this.providerId = "firebase";
        this.proactiveRefresh = new ProactiveRefresh(this);
        this.reloadUserInfo = null;
        this.reloadListener = null;
        this.uid = uid;
        this.auth = auth2;
        this.stsTokenManager = stsTokenManager;
        this.accessToken = stsTokenManager.accessToken;
        this.displayName = opt.displayName || null;
        this.email = opt.email || null;
        this.emailVerified = opt.emailVerified || false;
        this.phoneNumber = opt.phoneNumber || null;
        this.photoURL = opt.photoURL || null;
        this.isAnonymous = opt.isAnonymous || false;
        this.tenantId = opt.tenantId || null;
        this.providerData = opt.providerData ? [...opt.providerData] : [];
        this.metadata = new UserMetadata(opt.createdAt || void 0, opt.lastLoginAt || void 0);
      }
      getIdToken(forceRefresh) {
        return __async(this, null, function* () {
          const accessToken = yield _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
          _assert(
            accessToken,
            this.auth,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
          if (this.accessToken !== accessToken) {
            this.accessToken = accessToken;
            yield this.auth._persistUserIfCurrent(this);
            this.auth._notifyListenersIfCurrent(this);
          }
          return accessToken;
        });
      }
      getIdTokenResult(forceRefresh) {
        return getIdTokenResult(this, forceRefresh);
      }
      reload() {
        return reload(this);
      }
      _assign(user) {
        if (this === user) {
          return;
        }
        _assert(
          this.uid === user.uid,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        this.displayName = user.displayName;
        this.photoURL = user.photoURL;
        this.email = user.email;
        this.emailVerified = user.emailVerified;
        this.phoneNumber = user.phoneNumber;
        this.isAnonymous = user.isAnonymous;
        this.tenantId = user.tenantId;
        this.providerData = user.providerData.map((userInfo) => Object.assign({}, userInfo));
        this.metadata._copy(user.metadata);
        this.stsTokenManager._assign(user.stsTokenManager);
      }
      _clone(auth2) {
        const newUser = new UserImpl(Object.assign(Object.assign({}, this), { auth: auth2, stsTokenManager: this.stsTokenManager._clone() }));
        newUser.metadata._copy(this.metadata);
        return newUser;
      }
      _onReload(callback) {
        _assert(
          !this.reloadListener,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        this.reloadListener = callback;
        if (this.reloadUserInfo) {
          this._notifyReloadListener(this.reloadUserInfo);
          this.reloadUserInfo = null;
        }
      }
      _notifyReloadListener(userInfo) {
        if (this.reloadListener) {
          this.reloadListener(userInfo);
        } else {
          this.reloadUserInfo = userInfo;
        }
      }
      _startProactiveRefresh() {
        this.proactiveRefresh._start();
      }
      _stopProactiveRefresh() {
        this.proactiveRefresh._stop();
      }
      _updateTokensIfNecessary(response, reload2 = false) {
        return __async(this, null, function* () {
          let tokensRefreshed = false;
          if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
            this.stsTokenManager.updateFromServerResponse(response);
            tokensRefreshed = true;
          }
          if (reload2) {
            yield _reloadWithoutSaving(this);
          }
          yield this.auth._persistUserIfCurrent(this);
          if (tokensRefreshed) {
            this.auth._notifyListenersIfCurrent(this);
          }
        });
      }
      delete() {
        return __async(this, null, function* () {
          if (_isFirebaseServerApp(this.auth.app)) {
            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));
          }
          const idToken = yield this.getIdToken();
          yield _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));
          this.stsTokenManager.clearRefreshToken();
          return this.auth.signOut();
        });
      }
      toJSON() {
        return Object.assign(Object.assign({
          uid: this.uid,
          email: this.email || void 0,
          emailVerified: this.emailVerified,
          displayName: this.displayName || void 0,
          isAnonymous: this.isAnonymous,
          photoURL: this.photoURL || void 0,
          phoneNumber: this.phoneNumber || void 0,
          tenantId: this.tenantId || void 0,
          providerData: this.providerData.map((userInfo) => Object.assign({}, userInfo)),
          stsTokenManager: this.stsTokenManager.toJSON(),
          // Redirect event ID must be maintained in case there is a pending
          // redirect event.
          _redirectEventId: this._redirectEventId
        }, this.metadata.toJSON()), {
          // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
          apiKey: this.auth.config.apiKey,
          appName: this.auth.name
        });
      }
      get refreshToken() {
        return this.stsTokenManager.refreshToken || "";
      }
      static _fromJSON(auth2, object) {
        var _a, _b, _c2, _d, _e2, _f, _g, _h;
        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : void 0;
        const email = (_b = object.email) !== null && _b !== void 0 ? _b : void 0;
        const phoneNumber = (_c2 = object.phoneNumber) !== null && _c2 !== void 0 ? _c2 : void 0;
        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : void 0;
        const tenantId = (_e2 = object.tenantId) !== null && _e2 !== void 0 ? _e2 : void 0;
        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : void 0;
        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : void 0;
        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : void 0;
        const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;
        _assert(
          uid && plainObjectTokenManager,
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
        _assert(
          typeof uid === "string",
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        assertStringOrUndefined(displayName, auth2.name);
        assertStringOrUndefined(email, auth2.name);
        _assert(
          typeof emailVerified === "boolean",
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        _assert(
          typeof isAnonymous === "boolean",
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        assertStringOrUndefined(phoneNumber, auth2.name);
        assertStringOrUndefined(photoURL, auth2.name);
        assertStringOrUndefined(tenantId, auth2.name);
        assertStringOrUndefined(_redirectEventId, auth2.name);
        assertStringOrUndefined(createdAt, auth2.name);
        assertStringOrUndefined(lastLoginAt, auth2.name);
        const user = new UserImpl({
          uid,
          auth: auth2,
          email,
          emailVerified,
          displayName,
          isAnonymous,
          photoURL,
          phoneNumber,
          tenantId,
          stsTokenManager,
          createdAt,
          lastLoginAt
        });
        if (providerData && Array.isArray(providerData)) {
          user.providerData = providerData.map((userInfo) => Object.assign({}, userInfo));
        }
        if (_redirectEventId) {
          user._redirectEventId = _redirectEventId;
        }
        return user;
      }
      /**
       * Initialize a User from an idToken server response
       * @param auth
       * @param idTokenResponse
       */
      static _fromIdTokenResponse(auth2, idTokenResponse, isAnonymous = false) {
        return __async(this, null, function* () {
          const stsTokenManager = new StsTokenManager();
          stsTokenManager.updateFromServerResponse(idTokenResponse);
          const user = new UserImpl({
            uid: idTokenResponse.localId,
            auth: auth2,
            stsTokenManager,
            isAnonymous
          });
          yield _reloadWithoutSaving(user);
          return user;
        });
      }
      /**
       * Initialize a User from an idToken server response
       * @param auth
       * @param idTokenResponse
       */
      static _fromGetAccountInfoResponse(auth2, response, idToken) {
        return __async(this, null, function* () {
          const coreAccount = response.users[0];
          _assert(
            coreAccount.localId !== void 0,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
          const providerData = coreAccount.providerUserInfo !== void 0 ? extractProviderData(coreAccount.providerUserInfo) : [];
          const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
          const stsTokenManager = new StsTokenManager();
          stsTokenManager.updateFromIdToken(idToken);
          const user = new UserImpl({
            uid: coreAccount.localId,
            auth: auth2,
            stsTokenManager,
            isAnonymous
          });
          const updates = {
            uid: coreAccount.localId,
            displayName: coreAccount.displayName || null,
            photoURL: coreAccount.photoUrl || null,
            email: coreAccount.email || null,
            emailVerified: coreAccount.emailVerified || false,
            phoneNumber: coreAccount.phoneNumber || null,
            tenantId: coreAccount.tenantId || null,
            providerData,
            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
            isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length)
          };
          Object.assign(user, updates);
          return user;
        });
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const instanceCache = /* @__PURE__ */ new Map();
    function _getInstance(cls) {
      debugAssert(cls instanceof Function, "Expected a class definition");
      let instance = instanceCache.get(cls);
      if (instance) {
        debugAssert(instance instanceof cls, "Instance stored in cache mismatched with class");
        return instance;
      }
      instance = new cls();
      instanceCache.set(cls, instance);
      return instance;
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class InMemoryPersistence {
      constructor() {
        this.type = "NONE";
        this.storage = {};
      }
      _isAvailable() {
        return __async(this, null, function* () {
          return true;
        });
      }
      _set(key, value) {
        return __async(this, null, function* () {
          this.storage[key] = value;
        });
      }
      _get(key) {
        return __async(this, null, function* () {
          const value = this.storage[key];
          return value === void 0 ? null : value;
        });
      }
      _remove(key) {
        return __async(this, null, function* () {
          delete this.storage[key];
        });
      }
      _addListener(_key, _listener) {
        return;
      }
      _removeListener(_key, _listener) {
        return;
      }
    }
    InMemoryPersistence.type = "NONE";
    const inMemoryPersistence = InMemoryPersistence;
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _persistenceKeyName(key, apiKey, appName) {
      return `${"firebase"}:${key}:${apiKey}:${appName}`;
    }
    class PersistenceUserManager {
      constructor(persistence, auth2, userKey) {
        this.persistence = persistence;
        this.auth = auth2;
        this.userKey = userKey;
        const { config, name: name2 } = this.auth;
        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name2);
        this.fullPersistenceKey = _persistenceKeyName("persistence", config.apiKey, name2);
        this.boundEventHandler = auth2._onStorageEvent.bind(auth2);
        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
      }
      setCurrentUser(user) {
        return this.persistence._set(this.fullUserKey, user.toJSON());
      }
      getCurrentUser() {
        return __async(this, null, function* () {
          const blob = yield this.persistence._get(this.fullUserKey);
          return blob ? UserImpl._fromJSON(this.auth, blob) : null;
        });
      }
      removeCurrentUser() {
        return this.persistence._remove(this.fullUserKey);
      }
      savePersistenceForRedirect() {
        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
      }
      setPersistence(newPersistence) {
        return __async(this, null, function* () {
          if (this.persistence === newPersistence) {
            return;
          }
          const currentUser = yield this.getCurrentUser();
          yield this.removeCurrentUser();
          this.persistence = newPersistence;
          if (currentUser) {
            return this.setCurrentUser(currentUser);
          }
        });
      }
      delete() {
        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
      }
      static create(auth2, persistenceHierarchy, userKey = "authUser") {
        return __async(this, null, function* () {
          if (!persistenceHierarchy.length) {
            return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth2, userKey);
          }
          const availablePersistences = (yield Promise.all(persistenceHierarchy.map((persistence) => __async(this, null, function* () {
            if (yield persistence._isAvailable()) {
              return persistence;
            }
            return void 0;
          })))).filter((persistence) => persistence);
          let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);
          const key = _persistenceKeyName(userKey, auth2.config.apiKey, auth2.name);
          let userToMigrate = null;
          for (const persistence of persistenceHierarchy) {
            try {
              const blob = yield persistence._get(key);
              if (blob) {
                const user = UserImpl._fromJSON(auth2, blob);
                if (persistence !== selectedPersistence) {
                  userToMigrate = user;
                }
                selectedPersistence = persistence;
                break;
              }
            } catch (_a) {
            }
          }
          const migrationHierarchy = availablePersistences.filter((p2) => p2._shouldAllowMigration);
          if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {
            return new PersistenceUserManager(selectedPersistence, auth2, userKey);
          }
          selectedPersistence = migrationHierarchy[0];
          if (userToMigrate) {
            yield selectedPersistence._set(key, userToMigrate.toJSON());
          }
          yield Promise.all(persistenceHierarchy.map((persistence) => __async(this, null, function* () {
            if (persistence !== selectedPersistence) {
              try {
                yield persistence._remove(key);
              } catch (_a) {
              }
            }
          })));
          return new PersistenceUserManager(selectedPersistence, auth2, userKey);
        });
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getBrowserName(userAgent) {
      const ua2 = userAgent.toLowerCase();
      if (ua2.includes("opera/") || ua2.includes("opr/") || ua2.includes("opios/")) {
        return "Opera";
      } else if (_isIEMobile(ua2)) {
        return "IEMobile";
      } else if (ua2.includes("msie") || ua2.includes("trident/")) {
        return "IE";
      } else if (ua2.includes("edge/")) {
        return "Edge";
      } else if (_isFirefox(ua2)) {
        return "Firefox";
      } else if (ua2.includes("silk/")) {
        return "Silk";
      } else if (_isBlackBerry(ua2)) {
        return "Blackberry";
      } else if (_isWebOS(ua2)) {
        return "Webos";
      } else if (_isSafari(ua2)) {
        return "Safari";
      } else if ((ua2.includes("chrome/") || _isChromeIOS(ua2)) && !ua2.includes("edge/")) {
        return "Chrome";
      } else if (_isAndroid(ua2)) {
        return "Android";
      } else {
        const re2 = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
        const matches = userAgent.match(re2);
        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
          return matches[1];
        }
      }
      return "Other";
    }
    function _isFirefox(ua2 = getUA()) {
      return /firefox\//i.test(ua2);
    }
    function _isSafari(userAgent = getUA()) {
      const ua2 = userAgent.toLowerCase();
      return ua2.includes("safari/") && !ua2.includes("chrome/") && !ua2.includes("crios/") && !ua2.includes("android");
    }
    function _isChromeIOS(ua2 = getUA()) {
      return /crios\//i.test(ua2);
    }
    function _isIEMobile(ua2 = getUA()) {
      return /iemobile/i.test(ua2);
    }
    function _isAndroid(ua2 = getUA()) {
      return /android/i.test(ua2);
    }
    function _isBlackBerry(ua2 = getUA()) {
      return /blackberry/i.test(ua2);
    }
    function _isWebOS(ua2 = getUA()) {
      return /webos/i.test(ua2);
    }
    function _isIOS(ua2 = getUA()) {
      return /iphone|ipad|ipod/i.test(ua2) || /macintosh/i.test(ua2) && /mobile/i.test(ua2);
    }
    function _isIOSStandalone(ua2 = getUA()) {
      var _a;
      return _isIOS(ua2) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
    }
    function _isIE10() {
      return isIE() && document.documentMode === 10;
    }
    function _isMobileBrowser(ua2 = getUA()) {
      return _isIOS(ua2) || _isAndroid(ua2) || _isWebOS(ua2) || _isBlackBerry(ua2) || /windows phone/i.test(ua2) || _isIEMobile(ua2);
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getClientVersion(clientPlatform, frameworks = []) {
      let reportedPlatform;
      switch (clientPlatform) {
        case "Browser":
          reportedPlatform = _getBrowserName(getUA());
          break;
        case "Worker":
          reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;
          break;
        default:
          reportedPlatform = clientPlatform;
      }
      const reportedFrameworks = frameworks.length ? frameworks.join(",") : "FirebaseCore-web";
      return `${reportedPlatform}/${"JsCore"}/${SDK_VERSION$1}/${reportedFrameworks}`;
    }
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AuthMiddlewareQueue {
      constructor(auth2) {
        this.auth = auth2;
        this.queue = [];
      }
      pushCallback(callback, onAbort) {
        const wrappedCallback = (user) => new Promise((resolve, reject) => {
          try {
            const result = callback(user);
            resolve(result);
          } catch (e) {
            reject(e);
          }
        });
        wrappedCallback.onAbort = onAbort;
        this.queue.push(wrappedCallback);
        const index = this.queue.length - 1;
        return () => {
          this.queue[index] = () => Promise.resolve();
        };
      }
      runMiddleware(nextUser) {
        return __async(this, null, function* () {
          if (this.auth.currentUser === nextUser) {
            return;
          }
          const onAbortStack = [];
          try {
            for (const beforeStateCallback of this.queue) {
              yield beforeStateCallback(nextUser);
              if (beforeStateCallback.onAbort) {
                onAbortStack.push(beforeStateCallback.onAbort);
              }
            }
          } catch (e) {
            onAbortStack.reverse();
            for (const onAbort of onAbortStack) {
              try {
                onAbort();
              } catch (_) {
              }
            }
            throw this.auth._errorFactory.create("login-blocked", {
              originalMessage: e === null || e === void 0 ? void 0 : e.message
            });
          }
        });
      }
    }
    /**
     * @license
     * Copyright 2023 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getPasswordPolicy(_0) {
      return __async(this, arguments, function* (auth2, request = {}) {
        return _performApiRequest(auth2, "GET", "/v2/passwordPolicy", _addTidIfNecessary(auth2, request));
      });
    }
    /**
     * @license
     * Copyright 2023 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const MINIMUM_MIN_PASSWORD_LENGTH = 6;
    class PasswordPolicyImpl {
      constructor(response) {
        var _a, _b, _c2, _d;
        const responseOptions = response.customStrengthOptions;
        this.customStrengthOptions = {};
        this.customStrengthOptions.minPasswordLength = (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : MINIMUM_MIN_PASSWORD_LENGTH;
        if (responseOptions.maxPasswordLength) {
          this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;
        }
        if (responseOptions.containsLowercaseCharacter !== void 0) {
          this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;
        }
        if (responseOptions.containsUppercaseCharacter !== void 0) {
          this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;
        }
        if (responseOptions.containsNumericCharacter !== void 0) {
          this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;
        }
        if (responseOptions.containsNonAlphanumericCharacter !== void 0) {
          this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;
        }
        this.enforcementState = response.enforcementState;
        if (this.enforcementState === "ENFORCEMENT_STATE_UNSPECIFIED") {
          this.enforcementState = "OFF";
        }
        this.allowedNonAlphanumericCharacters = (_c2 = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join("")) !== null && _c2 !== void 0 ? _c2 : "";
        this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;
        this.schemaVersion = response.schemaVersion;
      }
      validatePassword(password) {
        var _a, _b, _c2, _d, _e2, _f;
        const status = {
          isValid: true,
          passwordPolicy: this
        };
        this.validatePasswordLengthOptions(password, status);
        this.validatePasswordCharacterOptions(password, status);
        status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);
        status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);
        status.isValid && (status.isValid = (_c2 = status.containsLowercaseLetter) !== null && _c2 !== void 0 ? _c2 : true);
        status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);
        status.isValid && (status.isValid = (_e2 = status.containsNumericCharacter) !== null && _e2 !== void 0 ? _e2 : true);
        status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);
        return status;
      }
      /**
       * Validates that the password meets the length options for the policy.
       *
       * @param password Password to validate.
       * @param status Validation status.
       */
      validatePasswordLengthOptions(password, status) {
        const minPasswordLength = this.customStrengthOptions.minPasswordLength;
        const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;
        if (minPasswordLength) {
          status.meetsMinPasswordLength = password.length >= minPasswordLength;
        }
        if (maxPasswordLength) {
          status.meetsMaxPasswordLength = password.length <= maxPasswordLength;
        }
      }
      /**
       * Validates that the password meets the character options for the policy.
       *
       * @param password Password to validate.
       * @param status Validation status.
       */
      validatePasswordCharacterOptions(password, status) {
        this.updatePasswordCharacterOptionsStatuses(
          status,
          /* containsLowercaseCharacter= */
          false,
          /* containsUppercaseCharacter= */
          false,
          /* containsNumericCharacter= */
          false,
          /* containsNonAlphanumericCharacter= */
          false
        );
        let passwordChar;
        for (let i = 0; i < password.length; i++) {
          passwordChar = password.charAt(i);
          this.updatePasswordCharacterOptionsStatuses(
            status,
            /* containsLowercaseCharacter= */
            passwordChar >= "a" && passwordChar <= "z",
            /* containsUppercaseCharacter= */
            passwordChar >= "A" && passwordChar <= "Z",
            /* containsNumericCharacter= */
            passwordChar >= "0" && passwordChar <= "9",
            /* containsNonAlphanumericCharacter= */
            this.allowedNonAlphanumericCharacters.includes(passwordChar)
          );
        }
      }
      /**
       * Updates the running validation status with the statuses for the character options.
       * Expected to be called each time a character is processed to update each option status
       * based on the current character.
       *
       * @param status Validation status.
       * @param containsLowercaseCharacter Whether the character is a lowercase letter.
       * @param containsUppercaseCharacter Whether the character is an uppercase letter.
       * @param containsNumericCharacter Whether the character is a numeric character.
       * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.
       */
      updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {
        if (this.customStrengthOptions.containsLowercaseLetter) {
          status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);
        }
        if (this.customStrengthOptions.containsUppercaseLetter) {
          status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);
        }
        if (this.customStrengthOptions.containsNumericCharacter) {
          status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);
        }
        if (this.customStrengthOptions.containsNonAlphanumericCharacter) {
          status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);
        }
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AuthImpl {
      constructor(app2, heartbeatServiceProvider, appCheckServiceProvider, config) {
        this.app = app2;
        this.heartbeatServiceProvider = heartbeatServiceProvider;
        this.appCheckServiceProvider = appCheckServiceProvider;
        this.config = config;
        this.currentUser = null;
        this.emulatorConfig = null;
        this.operations = Promise.resolve();
        this.authStateSubscription = new Subscription(this);
        this.idTokenSubscription = new Subscription(this);
        this.beforeStateQueue = new AuthMiddlewareQueue(this);
        this.redirectUser = null;
        this.isProactiveRefreshEnabled = false;
        this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;
        this._canInitEmulator = true;
        this._isInitialized = false;
        this._deleted = false;
        this._initializationPromise = null;
        this._popupRedirectResolver = null;
        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
        this._agentRecaptchaConfig = null;
        this._tenantRecaptchaConfigs = {};
        this._projectPasswordPolicy = null;
        this._tenantPasswordPolicies = {};
        this.lastNotifiedUid = void 0;
        this.languageCode = null;
        this.tenantId = null;
        this.settings = { appVerificationDisabledForTesting: false };
        this.frameworks = [];
        this.name = app2.name;
        this.clientVersion = config.sdkClientVersion;
      }
      _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
        if (popupRedirectResolver) {
          this._popupRedirectResolver = _getInstance(popupRedirectResolver);
        }
        this._initializationPromise = this.queue(() => __async(this, null, function* () {
          var _a, _b;
          if (this._deleted) {
            return;
          }
          this.persistenceManager = yield PersistenceUserManager.create(this, persistenceHierarchy);
          if (this._deleted) {
            return;
          }
          if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {
            try {
              yield this._popupRedirectResolver._initialize(this);
            } catch (e) {
            }
          }
          yield this.initializeCurrentUser(popupRedirectResolver);
          this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;
          if (this._deleted) {
            return;
          }
          this._isInitialized = true;
        }));
        return this._initializationPromise;
      }
      /**
       * If the persistence is changed in another window, the user manager will let us know
       */
      _onStorageEvent() {
        return __async(this, null, function* () {
          if (this._deleted) {
            return;
          }
          const user = yield this.assertedPersistence.getCurrentUser();
          if (!this.currentUser && !user) {
            return;
          }
          if (this.currentUser && user && this.currentUser.uid === user.uid) {
            this._currentUser._assign(user);
            yield this.currentUser.getIdToken();
            return;
          }
          yield this._updateCurrentUser(
            user,
            /* skipBeforeStateCallbacks */
            true
          );
        });
      }
      initializeCurrentUserFromIdToken(idToken) {
        return __async(this, null, function* () {
          try {
            const response = yield getAccountInfo(this, { idToken });
            const user = yield UserImpl._fromGetAccountInfoResponse(this, response, idToken);
            yield this.directlySetCurrentUser(user);
          } catch (err) {
            console.warn("FirebaseServerApp could not login user with provided authIdToken: ", err);
            yield this.directlySetCurrentUser(null);
          }
        });
      }
      initializeCurrentUser(popupRedirectResolver) {
        return __async(this, null, function* () {
          var _a;
          if (_isFirebaseServerApp(this.app)) {
            const idToken = this.app.settings.authIdToken;
            if (idToken) {
              return new Promise((resolve) => {
                setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));
              });
            } else {
              return this.directlySetCurrentUser(null);
            }
          }
          const previouslyStoredUser = yield this.assertedPersistence.getCurrentUser();
          let futureCurrentUser = previouslyStoredUser;
          let needsTocheckMiddleware = false;
          if (popupRedirectResolver && this.config.authDomain) {
            yield this.getOrInitRedirectPersistenceManager();
            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
            const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;
            const result = yield this.tryRedirectSignIn(popupRedirectResolver);
            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
              futureCurrentUser = result.user;
              needsTocheckMiddleware = true;
            }
          }
          if (!futureCurrentUser) {
            return this.directlySetCurrentUser(null);
          }
          if (!futureCurrentUser._redirectEventId) {
            if (needsTocheckMiddleware) {
              try {
                yield this.beforeStateQueue.runMiddleware(futureCurrentUser);
              } catch (e) {
                futureCurrentUser = previouslyStoredUser;
                this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));
              }
            }
            if (futureCurrentUser) {
              return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
            } else {
              return this.directlySetCurrentUser(null);
            }
          }
          _assert(
            this._popupRedirectResolver,
            this,
            "argument-error"
            /* AuthErrorCode.ARGUMENT_ERROR */
          );
          yield this.getOrInitRedirectPersistenceManager();
          if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {
            return this.directlySetCurrentUser(futureCurrentUser);
          }
          return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
        });
      }
      tryRedirectSignIn(redirectResolver) {
        return __async(this, null, function* () {
          let result = null;
          try {
            result = yield this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
          } catch (e) {
            yield this._setRedirectUser(null);
          }
          return result;
        });
      }
      reloadAndSetCurrentUserOrClear(user) {
        return __async(this, null, function* () {
          try {
            yield _reloadWithoutSaving(user);
          } catch (e) {
            if ((e === null || e === void 0 ? void 0 : e.code) !== `auth/${"network-request-failed"}`) {
              return this.directlySetCurrentUser(null);
            }
          }
          return this.directlySetCurrentUser(user);
        });
      }
      useDeviceLanguage() {
        this.languageCode = _getUserLanguage();
      }
      _delete() {
        return __async(this, null, function* () {
          this._deleted = true;
        });
      }
      updateCurrentUser(userExtern) {
        return __async(this, null, function* () {
          if (_isFirebaseServerApp(this.app)) {
            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
          }
          const user = userExtern ? getModularInstance(userExtern) : null;
          if (user) {
            _assert(
              user.auth.config.apiKey === this.config.apiKey,
              this,
              "invalid-user-token"
              /* AuthErrorCode.INVALID_AUTH */
            );
          }
          return this._updateCurrentUser(user && user._clone(this));
        });
      }
      _updateCurrentUser(user, skipBeforeStateCallbacks = false) {
        return __async(this, null, function* () {
          if (this._deleted) {
            return;
          }
          if (user) {
            _assert(
              this.tenantId === user.tenantId,
              this,
              "tenant-id-mismatch"
              /* AuthErrorCode.TENANT_ID_MISMATCH */
            );
          }
          if (!skipBeforeStateCallbacks) {
            yield this.beforeStateQueue.runMiddleware(user);
          }
          return this.queue(() => __async(this, null, function* () {
            yield this.directlySetCurrentUser(user);
            this.notifyAuthListeners();
          }));
        });
      }
      signOut() {
        return __async(this, null, function* () {
          if (_isFirebaseServerApp(this.app)) {
            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
          }
          yield this.beforeStateQueue.runMiddleware(null);
          if (this.redirectPersistenceManager || this._popupRedirectResolver) {
            yield this._setRedirectUser(null);
          }
          return this._updateCurrentUser(
            null,
            /* skipBeforeStateCallbacks */
            true
          );
        });
      }
      setPersistence(persistence) {
        if (_isFirebaseServerApp(this.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
        }
        return this.queue(() => __async(this, null, function* () {
          yield this.assertedPersistence.setPersistence(_getInstance(persistence));
        }));
      }
      _getRecaptchaConfig() {
        if (this.tenantId == null) {
          return this._agentRecaptchaConfig;
        } else {
          return this._tenantRecaptchaConfigs[this.tenantId];
        }
      }
      validatePassword(password) {
        return __async(this, null, function* () {
          if (!this._getPasswordPolicyInternal()) {
            yield this._updatePasswordPolicy();
          }
          const passwordPolicy = this._getPasswordPolicyInternal();
          if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {
            return Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version", {}));
          }
          return passwordPolicy.validatePassword(password);
        });
      }
      _getPasswordPolicyInternal() {
        if (this.tenantId === null) {
          return this._projectPasswordPolicy;
        } else {
          return this._tenantPasswordPolicies[this.tenantId];
        }
      }
      _updatePasswordPolicy() {
        return __async(this, null, function* () {
          const response = yield _getPasswordPolicy(this);
          const passwordPolicy = new PasswordPolicyImpl(response);
          if (this.tenantId === null) {
            this._projectPasswordPolicy = passwordPolicy;
          } else {
            this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;
          }
        });
      }
      _getPersistence() {
        return this.assertedPersistence.persistence.type;
      }
      _updateErrorMap(errorMap) {
        this._errorFactory = new ErrorFactory("auth", "Firebase", errorMap());
      }
      onAuthStateChanged(nextOrObserver, error2, completed) {
        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error2, completed);
      }
      beforeAuthStateChanged(callback, onAbort) {
        return this.beforeStateQueue.pushCallback(callback, onAbort);
      }
      onIdTokenChanged(nextOrObserver, error2, completed) {
        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error2, completed);
      }
      authStateReady() {
        return new Promise((resolve, reject) => {
          if (this.currentUser) {
            resolve();
          } else {
            const unsubscribe = this.onAuthStateChanged(() => {
              unsubscribe();
              resolve();
            }, reject);
          }
        });
      }
      /**
       * Revokes the given access token. Currently only supports Apple OAuth access tokens.
       */
      revokeAccessToken(token) {
        return __async(this, null, function* () {
          if (this.currentUser) {
            const idToken = yield this.currentUser.getIdToken();
            const request = {
              providerId: "apple.com",
              tokenType: "ACCESS_TOKEN",
              token,
              idToken
            };
            if (this.tenantId != null) {
              request.tenantId = this.tenantId;
            }
            yield revokeToken(this, request);
          }
        });
      }
      toJSON() {
        var _a;
        return {
          apiKey: this.config.apiKey,
          authDomain: this.config.authDomain,
          appName: this.name,
          currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
        };
      }
      _setRedirectUser(user, popupRedirectResolver) {
        return __async(this, null, function* () {
          const redirectManager = yield this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
          return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);
        });
      }
      getOrInitRedirectPersistenceManager(popupRedirectResolver) {
        return __async(this, null, function* () {
          if (!this.redirectPersistenceManager) {
            const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
            _assert(
              resolver,
              this,
              "argument-error"
              /* AuthErrorCode.ARGUMENT_ERROR */
            );
            this.redirectPersistenceManager = yield PersistenceUserManager.create(
              this,
              [_getInstance(resolver._redirectPersistence)],
              "redirectUser"
              /* KeyName.REDIRECT_USER */
            );
            this.redirectUser = yield this.redirectPersistenceManager.getCurrentUser();
          }
          return this.redirectPersistenceManager;
        });
      }
      _redirectUserForId(id2) {
        return __async(this, null, function* () {
          var _a, _b;
          if (this._isInitialized) {
            yield this.queue(() => __async(this, null, function* () {
            }));
          }
          if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id2) {
            return this._currentUser;
          }
          if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id2) {
            return this.redirectUser;
          }
          return null;
        });
      }
      _persistUserIfCurrent(user) {
        return __async(this, null, function* () {
          if (user === this.currentUser) {
            return this.queue(() => __async(this, null, function* () {
              return this.directlySetCurrentUser(user);
            }));
          }
        });
      }
      /** Notifies listeners only if the user is current */
      _notifyListenersIfCurrent(user) {
        if (user === this.currentUser) {
          this.notifyAuthListeners();
        }
      }
      _key() {
        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
      }
      _startProactiveRefresh() {
        this.isProactiveRefreshEnabled = true;
        if (this.currentUser) {
          this._currentUser._startProactiveRefresh();
        }
      }
      _stopProactiveRefresh() {
        this.isProactiveRefreshEnabled = false;
        if (this.currentUser) {
          this._currentUser._stopProactiveRefresh();
        }
      }
      /** Returns the current user cast as the internal type */
      get _currentUser() {
        return this.currentUser;
      }
      notifyAuthListeners() {
        var _a, _b;
        if (!this._isInitialized) {
          return;
        }
        this.idTokenSubscription.next(this.currentUser);
        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
        if (this.lastNotifiedUid !== currentUid) {
          this.lastNotifiedUid = currentUid;
          this.authStateSubscription.next(this.currentUser);
        }
      }
      registerStateListener(subscription, nextOrObserver, error2, completed) {
        if (this._deleted) {
          return () => {
          };
        }
        const cb2 = typeof nextOrObserver === "function" ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
        let isUnsubscribed = false;
        const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
        _assert(
          promise,
          this,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        promise.then(() => {
          if (isUnsubscribed) {
            return;
          }
          cb2(this.currentUser);
        });
        if (typeof nextOrObserver === "function") {
          const unsubscribe = subscription.addObserver(nextOrObserver, error2, completed);
          return () => {
            isUnsubscribed = true;
            unsubscribe();
          };
        } else {
          const unsubscribe = subscription.addObserver(nextOrObserver);
          return () => {
            isUnsubscribed = true;
            unsubscribe();
          };
        }
      }
      /**
       * Unprotected (from race conditions) method to set the current user. This
       * should only be called from within a queued callback. This is necessary
       * because the queue shouldn't rely on another queued callback.
       */
      directlySetCurrentUser(user) {
        return __async(this, null, function* () {
          if (this.currentUser && this.currentUser !== user) {
            this._currentUser._stopProactiveRefresh();
          }
          if (user && this.isProactiveRefreshEnabled) {
            user._startProactiveRefresh();
          }
          this.currentUser = user;
          if (user) {
            yield this.assertedPersistence.setCurrentUser(user);
          } else {
            yield this.assertedPersistence.removeCurrentUser();
          }
        });
      }
      queue(action) {
        this.operations = this.operations.then(action, action);
        return this.operations;
      }
      get assertedPersistence() {
        _assert(
          this.persistenceManager,
          this,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return this.persistenceManager;
      }
      _logFramework(framework) {
        if (!framework || this.frameworks.includes(framework)) {
          return;
        }
        this.frameworks.push(framework);
        this.frameworks.sort();
        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
      }
      _getFrameworks() {
        return this.frameworks;
      }
      _getAdditionalHeaders() {
        return __async(this, null, function* () {
          var _a;
          const headers = {
            [
              "X-Client-Version"
              /* HttpHeader.X_CLIENT_VERSION */
            ]: this.clientVersion
          };
          if (this.app.options.appId) {
            headers[
              "X-Firebase-gmpid"
              /* HttpHeader.X_FIREBASE_GMPID */
            ] = this.app.options.appId;
          }
          const heartbeatsHeader = yield (_a = this.heartbeatServiceProvider.getImmediate({
            optional: true
          })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader();
          if (heartbeatsHeader) {
            headers[
              "X-Firebase-Client"
              /* HttpHeader.X_FIREBASE_CLIENT */
            ] = heartbeatsHeader;
          }
          const appCheckToken = yield this._getAppCheckToken();
          if (appCheckToken) {
            headers[
              "X-Firebase-AppCheck"
              /* HttpHeader.X_FIREBASE_APP_CHECK */
            ] = appCheckToken;
          }
          return headers;
        });
      }
      _getAppCheckToken() {
        return __async(this, null, function* () {
          var _a;
          const appCheckTokenResult = yield (_a = this.appCheckServiceProvider.getImmediate({ optional: true })) === null || _a === void 0 ? void 0 : _a.getToken();
          if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {
            _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);
          }
          return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;
        });
      }
    }
    function _castAuth(auth2) {
      return getModularInstance(auth2);
    }
    class Subscription {
      constructor(auth2) {
        this.auth = auth2;
        this.observer = null;
        this.addObserver = createSubscribe((observer) => this.observer = observer);
      }
      get next() {
        _assert(
          this.observer,
          this.auth,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return this.observer.next.bind(this.observer);
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let externalJSProvider = {
      loadJS() {
        return __async(this, null, function* () {
          throw new Error("Unable to load external scripts");
        });
      },
      recaptchaV2Script: "",
      recaptchaEnterpriseScript: "",
      gapiScript: ""
    };
    function _setExternalJSProvider(p2) {
      externalJSProvider = p2;
    }
    function _loadJS(url) {
      return externalJSProvider.loadJS(url);
    }
    function _gapiScriptUrl() {
      return externalJSProvider.gapiScript;
    }
    function _generateCallbackName(prefix) {
      return `__${prefix}${Math.floor(Math.random() * 1e6)}`;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function initializeAuth(app2, deps) {
      const provider = _getProvider(app2, "auth");
      if (provider.isInitialized()) {
        const auth3 = provider.getImmediate();
        const initialOptions = provider.getOptions();
        if (deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {
          return auth3;
        } else {
          _fail(
            auth3,
            "already-initialized"
            /* AuthErrorCode.ALREADY_INITIALIZED */
          );
        }
      }
      const auth2 = provider.initialize({ options: deps });
      return auth2;
    }
    function _initializeAuthInstance(auth2, deps) {
      const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
      const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
      if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
        auth2._updateErrorMap(deps.errorMap);
      }
      auth2._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
    }
    function connectAuthEmulator(auth2, url, options) {
      const authInternal = _castAuth(auth2);
      _assert(
        authInternal._canInitEmulator,
        authInternal,
        "emulator-config-failed"
        /* AuthErrorCode.EMULATOR_CONFIG_FAILED */
      );
      _assert(
        /^https?:\/\//.test(url),
        authInternal,
        "invalid-emulator-scheme"
        /* AuthErrorCode.INVALID_EMULATOR_SCHEME */
      );
      const disableWarnings = false;
      const protocol = extractProtocol(url);
      const { host, port } = extractHostAndPort(url);
      const portStr = port === null ? "" : `:${port}`;
      authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };
      authInternal.settings.appVerificationDisabledForTesting = true;
      authInternal.emulatorConfig = Object.freeze({
        host,
        port,
        protocol: protocol.replace(":", ""),
        options: Object.freeze({ disableWarnings })
      });
      {
        emitEmulatorWarning();
      }
    }
    function extractProtocol(url) {
      const protocolEnd = url.indexOf(":");
      return protocolEnd < 0 ? "" : url.substr(0, protocolEnd + 1);
    }
    function extractHostAndPort(url) {
      const protocol = extractProtocol(url);
      const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length));
      if (!authority) {
        return { host: "", port: null };
      }
      const hostAndPort = authority[2].split("@").pop() || "";
      const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
      if (bracketedIPv6) {
        const host = bracketedIPv6[1];
        return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };
      } else {
        const [host, port] = hostAndPort.split(":");
        return { host, port: parsePort(port) };
      }
    }
    function parsePort(portStr) {
      if (!portStr) {
        return null;
      }
      const port = Number(portStr);
      if (isNaN(port)) {
        return null;
      }
      return port;
    }
    function emitEmulatorWarning() {
      function attachBanner() {
        const el2 = document.createElement("p");
        const sty = el2.style;
        el2.innerText = "Running in emulator mode. Do not use with production credentials.";
        sty.position = "fixed";
        sty.width = "100%";
        sty.backgroundColor = "#ffffff";
        sty.border = ".1em solid #000000";
        sty.color = "#b50000";
        sty.bottom = "0px";
        sty.left = "0px";
        sty.margin = "0px";
        sty.zIndex = "10000";
        sty.textAlign = "center";
        el2.classList.add("firebase-emulator-warning");
        document.body.appendChild(el2);
      }
      if (typeof console !== "undefined" && typeof console.info === "function") {
        console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
      }
      if (typeof window !== "undefined" && typeof document !== "undefined") {
        if (document.readyState === "loading") {
          window.addEventListener("DOMContentLoaded", attachBanner);
        } else {
          attachBanner();
        }
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AuthCredential {
      /** @internal */
      constructor(providerId, signInMethod) {
        this.providerId = providerId;
        this.signInMethod = signInMethod;
      }
      /**
       * Returns a JSON-serializable representation of this object.
       *
       * @returns a JSON-serializable representation of this object.
       */
      toJSON() {
        return debugFail("not implemented");
      }
      /** @internal */
      _getIdTokenResponse(_auth) {
        return debugFail("not implemented");
      }
      /** @internal */
      _linkToIdToken(_auth, _idToken) {
        return debugFail("not implemented");
      }
      /** @internal */
      _getReauthenticationResolver(_auth) {
        return debugFail("not implemented");
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signInWithIdp(auth2, request) {
      return __async(this, null, function* () {
        return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithIdp", _addTidIfNecessary(auth2, request));
      });
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const IDP_REQUEST_URI$1 = "http://localhost";
    class OAuthCredential extends AuthCredential {
      constructor() {
        super(...arguments);
        this.pendingToken = null;
      }
      /** @internal */
      static _fromParams(params) {
        const cred = new OAuthCredential(params.providerId, params.signInMethod);
        if (params.idToken || params.accessToken) {
          if (params.idToken) {
            cred.idToken = params.idToken;
          }
          if (params.accessToken) {
            cred.accessToken = params.accessToken;
          }
          if (params.nonce && !params.pendingToken) {
            cred.nonce = params.nonce;
          }
          if (params.pendingToken) {
            cred.pendingToken = params.pendingToken;
          }
        } else if (params.oauthToken && params.oauthTokenSecret) {
          cred.accessToken = params.oauthToken;
          cred.secret = params.oauthTokenSecret;
        } else {
          _fail(
            "argument-error"
            /* AuthErrorCode.ARGUMENT_ERROR */
          );
        }
        return cred;
      }
      /** {@inheritdoc AuthCredential.toJSON}  */
      toJSON() {
        return {
          idToken: this.idToken,
          accessToken: this.accessToken,
          secret: this.secret,
          nonce: this.nonce,
          pendingToken: this.pendingToken,
          providerId: this.providerId,
          signInMethod: this.signInMethod
        };
      }
      /**
       * Static method to deserialize a JSON representation of an object into an
       * {@link  AuthCredential}.
       *
       * @param json - Input can be either Object or the stringified representation of the object.
       * When string is provided, JSON.parse would be called first.
       *
       * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
       */
      static fromJSON(json) {
        const obj = typeof json === "string" ? JSON.parse(json) : json;
        const { providerId, signInMethod } = obj, rest = __rest(obj, ["providerId", "signInMethod"]);
        if (!providerId || !signInMethod) {
          return null;
        }
        const cred = new OAuthCredential(providerId, signInMethod);
        cred.idToken = rest.idToken || void 0;
        cred.accessToken = rest.accessToken || void 0;
        cred.secret = rest.secret;
        cred.nonce = rest.nonce;
        cred.pendingToken = rest.pendingToken || null;
        return cred;
      }
      /** @internal */
      _getIdTokenResponse(auth2) {
        const request = this.buildRequest();
        return signInWithIdp(auth2, request);
      }
      /** @internal */
      _linkToIdToken(auth2, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth2, request);
      }
      /** @internal */
      _getReauthenticationResolver(auth2) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth2, request);
      }
      buildRequest() {
        const request = {
          requestUri: IDP_REQUEST_URI$1,
          returnSecureToken: true
        };
        if (this.pendingToken) {
          request.pendingToken = this.pendingToken;
        } else {
          const postBody = {};
          if (this.idToken) {
            postBody["id_token"] = this.idToken;
          }
          if (this.accessToken) {
            postBody["access_token"] = this.accessToken;
          }
          if (this.secret) {
            postBody["oauth_token_secret"] = this.secret;
          }
          postBody["providerId"] = this.providerId;
          if (this.nonce && !this.pendingToken) {
            postBody["nonce"] = this.nonce;
          }
          request.postBody = querystring(postBody);
        }
        return request;
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FederatedAuthProvider {
      /**
       * Constructor for generic OAuth providers.
       *
       * @param providerId - Provider for which credentials should be generated.
       */
      constructor(providerId) {
        this.providerId = providerId;
        this.defaultLanguageCode = null;
        this.customParameters = {};
      }
      /**
       * Set the language gode.
       *
       * @param languageCode - language code
       */
      setDefaultLanguage(languageCode) {
        this.defaultLanguageCode = languageCode;
      }
      /**
       * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
       * operations.
       *
       * @remarks
       * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
       * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
       *
       * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
       */
      setCustomParameters(customOAuthParameters) {
        this.customParameters = customOAuthParameters;
        return this;
      }
      /**
       * Retrieve the current list of {@link CustomParameters}.
       */
      getCustomParameters() {
        return this.customParameters;
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class BaseOAuthProvider extends FederatedAuthProvider {
      constructor() {
        super(...arguments);
        this.scopes = [];
      }
      /**
       * Add an OAuth scope to the credential.
       *
       * @param scope - Provider OAuth scope to add.
       */
      addScope(scope) {
        if (!this.scopes.includes(scope)) {
          this.scopes.push(scope);
        }
        return this;
      }
      /**
       * Retrieve the current list of OAuth scopes.
       */
      getScopes() {
        return [...this.scopes];
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FacebookAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "facebook.com"
          /* ProviderId.FACEBOOK */
        );
      }
      /**
       * Creates a credential for Facebook.
       *
       * @example
       * ```javascript
       * // `event` from the Facebook auth.authResponseChange callback.
       * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
       * const result = await signInWithCredential(credential);
       * ```
       *
       * @param accessToken - Facebook access token.
       */
      static credential(accessToken) {
        return OAuthCredential._fromParams({
          providerId: FacebookAuthProvider.PROVIDER_ID,
          signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
          accessToken
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error2) {
        return FacebookAuthProvider.credentialFromTaggedObject(error2.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) {
          return null;
        }
        if (!tokenResponse.oauthAccessToken) {
          return null;
        }
        try {
          return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
          return null;
        }
      }
    }
    FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com";
    FacebookAuthProvider.PROVIDER_ID = "facebook.com";
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class GoogleAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "google.com"
          /* ProviderId.GOOGLE */
        );
        this.addScope("profile");
      }
      /**
       * Creates a credential for Google. At least one of ID token and access token is required.
       *
       * @example
       * ```javascript
       * // \`googleUser\` from the onsuccess Google Sign In callback.
       * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
       * const result = await signInWithCredential(credential);
       * ```
       *
       * @param idToken - Google ID token.
       * @param accessToken - Google access token.
       */
      static credential(idToken, accessToken) {
        return OAuthCredential._fromParams({
          providerId: GoogleAuthProvider.PROVIDER_ID,
          signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
          idToken,
          accessToken
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error2) {
        return GoogleAuthProvider.credentialFromTaggedObject(error2.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
          return null;
        }
        const { oauthIdToken, oauthAccessToken } = tokenResponse;
        if (!oauthIdToken && !oauthAccessToken) {
          return null;
        }
        try {
          return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
        } catch (_a) {
          return null;
        }
      }
    }
    GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com";
    GoogleAuthProvider.PROVIDER_ID = "google.com";
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class GithubAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "github.com"
          /* ProviderId.GITHUB */
        );
      }
      /**
       * Creates a credential for GitHub.
       *
       * @param accessToken - GitHub access token.
       */
      static credential(accessToken) {
        return OAuthCredential._fromParams({
          providerId: GithubAuthProvider.PROVIDER_ID,
          signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
          accessToken
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return GithubAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error2) {
        return GithubAuthProvider.credentialFromTaggedObject(error2.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) {
          return null;
        }
        if (!tokenResponse.oauthAccessToken) {
          return null;
        }
        try {
          return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
          return null;
        }
      }
    }
    GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com";
    GithubAuthProvider.PROVIDER_ID = "github.com";
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class TwitterAuthProvider extends BaseOAuthProvider {
      constructor() {
        super(
          "twitter.com"
          /* ProviderId.TWITTER */
        );
      }
      /**
       * Creates a credential for Twitter.
       *
       * @param token - Twitter access token.
       * @param secret - Twitter secret.
       */
      static credential(token, secret) {
        return OAuthCredential._fromParams({
          providerId: TwitterAuthProvider.PROVIDER_ID,
          signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
          oauthToken: token,
          oauthTokenSecret: secret
        });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error2) {
        return TwitterAuthProvider.credentialFromTaggedObject(error2.customData || {});
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) {
          return null;
        }
        const { oauthAccessToken, oauthTokenSecret } = tokenResponse;
        if (!oauthAccessToken || !oauthTokenSecret) {
          return null;
        }
        try {
          return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
        } catch (_a) {
          return null;
        }
      }
    }
    TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com";
    TwitterAuthProvider.PROVIDER_ID = "twitter.com";
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class UserCredentialImpl {
      constructor(params) {
        this.user = params.user;
        this.providerId = params.providerId;
        this._tokenResponse = params._tokenResponse;
        this.operationType = params.operationType;
      }
      static _fromIdTokenResponse(auth2, operationType, idTokenResponse, isAnonymous = false) {
        return __async(this, null, function* () {
          const user = yield UserImpl._fromIdTokenResponse(auth2, idTokenResponse, isAnonymous);
          const providerId = providerIdForResponse(idTokenResponse);
          const userCred = new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: idTokenResponse,
            operationType
          });
          return userCred;
        });
      }
      static _forOperation(user, operationType, response) {
        return __async(this, null, function* () {
          yield user._updateTokensIfNecessary(
            response,
            /* reload */
            true
          );
          const providerId = providerIdForResponse(response);
          return new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: response,
            operationType
          });
        });
      }
    }
    function providerIdForResponse(response) {
      if (response.providerId) {
        return response.providerId;
      }
      if ("phoneNumber" in response) {
        return "phone";
      }
      return null;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class MultiFactorError extends FirebaseError {
      constructor(auth2, error2, operationType, user) {
        var _a;
        super(error2.code, error2.message);
        this.operationType = operationType;
        this.user = user;
        Object.setPrototypeOf(this, MultiFactorError.prototype);
        this.customData = {
          appName: auth2.name,
          tenantId: (_a = auth2.tenantId) !== null && _a !== void 0 ? _a : void 0,
          _serverResponse: error2.customData._serverResponse,
          operationType
        };
      }
      static _fromErrorAndOperation(auth2, error2, operationType, user) {
        return new MultiFactorError(auth2, error2, operationType, user);
      }
    }
    function _processCredentialSavingMfaContextIfNecessary(auth2, operationType, credential, user) {
      const idTokenProvider = operationType === "reauthenticate" ? credential._getReauthenticationResolver(auth2) : credential._getIdTokenResponse(auth2);
      return idTokenProvider.catch((error2) => {
        if (error2.code === `auth/${"multi-factor-auth-required"}`) {
          throw MultiFactorError._fromErrorAndOperation(auth2, error2, operationType, user);
        }
        throw error2;
      });
    }
    function _link$1(user, credential, bypassAuthState = false) {
      return __async(this, null, function* () {
        const response = yield _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, yield user.getIdToken()), bypassAuthState);
        return UserCredentialImpl._forOperation(user, "link", response);
      });
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _reauthenticate(user, credential, bypassAuthState = false) {
      return __async(this, null, function* () {
        const { auth: auth2 } = user;
        if (_isFirebaseServerApp(auth2.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth2));
        }
        const operationType = "reauthenticate";
        try {
          const response = yield _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth2, operationType, credential, user), bypassAuthState);
          _assert(
            response.idToken,
            auth2,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
          const parsed = _parseToken(response.idToken);
          _assert(
            parsed,
            auth2,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
          const { sub: localId } = parsed;
          _assert(
            user.uid === localId,
            auth2,
            "user-mismatch"
            /* AuthErrorCode.USER_MISMATCH */
          );
          return UserCredentialImpl._forOperation(user, operationType, response);
        } catch (e) {
          if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"user-not-found"}`) {
            _fail(
              auth2,
              "user-mismatch"
              /* AuthErrorCode.USER_MISMATCH */
            );
          }
          throw e;
        }
      });
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _signInWithCredential(auth2, credential, bypassAuthState = false) {
      return __async(this, null, function* () {
        if (_isFirebaseServerApp(auth2.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth2));
        }
        const operationType = "signIn";
        const response = yield _processCredentialSavingMfaContextIfNecessary(auth2, operationType, credential);
        const userCredential = yield UserCredentialImpl._fromIdTokenResponse(auth2, operationType, response);
        if (!bypassAuthState) {
          yield auth2._updateCurrentUser(userCredential.user);
        }
        return userCredential;
      });
    }
    function signInWithCredential(auth2, credential) {
      return __async(this, null, function* () {
        return _signInWithCredential(_castAuth(auth2), credential);
      });
    }
    function onIdTokenChanged(auth2, nextOrObserver, error2, completed) {
      return getModularInstance(auth2).onIdTokenChanged(nextOrObserver, error2, completed);
    }
    function beforeAuthStateChanged(auth2, callback, onAbort) {
      return getModularInstance(auth2).beforeAuthStateChanged(callback, onAbort);
    }
    function onAuthStateChanged(auth2, nextOrObserver, error2, completed) {
      return getModularInstance(auth2).onAuthStateChanged(nextOrObserver, error2, completed);
    }
    function signOut$1(auth2) {
      return getModularInstance(auth2).signOut();
    }
    const STORAGE_AVAILABLE_KEY = "__sak";
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class BrowserPersistenceClass {
      constructor(storageRetriever, type) {
        this.storageRetriever = storageRetriever;
        this.type = type;
      }
      _isAvailable() {
        try {
          if (!this.storage) {
            return Promise.resolve(false);
          }
          this.storage.setItem(STORAGE_AVAILABLE_KEY, "1");
          this.storage.removeItem(STORAGE_AVAILABLE_KEY);
          return Promise.resolve(true);
        } catch (_a) {
          return Promise.resolve(false);
        }
      }
      _set(key, value) {
        this.storage.setItem(key, JSON.stringify(value));
        return Promise.resolve();
      }
      _get(key) {
        const json = this.storage.getItem(key);
        return Promise.resolve(json ? JSON.parse(json) : null);
      }
      _remove(key) {
        this.storage.removeItem(key);
        return Promise.resolve();
      }
      get storage() {
        return this.storageRetriever();
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const _POLLING_INTERVAL_MS$1 = 1e3;
    const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
    class BrowserLocalPersistence extends BrowserPersistenceClass {
      constructor() {
        super(
          () => window.localStorage,
          "LOCAL"
          /* PersistenceType.LOCAL */
        );
        this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);
        this.listeners = {};
        this.localCache = {};
        this.pollTimer = null;
        this.fallbackToPolling = _isMobileBrowser();
        this._shouldAllowMigration = true;
      }
      forAllChangedKeys(cb2) {
        for (const key of Object.keys(this.listeners)) {
          const newValue = this.storage.getItem(key);
          const oldValue = this.localCache[key];
          if (newValue !== oldValue) {
            cb2(key, oldValue, newValue);
          }
        }
      }
      onStorageEvent(event, poll = false) {
        if (!event.key) {
          this.forAllChangedKeys((key2, _oldValue, newValue) => {
            this.notifyListeners(key2, newValue);
          });
          return;
        }
        const key = event.key;
        if (poll) {
          this.detachListener();
        } else {
          this.stopPolling();
        }
        const triggerListeners = () => {
          const storedValue2 = this.storage.getItem(key);
          if (!poll && this.localCache[key] === storedValue2) {
            return;
          }
          this.notifyListeners(key, storedValue2);
        };
        const storedValue = this.storage.getItem(key);
        if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {
          setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
        } else {
          triggerListeners();
        }
      }
      notifyListeners(key, value) {
        this.localCache[key] = value;
        const listeners = this.listeners[key];
        if (listeners) {
          for (const listener of Array.from(listeners)) {
            listener(value ? JSON.parse(value) : value);
          }
        }
      }
      startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(() => {
          this.forAllChangedKeys((key, oldValue, newValue) => {
            this.onStorageEvent(
              new StorageEvent("storage", {
                key,
                oldValue,
                newValue
              }),
              /* poll */
              true
            );
          });
        }, _POLLING_INTERVAL_MS$1);
      }
      stopPolling() {
        if (this.pollTimer) {
          clearInterval(this.pollTimer);
          this.pollTimer = null;
        }
      }
      attachListener() {
        window.addEventListener("storage", this.boundEventHandler);
      }
      detachListener() {
        window.removeEventListener("storage", this.boundEventHandler);
      }
      _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) {
          if (this.fallbackToPolling) {
            this.startPolling();
          } else {
            this.attachListener();
          }
        }
        if (!this.listeners[key]) {
          this.listeners[key] = /* @__PURE__ */ new Set();
          this.localCache[key] = this.storage.getItem(key);
        }
        this.listeners[key].add(listener);
      }
      _removeListener(key, listener) {
        if (this.listeners[key]) {
          this.listeners[key].delete(listener);
          if (this.listeners[key].size === 0) {
            delete this.listeners[key];
          }
        }
        if (Object.keys(this.listeners).length === 0) {
          this.detachListener();
          this.stopPolling();
        }
      }
      // Update local cache on base operations:
      _set(key, value) {
        return __async(this, null, function* () {
          yield __superGet(BrowserLocalPersistence.prototype, this, "_set").call(this, key, value);
          this.localCache[key] = JSON.stringify(value);
        });
      }
      _get(key) {
        return __async(this, null, function* () {
          const value = yield __superGet(BrowserLocalPersistence.prototype, this, "_get").call(this, key);
          this.localCache[key] = JSON.stringify(value);
          return value;
        });
      }
      _remove(key) {
        return __async(this, null, function* () {
          yield __superGet(BrowserLocalPersistence.prototype, this, "_remove").call(this, key);
          delete this.localCache[key];
        });
      }
    }
    BrowserLocalPersistence.type = "LOCAL";
    const browserLocalPersistence = BrowserLocalPersistence;
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class BrowserSessionPersistence extends BrowserPersistenceClass {
      constructor() {
        super(
          () => window.sessionStorage,
          "SESSION"
          /* PersistenceType.SESSION */
        );
      }
      _addListener(_key, _listener) {
        return;
      }
      _removeListener(_key, _listener) {
        return;
      }
    }
    BrowserSessionPersistence.type = "SESSION";
    const browserSessionPersistence = BrowserSessionPersistence;
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _allSettled(promises) {
      return Promise.all(promises.map((promise) => __async(this, null, function* () {
        try {
          const value = yield promise;
          return {
            fulfilled: true,
            value
          };
        } catch (reason) {
          return {
            fulfilled: false,
            reason
          };
        }
      })));
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Receiver {
      constructor(eventTarget) {
        this.eventTarget = eventTarget;
        this.handlersMap = {};
        this.boundEventHandler = this.handleEvent.bind(this);
      }
      /**
       * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
       *
       * @param eventTarget - An event target (such as window or self) through which the underlying
       * messages will be received.
       */
      static _getInstance(eventTarget) {
        const existingInstance = this.receivers.find((receiver) => receiver.isListeningto(eventTarget));
        if (existingInstance) {
          return existingInstance;
        }
        const newInstance = new Receiver(eventTarget);
        this.receivers.push(newInstance);
        return newInstance;
      }
      isListeningto(eventTarget) {
        return this.eventTarget === eventTarget;
      }
      /**
       * Fans out a MessageEvent to the appropriate listeners.
       *
       * @remarks
       * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
       * finished processing.
       *
       * @param event - The MessageEvent.
       *
       */
      handleEvent(event) {
        return __async(this, null, function* () {
          const messageEvent = event;
          const { eventId, eventType, data } = messageEvent.data;
          const handlers = this.handlersMap[eventType];
          if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {
            return;
          }
          messageEvent.ports[0].postMessage({
            status: "ack",
            eventId,
            eventType
          });
          const promises = Array.from(handlers).map((handler) => __async(this, null, function* () {
            return handler(messageEvent.origin, data);
          }));
          const response = yield _allSettled(promises);
          messageEvent.ports[0].postMessage({
            status: "done",
            eventId,
            eventType,
            response
          });
        });
      }
      /**
       * Subscribe an event handler for a particular event.
       *
       * @param eventType - Event name to subscribe to.
       * @param eventHandler - The event handler which should receive the events.
       *
       */
      _subscribe(eventType, eventHandler) {
        if (Object.keys(this.handlersMap).length === 0) {
          this.eventTarget.addEventListener("message", this.boundEventHandler);
        }
        if (!this.handlersMap[eventType]) {
          this.handlersMap[eventType] = /* @__PURE__ */ new Set();
        }
        this.handlersMap[eventType].add(eventHandler);
      }
      /**
       * Unsubscribe an event handler from a particular event.
       *
       * @param eventType - Event name to unsubscribe from.
       * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.
       *
       */
      _unsubscribe(eventType, eventHandler) {
        if (this.handlersMap[eventType] && eventHandler) {
          this.handlersMap[eventType].delete(eventHandler);
        }
        if (!eventHandler || this.handlersMap[eventType].size === 0) {
          delete this.handlersMap[eventType];
        }
        if (Object.keys(this.handlersMap).length === 0) {
          this.eventTarget.removeEventListener("message", this.boundEventHandler);
        }
      }
    }
    Receiver.receivers = [];
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _generateEventId(prefix = "", digits = 10) {
      let random = "";
      for (let i = 0; i < digits; i++) {
        random += Math.floor(Math.random() * 10);
      }
      return prefix + random;
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Sender {
      constructor(target) {
        this.target = target;
        this.handlers = /* @__PURE__ */ new Set();
      }
      /**
       * Unsubscribe the handler and remove it from our tracking Set.
       *
       * @param handler - The handler to unsubscribe.
       */
      removeMessageHandler(handler) {
        if (handler.messageChannel) {
          handler.messageChannel.port1.removeEventListener("message", handler.onMessage);
          handler.messageChannel.port1.close();
        }
        this.handlers.delete(handler);
      }
      /**
       * Send a message to the Receiver located at {@link target}.
       *
       * @remarks
       * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
       * receiver has had a chance to fully process the event.
       *
       * @param eventType - Type of event to send.
       * @param data - The payload of the event.
       * @param timeout - Timeout for waiting on an ACK from the receiver.
       *
       * @returns An array of settled promises from all the handlers that were listening on the receiver.
       */
      _send(eventType, data, timeout = 50) {
        return __async(this, null, function* () {
          const messageChannel = typeof MessageChannel !== "undefined" ? new MessageChannel() : null;
          if (!messageChannel) {
            throw new Error(
              "connection_unavailable"
              /* _MessageError.CONNECTION_UNAVAILABLE */
            );
          }
          let completionTimer;
          let handler;
          return new Promise((resolve, reject) => {
            const eventId = _generateEventId("", 20);
            messageChannel.port1.start();
            const ackTimer = setTimeout(() => {
              reject(new Error(
                "unsupported_event"
                /* _MessageError.UNSUPPORTED_EVENT */
              ));
            }, timeout);
            handler = {
              messageChannel,
              onMessage(event) {
                const messageEvent = event;
                if (messageEvent.data.eventId !== eventId) {
                  return;
                }
                switch (messageEvent.data.status) {
                  case "ack":
                    clearTimeout(ackTimer);
                    completionTimer = setTimeout(
                      () => {
                        reject(new Error(
                          "timeout"
                          /* _MessageError.TIMEOUT */
                        ));
                      },
                      3e3
                      /* _TimeoutDuration.COMPLETION */
                    );
                    break;
                  case "done":
                    clearTimeout(completionTimer);
                    resolve(messageEvent.data.response);
                    break;
                  default:
                    clearTimeout(ackTimer);
                    clearTimeout(completionTimer);
                    reject(new Error(
                      "invalid_response"
                      /* _MessageError.INVALID_RESPONSE */
                    ));
                    break;
                }
              }
            };
            this.handlers.add(handler);
            messageChannel.port1.addEventListener("message", handler.onMessage);
            this.target.postMessage({
              eventType,
              eventId,
              data
            }, [messageChannel.port2]);
          }).finally(() => {
            if (handler) {
              this.removeMessageHandler(handler);
            }
          });
        });
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _window() {
      return window;
    }
    function _setWindowLocation(url) {
      _window().location.href = url;
    }
    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _isWorker() {
      return typeof _window()["WorkerGlobalScope"] !== "undefined" && typeof _window()["importScripts"] === "function";
    }
    function _getActiveServiceWorker() {
      return __async(this, null, function* () {
        if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {
          return null;
        }
        try {
          const registration = yield navigator.serviceWorker.ready;
          return registration.active;
        } catch (_a) {
          return null;
        }
      });
    }
    function _getServiceWorkerController() {
      var _a;
      return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
    }
    function _getWorkerGlobalScope() {
      return _isWorker() ? self : null;
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DB_NAME = "firebaseLocalStorageDb";
    const DB_VERSION = 1;
    const DB_OBJECTSTORE_NAME = "firebaseLocalStorage";
    const DB_DATA_KEYPATH = "fbase_key";
    class DBPromise {
      constructor(request) {
        this.request = request;
      }
      toPromise() {
        return new Promise((resolve, reject) => {
          this.request.addEventListener("success", () => {
            resolve(this.request.result);
          });
          this.request.addEventListener("error", () => {
            reject(this.request.error);
          });
        });
      }
    }
    function getObjectStore(db2, isReadWrite) {
      return db2.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? "readwrite" : "readonly").objectStore(DB_OBJECTSTORE_NAME);
    }
    function _deleteDatabase() {
      const request = indexedDB.deleteDatabase(DB_NAME);
      return new DBPromise(request).toPromise();
    }
    function _openDatabase() {
      const request = indexedDB.open(DB_NAME, DB_VERSION);
      return new Promise((resolve, reject) => {
        request.addEventListener("error", () => {
          reject(request.error);
        });
        request.addEventListener("upgradeneeded", () => {
          const db2 = request.result;
          try {
            db2.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });
          } catch (e) {
            reject(e);
          }
        });
        request.addEventListener("success", () => __async(this, null, function* () {
          const db2 = request.result;
          if (!db2.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
            db2.close();
            yield _deleteDatabase();
            resolve(yield _openDatabase());
          } else {
            resolve(db2);
          }
        }));
      });
    }
    function _putObject(db2, key, value) {
      return __async(this, null, function* () {
        const request = getObjectStore(db2, true).put({
          [DB_DATA_KEYPATH]: key,
          value
        });
        return new DBPromise(request).toPromise();
      });
    }
    function getObject(db2, key) {
      return __async(this, null, function* () {
        const request = getObjectStore(db2, false).get(key);
        const data = yield new DBPromise(request).toPromise();
        return data === void 0 ? null : data.value;
      });
    }
    function _deleteObject(db2, key) {
      const request = getObjectStore(db2, true).delete(key);
      return new DBPromise(request).toPromise();
    }
    const _POLLING_INTERVAL_MS = 800;
    const _TRANSACTION_RETRY_COUNT = 3;
    class IndexedDBLocalPersistence {
      constructor() {
        this.type = "LOCAL";
        this._shouldAllowMigration = true;
        this.listeners = {};
        this.localCache = {};
        this.pollTimer = null;
        this.pendingWrites = 0;
        this.receiver = null;
        this.sender = null;
        this.serviceWorkerReceiverAvailable = false;
        this.activeServiceWorker = null;
        this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {
        }, () => {
        });
      }
      _openDb() {
        return __async(this, null, function* () {
          if (this.db) {
            return this.db;
          }
          this.db = yield _openDatabase();
          return this.db;
        });
      }
      _withRetries(op) {
        return __async(this, null, function* () {
          let numAttempts = 0;
          while (true) {
            try {
              const db2 = yield this._openDb();
              return yield op(db2);
            } catch (e) {
              if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
                throw e;
              }
              if (this.db) {
                this.db.close();
                this.db = void 0;
              }
            }
          }
        });
      }
      /**
       * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
       * postMessage interface to send these events to the worker ourselves.
       */
      initializeServiceWorkerMessaging() {
        return __async(this, null, function* () {
          return _isWorker() ? this.initializeReceiver() : this.initializeSender();
        });
      }
      /**
       * As the worker we should listen to events from the main window.
       */
      initializeReceiver() {
        return __async(this, null, function* () {
          this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
          this.receiver._subscribe("keyChanged", (_origin, data) => __async(this, null, function* () {
            const keys = yield this._poll();
            return {
              keyProcessed: keys.includes(data.key)
            };
          }));
          this.receiver._subscribe("ping", (_origin, _data) => __async(this, null, function* () {
            return [
              "keyChanged"
              /* _EventType.KEY_CHANGED */
            ];
          }));
        });
      }
      /**
       * As the main window, we should let the worker know when keys change (set and remove).
       *
       * @remarks
       * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
       * may not resolve.
       */
      initializeSender() {
        return __async(this, null, function* () {
          var _a, _b;
          this.activeServiceWorker = yield _getActiveServiceWorker();
          if (!this.activeServiceWorker) {
            return;
          }
          this.sender = new Sender(this.activeServiceWorker);
          const results = yield this.sender._send(
            "ping",
            {},
            800
            /* _TimeoutDuration.LONG_ACK */
          );
          if (!results) {
            return;
          }
          if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(
            "keyChanged"
            /* _EventType.KEY_CHANGED */
          ))) {
            this.serviceWorkerReceiverAvailable = true;
          }
        });
      }
      /**
       * Let the worker know about a changed key, the exact key doesn't technically matter since the
       * worker will just trigger a full sync anyway.
       *
       * @remarks
       * For now, we only support one service worker per page.
       *
       * @param key - Storage key which changed.
       */
      notifyServiceWorker(key) {
        return __async(this, null, function* () {
          if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {
            return;
          }
          try {
            yield this.sender._send(
              "keyChanged",
              { key },
              // Use long timeout if receiver has previously responded to a ping from us.
              this.serviceWorkerReceiverAvailable ? 800 : 50
              /* _TimeoutDuration.ACK */
            );
          } catch (_a) {
          }
        });
      }
      _isAvailable() {
        return __async(this, null, function* () {
          try {
            if (!indexedDB) {
              return false;
            }
            const db2 = yield _openDatabase();
            yield _putObject(db2, STORAGE_AVAILABLE_KEY, "1");
            yield _deleteObject(db2, STORAGE_AVAILABLE_KEY);
            return true;
          } catch (_a) {
          }
          return false;
        });
      }
      _withPendingWrite(write) {
        return __async(this, null, function* () {
          this.pendingWrites++;
          try {
            yield write();
          } finally {
            this.pendingWrites--;
          }
        });
      }
      _set(key, value) {
        return __async(this, null, function* () {
          return this._withPendingWrite(() => __async(this, null, function* () {
            yield this._withRetries((db2) => _putObject(db2, key, value));
            this.localCache[key] = value;
            return this.notifyServiceWorker(key);
          }));
        });
      }
      _get(key) {
        return __async(this, null, function* () {
          const obj = yield this._withRetries((db2) => getObject(db2, key));
          this.localCache[key] = obj;
          return obj;
        });
      }
      _remove(key) {
        return __async(this, null, function* () {
          return this._withPendingWrite(() => __async(this, null, function* () {
            yield this._withRetries((db2) => _deleteObject(db2, key));
            delete this.localCache[key];
            return this.notifyServiceWorker(key);
          }));
        });
      }
      _poll() {
        return __async(this, null, function* () {
          const result = yield this._withRetries((db2) => {
            const getAllRequest = getObjectStore(db2, false).getAll();
            return new DBPromise(getAllRequest).toPromise();
          });
          if (!result) {
            return [];
          }
          if (this.pendingWrites !== 0) {
            return [];
          }
          const keys = [];
          const keysInResult = /* @__PURE__ */ new Set();
          if (result.length !== 0) {
            for (const { fbase_key: key, value } of result) {
              keysInResult.add(key);
              if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                this.notifyListeners(key, value);
                keys.push(key);
              }
            }
          }
          for (const localKey of Object.keys(this.localCache)) {
            if (this.localCache[localKey] && !keysInResult.has(localKey)) {
              this.notifyListeners(localKey, null);
              keys.push(localKey);
            }
          }
          return keys;
        });
      }
      notifyListeners(key, newValue) {
        this.localCache[key] = newValue;
        const listeners = this.listeners[key];
        if (listeners) {
          for (const listener of Array.from(listeners)) {
            listener(newValue);
          }
        }
      }
      startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(() => __async(this, null, function* () {
          return this._poll();
        }), _POLLING_INTERVAL_MS);
      }
      stopPolling() {
        if (this.pollTimer) {
          clearInterval(this.pollTimer);
          this.pollTimer = null;
        }
      }
      _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) {
          this.startPolling();
        }
        if (!this.listeners[key]) {
          this.listeners[key] = /* @__PURE__ */ new Set();
          void this._get(key);
        }
        this.listeners[key].add(listener);
      }
      _removeListener(key, listener) {
        if (this.listeners[key]) {
          this.listeners[key].delete(listener);
          if (this.listeners[key].size === 0) {
            delete this.listeners[key];
          }
        }
        if (Object.keys(this.listeners).length === 0) {
          this.stopPolling();
        }
      }
    }
    IndexedDBLocalPersistence.type = "LOCAL";
    const indexedDBLocalPersistence = IndexedDBLocalPersistence;
    new Delay(3e4, 6e4);
    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _withDefaultResolver(auth2, resolverOverride) {
      if (resolverOverride) {
        return _getInstance(resolverOverride);
      }
      _assert(
        auth2._popupRedirectResolver,
        auth2,
        "argument-error"
        /* AuthErrorCode.ARGUMENT_ERROR */
      );
      return auth2._popupRedirectResolver;
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class IdpCredential extends AuthCredential {
      constructor(params) {
        super(
          "custom",
          "custom"
          /* ProviderId.CUSTOM */
        );
        this.params = params;
      }
      _getIdTokenResponse(auth2) {
        return signInWithIdp(auth2, this._buildIdpRequest());
      }
      _linkToIdToken(auth2, idToken) {
        return signInWithIdp(auth2, this._buildIdpRequest(idToken));
      }
      _getReauthenticationResolver(auth2) {
        return signInWithIdp(auth2, this._buildIdpRequest());
      }
      _buildIdpRequest(idToken) {
        const request = {
          requestUri: this.params.requestUri,
          sessionId: this.params.sessionId,
          postBody: this.params.postBody,
          tenantId: this.params.tenantId,
          pendingToken: this.params.pendingToken,
          returnSecureToken: true,
          returnIdpCredential: true
        };
        if (idToken) {
          request.idToken = idToken;
        }
        return request;
      }
    }
    function _signIn(params) {
      return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
    }
    function _reauth(params) {
      const { auth: auth2, user } = params;
      _assert(
        user,
        auth2,
        "internal-error"
        /* AuthErrorCode.INTERNAL_ERROR */
      );
      return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
    }
    function _link(params) {
      return __async(this, null, function* () {
        const { auth: auth2, user } = params;
        _assert(
          user,
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return _link$1(user, new IdpCredential(params), params.bypassAuthState);
      });
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AbstractPopupRedirectOperation {
      constructor(auth2, filter, resolver, user, bypassAuthState = false) {
        this.auth = auth2;
        this.resolver = resolver;
        this.user = user;
        this.bypassAuthState = bypassAuthState;
        this.pendingPromise = null;
        this.eventManager = null;
        this.filter = Array.isArray(filter) ? filter : [filter];
      }
      execute() {
        return new Promise((resolve, reject) => __async(this, null, function* () {
          this.pendingPromise = { resolve, reject };
          try {
            this.eventManager = yield this.resolver._initialize(this.auth);
            yield this.onExecution();
            this.eventManager.registerConsumer(this);
          } catch (e) {
            this.reject(e);
          }
        }));
      }
      onAuthEvent(event) {
        return __async(this, null, function* () {
          const { urlResponse, sessionId, postBody, tenantId, error: error2, type } = event;
          if (error2) {
            this.reject(error2);
            return;
          }
          const params = {
            auth: this.auth,
            requestUri: urlResponse,
            sessionId,
            tenantId: tenantId || void 0,
            postBody: postBody || void 0,
            user: this.user,
            bypassAuthState: this.bypassAuthState
          };
          try {
            this.resolve(yield this.getIdpTask(type)(params));
          } catch (e) {
            this.reject(e);
          }
        });
      }
      onError(error2) {
        this.reject(error2);
      }
      getIdpTask(type) {
        switch (type) {
          case "signInViaPopup":
          case "signInViaRedirect":
            return _signIn;
          case "linkViaPopup":
          case "linkViaRedirect":
            return _link;
          case "reauthViaPopup":
          case "reauthViaRedirect":
            return _reauth;
          default:
            _fail(
              this.auth,
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
        }
      }
      resolve(cred) {
        debugAssert(this.pendingPromise, "Pending promise was never set");
        this.pendingPromise.resolve(cred);
        this.unregisterAndCleanUp();
      }
      reject(error2) {
        debugAssert(this.pendingPromise, "Pending promise was never set");
        this.pendingPromise.reject(error2);
        this.unregisterAndCleanUp();
      }
      unregisterAndCleanUp() {
        if (this.eventManager) {
          this.eventManager.unregisterConsumer(this);
        }
        this.pendingPromise = null;
        this.cleanUp();
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2e3, 1e4);
    function signInWithPopup(auth2, provider, resolver) {
      return __async(this, null, function* () {
        if (_isFirebaseServerApp(auth2.app)) {
          return Promise.reject(_createError(
            auth2,
            "operation-not-supported-in-this-environment"
            /* AuthErrorCode.OPERATION_NOT_SUPPORTED */
          ));
        }
        const authInternal = _castAuth(auth2);
        _assertInstanceOf(auth2, provider, FederatedAuthProvider);
        const resolverInternal = _withDefaultResolver(authInternal, resolver);
        const action = new PopupOperation(authInternal, "signInViaPopup", provider, resolverInternal);
        return action.executeNotNull();
      });
    }
    class PopupOperation extends AbstractPopupRedirectOperation {
      constructor(auth2, filter, provider, resolver, user) {
        super(auth2, filter, resolver, user);
        this.provider = provider;
        this.authWindow = null;
        this.pollId = null;
        if (PopupOperation.currentPopupAction) {
          PopupOperation.currentPopupAction.cancel();
        }
        PopupOperation.currentPopupAction = this;
      }
      executeNotNull() {
        return __async(this, null, function* () {
          const result = yield this.execute();
          _assert(
            result,
            this.auth,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
          return result;
        });
      }
      onExecution() {
        return __async(this, null, function* () {
          debugAssert(this.filter.length === 1, "Popup operations only handle one event");
          const eventId = _generateEventId();
          this.authWindow = yield this.resolver._openPopup(
            this.auth,
            this.provider,
            this.filter[0],
            // There's always one, see constructor
            eventId
          );
          this.authWindow.associatedEvent = eventId;
          this.resolver._originValidation(this.auth).catch((e) => {
            this.reject(e);
          });
          this.resolver._isIframeWebStorageSupported(this.auth, (isSupported) => {
            if (!isSupported) {
              this.reject(_createError(
                this.auth,
                "web-storage-unsupported"
                /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */
              ));
            }
          });
          this.pollUserCancellation();
        });
      }
      get eventId() {
        var _a;
        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
      }
      cancel() {
        this.reject(_createError(
          this.auth,
          "cancelled-popup-request"
          /* AuthErrorCode.EXPIRED_POPUP_REQUEST */
        ));
      }
      cleanUp() {
        if (this.authWindow) {
          this.authWindow.close();
        }
        if (this.pollId) {
          window.clearTimeout(this.pollId);
        }
        this.authWindow = null;
        this.pollId = null;
        PopupOperation.currentPopupAction = null;
      }
      pollUserCancellation() {
        const poll = () => {
          var _a, _b;
          if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
            this.pollId = window.setTimeout(
              () => {
                this.pollId = null;
                this.reject(_createError(
                  this.auth,
                  "popup-closed-by-user"
                  /* AuthErrorCode.POPUP_CLOSED_BY_USER */
                ));
              },
              8e3
              /* _Timeout.AUTH_EVENT */
            );
            return;
          }
          this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
        };
        poll();
      }
    }
    PopupOperation.currentPopupAction = null;
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const PENDING_REDIRECT_KEY = "pendingRedirect";
    const redirectOutcomeMap = /* @__PURE__ */ new Map();
    class RedirectAction extends AbstractPopupRedirectOperation {
      constructor(auth2, resolver, bypassAuthState = false) {
        super(auth2, [
          "signInViaRedirect",
          "linkViaRedirect",
          "reauthViaRedirect",
          "unknown"
          /* AuthEventType.UNKNOWN */
        ], resolver, void 0, bypassAuthState);
        this.eventId = null;
      }
      /**
       * Override the execute function; if we already have a redirect result, then
       * just return it.
       */
      execute() {
        return __async(this, null, function* () {
          let readyOutcome = redirectOutcomeMap.get(this.auth._key());
          if (!readyOutcome) {
            try {
              const hasPendingRedirect = yield _getAndClearPendingRedirectStatus(this.resolver, this.auth);
              const result = hasPendingRedirect ? yield __superGet(RedirectAction.prototype, this, "execute").call(this) : null;
              readyOutcome = () => Promise.resolve(result);
            } catch (e) {
              readyOutcome = () => Promise.reject(e);
            }
            redirectOutcomeMap.set(this.auth._key(), readyOutcome);
          }
          if (!this.bypassAuthState) {
            redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));
          }
          return readyOutcome();
        });
      }
      onAuthEvent(event) {
        return __async(this, null, function* () {
          if (event.type === "signInViaRedirect") {
            return __superGet(RedirectAction.prototype, this, "onAuthEvent").call(this, event);
          } else if (event.type === "unknown") {
            this.resolve(null);
            return;
          }
          if (event.eventId) {
            const user = yield this.auth._redirectUserForId(event.eventId);
            if (user) {
              this.user = user;
              return __superGet(RedirectAction.prototype, this, "onAuthEvent").call(this, event);
            } else {
              this.resolve(null);
            }
          }
        });
      }
      onExecution() {
        return __async(this, null, function* () {
        });
      }
      cleanUp() {
      }
    }
    function _getAndClearPendingRedirectStatus(resolver, auth2) {
      return __async(this, null, function* () {
        const key = pendingRedirectKey(auth2);
        const persistence = resolverPersistence(resolver);
        if (!(yield persistence._isAvailable())) {
          return false;
        }
        const hasPendingRedirect = (yield persistence._get(key)) === "true";
        yield persistence._remove(key);
        return hasPendingRedirect;
      });
    }
    function _overrideRedirectResult(auth2, result) {
      redirectOutcomeMap.set(auth2._key(), result);
    }
    function resolverPersistence(resolver) {
      return _getInstance(resolver._redirectPersistence);
    }
    function pendingRedirectKey(auth2) {
      return _persistenceKeyName(PENDING_REDIRECT_KEY, auth2.config.apiKey, auth2.name);
    }
    function _getRedirectResult(auth2, resolverExtern, bypassAuthState = false) {
      return __async(this, null, function* () {
        if (_isFirebaseServerApp(auth2.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth2));
        }
        const authInternal = _castAuth(auth2);
        const resolver = _withDefaultResolver(authInternal, resolverExtern);
        const action = new RedirectAction(authInternal, resolver, bypassAuthState);
        const result = yield action.execute();
        if (result && !bypassAuthState) {
          delete result.user._redirectEventId;
          yield authInternal._persistUserIfCurrent(result.user);
          yield authInternal._setRedirectUser(null, resolverExtern);
        }
        return result;
      });
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1e3;
    class AuthEventManager {
      constructor(auth2) {
        this.auth = auth2;
        this.cachedEventUids = /* @__PURE__ */ new Set();
        this.consumers = /* @__PURE__ */ new Set();
        this.queuedRedirectEvent = null;
        this.hasHandledPotentialRedirect = false;
        this.lastProcessedEventTime = Date.now();
      }
      registerConsumer(authEventConsumer) {
        this.consumers.add(authEventConsumer);
        if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
          this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
          this.saveEventToCache(this.queuedRedirectEvent);
          this.queuedRedirectEvent = null;
        }
      }
      unregisterConsumer(authEventConsumer) {
        this.consumers.delete(authEventConsumer);
      }
      onEvent(event) {
        if (this.hasEventBeenHandled(event)) {
          return false;
        }
        let handled = false;
        this.consumers.forEach((consumer) => {
          if (this.isEventForConsumer(event, consumer)) {
            handled = true;
            this.sendToConsumer(event, consumer);
            this.saveEventToCache(event);
          }
        });
        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
          return handled;
        }
        this.hasHandledPotentialRedirect = true;
        if (!handled) {
          this.queuedRedirectEvent = event;
          handled = true;
        }
        return handled;
      }
      sendToConsumer(event, consumer) {
        var _a;
        if (event.error && !isNullRedirectEvent(event)) {
          const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split("auth/")[1]) || "internal-error";
          consumer.onError(_createError(this.auth, code));
        } else {
          consumer.onAuthEvent(event);
        }
      }
      isEventForConsumer(event, consumer) {
        const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;
        return consumer.filter.includes(event.type) && eventIdMatches;
      }
      hasEventBeenHandled(event) {
        if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {
          this.cachedEventUids.clear();
        }
        return this.cachedEventUids.has(eventUid(event));
      }
      saveEventToCache(event) {
        this.cachedEventUids.add(eventUid(event));
        this.lastProcessedEventTime = Date.now();
      }
    }
    function eventUid(e) {
      return [e.type, e.eventId, e.sessionId, e.tenantId].filter((v2) => v2).join("-");
    }
    function isNullRedirectEvent({ type, error: error2 }) {
      return type === "unknown" && (error2 === null || error2 === void 0 ? void 0 : error2.code) === `auth/${"no-auth-event"}`;
    }
    function isRedirectEvent(event) {
      switch (event.type) {
        case "signInViaRedirect":
        case "linkViaRedirect":
        case "reauthViaRedirect":
          return true;
        case "unknown":
          return isNullRedirectEvent(event);
        default:
          return false;
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getProjectConfig(_0) {
      return __async(this, arguments, function* (auth2, request = {}) {
        return _performApiRequest(auth2, "GET", "/v1/projects", request);
      });
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    const HTTP_REGEX = /^https?/;
    function _validateOrigin(auth2) {
      return __async(this, null, function* () {
        if (auth2.config.emulator) {
          return;
        }
        const { authorizedDomains } = yield _getProjectConfig(auth2);
        for (const domain of authorizedDomains) {
          try {
            if (matchDomain(domain)) {
              return;
            }
          } catch (_a) {
          }
        }
        _fail(
          auth2,
          "unauthorized-domain"
          /* AuthErrorCode.INVALID_ORIGIN */
        );
      });
    }
    function matchDomain(expected) {
      const currentUrl = _getCurrentUrl();
      const { protocol, hostname } = new URL(currentUrl);
      if (expected.startsWith("chrome-extension://")) {
        const ceUrl = new URL(expected);
        if (ceUrl.hostname === "" && hostname === "") {
          return protocol === "chrome-extension:" && expected.replace("chrome-extension://", "") === currentUrl.replace("chrome-extension://", "");
        }
        return protocol === "chrome-extension:" && ceUrl.hostname === hostname;
      }
      if (!HTTP_REGEX.test(protocol)) {
        return false;
      }
      if (IP_ADDRESS_REGEX.test(expected)) {
        return hostname === expected;
      }
      const escapedDomainPattern = expected.replace(/\./g, "\\.");
      const re2 = new RegExp("^(.+\\." + escapedDomainPattern + "|" + escapedDomainPattern + ")$", "i");
      return re2.test(hostname);
    }
    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const NETWORK_TIMEOUT = new Delay(3e4, 6e4);
    function resetUnloadedGapiModules() {
      const beacon = _window().___jsl;
      if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {
        for (const hint of Object.keys(beacon.H)) {
          beacon.H[hint].r = beacon.H[hint].r || [];
          beacon.H[hint].L = beacon.H[hint].L || [];
          beacon.H[hint].r = [...beacon.H[hint].L];
          if (beacon.CP) {
            for (let i = 0; i < beacon.CP.length; i++) {
              beacon.CP[i] = null;
            }
          }
        }
      }
    }
    function loadGapi(auth2) {
      return new Promise((resolve, reject) => {
        var _a, _b, _c2;
        function loadGapiIframe() {
          resetUnloadedGapiModules();
          gapi.load("gapi.iframes", {
            callback: () => {
              resolve(gapi.iframes.getContext());
            },
            ontimeout: () => {
              resetUnloadedGapiModules();
              reject(_createError(
                auth2,
                "network-request-failed"
                /* AuthErrorCode.NETWORK_REQUEST_FAILED */
              ));
            },
            timeout: NETWORK_TIMEOUT.get()
          });
        }
        if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {
          resolve(gapi.iframes.getContext());
        } else if (!!((_c2 = _window().gapi) === null || _c2 === void 0 ? void 0 : _c2.load)) {
          loadGapiIframe();
        } else {
          const cbName = _generateCallbackName("iframefcb");
          _window()[cbName] = () => {
            if (!!gapi.load) {
              loadGapiIframe();
            } else {
              reject(_createError(
                auth2,
                "network-request-failed"
                /* AuthErrorCode.NETWORK_REQUEST_FAILED */
              ));
            }
          };
          return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`).catch((e) => reject(e));
        }
      }).catch((error2) => {
        cachedGApiLoader = null;
        throw error2;
      });
    }
    let cachedGApiLoader = null;
    function _loadGapi(auth2) {
      cachedGApiLoader = cachedGApiLoader || loadGapi(auth2);
      return cachedGApiLoader;
    }
    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const PING_TIMEOUT = new Delay(5e3, 15e3);
    const IFRAME_PATH = "__/auth/iframe";
    const EMULATED_IFRAME_PATH = "emulator/auth/iframe";
    const IFRAME_ATTRIBUTES = {
      style: {
        position: "absolute",
        top: "-100px",
        width: "1px",
        height: "1px"
      },
      "aria-hidden": "true",
      tabindex: "-1"
    };
    const EID_FROM_APIHOST = /* @__PURE__ */ new Map([
      ["identitytoolkit.googleapis.com", "p"],
      ["staging-identitytoolkit.sandbox.googleapis.com", "s"],
      ["test-identitytoolkit.sandbox.googleapis.com", "t"]
      // test
    ]);
    function getIframeUrl(auth2) {
      const config = auth2.config;
      _assert(
        config.authDomain,
        auth2,
        "auth-domain-config-required"
        /* AuthErrorCode.MISSING_AUTH_DOMAIN */
      );
      const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth2.config.authDomain}/${IFRAME_PATH}`;
      const params = {
        apiKey: config.apiKey,
        appName: auth2.name,
        v: SDK_VERSION$1
      };
      const eid = EID_FROM_APIHOST.get(auth2.config.apiHost);
      if (eid) {
        params.eid = eid;
      }
      const frameworks = auth2._getFrameworks();
      if (frameworks.length) {
        params.fw = frameworks.join(",");
      }
      return `${url}?${querystring(params).slice(1)}`;
    }
    function _openIframe(auth2) {
      return __async(this, null, function* () {
        const context = yield _loadGapi(auth2);
        const gapi2 = _window().gapi;
        _assert(
          gapi2,
          auth2,
          "internal-error"
          /* AuthErrorCode.INTERNAL_ERROR */
        );
        return context.open({
          where: document.body,
          url: getIframeUrl(auth2),
          messageHandlersFilter: gapi2.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
          attributes: IFRAME_ATTRIBUTES,
          dontclear: true
        }, (iframe) => new Promise((resolve, reject) => __async(this, null, function* () {
          yield iframe.restyle({
            // Prevent iframe from closing on mouse out.
            setHideOnLeave: false
          });
          const networkError = _createError(
            auth2,
            "network-request-failed"
            /* AuthErrorCode.NETWORK_REQUEST_FAILED */
          );
          const networkErrorTimer = _window().setTimeout(() => {
            reject(networkError);
          }, PING_TIMEOUT.get());
          function clearTimerAndResolve() {
            _window().clearTimeout(networkErrorTimer);
            resolve(iframe);
          }
          iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {
            reject(networkError);
          });
        })));
      });
    }
    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const BASE_POPUP_OPTIONS = {
      location: "yes",
      resizable: "yes",
      statusbar: "yes",
      toolbar: "no"
    };
    const DEFAULT_WIDTH = 500;
    const DEFAULT_HEIGHT = 600;
    const TARGET_BLANK = "_blank";
    const FIREFOX_EMPTY_URL = "http://localhost";
    class AuthPopup {
      constructor(window2) {
        this.window = window2;
        this.associatedEvent = null;
      }
      close() {
        if (this.window) {
          try {
            this.window.close();
          } catch (e) {
          }
        }
      }
    }
    function _open(auth2, url, name2, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
      const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
      const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
      let target = "";
      const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {
        width: width.toString(),
        height: height.toString(),
        top,
        left
      });
      const ua2 = getUA().toLowerCase();
      if (name2) {
        target = _isChromeIOS(ua2) ? TARGET_BLANK : name2;
      }
      if (_isFirefox(ua2)) {
        url = url || FIREFOX_EMPTY_URL;
        options.scrollbars = "yes";
      }
      const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, "");
      if (_isIOSStandalone(ua2) && target !== "_self") {
        openAsNewWindowIOS(url || "", target);
        return new AuthPopup(null);
      }
      const newWin = window.open(url || "", target, optionsString);
      _assert(
        newWin,
        auth2,
        "popup-blocked"
        /* AuthErrorCode.POPUP_BLOCKED */
      );
      try {
        newWin.focus();
      } catch (e) {
      }
      return new AuthPopup(newWin);
    }
    function openAsNewWindowIOS(url, target) {
      const el2 = document.createElement("a");
      el2.href = url;
      el2.target = target;
      const click = document.createEvent("MouseEvent");
      click.initMouseEvent("click", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
      el2.dispatchEvent(click);
    }
    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const WIDGET_PATH = "__/auth/handler";
    const EMULATOR_WIDGET_PATH = "emulator/auth/handler";
    const FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent("fac");
    function _getRedirectUrl(auth2, provider, authType, redirectUrl, eventId, additionalParams) {
      return __async(this, null, function* () {
        _assert(
          auth2.config.authDomain,
          auth2,
          "auth-domain-config-required"
          /* AuthErrorCode.MISSING_AUTH_DOMAIN */
        );
        _assert(
          auth2.config.apiKey,
          auth2,
          "invalid-api-key"
          /* AuthErrorCode.INVALID_API_KEY */
        );
        const params = {
          apiKey: auth2.config.apiKey,
          appName: auth2.name,
          authType,
          redirectUrl,
          v: SDK_VERSION$1,
          eventId
        };
        if (provider instanceof FederatedAuthProvider) {
          provider.setDefaultLanguage(auth2.languageCode);
          params.providerId = provider.providerId || "";
          if (!isEmpty$1(provider.getCustomParameters())) {
            params.customParameters = JSON.stringify(provider.getCustomParameters());
          }
          for (const [key, value] of Object.entries({})) {
            params[key] = value;
          }
        }
        if (provider instanceof BaseOAuthProvider) {
          const scopes = provider.getScopes().filter((scope) => scope !== "");
          if (scopes.length > 0) {
            params.scopes = scopes.join(",");
          }
        }
        if (auth2.tenantId) {
          params.tid = auth2.tenantId;
        }
        const paramsDict = params;
        for (const key of Object.keys(paramsDict)) {
          if (paramsDict[key] === void 0) {
            delete paramsDict[key];
          }
        }
        const appCheckToken = yield auth2._getAppCheckToken();
        const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : "";
        return `${getHandlerBase(auth2)}?${querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;
      });
    }
    function getHandlerBase({ config }) {
      if (!config.emulator) {
        return `https://${config.authDomain}/${WIDGET_PATH}`;
      }
      return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const WEB_STORAGE_SUPPORT_KEY = "webStorageSupport";
    class BrowserPopupRedirectResolver {
      constructor() {
        this.eventManagers = {};
        this.iframes = {};
        this.originValidationPromises = {};
        this._redirectPersistence = browserSessionPersistence;
        this._completeRedirectFn = _getRedirectResult;
        this._overrideRedirectResult = _overrideRedirectResult;
      }
      // Wrapping in async even though we don't await anywhere in order
      // to make sure errors are raised as promise rejections
      _openPopup(auth2, provider, authType, eventId) {
        return __async(this, null, function* () {
          var _a;
          debugAssert((_a = this.eventManagers[auth2._key()]) === null || _a === void 0 ? void 0 : _a.manager, "_initialize() not called before _openPopup()");
          const url = yield _getRedirectUrl(auth2, provider, authType, _getCurrentUrl(), eventId);
          return _open(auth2, url, _generateEventId());
        });
      }
      _openRedirect(auth2, provider, authType, eventId) {
        return __async(this, null, function* () {
          yield this._originValidation(auth2);
          const url = yield _getRedirectUrl(auth2, provider, authType, _getCurrentUrl(), eventId);
          _setWindowLocation(url);
          return new Promise(() => {
          });
        });
      }
      _initialize(auth2) {
        const key = auth2._key();
        if (this.eventManagers[key]) {
          const { manager, promise: promise2 } = this.eventManagers[key];
          if (manager) {
            return Promise.resolve(manager);
          } else {
            debugAssert(promise2, "If manager is not set, promise should be");
            return promise2;
          }
        }
        const promise = this.initAndGetManager(auth2);
        this.eventManagers[key] = { promise };
        promise.catch(() => {
          delete this.eventManagers[key];
        });
        return promise;
      }
      initAndGetManager(auth2) {
        return __async(this, null, function* () {
          const iframe = yield _openIframe(auth2);
          const manager = new AuthEventManager(auth2);
          iframe.register("authEvent", (iframeEvent) => {
            _assert(
              iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent,
              auth2,
              "invalid-auth-event"
              /* AuthErrorCode.INVALID_AUTH_EVENT */
            );
            const handled = manager.onEvent(iframeEvent.authEvent);
            return {
              status: handled ? "ACK" : "ERROR"
              /* GapiOutcome.ERROR */
            };
          }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
          this.eventManagers[auth2._key()] = { manager };
          this.iframes[auth2._key()] = iframe;
          return manager;
        });
      }
      _isIframeWebStorageSupported(auth2, cb2) {
        const iframe = this.iframes[auth2._key()];
        iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, (result) => {
          var _a;
          const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
          if (isSupported !== void 0) {
            cb2(!!isSupported);
          }
          _fail(
            auth2,
            "internal-error"
            /* AuthErrorCode.INTERNAL_ERROR */
          );
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
      }
      _originValidation(auth2) {
        const key = auth2._key();
        if (!this.originValidationPromises[key]) {
          this.originValidationPromises[key] = _validateOrigin(auth2);
        }
        return this.originValidationPromises[key];
      }
      get _shouldInitProactively() {
        return _isMobileBrowser() || _isSafari() || _isIOS();
      }
    }
    const browserPopupRedirectResolver = BrowserPopupRedirectResolver;
    var name$1 = "@firebase/auth";
    var version$1 = "1.7.9";
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AuthInterop {
      constructor(auth2) {
        this.auth = auth2;
        this.internalListeners = /* @__PURE__ */ new Map();
      }
      getUid() {
        var _a;
        this.assertAuthConfigured();
        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
      }
      getToken(forceRefresh) {
        return __async(this, null, function* () {
          this.assertAuthConfigured();
          yield this.auth._initializationPromise;
          if (!this.auth.currentUser) {
            return null;
          }
          const accessToken = yield this.auth.currentUser.getIdToken(forceRefresh);
          return { accessToken };
        });
      }
      addAuthTokenListener(listener) {
        this.assertAuthConfigured();
        if (this.internalListeners.has(listener)) {
          return;
        }
        const unsubscribe = this.auth.onIdTokenChanged((user) => {
          listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);
        });
        this.internalListeners.set(listener, unsubscribe);
        this.updateProactiveRefresh();
      }
      removeAuthTokenListener(listener) {
        this.assertAuthConfigured();
        const unsubscribe = this.internalListeners.get(listener);
        if (!unsubscribe) {
          return;
        }
        this.internalListeners.delete(listener);
        unsubscribe();
        this.updateProactiveRefresh();
      }
      assertAuthConfigured() {
        _assert(
          this.auth._initializationPromise,
          "dependent-sdk-initialized-before-auth"
          /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */
        );
      }
      updateProactiveRefresh() {
        if (this.internalListeners.size > 0) {
          this.auth._startProactiveRefresh();
        } else {
          this.auth._stopProactiveRefresh();
        }
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getVersionForPlatform(clientPlatform) {
      switch (clientPlatform) {
        case "Node":
          return "node";
        case "ReactNative":
          return "rn";
        case "Worker":
          return "webworker";
        case "Cordova":
          return "cordova";
        case "WebExtension":
          return "web-extension";
        default:
          return void 0;
      }
    }
    function registerAuth(clientPlatform) {
      _registerComponent(new Component(
        "auth",
        (container, { options: deps }) => {
          const app2 = container.getProvider("app").getImmediate();
          const heartbeatServiceProvider = container.getProvider("heartbeat");
          const appCheckServiceProvider = container.getProvider("app-check-internal");
          const { apiKey, authDomain } = app2.options;
          _assert(apiKey && !apiKey.includes(":"), "invalid-api-key", { appName: app2.name });
          const config = {
            apiKey,
            authDomain,
            clientPlatform,
            apiHost: "identitytoolkit.googleapis.com",
            tokenApiHost: "securetoken.googleapis.com",
            apiScheme: "https",
            sdkClientVersion: _getClientVersion(clientPlatform)
          };
          const authInstance = new AuthImpl(app2, heartbeatServiceProvider, appCheckServiceProvider, config);
          _initializeAuthInstance(authInstance, deps);
          return authInstance;
        },
        "PUBLIC"
        /* ComponentType.PUBLIC */
      ).setInstantiationMode(
        "EXPLICIT"
        /* InstantiationMode.EXPLICIT */
      ).setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
        const authInternalProvider = container.getProvider(
          "auth-internal"
          /* _ComponentName.AUTH_INTERNAL */
        );
        authInternalProvider.initialize();
      }));
      _registerComponent(new Component(
        "auth-internal",
        (container) => {
          const auth2 = _castAuth(container.getProvider(
            "auth"
            /* _ComponentName.AUTH */
          ).getImmediate());
          return ((auth3) => new AuthInterop(auth3))(auth2);
        },
        "PRIVATE"
        /* ComponentType.PRIVATE */
      ).setInstantiationMode(
        "EXPLICIT"
        /* InstantiationMode.EXPLICIT */
      ));
      registerVersion(name$1, version$1, getVersionForPlatform(clientPlatform));
      registerVersion(name$1, version$1, "esm2017");
    }
    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;
    const authIdTokenMaxAge = getExperimentalSetting("authIdTokenMaxAge") || DEFAULT_ID_TOKEN_MAX_AGE;
    let lastPostedIdToken = null;
    const mintCookieFactory = (url) => (user) => __async(exports, null, function* () {
      const idTokenResult = user && (yield user.getIdTokenResult());
      const idTokenAge = idTokenResult && ((/* @__PURE__ */ new Date()).getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1e3;
      if (idTokenAge && idTokenAge > authIdTokenMaxAge) {
        return;
      }
      const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;
      if (lastPostedIdToken === idToken) {
        return;
      }
      lastPostedIdToken = idToken;
      yield fetch(url, {
        method: idToken ? "POST" : "DELETE",
        headers: idToken ? {
          "Authorization": `Bearer ${idToken}`
        } : {}
      });
    });
    function getAuth(app2 = getApp()) {
      const provider = _getProvider(app2, "auth");
      if (provider.isInitialized()) {
        return provider.getImmediate();
      }
      const auth2 = initializeAuth(app2, {
        popupRedirectResolver: browserPopupRedirectResolver,
        persistence: [
          indexedDBLocalPersistence,
          browserLocalPersistence,
          browserSessionPersistence
        ]
      });
      const authTokenSyncPath = getExperimentalSetting("authTokenSyncURL");
      if (authTokenSyncPath && typeof isSecureContext === "boolean" && isSecureContext) {
        const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);
        if (location.origin === authTokenSyncUrl.origin) {
          const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());
          beforeAuthStateChanged(auth2, mintCookie, () => mintCookie(auth2.currentUser));
          onIdTokenChanged(auth2, (user) => mintCookie(user));
        }
      }
      const authEmulatorHost = getDefaultEmulatorHost("auth");
      if (authEmulatorHost) {
        connectAuthEmulator(auth2, `http://${authEmulatorHost}`);
      }
      return auth2;
    }
    function getScriptParentElement() {
      var _a, _b;
      return (_b = (_a = document.getElementsByTagName("head")) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
    }
    _setExternalJSProvider({
      loadJS(url) {
        return new Promise((resolve, reject) => {
          const el2 = document.createElement("script");
          el2.setAttribute("src", url);
          el2.onload = resolve;
          el2.onerror = (e) => {
            const error2 = _createError(
              "internal-error"
              /* AuthErrorCode.INTERNAL_ERROR */
            );
            error2.customData = e;
            reject(error2);
          };
          el2.type = "text/javascript";
          el2.charset = "UTF-8";
          getScriptParentElement().appendChild(el2);
        });
      },
      gapiScript: "https://apis.google.com/js/api.js",
      recaptchaV2Script: "https://www.google.com/recaptcha/api.js",
      recaptchaEnterpriseScript: "https://www.google.com/recaptcha/enterprise.js?render="
    });
    registerAuth(
      "Browser"
      /* ClientPlatform.BROWSER */
    );
    var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    /** @license
    Copyright The Closure Library Authors.
    SPDX-License-Identifier: Apache-2.0
    */
    var Integer;
    var Md5;
    (function() {
      var h;
      /** @license
      
       Copyright The Closure Library Authors.
       SPDX-License-Identifier: Apache-2.0
      */
      function k2(f2, a) {
        function c() {
        }
        c.prototype = a.prototype;
        f2.D = a.prototype;
        f2.prototype = new c();
        f2.prototype.constructor = f2;
        f2.C = function(d, e, g) {
          for (var b2 = Array(arguments.length - 2), r2 = 2; r2 < arguments.length; r2++) b2[r2 - 2] = arguments[r2];
          return a.prototype[e].apply(d, b2);
        };
      }
      function l2() {
        this.blockSize = -1;
      }
      function m2() {
        this.blockSize = -1;
        this.blockSize = 64;
        this.g = Array(4);
        this.B = Array(this.blockSize);
        this.o = this.h = 0;
        this.s();
      }
      k2(m2, l2);
      m2.prototype.s = function() {
        this.g[0] = 1732584193;
        this.g[1] = 4023233417;
        this.g[2] = 2562383102;
        this.g[3] = 271733878;
        this.o = this.h = 0;
      };
      function n2(f2, a, c) {
        c || (c = 0);
        var d = Array(16);
        if ("string" === typeof a) for (var e = 0; 16 > e; ++e) d[e] = a.charCodeAt(c++) | a.charCodeAt(c++) << 8 | a.charCodeAt(c++) << 16 | a.charCodeAt(c++) << 24;
        else for (e = 0; 16 > e; ++e) d[e] = a[c++] | a[c++] << 8 | a[c++] << 16 | a[c++] << 24;
        a = f2.g[0];
        c = f2.g[1];
        e = f2.g[2];
        var g = f2.g[3];
        var b2 = a + (g ^ c & (e ^ g)) + d[0] + 3614090360 & 4294967295;
        a = c + (b2 << 7 & 4294967295 | b2 >>> 25);
        b2 = g + (e ^ a & (c ^ e)) + d[1] + 3905402710 & 4294967295;
        g = a + (b2 << 12 & 4294967295 | b2 >>> 20);
        b2 = e + (c ^ g & (a ^ c)) + d[2] + 606105819 & 4294967295;
        e = g + (b2 << 17 & 4294967295 | b2 >>> 15);
        b2 = c + (a ^ e & (g ^ a)) + d[3] + 3250441966 & 4294967295;
        c = e + (b2 << 22 & 4294967295 | b2 >>> 10);
        b2 = a + (g ^ c & (e ^ g)) + d[4] + 4118548399 & 4294967295;
        a = c + (b2 << 7 & 4294967295 | b2 >>> 25);
        b2 = g + (e ^ a & (c ^ e)) + d[5] + 1200080426 & 4294967295;
        g = a + (b2 << 12 & 4294967295 | b2 >>> 20);
        b2 = e + (c ^ g & (a ^ c)) + d[6] + 2821735955 & 4294967295;
        e = g + (b2 << 17 & 4294967295 | b2 >>> 15);
        b2 = c + (a ^ e & (g ^ a)) + d[7] + 4249261313 & 4294967295;
        c = e + (b2 << 22 & 4294967295 | b2 >>> 10);
        b2 = a + (g ^ c & (e ^ g)) + d[8] + 1770035416 & 4294967295;
        a = c + (b2 << 7 & 4294967295 | b2 >>> 25);
        b2 = g + (e ^ a & (c ^ e)) + d[9] + 2336552879 & 4294967295;
        g = a + (b2 << 12 & 4294967295 | b2 >>> 20);
        b2 = e + (c ^ g & (a ^ c)) + d[10] + 4294925233 & 4294967295;
        e = g + (b2 << 17 & 4294967295 | b2 >>> 15);
        b2 = c + (a ^ e & (g ^ a)) + d[11] + 2304563134 & 4294967295;
        c = e + (b2 << 22 & 4294967295 | b2 >>> 10);
        b2 = a + (g ^ c & (e ^ g)) + d[12] + 1804603682 & 4294967295;
        a = c + (b2 << 7 & 4294967295 | b2 >>> 25);
        b2 = g + (e ^ a & (c ^ e)) + d[13] + 4254626195 & 4294967295;
        g = a + (b2 << 12 & 4294967295 | b2 >>> 20);
        b2 = e + (c ^ g & (a ^ c)) + d[14] + 2792965006 & 4294967295;
        e = g + (b2 << 17 & 4294967295 | b2 >>> 15);
        b2 = c + (a ^ e & (g ^ a)) + d[15] + 1236535329 & 4294967295;
        c = e + (b2 << 22 & 4294967295 | b2 >>> 10);
        b2 = a + (e ^ g & (c ^ e)) + d[1] + 4129170786 & 4294967295;
        a = c + (b2 << 5 & 4294967295 | b2 >>> 27);
        b2 = g + (c ^ e & (a ^ c)) + d[6] + 3225465664 & 4294967295;
        g = a + (b2 << 9 & 4294967295 | b2 >>> 23);
        b2 = e + (a ^ c & (g ^ a)) + d[11] + 643717713 & 4294967295;
        e = g + (b2 << 14 & 4294967295 | b2 >>> 18);
        b2 = c + (g ^ a & (e ^ g)) + d[0] + 3921069994 & 4294967295;
        c = e + (b2 << 20 & 4294967295 | b2 >>> 12);
        b2 = a + (e ^ g & (c ^ e)) + d[5] + 3593408605 & 4294967295;
        a = c + (b2 << 5 & 4294967295 | b2 >>> 27);
        b2 = g + (c ^ e & (a ^ c)) + d[10] + 38016083 & 4294967295;
        g = a + (b2 << 9 & 4294967295 | b2 >>> 23);
        b2 = e + (a ^ c & (g ^ a)) + d[15] + 3634488961 & 4294967295;
        e = g + (b2 << 14 & 4294967295 | b2 >>> 18);
        b2 = c + (g ^ a & (e ^ g)) + d[4] + 3889429448 & 4294967295;
        c = e + (b2 << 20 & 4294967295 | b2 >>> 12);
        b2 = a + (e ^ g & (c ^ e)) + d[9] + 568446438 & 4294967295;
        a = c + (b2 << 5 & 4294967295 | b2 >>> 27);
        b2 = g + (c ^ e & (a ^ c)) + d[14] + 3275163606 & 4294967295;
        g = a + (b2 << 9 & 4294967295 | b2 >>> 23);
        b2 = e + (a ^ c & (g ^ a)) + d[3] + 4107603335 & 4294967295;
        e = g + (b2 << 14 & 4294967295 | b2 >>> 18);
        b2 = c + (g ^ a & (e ^ g)) + d[8] + 1163531501 & 4294967295;
        c = e + (b2 << 20 & 4294967295 | b2 >>> 12);
        b2 = a + (e ^ g & (c ^ e)) + d[13] + 2850285829 & 4294967295;
        a = c + (b2 << 5 & 4294967295 | b2 >>> 27);
        b2 = g + (c ^ e & (a ^ c)) + d[2] + 4243563512 & 4294967295;
        g = a + (b2 << 9 & 4294967295 | b2 >>> 23);
        b2 = e + (a ^ c & (g ^ a)) + d[7] + 1735328473 & 4294967295;
        e = g + (b2 << 14 & 4294967295 | b2 >>> 18);
        b2 = c + (g ^ a & (e ^ g)) + d[12] + 2368359562 & 4294967295;
        c = e + (b2 << 20 & 4294967295 | b2 >>> 12);
        b2 = a + (c ^ e ^ g) + d[5] + 4294588738 & 4294967295;
        a = c + (b2 << 4 & 4294967295 | b2 >>> 28);
        b2 = g + (a ^ c ^ e) + d[8] + 2272392833 & 4294967295;
        g = a + (b2 << 11 & 4294967295 | b2 >>> 21);
        b2 = e + (g ^ a ^ c) + d[11] + 1839030562 & 4294967295;
        e = g + (b2 << 16 & 4294967295 | b2 >>> 16);
        b2 = c + (e ^ g ^ a) + d[14] + 4259657740 & 4294967295;
        c = e + (b2 << 23 & 4294967295 | b2 >>> 9);
        b2 = a + (c ^ e ^ g) + d[1] + 2763975236 & 4294967295;
        a = c + (b2 << 4 & 4294967295 | b2 >>> 28);
        b2 = g + (a ^ c ^ e) + d[4] + 1272893353 & 4294967295;
        g = a + (b2 << 11 & 4294967295 | b2 >>> 21);
        b2 = e + (g ^ a ^ c) + d[7] + 4139469664 & 4294967295;
        e = g + (b2 << 16 & 4294967295 | b2 >>> 16);
        b2 = c + (e ^ g ^ a) + d[10] + 3200236656 & 4294967295;
        c = e + (b2 << 23 & 4294967295 | b2 >>> 9);
        b2 = a + (c ^ e ^ g) + d[13] + 681279174 & 4294967295;
        a = c + (b2 << 4 & 4294967295 | b2 >>> 28);
        b2 = g + (a ^ c ^ e) + d[0] + 3936430074 & 4294967295;
        g = a + (b2 << 11 & 4294967295 | b2 >>> 21);
        b2 = e + (g ^ a ^ c) + d[3] + 3572445317 & 4294967295;
        e = g + (b2 << 16 & 4294967295 | b2 >>> 16);
        b2 = c + (e ^ g ^ a) + d[6] + 76029189 & 4294967295;
        c = e + (b2 << 23 & 4294967295 | b2 >>> 9);
        b2 = a + (c ^ e ^ g) + d[9] + 3654602809 & 4294967295;
        a = c + (b2 << 4 & 4294967295 | b2 >>> 28);
        b2 = g + (a ^ c ^ e) + d[12] + 3873151461 & 4294967295;
        g = a + (b2 << 11 & 4294967295 | b2 >>> 21);
        b2 = e + (g ^ a ^ c) + d[15] + 530742520 & 4294967295;
        e = g + (b2 << 16 & 4294967295 | b2 >>> 16);
        b2 = c + (e ^ g ^ a) + d[2] + 3299628645 & 4294967295;
        c = e + (b2 << 23 & 4294967295 | b2 >>> 9);
        b2 = a + (e ^ (c | ~g)) + d[0] + 4096336452 & 4294967295;
        a = c + (b2 << 6 & 4294967295 | b2 >>> 26);
        b2 = g + (c ^ (a | ~e)) + d[7] + 1126891415 & 4294967295;
        g = a + (b2 << 10 & 4294967295 | b2 >>> 22);
        b2 = e + (a ^ (g | ~c)) + d[14] + 2878612391 & 4294967295;
        e = g + (b2 << 15 & 4294967295 | b2 >>> 17);
        b2 = c + (g ^ (e | ~a)) + d[5] + 4237533241 & 4294967295;
        c = e + (b2 << 21 & 4294967295 | b2 >>> 11);
        b2 = a + (e ^ (c | ~g)) + d[12] + 1700485571 & 4294967295;
        a = c + (b2 << 6 & 4294967295 | b2 >>> 26);
        b2 = g + (c ^ (a | ~e)) + d[3] + 2399980690 & 4294967295;
        g = a + (b2 << 10 & 4294967295 | b2 >>> 22);
        b2 = e + (a ^ (g | ~c)) + d[10] + 4293915773 & 4294967295;
        e = g + (b2 << 15 & 4294967295 | b2 >>> 17);
        b2 = c + (g ^ (e | ~a)) + d[1] + 2240044497 & 4294967295;
        c = e + (b2 << 21 & 4294967295 | b2 >>> 11);
        b2 = a + (e ^ (c | ~g)) + d[8] + 1873313359 & 4294967295;
        a = c + (b2 << 6 & 4294967295 | b2 >>> 26);
        b2 = g + (c ^ (a | ~e)) + d[15] + 4264355552 & 4294967295;
        g = a + (b2 << 10 & 4294967295 | b2 >>> 22);
        b2 = e + (a ^ (g | ~c)) + d[6] + 2734768916 & 4294967295;
        e = g + (b2 << 15 & 4294967295 | b2 >>> 17);
        b2 = c + (g ^ (e | ~a)) + d[13] + 1309151649 & 4294967295;
        c = e + (b2 << 21 & 4294967295 | b2 >>> 11);
        b2 = a + (e ^ (c | ~g)) + d[4] + 4149444226 & 4294967295;
        a = c + (b2 << 6 & 4294967295 | b2 >>> 26);
        b2 = g + (c ^ (a | ~e)) + d[11] + 3174756917 & 4294967295;
        g = a + (b2 << 10 & 4294967295 | b2 >>> 22);
        b2 = e + (a ^ (g | ~c)) + d[2] + 718787259 & 4294967295;
        e = g + (b2 << 15 & 4294967295 | b2 >>> 17);
        b2 = c + (g ^ (e | ~a)) + d[9] + 3951481745 & 4294967295;
        f2.g[0] = f2.g[0] + a & 4294967295;
        f2.g[1] = f2.g[1] + (e + (b2 << 21 & 4294967295 | b2 >>> 11)) & 4294967295;
        f2.g[2] = f2.g[2] + e & 4294967295;
        f2.g[3] = f2.g[3] + g & 4294967295;
      }
      m2.prototype.u = function(f2, a) {
        void 0 === a && (a = f2.length);
        for (var c = a - this.blockSize, d = this.B, e = this.h, g = 0; g < a; ) {
          if (0 == e) for (; g <= c; ) n2(this, f2, g), g += this.blockSize;
          if ("string" === typeof f2) for (; g < a; ) {
            if (d[e++] = f2.charCodeAt(g++), e == this.blockSize) {
              n2(this, d);
              e = 0;
              break;
            }
          }
          else for (; g < a; ) if (d[e++] = f2[g++], e == this.blockSize) {
            n2(this, d);
            e = 0;
            break;
          }
        }
        this.h = e;
        this.o += a;
      };
      m2.prototype.v = function() {
        var f2 = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);
        f2[0] = 128;
        for (var a = 1; a < f2.length - 8; ++a) f2[a] = 0;
        var c = 8 * this.o;
        for (a = f2.length - 8; a < f2.length; ++a) f2[a] = c & 255, c /= 256;
        this.u(f2);
        f2 = Array(16);
        for (a = c = 0; 4 > a; ++a) for (var d = 0; 32 > d; d += 8) f2[c++] = this.g[a] >>> d & 255;
        return f2;
      };
      function p2(f2, a) {
        var c = q2;
        return Object.prototype.hasOwnProperty.call(c, f2) ? c[f2] : c[f2] = a(f2);
      }
      function t2(f2, a) {
        this.h = a;
        for (var c = [], d = true, e = f2.length - 1; 0 <= e; e--) {
          var g = f2[e] | 0;
          d && g == a || (c[e] = g, d = false);
        }
        this.g = c;
      }
      var q2 = {};
      function u2(f2) {
        return -128 <= f2 && 128 > f2 ? p2(f2, function(a) {
          return new t2([a | 0], 0 > a ? -1 : 0);
        }) : new t2([f2 | 0], 0 > f2 ? -1 : 0);
      }
      function v2(f2) {
        if (isNaN(f2) || !isFinite(f2)) return w2;
        if (0 > f2) return x2(v2(-f2));
        for (var a = [], c = 1, d = 0; f2 >= c; d++) a[d] = f2 / c | 0, c *= 4294967296;
        return new t2(a, 0);
      }
      function y2(f2, a) {
        if (0 == f2.length) throw Error("number format error: empty string");
        a = a || 10;
        if (2 > a || 36 < a) throw Error("radix out of range: " + a);
        if ("-" == f2.charAt(0)) return x2(y2(f2.substring(1), a));
        if (0 <= f2.indexOf("-")) throw Error('number format error: interior "-" character');
        for (var c = v2(Math.pow(a, 8)), d = w2, e = 0; e < f2.length; e += 8) {
          var g = Math.min(8, f2.length - e), b2 = parseInt(f2.substring(e, e + g), a);
          8 > g ? (g = v2(Math.pow(a, g)), d = d.j(g).add(v2(b2))) : (d = d.j(c), d = d.add(v2(b2)));
        }
        return d;
      }
      var w2 = u2(0), z2 = u2(1), A2 = u2(16777216);
      h = t2.prototype;
      h.m = function() {
        if (B2(this)) return -x2(this).m();
        for (var f2 = 0, a = 1, c = 0; c < this.g.length; c++) {
          var d = this.i(c);
          f2 += (0 <= d ? d : 4294967296 + d) * a;
          a *= 4294967296;
        }
        return f2;
      };
      h.toString = function(f2) {
        f2 = f2 || 10;
        if (2 > f2 || 36 < f2) throw Error("radix out of range: " + f2);
        if (C2(this)) return "0";
        if (B2(this)) return "-" + x2(this).toString(f2);
        for (var a = v2(Math.pow(f2, 6)), c = this, d = ""; ; ) {
          var e = D2(c, a).g;
          c = F2(c, e.j(a));
          var g = ((0 < c.g.length ? c.g[0] : c.h) >>> 0).toString(f2);
          c = e;
          if (C2(c)) return g + d;
          for (; 6 > g.length; ) g = "0" + g;
          d = g + d;
        }
      };
      h.i = function(f2) {
        return 0 > f2 ? 0 : f2 < this.g.length ? this.g[f2] : this.h;
      };
      function C2(f2) {
        if (0 != f2.h) return false;
        for (var a = 0; a < f2.g.length; a++) if (0 != f2.g[a]) return false;
        return true;
      }
      function B2(f2) {
        return -1 == f2.h;
      }
      h.l = function(f2) {
        f2 = F2(this, f2);
        return B2(f2) ? -1 : C2(f2) ? 0 : 1;
      };
      function x2(f2) {
        for (var a = f2.g.length, c = [], d = 0; d < a; d++) c[d] = ~f2.g[d];
        return new t2(c, ~f2.h).add(z2);
      }
      h.abs = function() {
        return B2(this) ? x2(this) : this;
      };
      h.add = function(f2) {
        for (var a = Math.max(this.g.length, f2.g.length), c = [], d = 0, e = 0; e <= a; e++) {
          var g = d + (this.i(e) & 65535) + (f2.i(e) & 65535), b2 = (g >>> 16) + (this.i(e) >>> 16) + (f2.i(e) >>> 16);
          d = b2 >>> 16;
          g &= 65535;
          b2 &= 65535;
          c[e] = b2 << 16 | g;
        }
        return new t2(c, c[c.length - 1] & -2147483648 ? -1 : 0);
      };
      function F2(f2, a) {
        return f2.add(x2(a));
      }
      h.j = function(f2) {
        if (C2(this) || C2(f2)) return w2;
        if (B2(this)) return B2(f2) ? x2(this).j(x2(f2)) : x2(x2(this).j(f2));
        if (B2(f2)) return x2(this.j(x2(f2)));
        if (0 > this.l(A2) && 0 > f2.l(A2)) return v2(this.m() * f2.m());
        for (var a = this.g.length + f2.g.length, c = [], d = 0; d < 2 * a; d++) c[d] = 0;
        for (d = 0; d < this.g.length; d++) for (var e = 0; e < f2.g.length; e++) {
          var g = this.i(d) >>> 16, b2 = this.i(d) & 65535, r2 = f2.i(e) >>> 16, E2 = f2.i(e) & 65535;
          c[2 * d + 2 * e] += b2 * E2;
          G2(c, 2 * d + 2 * e);
          c[2 * d + 2 * e + 1] += g * E2;
          G2(c, 2 * d + 2 * e + 1);
          c[2 * d + 2 * e + 1] += b2 * r2;
          G2(c, 2 * d + 2 * e + 1);
          c[2 * d + 2 * e + 2] += g * r2;
          G2(c, 2 * d + 2 * e + 2);
        }
        for (d = 0; d < a; d++) c[d] = c[2 * d + 1] << 16 | c[2 * d];
        for (d = a; d < 2 * a; d++) c[d] = 0;
        return new t2(c, 0);
      };
      function G2(f2, a) {
        for (; (f2[a] & 65535) != f2[a]; ) f2[a + 1] += f2[a] >>> 16, f2[a] &= 65535, a++;
      }
      function H2(f2, a) {
        this.g = f2;
        this.h = a;
      }
      function D2(f2, a) {
        if (C2(a)) throw Error("division by zero");
        if (C2(f2)) return new H2(w2, w2);
        if (B2(f2)) return a = D2(x2(f2), a), new H2(x2(a.g), x2(a.h));
        if (B2(a)) return a = D2(f2, x2(a)), new H2(x2(a.g), a.h);
        if (30 < f2.g.length) {
          if (B2(f2) || B2(a)) throw Error("slowDivide_ only works with positive integers.");
          for (var c = z2, d = a; 0 >= d.l(f2); ) c = I2(c), d = I2(d);
          var e = J2(c, 1), g = J2(d, 1);
          d = J2(d, 2);
          for (c = J2(c, 2); !C2(d); ) {
            var b2 = g.add(d);
            0 >= b2.l(f2) && (e = e.add(c), g = b2);
            d = J2(d, 1);
            c = J2(c, 1);
          }
          a = F2(f2, e.j(a));
          return new H2(e, a);
        }
        for (e = w2; 0 <= f2.l(a); ) {
          c = Math.max(1, Math.floor(f2.m() / a.m()));
          d = Math.ceil(Math.log(c) / Math.LN2);
          d = 48 >= d ? 1 : Math.pow(2, d - 48);
          g = v2(c);
          for (b2 = g.j(a); B2(b2) || 0 < b2.l(f2); ) c -= d, g = v2(c), b2 = g.j(a);
          C2(g) && (g = z2);
          e = e.add(g);
          f2 = F2(f2, b2);
        }
        return new H2(e, f2);
      }
      h.A = function(f2) {
        return D2(this, f2).h;
      };
      h.and = function(f2) {
        for (var a = Math.max(this.g.length, f2.g.length), c = [], d = 0; d < a; d++) c[d] = this.i(d) & f2.i(d);
        return new t2(c, this.h & f2.h);
      };
      h.or = function(f2) {
        for (var a = Math.max(this.g.length, f2.g.length), c = [], d = 0; d < a; d++) c[d] = this.i(d) | f2.i(d);
        return new t2(c, this.h | f2.h);
      };
      h.xor = function(f2) {
        for (var a = Math.max(this.g.length, f2.g.length), c = [], d = 0; d < a; d++) c[d] = this.i(d) ^ f2.i(d);
        return new t2(c, this.h ^ f2.h);
      };
      function I2(f2) {
        for (var a = f2.g.length + 1, c = [], d = 0; d < a; d++) c[d] = f2.i(d) << 1 | f2.i(d - 1) >>> 31;
        return new t2(c, f2.h);
      }
      function J2(f2, a) {
        var c = a >> 5;
        a %= 32;
        for (var d = f2.g.length - c, e = [], g = 0; g < d; g++) e[g] = 0 < a ? f2.i(g + c) >>> a | f2.i(g + c + 1) << 32 - a : f2.i(g + c);
        return new t2(e, f2.h);
      }
      m2.prototype.digest = m2.prototype.v;
      m2.prototype.reset = m2.prototype.s;
      m2.prototype.update = m2.prototype.u;
      Md5 = m2;
      t2.prototype.add = t2.prototype.add;
      t2.prototype.multiply = t2.prototype.j;
      t2.prototype.modulo = t2.prototype.A;
      t2.prototype.compare = t2.prototype.l;
      t2.prototype.toNumber = t2.prototype.m;
      t2.prototype.toString = t2.prototype.toString;
      t2.prototype.getBits = t2.prototype.i;
      t2.fromNumber = v2;
      t2.fromString = y2;
      Integer = t2;
    }).apply(typeof commonjsGlobal$1 !== "undefined" ? commonjsGlobal$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    /** @license
    Copyright The Closure Library Authors.
    SPDX-License-Identifier: Apache-2.0
    */
    var XhrIo;
    var WebChannel;
    var EventType;
    var ErrorCode;
    var Stat;
    var Event$1;
    var getStatEventTarget;
    var createWebChannelTransport;
    (function() {
      var h, aa2 = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b2, c) {
        if (a == Array.prototype || a == Object.prototype) return a;
        a[b2] = c.value;
        return a;
      };
      function ba(a) {
        a = ["object" == typeof globalThis && globalThis, a, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof commonjsGlobal && commonjsGlobal];
        for (var b2 = 0; b2 < a.length; ++b2) {
          var c = a[b2];
          if (c && c.Math == Math) return c;
        }
        throw Error("Cannot find global object");
      }
      var ca2 = ba(this);
      function da2(a, b2) {
        if (b2) a: {
          var c = ca2;
          a = a.split(".");
          for (var d = 0; d < a.length - 1; d++) {
            var e = a[d];
            if (!(e in c)) break a;
            c = c[e];
          }
          a = a[a.length - 1];
          d = c[a];
          b2 = b2(d);
          b2 != d && null != b2 && aa2(c, a, { configurable: true, writable: true, value: b2 });
        }
      }
      function ea2(a, b2) {
        a instanceof String && (a += "");
        var c = 0, d = false, e = { next: function() {
          if (!d && c < a.length) {
            var f2 = c++;
            return { value: b2(f2, a[f2]), done: false };
          }
          d = true;
          return { done: true, value: void 0 };
        } };
        e[Symbol.iterator] = function() {
          return e;
        };
        return e;
      }
      da2("Array.prototype.values", function(a) {
        return a ? a : function() {
          return ea2(this, function(b2, c) {
            return c;
          });
        };
      });
      /** @license
      
       Copyright The Closure Library Authors.
       SPDX-License-Identifier: Apache-2.0
      */
      var fa2 = fa2 || {}, k2 = this || self;
      function ha2(a) {
        var b2 = typeof a;
        b2 = "object" != b2 ? b2 : a ? Array.isArray(a) ? "array" : b2 : "null";
        return "array" == b2 || "object" == b2 && "number" == typeof a.length;
      }
      function n2(a) {
        var b2 = typeof a;
        return "object" == b2 && null != a || "function" == b2;
      }
      function ia2(a, b2, c) {
        return a.call.apply(a.bind, arguments);
      }
      function ja2(a, b2, c) {
        if (!a) throw Error();
        if (2 < arguments.length) {
          var d = Array.prototype.slice.call(arguments, 2);
          return function() {
            var e = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(e, d);
            return a.apply(b2, e);
          };
        }
        return function() {
          return a.apply(b2, arguments);
        };
      }
      function p2(a, b2, c) {
        p2 = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ia2 : ja2;
        return p2.apply(null, arguments);
      }
      function ka2(a, b2) {
        var c = Array.prototype.slice.call(arguments, 1);
        return function() {
          var d = c.slice();
          d.push.apply(d, arguments);
          return a.apply(this, d);
        };
      }
      function r2(a, b2) {
        function c() {
        }
        c.prototype = b2.prototype;
        a.aa = b2.prototype;
        a.prototype = new c();
        a.prototype.constructor = a;
        a.Qb = function(d, e, f2) {
          for (var g = Array(arguments.length - 2), m2 = 2; m2 < arguments.length; m2++) g[m2 - 2] = arguments[m2];
          return b2.prototype[e].apply(d, g);
        };
      }
      function la2(a) {
        const b2 = a.length;
        if (0 < b2) {
          const c = Array(b2);
          for (let d = 0; d < b2; d++) c[d] = a[d];
          return c;
        }
        return [];
      }
      function ma2(a, b2) {
        for (let c = 1; c < arguments.length; c++) {
          const d = arguments[c];
          if (ha2(d)) {
            const e = a.length || 0, f2 = d.length || 0;
            a.length = e + f2;
            for (let g = 0; g < f2; g++) a[e + g] = d[g];
          } else a.push(d);
        }
      }
      class na {
        constructor(a, b2) {
          this.i = a;
          this.j = b2;
          this.h = 0;
          this.g = null;
        }
        get() {
          let a;
          0 < this.h ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i();
          return a;
        }
      }
      function t2(a) {
        return /^[\s\xa0]*$/.test(a);
      }
      function u2() {
        var a = k2.navigator;
        return a && (a = a.userAgent) ? a : "";
      }
      function oa2(a) {
        oa2[" "](a);
        return a;
      }
      oa2[" "] = function() {
      };
      var pa2 = -1 != u2().indexOf("Gecko") && !(-1 != u2().toLowerCase().indexOf("webkit") && -1 == u2().indexOf("Edge")) && !(-1 != u2().indexOf("Trident") || -1 != u2().indexOf("MSIE")) && -1 == u2().indexOf("Edge");
      function qa2(a, b2, c) {
        for (const d in a) b2.call(c, a[d], d, a);
      }
      function ra2(a, b2) {
        for (const c in a) b2.call(void 0, a[c], c, a);
      }
      function sa2(a) {
        const b2 = {};
        for (const c in a) b2[c] = a[c];
        return b2;
      }
      const ta2 = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
      function ua2(a, b2) {
        let c, d;
        for (let e = 1; e < arguments.length; e++) {
          d = arguments[e];
          for (c in d) a[c] = d[c];
          for (let f2 = 0; f2 < ta2.length; f2++) c = ta2[f2], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
        }
      }
      function va2(a) {
        var b2 = 1;
        a = a.split(":");
        const c = [];
        for (; 0 < b2 && a.length; ) c.push(a.shift()), b2--;
        a.length && c.push(a.join(":"));
        return c;
      }
      function wa2(a) {
        k2.setTimeout(() => {
          throw a;
        }, 0);
      }
      function xa() {
        var a = za2;
        let b2 = null;
        a.g && (b2 = a.g, a.g = a.g.next, a.g || (a.h = null), b2.next = null);
        return b2;
      }
      class Aa2 {
        constructor() {
          this.h = this.g = null;
        }
        add(a, b2) {
          const c = Ba2.get();
          c.set(a, b2);
          this.h ? this.h.next = c : this.g = c;
          this.h = c;
        }
      }
      var Ba2 = new na(() => new Ca2(), (a) => a.reset());
      class Ca2 {
        constructor() {
          this.next = this.g = this.h = null;
        }
        set(a, b2) {
          this.h = a;
          this.g = b2;
          this.next = null;
        }
        reset() {
          this.next = this.g = this.h = null;
        }
      }
      let x2, y2 = false, za2 = new Aa2(), Ea2 = () => {
        const a = k2.Promise.resolve(void 0);
        x2 = () => {
          a.then(Da2);
        };
      };
      var Da2 = () => {
        for (var a; a = xa(); ) {
          try {
            a.h.call(a.g);
          } catch (c) {
            wa2(c);
          }
          var b2 = Ba2;
          b2.j(a);
          100 > b2.h && (b2.h++, a.next = b2.g, b2.g = a);
        }
        y2 = false;
      };
      function z2() {
        this.s = this.s;
        this.C = this.C;
      }
      z2.prototype.s = false;
      z2.prototype.ma = function() {
        this.s || (this.s = true, this.N());
      };
      z2.prototype.N = function() {
        if (this.C) for (; this.C.length; ) this.C.shift()();
      };
      function A2(a, b2) {
        this.type = a;
        this.g = this.target = b2;
        this.defaultPrevented = false;
      }
      A2.prototype.h = function() {
        this.defaultPrevented = true;
      };
      var Fa2 = function() {
        if (!k2.addEventListener || !Object.defineProperty) return false;
        var a = false, b2 = Object.defineProperty({}, "passive", { get: function() {
          a = true;
        } });
        try {
          const c = () => {
          };
          k2.addEventListener("test", c, b2);
          k2.removeEventListener("test", c, b2);
        } catch (c) {
        }
        return a;
      }();
      function C2(a, b2) {
        A2.call(this, a ? a.type : "");
        this.relatedTarget = this.g = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
        this.state = null;
        this.pointerId = 0;
        this.pointerType = "";
        this.i = null;
        if (a) {
          var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
          this.target = a.target || a.srcElement;
          this.g = b2;
          if (b2 = a.relatedTarget) {
            if (pa2) {
              a: {
                try {
                  oa2(b2.nodeName);
                  var e = true;
                  break a;
                } catch (f2) {
                }
                e = false;
              }
              e || (b2 = null);
            }
          } else "mouseover" == c ? b2 = a.fromElement : "mouseout" == c && (b2 = a.toElement);
          this.relatedTarget = b2;
          d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
          this.button = a.button;
          this.key = a.key || "";
          this.ctrlKey = a.ctrlKey;
          this.altKey = a.altKey;
          this.shiftKey = a.shiftKey;
          this.metaKey = a.metaKey;
          this.pointerId = a.pointerId || 0;
          this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Ga2[a.pointerType] || "";
          this.state = a.state;
          this.i = a;
          a.defaultPrevented && C2.aa.h.call(this);
        }
      }
      r2(C2, A2);
      var Ga2 = { 2: "touch", 3: "pen", 4: "mouse" };
      C2.prototype.h = function() {
        C2.aa.h.call(this);
        var a = this.i;
        a.preventDefault ? a.preventDefault() : a.returnValue = false;
      };
      var D2 = "closure_listenable_" + (1e6 * Math.random() | 0);
      var Ha2 = 0;
      function Ia2(a, b2, c, d, e) {
        this.listener = a;
        this.proxy = null;
        this.src = b2;
        this.type = c;
        this.capture = !!d;
        this.ha = e;
        this.key = ++Ha2;
        this.da = this.fa = false;
      }
      function Ja2(a) {
        a.da = true;
        a.listener = null;
        a.proxy = null;
        a.src = null;
        a.ha = null;
      }
      function Ka2(a) {
        this.src = a;
        this.g = {};
        this.h = 0;
      }
      Ka2.prototype.add = function(a, b2, c, d, e) {
        var f2 = a.toString();
        a = this.g[f2];
        a || (a = this.g[f2] = [], this.h++);
        var g = La2(a, b2, d, e);
        -1 < g ? (b2 = a[g], c || (b2.fa = false)) : (b2 = new Ia2(b2, this.src, f2, !!d, e), b2.fa = c, a.push(b2));
        return b2;
      };
      function Ma2(a, b2) {
        var c = b2.type;
        if (c in a.g) {
          var d = a.g[c], e = Array.prototype.indexOf.call(d, b2, void 0), f2;
          (f2 = 0 <= e) && Array.prototype.splice.call(d, e, 1);
          f2 && (Ja2(b2), 0 == a.g[c].length && (delete a.g[c], a.h--));
        }
      }
      function La2(a, b2, c, d) {
        for (var e = 0; e < a.length; ++e) {
          var f2 = a[e];
          if (!f2.da && f2.listener == b2 && f2.capture == !!c && f2.ha == d) return e;
        }
        return -1;
      }
      var Na2 = "closure_lm_" + (1e6 * Math.random() | 0), Oa2 = {};
      function Qa2(a, b2, c, d, e) {
        if (Array.isArray(b2)) {
          for (var f2 = 0; f2 < b2.length; f2++) Qa2(a, b2[f2], c, d, e);
          return null;
        }
        c = Sa2(c);
        return a && a[D2] ? a.K(b2, c, n2(d) ? !!d.capture : false, e) : Ta2(a, b2, c, false, d, e);
      }
      function Ta2(a, b2, c, d, e, f2) {
        if (!b2) throw Error("Invalid event type");
        var g = n2(e) ? !!e.capture : !!e, m2 = Ua2(a);
        m2 || (a[Na2] = m2 = new Ka2(a));
        c = m2.add(b2, c, d, g, f2);
        if (c.proxy) return c;
        d = Va2();
        c.proxy = d;
        d.src = a;
        d.listener = c;
        if (a.addEventListener) Fa2 || (e = g), void 0 === e && (e = false), a.addEventListener(b2.toString(), d, e);
        else if (a.attachEvent) a.attachEvent(Wa2(b2.toString()), d);
        else if (a.addListener && a.removeListener) a.addListener(d);
        else throw Error("addEventListener and attachEvent are unavailable.");
        return c;
      }
      function Va2() {
        function a(c) {
          return b2.call(a.src, a.listener, c);
        }
        const b2 = Xa2;
        return a;
      }
      function Ya2(a, b2, c, d, e) {
        if (Array.isArray(b2)) for (var f2 = 0; f2 < b2.length; f2++) Ya2(a, b2[f2], c, d, e);
        else (d = n2(d) ? !!d.capture : !!d, c = Sa2(c), a && a[D2]) ? (a = a.i, b2 = String(b2).toString(), b2 in a.g && (f2 = a.g[b2], c = La2(f2, c, d, e), -1 < c && (Ja2(f2[c]), Array.prototype.splice.call(f2, c, 1), 0 == f2.length && (delete a.g[b2], a.h--)))) : a && (a = Ua2(a)) && (b2 = a.g[b2.toString()], a = -1, b2 && (a = La2(b2, c, d, e)), (c = -1 < a ? b2[a] : null) && Za2(c));
      }
      function Za2(a) {
        if ("number" !== typeof a && a && !a.da) {
          var b2 = a.src;
          if (b2 && b2[D2]) Ma2(b2.i, a);
          else {
            var c = a.type, d = a.proxy;
            b2.removeEventListener ? b2.removeEventListener(c, d, a.capture) : b2.detachEvent ? b2.detachEvent(Wa2(c), d) : b2.addListener && b2.removeListener && b2.removeListener(d);
            (c = Ua2(b2)) ? (Ma2(c, a), 0 == c.h && (c.src = null, b2[Na2] = null)) : Ja2(a);
          }
        }
      }
      function Wa2(a) {
        return a in Oa2 ? Oa2[a] : Oa2[a] = "on" + a;
      }
      function Xa2(a, b2) {
        if (a.da) a = true;
        else {
          b2 = new C2(b2, this);
          var c = a.listener, d = a.ha || a.src;
          a.fa && Za2(a);
          a = c.call(d, b2);
        }
        return a;
      }
      function Ua2(a) {
        a = a[Na2];
        return a instanceof Ka2 ? a : null;
      }
      var $a = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
      function Sa2(a) {
        if ("function" === typeof a) return a;
        a[$a] || (a[$a] = function(b2) {
          return a.handleEvent(b2);
        });
        return a[$a];
      }
      function E2() {
        z2.call(this);
        this.i = new Ka2(this);
        this.M = this;
        this.F = null;
      }
      r2(E2, z2);
      E2.prototype[D2] = true;
      E2.prototype.removeEventListener = function(a, b2, c, d) {
        Ya2(this, a, b2, c, d);
      };
      function F2(a, b2) {
        var c, d = a.F;
        if (d) for (c = []; d; d = d.F) c.push(d);
        a = a.M;
        d = b2.type || b2;
        if ("string" === typeof b2) b2 = new A2(b2, a);
        else if (b2 instanceof A2) b2.target = b2.target || a;
        else {
          var e = b2;
          b2 = new A2(d, a);
          ua2(b2, e);
        }
        e = true;
        if (c) for (var f2 = c.length - 1; 0 <= f2; f2--) {
          var g = b2.g = c[f2];
          e = ab2(g, d, true, b2) && e;
        }
        g = b2.g = a;
        e = ab2(g, d, true, b2) && e;
        e = ab2(g, d, false, b2) && e;
        if (c) for (f2 = 0; f2 < c.length; f2++) g = b2.g = c[f2], e = ab2(g, d, false, b2) && e;
      }
      E2.prototype.N = function() {
        E2.aa.N.call(this);
        if (this.i) {
          var a = this.i, c;
          for (c in a.g) {
            for (var d = a.g[c], e = 0; e < d.length; e++) Ja2(d[e]);
            delete a.g[c];
            a.h--;
          }
        }
        this.F = null;
      };
      E2.prototype.K = function(a, b2, c, d) {
        return this.i.add(String(a), b2, false, c, d);
      };
      E2.prototype.L = function(a, b2, c, d) {
        return this.i.add(String(a), b2, true, c, d);
      };
      function ab2(a, b2, c, d) {
        b2 = a.i.g[String(b2)];
        if (!b2) return true;
        b2 = b2.concat();
        for (var e = true, f2 = 0; f2 < b2.length; ++f2) {
          var g = b2[f2];
          if (g && !g.da && g.capture == c) {
            var m2 = g.listener, q2 = g.ha || g.src;
            g.fa && Ma2(a.i, g);
            e = false !== m2.call(q2, d) && e;
          }
        }
        return e && !d.defaultPrevented;
      }
      function bb2(a, b2, c) {
        if ("function" === typeof a) c && (a = p2(a, c));
        else if (a && "function" == typeof a.handleEvent) a = p2(a.handleEvent, a);
        else throw Error("Invalid listener argument");
        return 2147483647 < Number(b2) ? -1 : k2.setTimeout(a, b2 || 0);
      }
      function cb2(a) {
        a.g = bb2(() => {
          a.g = null;
          a.i && (a.i = false, cb2(a));
        }, a.l);
        const b2 = a.h;
        a.h = null;
        a.m.apply(null, b2);
      }
      class eb2 extends z2 {
        constructor(a, b2) {
          super();
          this.m = a;
          this.l = b2;
          this.h = null;
          this.i = false;
          this.g = null;
        }
        j(a) {
          this.h = arguments;
          this.g ? this.i = true : cb2(this);
        }
        N() {
          super.N();
          this.g && (k2.clearTimeout(this.g), this.g = null, this.i = false, this.h = null);
        }
      }
      function G2(a) {
        z2.call(this);
        this.h = a;
        this.g = {};
      }
      r2(G2, z2);
      var fb2 = [];
      function gb2(a) {
        qa2(a.g, function(b2, c) {
          this.g.hasOwnProperty(c) && Za2(b2);
        }, a);
        a.g = {};
      }
      G2.prototype.N = function() {
        G2.aa.N.call(this);
        gb2(this);
      };
      G2.prototype.handleEvent = function() {
        throw Error("EventHandler.handleEvent not implemented");
      };
      var hb2 = k2.JSON.stringify;
      var ib2 = k2.JSON.parse;
      var jb2 = class {
        stringify(a) {
          return k2.JSON.stringify(a, void 0);
        }
        parse(a) {
          return k2.JSON.parse(a, void 0);
        }
      };
      function kb2() {
      }
      kb2.prototype.h = null;
      function lb2(a) {
        return a.h || (a.h = a.i());
      }
      function mb2() {
      }
      var H2 = { OPEN: "a", kb: "b", Ja: "c", wb: "d" };
      function nb2() {
        A2.call(this, "d");
      }
      r2(nb2, A2);
      function ob2() {
        A2.call(this, "c");
      }
      r2(ob2, A2);
      var I2 = {}, pb2 = null;
      function qb2() {
        return pb2 = pb2 || new E2();
      }
      I2.La = "serverreachability";
      function rb2(a) {
        A2.call(this, I2.La, a);
      }
      r2(rb2, A2);
      function J2(a) {
        const b2 = qb2();
        F2(b2, new rb2(b2));
      }
      I2.STAT_EVENT = "statevent";
      function sb2(a, b2) {
        A2.call(this, I2.STAT_EVENT, a);
        this.stat = b2;
      }
      r2(sb2, A2);
      function K2(a) {
        const b2 = qb2();
        F2(b2, new sb2(b2, a));
      }
      I2.Ma = "timingevent";
      function tb2(a, b2) {
        A2.call(this, I2.Ma, a);
        this.size = b2;
      }
      r2(tb2, A2);
      function ub2(a, b2) {
        if ("function" !== typeof a) throw Error("Fn must not be null and must be a function");
        return k2.setTimeout(function() {
          a();
        }, b2);
      }
      function vb2() {
        this.g = true;
      }
      vb2.prototype.xa = function() {
        this.g = false;
      };
      function wb2(a, b2, c, d, e, f2) {
        a.info(function() {
          if (a.g) if (f2) {
            var g = "";
            for (var m2 = f2.split("&"), q2 = 0; q2 < m2.length; q2++) {
              var l2 = m2[q2].split("=");
              if (1 < l2.length) {
                var v2 = l2[0];
                l2 = l2[1];
                var w2 = v2.split("_");
                g = 2 <= w2.length && "type" == w2[1] ? g + (v2 + "=" + l2 + "&") : g + (v2 + "=redacted&");
              }
            }
          } else g = null;
          else g = f2;
          return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b2 + "\n" + c + "\n" + g;
        });
      }
      function xb2(a, b2, c, d, e, f2, g) {
        a.info(function() {
          return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b2 + "\n" + c + "\n" + f2 + " " + g;
        });
      }
      function L2(a, b2, c, d) {
        a.info(function() {
          return "XMLHTTP TEXT (" + b2 + "): " + yb2(a, c) + (d ? " " + d : "");
        });
      }
      function zb2(a, b2) {
        a.info(function() {
          return "TIMEOUT: " + b2;
        });
      }
      vb2.prototype.info = function() {
      };
      function yb2(a, b2) {
        if (!a.g) return b2;
        if (!b2) return null;
        try {
          var c = JSON.parse(b2);
          if (c) {
            for (a = 0; a < c.length; a++) if (Array.isArray(c[a])) {
              var d = c[a];
              if (!(2 > d.length)) {
                var e = d[1];
                if (Array.isArray(e) && !(1 > e.length)) {
                  var f2 = e[0];
                  if ("noop" != f2 && "stop" != f2 && "close" != f2) for (var g = 1; g < e.length; g++) e[g] = "";
                }
              }
            }
          }
          return hb2(c);
        } catch (m2) {
          return b2;
        }
      }
      var Ab2 = { NO_ERROR: 0, gb: 1, tb: 2, sb: 3, nb: 4, rb: 5, ub: 6, Ia: 7, TIMEOUT: 8, xb: 9 };
      var Bb2 = { lb: "complete", Hb: "success", Ja: "error", Ia: "abort", zb: "ready", Ab: "readystatechange", TIMEOUT: "timeout", vb: "incrementaldata", yb: "progress", ob: "downloadprogress", Pb: "uploadprogress" };
      var Cb2;
      function Db2() {
      }
      r2(Db2, kb2);
      Db2.prototype.g = function() {
        return new XMLHttpRequest();
      };
      Db2.prototype.i = function() {
        return {};
      };
      Cb2 = new Db2();
      function M2(a, b2, c, d) {
        this.j = a;
        this.i = b2;
        this.l = c;
        this.R = d || 1;
        this.U = new G2(this);
        this.I = 45e3;
        this.H = null;
        this.o = false;
        this.m = this.A = this.v = this.L = this.F = this.S = this.B = null;
        this.D = [];
        this.g = null;
        this.C = 0;
        this.s = this.u = null;
        this.X = -1;
        this.J = false;
        this.O = 0;
        this.M = null;
        this.W = this.K = this.T = this.P = false;
        this.h = new Eb2();
      }
      function Eb2() {
        this.i = null;
        this.g = "";
        this.h = false;
      }
      var Fb2 = {}, Gb2 = {};
      function Hb2(a, b2, c) {
        a.L = 1;
        a.v = Ib2(N2(b2));
        a.m = c;
        a.P = true;
        Jb2(a, null);
      }
      function Jb2(a, b2) {
        a.F = Date.now();
        Kb2(a);
        a.A = N2(a.v);
        var c = a.A, d = a.R;
        Array.isArray(d) || (d = [String(d)]);
        Lb2(c.i, "t", d);
        a.C = 0;
        c = a.j.J;
        a.h = new Eb2();
        a.g = Mb2(a.j, c ? b2 : null, !a.m);
        0 < a.O && (a.M = new eb2(p2(a.Y, a, a.g), a.O));
        b2 = a.U;
        c = a.g;
        d = a.ca;
        var e = "readystatechange";
        Array.isArray(e) || (e && (fb2[0] = e.toString()), e = fb2);
        for (var f2 = 0; f2 < e.length; f2++) {
          var g = Qa2(c, e[f2], d || b2.handleEvent, false, b2.h || b2);
          if (!g) break;
          b2.g[g.key] = g;
        }
        b2 = a.H ? sa2(a.H) : {};
        a.m ? (a.u || (a.u = "POST"), b2["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(
          a.A,
          a.u,
          a.m,
          b2
        )) : (a.u = "GET", a.g.ea(a.A, a.u, null, b2));
        J2();
        wb2(a.i, a.u, a.A, a.l, a.R, a.m);
      }
      M2.prototype.ca = function(a) {
        a = a.target;
        const b2 = this.M;
        b2 && 3 == P2(a) ? b2.j() : this.Y(a);
      };
      M2.prototype.Y = function(a) {
        try {
          if (a == this.g) a: {
            const w2 = P2(this.g);
            var b2 = this.g.Ba();
            const O2 = this.g.Z();
            if (!(3 > w2) && (3 != w2 || this.g && (this.h.h || this.g.oa() || Nb2(this.g)))) {
              this.J || 4 != w2 || 7 == b2 || (8 == b2 || 0 >= O2 ? J2(3) : J2(2));
              Ob2(this);
              var c = this.g.Z();
              this.X = c;
              b: if (Pb2(this)) {
                var d = Nb2(this.g);
                a = "";
                var e = d.length, f2 = 4 == P2(this.g);
                if (!this.h.i) {
                  if ("undefined" === typeof TextDecoder) {
                    Q2(this);
                    Qb2(this);
                    var g = "";
                    break b;
                  }
                  this.h.i = new k2.TextDecoder();
                }
                for (b2 = 0; b2 < e; b2++) this.h.h = true, a += this.h.i.decode(d[b2], { stream: !(f2 && b2 == e - 1) });
                d.length = 0;
                this.h.g += a;
                this.C = 0;
                g = this.h.g;
              } else g = this.g.oa();
              this.o = 200 == c;
              xb2(this.i, this.u, this.A, this.l, this.R, w2, c);
              if (this.o) {
                if (this.T && !this.K) {
                  b: {
                    if (this.g) {
                      var m2, q2 = this.g;
                      if ((m2 = q2.g ? q2.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !t2(m2)) {
                        var l2 = m2;
                        break b;
                      }
                    }
                    l2 = null;
                  }
                  if (c = l2) L2(this.i, this.l, c, "Initial handshake response via X-HTTP-Initial-Response"), this.K = true, Rb2(this, c);
                  else {
                    this.o = false;
                    this.s = 3;
                    K2(12);
                    Q2(this);
                    Qb2(this);
                    break a;
                  }
                }
                if (this.P) {
                  c = true;
                  let B2;
                  for (; !this.J && this.C < g.length; ) if (B2 = Sb2(this, g), B2 == Gb2) {
                    4 == w2 && (this.s = 4, K2(14), c = false);
                    L2(this.i, this.l, null, "[Incomplete Response]");
                    break;
                  } else if (B2 == Fb2) {
                    this.s = 4;
                    K2(15);
                    L2(this.i, this.l, g, "[Invalid Chunk]");
                    c = false;
                    break;
                  } else L2(this.i, this.l, B2, null), Rb2(this, B2);
                  Pb2(this) && 0 != this.C && (this.h.g = this.h.g.slice(this.C), this.C = 0);
                  4 != w2 || 0 != g.length || this.h.h || (this.s = 1, K2(16), c = false);
                  this.o = this.o && c;
                  if (!c) L2(this.i, this.l, g, "[Invalid Chunked Response]"), Q2(this), Qb2(this);
                  else if (0 < g.length && !this.W) {
                    this.W = true;
                    var v2 = this.j;
                    v2.g == this && v2.ba && !v2.M && (v2.j.info("Great, no buffering proxy detected. Bytes received: " + g.length), Tb2(v2), v2.M = true, K2(11));
                  }
                } else L2(this.i, this.l, g, null), Rb2(this, g);
                4 == w2 && Q2(this);
                this.o && !this.J && (4 == w2 ? Ub2(this.j, this) : (this.o = false, Kb2(this)));
              } else Vb2(this.g), 400 == c && 0 < g.indexOf("Unknown SID") ? (this.s = 3, K2(12)) : (this.s = 0, K2(13)), Q2(this), Qb2(this);
            }
          }
        } catch (w2) {
        } finally {
        }
      };
      function Pb2(a) {
        return a.g ? "GET" == a.u && 2 != a.L && a.j.Ca : false;
      }
      function Sb2(a, b2) {
        var c = a.C, d = b2.indexOf("\n", c);
        if (-1 == d) return Gb2;
        c = Number(b2.substring(c, d));
        if (isNaN(c)) return Fb2;
        d += 1;
        if (d + c > b2.length) return Gb2;
        b2 = b2.slice(d, d + c);
        a.C = d + c;
        return b2;
      }
      M2.prototype.cancel = function() {
        this.J = true;
        Q2(this);
      };
      function Kb2(a) {
        a.S = Date.now() + a.I;
        Wb2(a, a.I);
      }
      function Wb2(a, b2) {
        if (null != a.B) throw Error("WatchDog timer not null");
        a.B = ub2(p2(a.ba, a), b2);
      }
      function Ob2(a) {
        a.B && (k2.clearTimeout(a.B), a.B = null);
      }
      M2.prototype.ba = function() {
        this.B = null;
        const a = Date.now();
        0 <= a - this.S ? (zb2(this.i, this.A), 2 != this.L && (J2(), K2(17)), Q2(this), this.s = 2, Qb2(this)) : Wb2(this, this.S - a);
      };
      function Qb2(a) {
        0 == a.j.G || a.J || Ub2(a.j, a);
      }
      function Q2(a) {
        Ob2(a);
        var b2 = a.M;
        b2 && "function" == typeof b2.ma && b2.ma();
        a.M = null;
        gb2(a.U);
        a.g && (b2 = a.g, a.g = null, b2.abort(), b2.ma());
      }
      function Rb2(a, b2) {
        try {
          var c = a.j;
          if (0 != c.G && (c.g == a || Xb2(c.h, a))) {
            if (!a.K && Xb2(c.h, a) && 3 == c.G) {
              try {
                var d = c.Da.g.parse(b2);
              } catch (l2) {
                d = null;
              }
              if (Array.isArray(d) && 3 == d.length) {
                var e = d;
                if (0 == e[0]) a: {
                  if (!c.u) {
                    if (c.g) if (c.g.F + 3e3 < a.F) Yb2(c), Zb2(c);
                    else break a;
                    $b2(c);
                    K2(18);
                  }
                }
                else c.za = e[1], 0 < c.za - c.T && 37500 > e[2] && c.F && 0 == c.v && !c.C && (c.C = ub2(p2(c.Za, c), 6e3));
                if (1 >= ac2(c.h) && c.ca) {
                  try {
                    c.ca();
                  } catch (l2) {
                  }
                  c.ca = void 0;
                }
              } else R2(c, 11);
            } else if ((a.K || c.g == a) && Yb2(c), !t2(b2)) for (e = c.Da.g.parse(b2), b2 = 0; b2 < e.length; b2++) {
              let l2 = e[b2];
              c.T = l2[0];
              l2 = l2[1];
              if (2 == c.G) if ("c" == l2[0]) {
                c.K = l2[1];
                c.ia = l2[2];
                const v2 = l2[3];
                null != v2 && (c.la = v2, c.j.info("VER=" + c.la));
                const w2 = l2[4];
                null != w2 && (c.Aa = w2, c.j.info("SVER=" + c.Aa));
                const O2 = l2[5];
                null != O2 && "number" === typeof O2 && 0 < O2 && (d = 1.5 * O2, c.L = d, c.j.info("backChannelRequestTimeoutMs_=" + d));
                d = c;
                const B2 = a.g;
                if (B2) {
                  const ya2 = B2.g ? B2.g.getResponseHeader("X-Client-Wire-Protocol") : null;
                  if (ya2) {
                    var f2 = d.h;
                    f2.g || -1 == ya2.indexOf("spdy") && -1 == ya2.indexOf("quic") && -1 == ya2.indexOf("h2") || (f2.j = f2.l, f2.g = /* @__PURE__ */ new Set(), f2.h && (bc2(f2, f2.h), f2.h = null));
                  }
                  if (d.D) {
                    const db2 = B2.g ? B2.g.getResponseHeader("X-HTTP-Session-Id") : null;
                    db2 && (d.ya = db2, S2(d.I, d.D, db2));
                  }
                }
                c.G = 3;
                c.l && c.l.ua();
                c.ba && (c.R = Date.now() - a.F, c.j.info("Handshake RTT: " + c.R + "ms"));
                d = c;
                var g = a;
                d.qa = cc2(d, d.J ? d.ia : null, d.W);
                if (g.K) {
                  dc2(d.h, g);
                  var m2 = g, q2 = d.L;
                  q2 && (m2.I = q2);
                  m2.B && (Ob2(m2), Kb2(m2));
                  d.g = g;
                } else ec2(d);
                0 < c.i.length && fc2(c);
              } else "stop" != l2[0] && "close" != l2[0] || R2(c, 7);
              else 3 == c.G && ("stop" == l2[0] || "close" == l2[0] ? "stop" == l2[0] ? R2(c, 7) : gc2(c) : "noop" != l2[0] && c.l && c.l.ta(l2), c.v = 0);
            }
          }
          J2(4);
        } catch (l2) {
        }
      }
      var hc2 = class {
        constructor(a, b2) {
          this.g = a;
          this.map = b2;
        }
      };
      function ic2(a) {
        this.l = a || 10;
        k2.PerformanceNavigationTiming ? (a = k2.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(k2.chrome && k2.chrome.loadTimes && k2.chrome.loadTimes() && k2.chrome.loadTimes().wasFetchedViaSpdy);
        this.j = a ? this.l : 1;
        this.g = null;
        1 < this.j && (this.g = /* @__PURE__ */ new Set());
        this.h = null;
        this.i = [];
      }
      function jc2(a) {
        return a.h ? true : a.g ? a.g.size >= a.j : false;
      }
      function ac2(a) {
        return a.h ? 1 : a.g ? a.g.size : 0;
      }
      function Xb2(a, b2) {
        return a.h ? a.h == b2 : a.g ? a.g.has(b2) : false;
      }
      function bc2(a, b2) {
        a.g ? a.g.add(b2) : a.h = b2;
      }
      function dc2(a, b2) {
        a.h && a.h == b2 ? a.h = null : a.g && a.g.has(b2) && a.g.delete(b2);
      }
      ic2.prototype.cancel = function() {
        this.i = kc2(this);
        if (this.h) this.h.cancel(), this.h = null;
        else if (this.g && 0 !== this.g.size) {
          for (const a of this.g.values()) a.cancel();
          this.g.clear();
        }
      };
      function kc2(a) {
        if (null != a.h) return a.i.concat(a.h.D);
        if (null != a.g && 0 !== a.g.size) {
          let b2 = a.i;
          for (const c of a.g.values()) b2 = b2.concat(c.D);
          return b2;
        }
        return la2(a.i);
      }
      function lc2(a) {
        if (a.V && "function" == typeof a.V) return a.V();
        if ("undefined" !== typeof Map && a instanceof Map || "undefined" !== typeof Set && a instanceof Set) return Array.from(a.values());
        if ("string" === typeof a) return a.split("");
        if (ha2(a)) {
          for (var b2 = [], c = a.length, d = 0; d < c; d++) b2.push(a[d]);
          return b2;
        }
        b2 = [];
        c = 0;
        for (d in a) b2[c++] = a[d];
        return b2;
      }
      function mc2(a) {
        if (a.na && "function" == typeof a.na) return a.na();
        if (!a.V || "function" != typeof a.V) {
          if ("undefined" !== typeof Map && a instanceof Map) return Array.from(a.keys());
          if (!("undefined" !== typeof Set && a instanceof Set)) {
            if (ha2(a) || "string" === typeof a) {
              var b2 = [];
              a = a.length;
              for (var c = 0; c < a; c++) b2.push(c);
              return b2;
            }
            b2 = [];
            c = 0;
            for (const d in a) b2[c++] = d;
            return b2;
          }
        }
      }
      function nc2(a, b2) {
        if (a.forEach && "function" == typeof a.forEach) a.forEach(b2, void 0);
        else if (ha2(a) || "string" === typeof a) Array.prototype.forEach.call(a, b2, void 0);
        else for (var c = mc2(a), d = lc2(a), e = d.length, f2 = 0; f2 < e; f2++) b2.call(void 0, d[f2], c && c[f2], a);
      }
      var oc2 = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");
      function pc2(a, b2) {
        if (a) {
          a = a.split("&");
          for (var c = 0; c < a.length; c++) {
            var d = a[c].indexOf("="), e = null;
            if (0 <= d) {
              var f2 = a[c].substring(0, d);
              e = a[c].substring(d + 1);
            } else f2 = a[c];
            b2(f2, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
          }
        }
      }
      function T2(a) {
        this.g = this.o = this.j = "";
        this.s = null;
        this.m = this.l = "";
        this.h = false;
        if (a instanceof T2) {
          this.h = a.h;
          qc2(this, a.j);
          this.o = a.o;
          this.g = a.g;
          rc2(this, a.s);
          this.l = a.l;
          var b2 = a.i;
          var c = new sc2();
          c.i = b2.i;
          b2.g && (c.g = new Map(b2.g), c.h = b2.h);
          tc2(this, c);
          this.m = a.m;
        } else a && (b2 = String(a).match(oc2)) ? (this.h = false, qc2(this, b2[1] || "", true), this.o = uc2(b2[2] || ""), this.g = uc2(b2[3] || "", true), rc2(this, b2[4]), this.l = uc2(b2[5] || "", true), tc2(this, b2[6] || "", true), this.m = uc2(b2[7] || "")) : (this.h = false, this.i = new sc2(null, this.h));
      }
      T2.prototype.toString = function() {
        var a = [], b2 = this.j;
        b2 && a.push(vc2(b2, wc2, true), ":");
        var c = this.g;
        if (c || "file" == b2) a.push("//"), (b2 = this.o) && a.push(vc2(b2, wc2, true), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.s, null != c && a.push(":", String(c));
        if (c = this.l) this.g && "/" != c.charAt(0) && a.push("/"), a.push(vc2(c, "/" == c.charAt(0) ? xc2 : yc2, true));
        (c = this.i.toString()) && a.push("?", c);
        (c = this.m) && a.push("#", vc2(c, zc2));
        return a.join("");
      };
      function N2(a) {
        return new T2(a);
      }
      function qc2(a, b2, c) {
        a.j = c ? uc2(b2, true) : b2;
        a.j && (a.j = a.j.replace(/:$/, ""));
      }
      function rc2(a, b2) {
        if (b2) {
          b2 = Number(b2);
          if (isNaN(b2) || 0 > b2) throw Error("Bad port number " + b2);
          a.s = b2;
        } else a.s = null;
      }
      function tc2(a, b2, c) {
        b2 instanceof sc2 ? (a.i = b2, Ac2(a.i, a.h)) : (c || (b2 = vc2(b2, Bc2)), a.i = new sc2(b2, a.h));
      }
      function S2(a, b2, c) {
        a.i.set(b2, c);
      }
      function Ib2(a) {
        S2(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
        return a;
      }
      function uc2(a, b2) {
        return a ? b2 ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
      }
      function vc2(a, b2, c) {
        return "string" === typeof a ? (a = encodeURI(a).replace(b2, Cc2), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
      }
      function Cc2(a) {
        a = a.charCodeAt(0);
        return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
      }
      var wc2 = /[#\/\?@]/g, yc2 = /[#\?:]/g, xc2 = /[#\?]/g, Bc2 = /[#\?@]/g, zc2 = /#/g;
      function sc2(a, b2) {
        this.h = this.g = null;
        this.i = a || null;
        this.j = !!b2;
      }
      function U2(a) {
        a.g || (a.g = /* @__PURE__ */ new Map(), a.h = 0, a.i && pc2(a.i, function(b2, c) {
          a.add(decodeURIComponent(b2.replace(/\+/g, " ")), c);
        }));
      }
      h = sc2.prototype;
      h.add = function(a, b2) {
        U2(this);
        this.i = null;
        a = V2(this, a);
        var c = this.g.get(a);
        c || this.g.set(a, c = []);
        c.push(b2);
        this.h += 1;
        return this;
      };
      function Dc2(a, b2) {
        U2(a);
        b2 = V2(a, b2);
        a.g.has(b2) && (a.i = null, a.h -= a.g.get(b2).length, a.g.delete(b2));
      }
      function Ec2(a, b2) {
        U2(a);
        b2 = V2(a, b2);
        return a.g.has(b2);
      }
      h.forEach = function(a, b2) {
        U2(this);
        this.g.forEach(function(c, d) {
          c.forEach(function(e) {
            a.call(b2, e, d, this);
          }, this);
        }, this);
      };
      h.na = function() {
        U2(this);
        const a = Array.from(this.g.values()), b2 = Array.from(this.g.keys()), c = [];
        for (let d = 0; d < b2.length; d++) {
          const e = a[d];
          for (let f2 = 0; f2 < e.length; f2++) c.push(b2[d]);
        }
        return c;
      };
      h.V = function(a) {
        U2(this);
        let b2 = [];
        if ("string" === typeof a) Ec2(this, a) && (b2 = b2.concat(this.g.get(V2(this, a))));
        else {
          a = Array.from(this.g.values());
          for (let c = 0; c < a.length; c++) b2 = b2.concat(a[c]);
        }
        return b2;
      };
      h.set = function(a, b2) {
        U2(this);
        this.i = null;
        a = V2(this, a);
        Ec2(this, a) && (this.h -= this.g.get(a).length);
        this.g.set(a, [b2]);
        this.h += 1;
        return this;
      };
      h.get = function(a, b2) {
        if (!a) return b2;
        a = this.V(a);
        return 0 < a.length ? String(a[0]) : b2;
      };
      function Lb2(a, b2, c) {
        Dc2(a, b2);
        0 < c.length && (a.i = null, a.g.set(V2(a, b2), la2(c)), a.h += c.length);
      }
      h.toString = function() {
        if (this.i) return this.i;
        if (!this.g) return "";
        const a = [], b2 = Array.from(this.g.keys());
        for (var c = 0; c < b2.length; c++) {
          var d = b2[c];
          const f2 = encodeURIComponent(String(d)), g = this.V(d);
          for (d = 0; d < g.length; d++) {
            var e = f2;
            "" !== g[d] && (e += "=" + encodeURIComponent(String(g[d])));
            a.push(e);
          }
        }
        return this.i = a.join("&");
      };
      function V2(a, b2) {
        b2 = String(b2);
        a.j && (b2 = b2.toLowerCase());
        return b2;
      }
      function Ac2(a, b2) {
        b2 && !a.j && (U2(a), a.i = null, a.g.forEach(function(c, d) {
          var e = d.toLowerCase();
          d != e && (Dc2(this, d), Lb2(this, e, c));
        }, a));
        a.j = b2;
      }
      function Fc2(a, b2) {
        const c = new vb2();
        if (k2.Image) {
          const d = new Image();
          d.onload = ka2(W2, c, "TestLoadImage: loaded", true, b2, d);
          d.onerror = ka2(W2, c, "TestLoadImage: error", false, b2, d);
          d.onabort = ka2(W2, c, "TestLoadImage: abort", false, b2, d);
          d.ontimeout = ka2(W2, c, "TestLoadImage: timeout", false, b2, d);
          k2.setTimeout(function() {
            if (d.ontimeout) d.ontimeout();
          }, 1e4);
          d.src = a;
        } else b2(false);
      }
      function Gc2(a, b2) {
        const c = new vb2(), d = new AbortController(), e = setTimeout(() => {
          d.abort();
          W2(c, "TestPingServer: timeout", false, b2);
        }, 1e4);
        fetch(a, { signal: d.signal }).then((f2) => {
          clearTimeout(e);
          f2.ok ? W2(c, "TestPingServer: ok", true, b2) : W2(c, "TestPingServer: server error", false, b2);
        }).catch(() => {
          clearTimeout(e);
          W2(c, "TestPingServer: error", false, b2);
        });
      }
      function W2(a, b2, c, d, e) {
        try {
          e && (e.onload = null, e.onerror = null, e.onabort = null, e.ontimeout = null), d(c);
        } catch (f2) {
        }
      }
      function Hc2() {
        this.g = new jb2();
      }
      function Ic2(a, b2, c) {
        const d = c || "";
        try {
          nc2(a, function(e, f2) {
            let g = e;
            n2(e) && (g = hb2(e));
            b2.push(d + f2 + "=" + encodeURIComponent(g));
          });
        } catch (e) {
          throw b2.push(d + "type=" + encodeURIComponent("_badmap")), e;
        }
      }
      function Jc2(a) {
        this.l = a.Ub || null;
        this.j = a.eb || false;
      }
      r2(Jc2, kb2);
      Jc2.prototype.g = function() {
        return new Kc2(this.l, this.j);
      };
      Jc2.prototype.i = /* @__PURE__ */ function(a) {
        return function() {
          return a;
        };
      }({});
      function Kc2(a, b2) {
        E2.call(this);
        this.D = a;
        this.o = b2;
        this.m = void 0;
        this.status = this.readyState = 0;
        this.responseType = this.responseText = this.response = this.statusText = "";
        this.onreadystatechange = null;
        this.u = new Headers();
        this.h = null;
        this.B = "GET";
        this.A = "";
        this.g = false;
        this.v = this.j = this.l = null;
      }
      r2(Kc2, E2);
      h = Kc2.prototype;
      h.open = function(a, b2) {
        if (0 != this.readyState) throw this.abort(), Error("Error reopening a connection");
        this.B = a;
        this.A = b2;
        this.readyState = 1;
        Lc2(this);
      };
      h.send = function(a) {
        if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
        this.g = true;
        const b2 = { headers: this.u, method: this.B, credentials: this.m, cache: void 0 };
        a && (b2.body = a);
        (this.D || k2).fetch(new Request(this.A, b2)).then(this.Sa.bind(this), this.ga.bind(this));
      };
      h.abort = function() {
        this.response = this.responseText = "";
        this.u = new Headers();
        this.status = 0;
        this.j && this.j.cancel("Request was aborted.").catch(() => {
        });
        1 <= this.readyState && this.g && 4 != this.readyState && (this.g = false, Mc2(this));
        this.readyState = 0;
      };
      h.Sa = function(a) {
        if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, Lc2(this)), this.g && (this.readyState = 3, Lc2(this), this.g))) if ("arraybuffer" === this.responseType) a.arrayBuffer().then(this.Qa.bind(this), this.ga.bind(this));
        else if ("undefined" !== typeof k2.ReadableStream && "body" in a) {
          this.j = a.body.getReader();
          if (this.o) {
            if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
            this.response = [];
          } else this.response = this.responseText = "", this.v = new TextDecoder();
          Nc2(this);
        } else a.text().then(this.Ra.bind(this), this.ga.bind(this));
      };
      function Nc2(a) {
        a.j.read().then(a.Pa.bind(a)).catch(a.ga.bind(a));
      }
      h.Pa = function(a) {
        if (this.g) {
          if (this.o && a.value) this.response.push(a.value);
          else if (!this.o) {
            var b2 = a.value ? a.value : new Uint8Array(0);
            if (b2 = this.v.decode(b2, { stream: !a.done })) this.response = this.responseText += b2;
          }
          a.done ? Mc2(this) : Lc2(this);
          3 == this.readyState && Nc2(this);
        }
      };
      h.Ra = function(a) {
        this.g && (this.response = this.responseText = a, Mc2(this));
      };
      h.Qa = function(a) {
        this.g && (this.response = a, Mc2(this));
      };
      h.ga = function() {
        this.g && Mc2(this);
      };
      function Mc2(a) {
        a.readyState = 4;
        a.l = null;
        a.j = null;
        a.v = null;
        Lc2(a);
      }
      h.setRequestHeader = function(a, b2) {
        this.u.append(a, b2);
      };
      h.getResponseHeader = function(a) {
        return this.h ? this.h.get(a.toLowerCase()) || "" : "";
      };
      h.getAllResponseHeaders = function() {
        if (!this.h) return "";
        const a = [], b2 = this.h.entries();
        for (var c = b2.next(); !c.done; ) c = c.value, a.push(c[0] + ": " + c[1]), c = b2.next();
        return a.join("\r\n");
      };
      function Lc2(a) {
        a.onreadystatechange && a.onreadystatechange.call(a);
      }
      Object.defineProperty(Kc2.prototype, "withCredentials", { get: function() {
        return "include" === this.m;
      }, set: function(a) {
        this.m = a ? "include" : "same-origin";
      } });
      function Oc2(a) {
        let b2 = "";
        qa2(a, function(c, d) {
          b2 += d;
          b2 += ":";
          b2 += c;
          b2 += "\r\n";
        });
        return b2;
      }
      function Pc2(a, b2, c) {
        a: {
          for (d in c) {
            var d = false;
            break a;
          }
          d = true;
        }
        d || (c = Oc2(c), "string" === typeof a ? null != c && encodeURIComponent(String(c)) : S2(a, b2, c));
      }
      function X2(a) {
        E2.call(this);
        this.headers = /* @__PURE__ */ new Map();
        this.o = a || null;
        this.h = false;
        this.v = this.g = null;
        this.D = "";
        this.m = 0;
        this.l = "";
        this.j = this.B = this.u = this.A = false;
        this.I = null;
        this.H = "";
        this.J = false;
      }
      r2(X2, E2);
      var Qc2 = /^https?$/i, Rc2 = ["POST", "PUT"];
      h = X2.prototype;
      h.Ha = function(a) {
        this.J = a;
      };
      h.ea = function(a, b2, c, d) {
        if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.D + "; newUri=" + a);
        b2 = b2 ? b2.toUpperCase() : "GET";
        this.D = a;
        this.l = "";
        this.m = 0;
        this.A = false;
        this.h = true;
        this.g = this.o ? this.o.g() : Cb2.g();
        this.v = this.o ? lb2(this.o) : lb2(Cb2);
        this.g.onreadystatechange = p2(this.Ea, this);
        try {
          this.B = true, this.g.open(b2, String(a), true), this.B = false;
        } catch (f2) {
          Sc2(this, f2);
          return;
        }
        a = c || "";
        c = new Map(this.headers);
        if (d) if (Object.getPrototypeOf(d) === Object.prototype) for (var e in d) c.set(e, d[e]);
        else if ("function" === typeof d.keys && "function" === typeof d.get) for (const f2 of d.keys()) c.set(f2, d.get(f2));
        else throw Error("Unknown input type for opt_headers: " + String(d));
        d = Array.from(c.keys()).find((f2) => "content-type" == f2.toLowerCase());
        e = k2.FormData && a instanceof k2.FormData;
        !(0 <= Array.prototype.indexOf.call(Rc2, b2, void 0)) || d || e || c.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        for (const [f2, g] of c) this.g.setRequestHeader(f2, g);
        this.H && (this.g.responseType = this.H);
        "withCredentials" in this.g && this.g.withCredentials !== this.J && (this.g.withCredentials = this.J);
        try {
          Tc2(this), this.u = true, this.g.send(a), this.u = false;
        } catch (f2) {
          Sc2(this, f2);
        }
      };
      function Sc2(a, b2) {
        a.h = false;
        a.g && (a.j = true, a.g.abort(), a.j = false);
        a.l = b2;
        a.m = 5;
        Uc2(a);
        Vc2(a);
      }
      function Uc2(a) {
        a.A || (a.A = true, F2(a, "complete"), F2(a, "error"));
      }
      h.abort = function(a) {
        this.g && this.h && (this.h = false, this.j = true, this.g.abort(), this.j = false, this.m = a || 7, F2(this, "complete"), F2(this, "abort"), Vc2(this));
      };
      h.N = function() {
        this.g && (this.h && (this.h = false, this.j = true, this.g.abort(), this.j = false), Vc2(this, true));
        X2.aa.N.call(this);
      };
      h.Ea = function() {
        this.s || (this.B || this.u || this.j ? Wc2(this) : this.bb());
      };
      h.bb = function() {
        Wc2(this);
      };
      function Wc2(a) {
        if (a.h && "undefined" != typeof fa2 && (!a.v[1] || 4 != P2(a) || 2 != a.Z())) {
          if (a.u && 4 == P2(a)) bb2(a.Ea, 0, a);
          else if (F2(a, "readystatechange"), 4 == P2(a)) {
            a.h = false;
            try {
              const g = a.Z();
              a: switch (g) {
                case 200:
                case 201:
                case 202:
                case 204:
                case 206:
                case 304:
                case 1223:
                  var b2 = true;
                  break a;
                default:
                  b2 = false;
              }
              var c;
              if (!(c = b2)) {
                var d;
                if (d = 0 === g) {
                  var e = String(a.D).match(oc2)[1] || null;
                  !e && k2.self && k2.self.location && (e = k2.self.location.protocol.slice(0, -1));
                  d = !Qc2.test(e ? e.toLowerCase() : "");
                }
                c = d;
              }
              if (c) F2(a, "complete"), F2(a, "success");
              else {
                a.m = 6;
                try {
                  var f2 = 2 < P2(a) ? a.g.statusText : "";
                } catch (m2) {
                  f2 = "";
                }
                a.l = f2 + " [" + a.Z() + "]";
                Uc2(a);
              }
            } finally {
              Vc2(a);
            }
          }
        }
      }
      function Vc2(a, b2) {
        if (a.g) {
          Tc2(a);
          const c = a.g, d = a.v[0] ? () => {
          } : null;
          a.g = null;
          a.v = null;
          b2 || F2(a, "ready");
          try {
            c.onreadystatechange = d;
          } catch (e) {
          }
        }
      }
      function Tc2(a) {
        a.I && (k2.clearTimeout(a.I), a.I = null);
      }
      h.isActive = function() {
        return !!this.g;
      };
      function P2(a) {
        return a.g ? a.g.readyState : 0;
      }
      h.Z = function() {
        try {
          return 2 < P2(this) ? this.g.status : -1;
        } catch (a) {
          return -1;
        }
      };
      h.oa = function() {
        try {
          return this.g ? this.g.responseText : "";
        } catch (a) {
          return "";
        }
      };
      h.Oa = function(a) {
        if (this.g) {
          var b2 = this.g.responseText;
          a && 0 == b2.indexOf(a) && (b2 = b2.substring(a.length));
          return ib2(b2);
        }
      };
      function Nb2(a) {
        try {
          if (!a.g) return null;
          if ("response" in a.g) return a.g.response;
          switch (a.H) {
            case "":
            case "text":
              return a.g.responseText;
            case "arraybuffer":
              if ("mozResponseArrayBuffer" in a.g) return a.g.mozResponseArrayBuffer;
          }
          return null;
        } catch (b2) {
          return null;
        }
      }
      function Vb2(a) {
        const b2 = {};
        a = (a.g && 2 <= P2(a) ? a.g.getAllResponseHeaders() || "" : "").split("\r\n");
        for (let d = 0; d < a.length; d++) {
          if (t2(a[d])) continue;
          var c = va2(a[d]);
          const e = c[0];
          c = c[1];
          if ("string" !== typeof c) continue;
          c = c.trim();
          const f2 = b2[e] || [];
          b2[e] = f2;
          f2.push(c);
        }
        ra2(b2, function(d) {
          return d.join(", ");
        });
      }
      h.Ba = function() {
        return this.m;
      };
      h.Ka = function() {
        return "string" === typeof this.l ? this.l : String(this.l);
      };
      function Xc2(a, b2, c) {
        return c && c.internalChannelParams ? c.internalChannelParams[a] || b2 : b2;
      }
      function Yc2(a) {
        this.Aa = 0;
        this.i = [];
        this.j = new vb2();
        this.ia = this.qa = this.I = this.W = this.g = this.ya = this.D = this.H = this.m = this.S = this.o = null;
        this.Ya = this.U = 0;
        this.Va = Xc2("failFast", false, a);
        this.F = this.C = this.u = this.s = this.l = null;
        this.X = true;
        this.za = this.T = -1;
        this.Y = this.v = this.B = 0;
        this.Ta = Xc2("baseRetryDelayMs", 5e3, a);
        this.cb = Xc2("retryDelaySeedMs", 1e4, a);
        this.Wa = Xc2("forwardChannelMaxRetries", 2, a);
        this.wa = Xc2("forwardChannelRequestTimeoutMs", 2e4, a);
        this.pa = a && a.xmlHttpFactory || void 0;
        this.Xa = a && a.Tb || void 0;
        this.Ca = a && a.useFetchStreams || false;
        this.L = void 0;
        this.J = a && a.supportsCrossDomainXhr || false;
        this.K = "";
        this.h = new ic2(a && a.concurrentRequestLimit);
        this.Da = new Hc2();
        this.P = a && a.fastHandshake || false;
        this.O = a && a.encodeInitMessageHeaders || false;
        this.P && this.O && (this.O = false);
        this.Ua = a && a.Rb || false;
        a && a.xa && this.j.xa();
        a && a.forceLongPolling && (this.X = false);
        this.ba = !this.P && this.X && a && a.detectBufferingProxy || false;
        this.ja = void 0;
        a && a.longPollingTimeout && 0 < a.longPollingTimeout && (this.ja = a.longPollingTimeout);
        this.ca = void 0;
        this.R = 0;
        this.M = false;
        this.ka = this.A = null;
      }
      h = Yc2.prototype;
      h.la = 8;
      h.G = 1;
      h.connect = function(a, b2, c, d) {
        K2(0);
        this.W = a;
        this.H = b2 || {};
        c && void 0 !== d && (this.H.OSID = c, this.H.OAID = d);
        this.F = this.X;
        this.I = cc2(this, null, this.W);
        fc2(this);
      };
      function gc2(a) {
        Zc2(a);
        if (3 == a.G) {
          var b2 = a.U++, c = N2(a.I);
          S2(c, "SID", a.K);
          S2(c, "RID", b2);
          S2(c, "TYPE", "terminate");
          $c2(a, c);
          b2 = new M2(a, a.j, b2);
          b2.L = 2;
          b2.v = Ib2(N2(c));
          c = false;
          if (k2.navigator && k2.navigator.sendBeacon) try {
            c = k2.navigator.sendBeacon(b2.v.toString(), "");
          } catch (d) {
          }
          !c && k2.Image && (new Image().src = b2.v, c = true);
          c || (b2.g = Mb2(b2.j, null), b2.g.ea(b2.v));
          b2.F = Date.now();
          Kb2(b2);
        }
        ad2(a);
      }
      function Zb2(a) {
        a.g && (Tb2(a), a.g.cancel(), a.g = null);
      }
      function Zc2(a) {
        Zb2(a);
        a.u && (k2.clearTimeout(a.u), a.u = null);
        Yb2(a);
        a.h.cancel();
        a.s && ("number" === typeof a.s && k2.clearTimeout(a.s), a.s = null);
      }
      function fc2(a) {
        if (!jc2(a.h) && !a.s) {
          a.s = true;
          var b2 = a.Ga;
          x2 || Ea2();
          y2 || (x2(), y2 = true);
          za2.add(b2, a);
          a.B = 0;
        }
      }
      function bd2(a, b2) {
        if (ac2(a.h) >= a.h.j - (a.s ? 1 : 0)) return false;
        if (a.s) return a.i = b2.D.concat(a.i), true;
        if (1 == a.G || 2 == a.G || a.B >= (a.Va ? 0 : a.Wa)) return false;
        a.s = ub2(p2(a.Ga, a, b2), cd2(a, a.B));
        a.B++;
        return true;
      }
      h.Ga = function(a) {
        if (this.s) if (this.s = null, 1 == this.G) {
          if (!a) {
            this.U = Math.floor(1e5 * Math.random());
            a = this.U++;
            const e = new M2(this, this.j, a);
            let f2 = this.o;
            this.S && (f2 ? (f2 = sa2(f2), ua2(f2, this.S)) : f2 = this.S);
            null !== this.m || this.O || (e.H = f2, f2 = null);
            if (this.P) a: {
              var b2 = 0;
              for (var c = 0; c < this.i.length; c++) {
                b: {
                  var d = this.i[c];
                  if ("__data__" in d.map && (d = d.map.__data__, "string" === typeof d)) {
                    d = d.length;
                    break b;
                  }
                  d = void 0;
                }
                if (void 0 === d) break;
                b2 += d;
                if (4096 < b2) {
                  b2 = c;
                  break a;
                }
                if (4096 === b2 || c === this.i.length - 1) {
                  b2 = c + 1;
                  break a;
                }
              }
              b2 = 1e3;
            }
            else b2 = 1e3;
            b2 = dd2(this, e, b2);
            c = N2(this.I);
            S2(c, "RID", a);
            S2(c, "CVER", 22);
            this.D && S2(c, "X-HTTP-Session-Id", this.D);
            $c2(this, c);
            f2 && (this.O ? b2 = "headers=" + encodeURIComponent(String(Oc2(f2))) + "&" + b2 : this.m && Pc2(c, this.m, f2));
            bc2(this.h, e);
            this.Ua && S2(c, "TYPE", "init");
            this.P ? (S2(c, "$req", b2), S2(c, "SID", "null"), e.T = true, Hb2(e, c, null)) : Hb2(e, c, b2);
            this.G = 2;
          }
        } else 3 == this.G && (a ? ed2(this, a) : 0 == this.i.length || jc2(this.h) || ed2(this));
      };
      function ed2(a, b2) {
        var c;
        b2 ? c = b2.l : c = a.U++;
        const d = N2(a.I);
        S2(d, "SID", a.K);
        S2(d, "RID", c);
        S2(d, "AID", a.T);
        $c2(a, d);
        a.m && a.o && Pc2(d, a.m, a.o);
        c = new M2(a, a.j, c, a.B + 1);
        null === a.m && (c.H = a.o);
        b2 && (a.i = b2.D.concat(a.i));
        b2 = dd2(a, c, 1e3);
        c.I = Math.round(0.5 * a.wa) + Math.round(0.5 * a.wa * Math.random());
        bc2(a.h, c);
        Hb2(c, d, b2);
      }
      function $c2(a, b2) {
        a.H && qa2(a.H, function(c, d) {
          S2(b2, d, c);
        });
        a.l && nc2({}, function(c, d) {
          S2(b2, d, c);
        });
      }
      function dd2(a, b2, c) {
        c = Math.min(a.i.length, c);
        var d = a.l ? p2(a.l.Na, a.l, a) : null;
        a: {
          var e = a.i;
          let f2 = -1;
          for (; ; ) {
            const g = ["count=" + c];
            -1 == f2 ? 0 < c ? (f2 = e[0].g, g.push("ofs=" + f2)) : f2 = 0 : g.push("ofs=" + f2);
            let m2 = true;
            for (let q2 = 0; q2 < c; q2++) {
              let l2 = e[q2].g;
              const v2 = e[q2].map;
              l2 -= f2;
              if (0 > l2) f2 = Math.max(0, e[q2].g - 100), m2 = false;
              else try {
                Ic2(v2, g, "req" + l2 + "_");
              } catch (w2) {
                d && d(v2);
              }
            }
            if (m2) {
              d = g.join("&");
              break a;
            }
          }
        }
        a = a.i.splice(0, c);
        b2.D = a;
        return d;
      }
      function ec2(a) {
        if (!a.g && !a.u) {
          a.Y = 1;
          var b2 = a.Fa;
          x2 || Ea2();
          y2 || (x2(), y2 = true);
          za2.add(b2, a);
          a.v = 0;
        }
      }
      function $b2(a) {
        if (a.g || a.u || 3 <= a.v) return false;
        a.Y++;
        a.u = ub2(p2(a.Fa, a), cd2(a, a.v));
        a.v++;
        return true;
      }
      h.Fa = function() {
        this.u = null;
        fd2(this);
        if (this.ba && !(this.M || null == this.g || 0 >= this.R)) {
          var a = 2 * this.R;
          this.j.info("BP detection timer enabled: " + a);
          this.A = ub2(p2(this.ab, this), a);
        }
      };
      h.ab = function() {
        this.A && (this.A = null, this.j.info("BP detection timeout reached."), this.j.info("Buffering proxy detected and switch to long-polling!"), this.F = false, this.M = true, K2(10), Zb2(this), fd2(this));
      };
      function Tb2(a) {
        null != a.A && (k2.clearTimeout(a.A), a.A = null);
      }
      function fd2(a) {
        a.g = new M2(a, a.j, "rpc", a.Y);
        null === a.m && (a.g.H = a.o);
        a.g.O = 0;
        var b2 = N2(a.qa);
        S2(b2, "RID", "rpc");
        S2(b2, "SID", a.K);
        S2(b2, "AID", a.T);
        S2(b2, "CI", a.F ? "0" : "1");
        !a.F && a.ja && S2(b2, "TO", a.ja);
        S2(b2, "TYPE", "xmlhttp");
        $c2(a, b2);
        a.m && a.o && Pc2(b2, a.m, a.o);
        a.L && (a.g.I = a.L);
        var c = a.g;
        a = a.ia;
        c.L = 1;
        c.v = Ib2(N2(b2));
        c.m = null;
        c.P = true;
        Jb2(c, a);
      }
      h.Za = function() {
        null != this.C && (this.C = null, Zb2(this), $b2(this), K2(19));
      };
      function Yb2(a) {
        null != a.C && (k2.clearTimeout(a.C), a.C = null);
      }
      function Ub2(a, b2) {
        var c = null;
        if (a.g == b2) {
          Yb2(a);
          Tb2(a);
          a.g = null;
          var d = 2;
        } else if (Xb2(a.h, b2)) c = b2.D, dc2(a.h, b2), d = 1;
        else return;
        if (0 != a.G) {
          if (b2.o) if (1 == d) {
            c = b2.m ? b2.m.length : 0;
            b2 = Date.now() - b2.F;
            var e = a.B;
            d = qb2();
            F2(d, new tb2(d, c));
            fc2(a);
          } else ec2(a);
          else if (e = b2.s, 3 == e || 0 == e && 0 < b2.X || !(1 == d && bd2(a, b2) || 2 == d && $b2(a))) switch (c && 0 < c.length && (b2 = a.h, b2.i = b2.i.concat(c)), e) {
            case 1:
              R2(a, 5);
              break;
            case 4:
              R2(a, 10);
              break;
            case 3:
              R2(a, 6);
              break;
            default:
              R2(a, 2);
          }
        }
      }
      function cd2(a, b2) {
        let c = a.Ta + Math.floor(Math.random() * a.cb);
        a.isActive() || (c *= 2);
        return c * b2;
      }
      function R2(a, b2) {
        a.j.info("Error code " + b2);
        if (2 == b2) {
          var c = p2(a.fb, a), d = a.Xa;
          const e = !d;
          d = new T2(d || "//www.google.com/images/cleardot.gif");
          k2.location && "http" == k2.location.protocol || qc2(d, "https");
          Ib2(d);
          e ? Fc2(d.toString(), c) : Gc2(d.toString(), c);
        } else K2(2);
        a.G = 0;
        a.l && a.l.sa(b2);
        ad2(a);
        Zc2(a);
      }
      h.fb = function(a) {
        a ? (this.j.info("Successfully pinged google.com"), K2(2)) : (this.j.info("Failed to ping google.com"), K2(1));
      };
      function ad2(a) {
        a.G = 0;
        a.ka = [];
        if (a.l) {
          const b2 = kc2(a.h);
          if (0 != b2.length || 0 != a.i.length) ma2(a.ka, b2), ma2(a.ka, a.i), a.h.i.length = 0, la2(a.i), a.i.length = 0;
          a.l.ra();
        }
      }
      function cc2(a, b2, c) {
        var d = c instanceof T2 ? N2(c) : new T2(c);
        if ("" != d.g) b2 && (d.g = b2 + "." + d.g), rc2(d, d.s);
        else {
          var e = k2.location;
          d = e.protocol;
          b2 = b2 ? b2 + "." + e.hostname : e.hostname;
          e = +e.port;
          var f2 = new T2(null);
          d && qc2(f2, d);
          b2 && (f2.g = b2);
          e && rc2(f2, e);
          c && (f2.l = c);
          d = f2;
        }
        c = a.D;
        b2 = a.ya;
        c && b2 && S2(d, c, b2);
        S2(d, "VER", a.la);
        $c2(a, d);
        return d;
      }
      function Mb2(a, b2, c) {
        if (b2 && !a.J) throw Error("Can't create secondary domain capable XhrIo object.");
        b2 = a.Ca && !a.pa ? new X2(new Jc2({ eb: c })) : new X2(a.pa);
        b2.Ha(a.J);
        return b2;
      }
      h.isActive = function() {
        return !!this.l && this.l.isActive(this);
      };
      function gd2() {
      }
      h = gd2.prototype;
      h.ua = function() {
      };
      h.ta = function() {
      };
      h.sa = function() {
      };
      h.ra = function() {
      };
      h.isActive = function() {
        return true;
      };
      h.Na = function() {
      };
      function hd2() {
      }
      hd2.prototype.g = function(a, b2) {
        return new Y2(a, b2);
      };
      function Y2(a, b2) {
        E2.call(this);
        this.g = new Yc2(b2);
        this.l = a;
        this.h = b2 && b2.messageUrlParams || null;
        a = b2 && b2.messageHeaders || null;
        b2 && b2.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
        this.g.o = a;
        a = b2 && b2.initMessageHeaders || null;
        b2 && b2.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b2.messageContentType : a = { "X-WebChannel-Content-Type": b2.messageContentType });
        b2 && b2.va && (a ? a["X-WebChannel-Client-Profile"] = b2.va : a = { "X-WebChannel-Client-Profile": b2.va });
        this.g.S = a;
        (a = b2 && b2.Sb) && !t2(a) && (this.g.m = a);
        this.v = b2 && b2.supportsCrossDomainXhr || false;
        this.u = b2 && b2.sendRawJson || false;
        (b2 = b2 && b2.httpSessionIdParam) && !t2(b2) && (this.g.D = b2, a = this.h, null !== a && b2 in a && (a = this.h, b2 in a && delete a[b2]));
        this.j = new Z2(this);
      }
      r2(Y2, E2);
      Y2.prototype.m = function() {
        this.g.l = this.j;
        this.v && (this.g.J = true);
        this.g.connect(this.l, this.h || void 0);
      };
      Y2.prototype.close = function() {
        gc2(this.g);
      };
      Y2.prototype.o = function(a) {
        var b2 = this.g;
        if ("string" === typeof a) {
          var c = {};
          c.__data__ = a;
          a = c;
        } else this.u && (c = {}, c.__data__ = hb2(a), a = c);
        b2.i.push(new hc2(b2.Ya++, a));
        3 == b2.G && fc2(b2);
      };
      Y2.prototype.N = function() {
        this.g.l = null;
        delete this.j;
        gc2(this.g);
        delete this.g;
        Y2.aa.N.call(this);
      };
      function id2(a) {
        nb2.call(this);
        a.__headers__ && (this.headers = a.__headers__, this.statusCode = a.__status__, delete a.__headers__, delete a.__status__);
        var b2 = a.__sm__;
        if (b2) {
          a: {
            for (const c in b2) {
              a = c;
              break a;
            }
            a = void 0;
          }
          if (this.i = a) a = this.i, b2 = null !== b2 && a in b2 ? b2[a] : void 0;
          this.data = b2;
        } else this.data = a;
      }
      r2(id2, nb2);
      function jd2() {
        ob2.call(this);
        this.status = 1;
      }
      r2(jd2, ob2);
      function Z2(a) {
        this.g = a;
      }
      r2(Z2, gd2);
      Z2.prototype.ua = function() {
        F2(this.g, "a");
      };
      Z2.prototype.ta = function(a) {
        F2(this.g, new id2(a));
      };
      Z2.prototype.sa = function(a) {
        F2(this.g, new jd2());
      };
      Z2.prototype.ra = function() {
        F2(this.g, "b");
      };
      hd2.prototype.createWebChannel = hd2.prototype.g;
      Y2.prototype.send = Y2.prototype.o;
      Y2.prototype.open = Y2.prototype.m;
      Y2.prototype.close = Y2.prototype.close;
      createWebChannelTransport = function() {
        return new hd2();
      };
      getStatEventTarget = function() {
        return qb2();
      };
      Event$1 = I2;
      Stat = { mb: 0, pb: 1, qb: 2, Jb: 3, Ob: 4, Lb: 5, Mb: 6, Kb: 7, Ib: 8, Nb: 9, PROXY: 10, NOPROXY: 11, Gb: 12, Cb: 13, Db: 14, Bb: 15, Eb: 16, Fb: 17, ib: 18, hb: 19, jb: 20 };
      Ab2.NO_ERROR = 0;
      Ab2.TIMEOUT = 8;
      Ab2.HTTP_ERROR = 6;
      ErrorCode = Ab2;
      Bb2.COMPLETE = "complete";
      EventType = Bb2;
      mb2.EventType = H2;
      H2.OPEN = "a";
      H2.CLOSE = "b";
      H2.ERROR = "c";
      H2.MESSAGE = "d";
      E2.prototype.listen = E2.prototype.K;
      WebChannel = mb2;
      X2.prototype.listenOnce = X2.prototype.L;
      X2.prototype.getLastError = X2.prototype.Ka;
      X2.prototype.getLastErrorCode = X2.prototype.Ba;
      X2.prototype.getStatus = X2.prototype.Z;
      X2.prototype.getResponseJson = X2.prototype.Oa;
      X2.prototype.getResponseText = X2.prototype.oa;
      X2.prototype.send = X2.prototype.ea;
      X2.prototype.setWithCredentials = X2.prototype.Ha;
      XhrIo = X2;
    }).apply(typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    const w = "@firebase/firestore";
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class User {
      constructor(e) {
        this.uid = e;
      }
      isAuthenticated() {
        return null != this.uid;
      }
      /**
       * Returns a key representing this user, suitable for inclusion in a
       * dictionary.
       */
      toKey() {
        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
      }
      isEqual(e) {
        return e.uid === this.uid;
      }
    }
    User.UNAUTHENTICATED = new User(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    User.GOOGLE_CREDENTIALS = new User("google-credentials-uid"), User.FIRST_PARTY = new User("first-party-uid"), User.MOCK_USER = new User("mock-user");
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let S = "10.14.0";
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const b = new Logger("@firebase/firestore");
    function __PRIVATE_getLogLevel() {
      return b.logLevel;
    }
    function __PRIVATE_logDebug(e, ...t2) {
      if (b.logLevel <= LogLevel.DEBUG) {
        const n2 = t2.map(__PRIVATE_argToString);
        b.debug(`Firestore (${S}): ${e}`, ...n2);
      }
    }
    function __PRIVATE_logError(e, ...t2) {
      if (b.logLevel <= LogLevel.ERROR) {
        const n2 = t2.map(__PRIVATE_argToString);
        b.error(`Firestore (${S}): ${e}`, ...n2);
      }
    }
    function __PRIVATE_logWarn(e, ...t2) {
      if (b.logLevel <= LogLevel.WARN) {
        const n2 = t2.map(__PRIVATE_argToString);
        b.warn(`Firestore (${S}): ${e}`, ...n2);
      }
    }
    function __PRIVATE_argToString(e) {
      if ("string" == typeof e) return e;
      try {
        /**
        * @license
        * Copyright 2020 Google LLC
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *   http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
        return function __PRIVATE_formatJSON(e2) {
          return JSON.stringify(e2);
        }(e);
      } catch (t2) {
        return e;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function fail(e = "Unexpected state") {
      const t2 = `FIRESTORE (${S}) INTERNAL ASSERTION FAILED: ` + e;
      throw __PRIVATE_logError(t2), new Error(t2);
    }
    function __PRIVATE_hardAssert(e, t2) {
      e || fail();
    }
    function __PRIVATE_debugCast(e, t2) {
      return e;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const D = {
      // Causes are copied from:
      // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
      /** Not an error; returned on success. */
      OK: "ok",
      /** The operation was cancelled (typically by the caller). */
      CANCELLED: "cancelled",
      /** Unknown error or an error from a different error domain. */
      UNKNOWN: "unknown",
      /**
       * Client specified an invalid argument. Note that this differs from
       * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
       * problematic regardless of the state of the system (e.g., a malformed file
       * name).
       */
      INVALID_ARGUMENT: "invalid-argument",
      /**
       * Deadline expired before operation could complete. For operations that
       * change the state of the system, this error may be returned even if the
       * operation has completed successfully. For example, a successful response
       * from a server could have been delayed long enough for the deadline to
       * expire.
       */
      DEADLINE_EXCEEDED: "deadline-exceeded",
      /** Some requested entity (e.g., file or directory) was not found. */
      NOT_FOUND: "not-found",
      /**
       * Some entity that we attempted to create (e.g., file or directory) already
       * exists.
       */
      ALREADY_EXISTS: "already-exists",
      /**
       * The caller does not have permission to execute the specified operation.
       * PERMISSION_DENIED must not be used for rejections caused by exhausting
       * some resource (use RESOURCE_EXHAUSTED instead for those errors).
       * PERMISSION_DENIED must not be used if the caller cannot be identified
       * (use UNAUTHENTICATED instead for those errors).
       */
      PERMISSION_DENIED: "permission-denied",
      /**
       * The request does not have valid authentication credentials for the
       * operation.
       */
      UNAUTHENTICATED: "unauthenticated",
      /**
       * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
       * entire file system is out of space.
       */
      RESOURCE_EXHAUSTED: "resource-exhausted",
      /**
       * Operation was rejected because the system is not in a state required for
       * the operation's execution. For example, directory to be deleted may be
       * non-empty, an rmdir operation is applied to a non-directory, etc.
       *
       * A litmus test that may help a service implementor in deciding
       * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
       *  (a) Use UNAVAILABLE if the client can retry just the failing call.
       *  (b) Use ABORTED if the client should retry at a higher-level
       *      (e.g., restarting a read-modify-write sequence).
       *  (c) Use FAILED_PRECONDITION if the client should not retry until
       *      the system state has been explicitly fixed. E.g., if an "rmdir"
       *      fails because the directory is non-empty, FAILED_PRECONDITION
       *      should be returned since the client should not retry unless
       *      they have first fixed up the directory by deleting files from it.
       *  (d) Use FAILED_PRECONDITION if the client performs conditional
       *      REST Get/Update/Delete on a resource and the resource on the
       *      server does not match the condition. E.g., conflicting
       *      read-modify-write on the same resource.
       */
      FAILED_PRECONDITION: "failed-precondition",
      /**
       * The operation was aborted, typically due to a concurrency issue like
       * sequencer check failures, transaction aborts, etc.
       *
       * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
       * and UNAVAILABLE.
       */
      ABORTED: "aborted",
      /**
       * Operation was attempted past the valid range. E.g., seeking or reading
       * past end of file.
       *
       * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
       * if the system state changes. For example, a 32-bit file system will
       * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
       * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
       * an offset past the current file size.
       *
       * There is a fair bit of overlap between FAILED_PRECONDITION and
       * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
       * when it applies so that callers who are iterating through a space can
       * easily look for an OUT_OF_RANGE error to detect when they are done.
       */
      OUT_OF_RANGE: "out-of-range",
      /** Operation is not implemented or not supported/enabled in this service. */
      UNIMPLEMENTED: "unimplemented",
      /**
       * Internal errors. Means some invariants expected by underlying System has
       * been broken. If you see one of these errors, Something is very broken.
       */
      INTERNAL: "internal",
      /**
       * The service is currently unavailable. This is a most likely a transient
       * condition and may be corrected by retrying with a backoff.
       *
       * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
       * and UNAVAILABLE.
       */
      UNAVAILABLE: "unavailable",
      /** Unrecoverable data loss or corruption. */
      DATA_LOSS: "data-loss"
    };
    class FirestoreError extends FirebaseError {
      /** @hideconstructor */
      constructor(e, t2) {
        super(e, t2), this.code = e, this.message = t2, // HACK: We write a toString property directly because Error is not a real
        // class and so inheritance does not work correctly. We could alternatively
        // do the same "back-door inheritance" trick that FirebaseError does.
        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_Deferred {
      constructor() {
        this.promise = new Promise((e, t2) => {
          this.resolve = e, this.reject = t2;
        });
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_OAuthToken {
      constructor(e, t2) {
        this.user = t2, this.type = "OAuth", this.headers = /* @__PURE__ */ new Map(), this.headers.set("Authorization", `Bearer ${e}`);
      }
    }
    class __PRIVATE_EmptyAuthCredentialsProvider {
      getToken() {
        return Promise.resolve(null);
      }
      invalidateToken() {
      }
      start(e, t2) {
        e.enqueueRetryable(() => t2(User.UNAUTHENTICATED));
      }
      shutdown() {
      }
    }
    class __PRIVATE_EmulatorAuthCredentialsProvider {
      constructor(e) {
        this.token = e, /**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */
        this.changeListener = null;
      }
      getToken() {
        return Promise.resolve(this.token);
      }
      invalidateToken() {
      }
      start(e, t2) {
        this.changeListener = t2, // Fire with initial user.
        e.enqueueRetryable(() => t2(this.token.user));
      }
      shutdown() {
        this.changeListener = null;
      }
    }
    class __PRIVATE_FirebaseAuthCredentialsProvider {
      constructor(e) {
        this.t = e, /** Tracks the current User. */
        this.currentUser = User.UNAUTHENTICATED, /**
         * Counter used to detect if the token changed while a getToken request was
         * outstanding.
         */
        this.i = 0, this.forceRefresh = false, this.auth = null;
      }
      start(e, t2) {
        __PRIVATE_hardAssert(void 0 === this.o);
        let n2 = this.i;
        const __PRIVATE_guardedChangeListener = (e2) => this.i !== n2 ? (n2 = this.i, t2(e2)) : Promise.resolve();
        let r2 = new __PRIVATE_Deferred();
        this.o = () => {
          this.i++, this.currentUser = this.u(), r2.resolve(), r2 = new __PRIVATE_Deferred(), e.enqueueRetryable(() => __PRIVATE_guardedChangeListener(this.currentUser));
        };
        const __PRIVATE_awaitNextToken = () => {
          const t3 = r2;
          e.enqueueRetryable(() => __async(this, null, function* () {
            yield t3.promise, yield __PRIVATE_guardedChangeListener(this.currentUser);
          }));
        }, __PRIVATE_registerAuth = (e2) => {
          __PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = e2, this.o && (this.auth.addAuthTokenListener(this.o), __PRIVATE_awaitNextToken());
        };
        this.t.onInit((e2) => __PRIVATE_registerAuth(e2)), // Our users can initialize Auth right after Firestore, so we give it
        // a chance to register itself with the component framework before we
        // determine whether to start up in unauthenticated mode.
        setTimeout(() => {
          if (!this.auth) {
            const e2 = this.t.getImmediate({
              optional: true
            });
            e2 ? __PRIVATE_registerAuth(e2) : (
              // If auth is still not available, proceed with `null` user
              (__PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "Auth not yet detected"), r2.resolve(), r2 = new __PRIVATE_Deferred())
            );
          }
        }, 0), __PRIVATE_awaitNextToken();
      }
      getToken() {
        const e = this.i, t2 = this.forceRefresh;
        return this.forceRefresh = false, this.auth ? this.auth.getToken(t2).then((t3) => (
          // Cancel the request since the token changed while the request was
          // outstanding so the response is potentially for a previous user (which
          // user, we can't be sure).
          this.i !== e ? (__PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), this.getToken()) : t3 ? (__PRIVATE_hardAssert("string" == typeof t3.accessToken), new __PRIVATE_OAuthToken(t3.accessToken, this.currentUser)) : null
        )) : Promise.resolve(null);
      }
      invalidateToken() {
        this.forceRefresh = true;
      }
      shutdown() {
        this.auth && this.o && this.auth.removeAuthTokenListener(this.o), this.o = void 0;
      }
      // Auth.getUid() can return null even with a user logged in. It is because
      // getUid() is synchronous, but the auth code populating Uid is asynchronous.
      // This method should only be called in the AuthTokenListener callback
      // to guarantee to get the actual user.
      u() {
        const e = this.auth && this.auth.getUid();
        return __PRIVATE_hardAssert(null === e || "string" == typeof e), new User(e);
      }
    }
    class __PRIVATE_FirstPartyToken {
      constructor(e, t2, n2) {
        this.l = e, this.h = t2, this.P = n2, this.type = "FirstParty", this.user = User.FIRST_PARTY, this.I = /* @__PURE__ */ new Map();
      }
      /**
       * Gets an authorization token, using a provided factory function, or return
       * null.
       */
      T() {
        return this.P ? this.P() : null;
      }
      get headers() {
        this.I.set("X-Goog-AuthUser", this.l);
        const e = this.T();
        return e && this.I.set("Authorization", e), this.h && this.I.set("X-Goog-Iam-Authorization-Token", this.h), this.I;
      }
    }
    class __PRIVATE_FirstPartyAuthCredentialsProvider {
      constructor(e, t2, n2) {
        this.l = e, this.h = t2, this.P = n2;
      }
      getToken() {
        return Promise.resolve(new __PRIVATE_FirstPartyToken(this.l, this.h, this.P));
      }
      start(e, t2) {
        e.enqueueRetryable(() => t2(User.FIRST_PARTY));
      }
      shutdown() {
      }
      invalidateToken() {
      }
    }
    class AppCheckToken {
      constructor(e) {
        this.value = e, this.type = "AppCheck", this.headers = /* @__PURE__ */ new Map(), e && e.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
      }
    }
    class __PRIVATE_FirebaseAppCheckTokenProvider {
      constructor(e) {
        this.A = e, this.forceRefresh = false, this.appCheck = null, this.R = null;
      }
      start(e, t2) {
        __PRIVATE_hardAssert(void 0 === this.o);
        const onTokenChanged = (e2) => {
          null != e2.error && __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${e2.error.message}`);
          const n2 = e2.token !== this.R;
          return this.R = e2.token, __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", `Received ${n2 ? "new" : "existing"} token.`), n2 ? t2(e2.token) : Promise.resolve();
        };
        this.o = (t3) => {
          e.enqueueRetryable(() => onTokenChanged(t3));
        };
        const __PRIVATE_registerAppCheck = (e2) => {
          __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = e2, this.o && this.appCheck.addTokenListener(this.o);
        };
        this.A.onInit((e2) => __PRIVATE_registerAppCheck(e2)), // Our users can initialize AppCheck after Firestore, so we give it
        // a chance to register itself with the component framework.
        setTimeout(() => {
          if (!this.appCheck) {
            const e2 = this.A.getImmediate({
              optional: true
            });
            e2 ? __PRIVATE_registerAppCheck(e2) : (
              // If AppCheck is still not available, proceed without it.
              __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", "AppCheck not yet detected")
            );
          }
        }, 0);
      }
      getToken() {
        const e = this.forceRefresh;
        return this.forceRefresh = false, this.appCheck ? this.appCheck.getToken(e).then((e2) => e2 ? (__PRIVATE_hardAssert("string" == typeof e2.token), this.R = e2.token, new AppCheckToken(e2.token)) : null) : Promise.resolve(null);
      }
      invalidateToken() {
        this.forceRefresh = true;
      }
      shutdown() {
        this.appCheck && this.o && this.appCheck.removeTokenListener(this.o), this.o = void 0;
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_randomBytes(e) {
      const t2 = (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto)
      ), n2 = new Uint8Array(e);
      if (t2 && "function" == typeof t2.getRandomValues) t2.getRandomValues(n2);
      else
        for (let t3 = 0; t3 < e; t3++) n2[t3] = Math.floor(256 * Math.random());
      return n2;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_AutoId {
      static newId() {
        const e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", t2 = Math.floor(256 / e.length) * e.length;
        let n2 = "";
        for (; n2.length < 20; ) {
          const r2 = __PRIVATE_randomBytes(40);
          for (let i = 0; i < r2.length; ++i)
            n2.length < 20 && r2[i] < t2 && (n2 += e.charAt(r2[i] % e.length));
        }
        return n2;
      }
    }
    function __PRIVATE_primitiveComparator(e, t2) {
      return e < t2 ? -1 : e > t2 ? 1 : 0;
    }
    function __PRIVATE_arrayEquals(e, t2, n2) {
      return e.length === t2.length && e.every((e2, r2) => n2(e2, t2[r2]));
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Timestamp {
      /**
       * Creates a new timestamp.
       *
       * @param seconds - The number of seconds of UTC time since Unix epoch
       *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
       *     9999-12-31T23:59:59Z inclusive.
       * @param nanoseconds - The non-negative fractions of a second at nanosecond
       *     resolution. Negative second values with fractions must still have
       *     non-negative nanoseconds values that count forward in time. Must be
       *     from 0 to 999,999,999 inclusive.
       */
      constructor(e, t2) {
        if (this.seconds = e, this.nanoseconds = t2, t2 < 0) throw new FirestoreError(D.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t2);
        if (t2 >= 1e9) throw new FirestoreError(D.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t2);
        if (e < -62135596800) throw new FirestoreError(D.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
        if (e >= 253402300800) throw new FirestoreError(D.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
      }
      /**
       * Creates a new timestamp with the current date, with millisecond precision.
       *
       * @returns a new timestamp representing the current date.
       */
      static now() {
        return Timestamp.fromMillis(Date.now());
      }
      /**
       * Creates a new timestamp from the given date.
       *
       * @param date - The date to initialize the `Timestamp` from.
       * @returns A new `Timestamp` representing the same point in time as the given
       *     date.
       */
      static fromDate(e) {
        return Timestamp.fromMillis(e.getTime());
      }
      /**
       * Creates a new timestamp from the given number of milliseconds.
       *
       * @param milliseconds - Number of milliseconds since Unix epoch
       *     1970-01-01T00:00:00Z.
       * @returns A new `Timestamp` representing the same point in time as the given
       *     number of milliseconds.
       */
      static fromMillis(e) {
        const t2 = Math.floor(e / 1e3), n2 = Math.floor(1e6 * (e - 1e3 * t2));
        return new Timestamp(t2, n2);
      }
      /**
       * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
       * causes a loss of precision since `Date` objects only support millisecond
       * precision.
       *
       * @returns JavaScript `Date` object representing the same point in time as
       *     this `Timestamp`, with millisecond precision.
       */
      toDate() {
        return new Date(this.toMillis());
      }
      /**
       * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
       * epoch). This operation causes a loss of precision.
       *
       * @returns The point in time corresponding to this timestamp, represented as
       *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
       */
      toMillis() {
        return 1e3 * this.seconds + this.nanoseconds / 1e6;
      }
      _compareTo(e) {
        return this.seconds === e.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, e.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, e.seconds);
      }
      /**
       * Returns true if this `Timestamp` is equal to the provided one.
       *
       * @param other - The `Timestamp` to compare against.
       * @returns true if this `Timestamp` is equal to the provided one.
       */
      isEqual(e) {
        return e.seconds === this.seconds && e.nanoseconds === this.nanoseconds;
      }
      /** Returns a textual representation of this `Timestamp`. */
      toString() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
      }
      /** Returns a JSON-serializable representation of this `Timestamp`. */
      toJSON() {
        return {
          seconds: this.seconds,
          nanoseconds: this.nanoseconds
        };
      }
      /**
       * Converts this object to a primitive string, which allows `Timestamp` objects
       * to be compared using the `>`, `<=`, `>=` and `>` operators.
       */
      valueOf() {
        const e = this.seconds - -62135596800;
        return String(e).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class SnapshotVersion {
      constructor(e) {
        this.timestamp = e;
      }
      static fromTimestamp(e) {
        return new SnapshotVersion(e);
      }
      static min() {
        return new SnapshotVersion(new Timestamp(0, 0));
      }
      static max() {
        return new SnapshotVersion(new Timestamp(253402300799, 999999999));
      }
      compareTo(e) {
        return this.timestamp._compareTo(e.timestamp);
      }
      isEqual(e) {
        return this.timestamp.isEqual(e.timestamp);
      }
      /** Returns a number representation of the version for use in spec tests. */
      toMicroseconds() {
        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
      }
      toString() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
      }
      toTimestamp() {
        return this.timestamp;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class BasePath {
      constructor(e, t2, n2) {
        void 0 === t2 ? t2 = 0 : t2 > e.length && fail(), void 0 === n2 ? n2 = e.length - t2 : n2 > e.length - t2 && fail(), this.segments = e, this.offset = t2, this.len = n2;
      }
      get length() {
        return this.len;
      }
      isEqual(e) {
        return 0 === BasePath.comparator(this, e);
      }
      child(e) {
        const t2 = this.segments.slice(this.offset, this.limit());
        return e instanceof BasePath ? e.forEach((e2) => {
          t2.push(e2);
        }) : t2.push(e), this.construct(t2);
      }
      /** The index of one past the last segment of the path. */
      limit() {
        return this.offset + this.length;
      }
      popFirst(e) {
        return e = void 0 === e ? 1 : e, this.construct(this.segments, this.offset + e, this.length - e);
      }
      popLast() {
        return this.construct(this.segments, this.offset, this.length - 1);
      }
      firstSegment() {
        return this.segments[this.offset];
      }
      lastSegment() {
        return this.get(this.length - 1);
      }
      get(e) {
        return this.segments[this.offset + e];
      }
      isEmpty() {
        return 0 === this.length;
      }
      isPrefixOf(e) {
        if (e.length < this.length) return false;
        for (let t2 = 0; t2 < this.length; t2++) if (this.get(t2) !== e.get(t2)) return false;
        return true;
      }
      isImmediateParentOf(e) {
        if (this.length + 1 !== e.length) return false;
        for (let t2 = 0; t2 < this.length; t2++) if (this.get(t2) !== e.get(t2)) return false;
        return true;
      }
      forEach(e) {
        for (let t2 = this.offset, n2 = this.limit(); t2 < n2; t2++) e(this.segments[t2]);
      }
      toArray() {
        return this.segments.slice(this.offset, this.limit());
      }
      static comparator(e, t2) {
        const n2 = Math.min(e.length, t2.length);
        for (let r2 = 0; r2 < n2; r2++) {
          const n3 = e.get(r2), i = t2.get(r2);
          if (n3 < i) return -1;
          if (n3 > i) return 1;
        }
        return e.length < t2.length ? -1 : e.length > t2.length ? 1 : 0;
      }
    }
    class ResourcePath extends BasePath {
      construct(e, t2, n2) {
        return new ResourcePath(e, t2, n2);
      }
      canonicalString() {
        return this.toArray().join("/");
      }
      toString() {
        return this.canonicalString();
      }
      /**
       * Returns a string representation of this path
       * where each path segment has been encoded with
       * `encodeURIComponent`.
       */
      toUriEncodedString() {
        return this.toArray().map(encodeURIComponent).join("/");
      }
      /**
       * Creates a resource path from the given slash-delimited string. If multiple
       * arguments are provided, all components are combined. Leading and trailing
       * slashes from all components are ignored.
       */
      static fromString(...e) {
        const t2 = [];
        for (const n2 of e) {
          if (n2.indexOf("//") >= 0) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid segment (${n2}). Paths must not contain // in them.`);
          t2.push(...n2.split("/").filter((e2) => e2.length > 0));
        }
        return new ResourcePath(t2);
      }
      static emptyPath() {
        return new ResourcePath([]);
      }
    }
    const v = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
    class FieldPath$1 extends BasePath {
      construct(e, t2, n2) {
        return new FieldPath$1(e, t2, n2);
      }
      /**
       * Returns true if the string could be used as a segment in a field path
       * without escaping.
       */
      static isValidIdentifier(e) {
        return v.test(e);
      }
      canonicalString() {
        return this.toArray().map((e) => (e = e.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), FieldPath$1.isValidIdentifier(e) || (e = "`" + e + "`"), e)).join(".");
      }
      toString() {
        return this.canonicalString();
      }
      /**
       * Returns true if this field references the key of a document.
       */
      isKeyField() {
        return 1 === this.length && "__name__" === this.get(0);
      }
      /**
       * The field designating the key of a document.
       */
      static keyField() {
        return new FieldPath$1(["__name__"]);
      }
      /**
       * Parses a field string from the given server-formatted string.
       *
       * - Splitting the empty string is not allowed (for now at least).
       * - Empty segments within the string (e.g. if there are two consecutive
       *   separators) are not allowed.
       *
       * TODO(b/37244157): we should make this more strict. Right now, it allows
       * non-identifier path components, even if they aren't escaped.
       */
      static fromServerFormat(e) {
        const t2 = [];
        let n2 = "", r2 = 0;
        const __PRIVATE_addCurrentSegment = () => {
          if (0 === n2.length) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
          t2.push(n2), n2 = "";
        };
        let i = false;
        for (; r2 < e.length; ) {
          const t3 = e[r2];
          if ("\\" === t3) {
            if (r2 + 1 === e.length) throw new FirestoreError(D.INVALID_ARGUMENT, "Path has trailing escape character: " + e);
            const t4 = e[r2 + 1];
            if ("\\" !== t4 && "." !== t4 && "`" !== t4) throw new FirestoreError(D.INVALID_ARGUMENT, "Path has invalid escape sequence: " + e);
            n2 += t4, r2 += 2;
          } else "`" === t3 ? (i = !i, r2++) : "." !== t3 || i ? (n2 += t3, r2++) : (__PRIVATE_addCurrentSegment(), r2++);
        }
        if (__PRIVATE_addCurrentSegment(), i) throw new FirestoreError(D.INVALID_ARGUMENT, "Unterminated ` in path: " + e);
        return new FieldPath$1(t2);
      }
      static emptyPath() {
        return new FieldPath$1([]);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class DocumentKey {
      constructor(e) {
        this.path = e;
      }
      static fromPath(e) {
        return new DocumentKey(ResourcePath.fromString(e));
      }
      static fromName(e) {
        return new DocumentKey(ResourcePath.fromString(e).popFirst(5));
      }
      static empty() {
        return new DocumentKey(ResourcePath.emptyPath());
      }
      get collectionGroup() {
        return this.path.popLast().lastSegment();
      }
      /** Returns true if the document is in the specified collectionId. */
      hasCollectionId(e) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === e;
      }
      /** Returns the collection group (i.e. the name of the parent collection) for this key. */
      getCollectionGroup() {
        return this.path.get(this.path.length - 2);
      }
      /** Returns the fully qualified path to the parent collection. */
      getCollectionPath() {
        return this.path.popLast();
      }
      isEqual(e) {
        return null !== e && 0 === ResourcePath.comparator(this.path, e.path);
      }
      toString() {
        return this.path.toString();
      }
      static comparator(e, t2) {
        return ResourcePath.comparator(e.path, t2.path);
      }
      static isDocumentKey(e) {
        return e.length % 2 == 0;
      }
      /**
       * Creates and returns a new document key with the given segments.
       *
       * @param segments - The segments of the path to the document
       * @returns A new instance of DocumentKey
       */
      static fromSegments(e) {
        return new DocumentKey(new ResourcePath(e.slice()));
      }
    }
    function __PRIVATE_newIndexOffsetSuccessorFromReadTime(e, t2) {
      const n2 = e.toTimestamp().seconds, r2 = e.toTimestamp().nanoseconds + 1, i = SnapshotVersion.fromTimestamp(1e9 === r2 ? new Timestamp(n2 + 1, 0) : new Timestamp(n2, r2));
      return new IndexOffset(i, DocumentKey.empty(), t2);
    }
    function __PRIVATE_newIndexOffsetFromDocument(e) {
      return new IndexOffset(e.readTime, e.key, -1);
    }
    class IndexOffset {
      constructor(e, t2, n2) {
        this.readTime = e, this.documentKey = t2, this.largestBatchId = n2;
      }
      /** Returns an offset that sorts before all regular offsets. */
      static min() {
        return new IndexOffset(SnapshotVersion.min(), DocumentKey.empty(), -1);
      }
      /** Returns an offset that sorts after all regular offsets. */
      static max() {
        return new IndexOffset(SnapshotVersion.max(), DocumentKey.empty(), -1);
      }
    }
    function __PRIVATE_indexOffsetComparator(e, t2) {
      let n2 = e.readTime.compareTo(t2.readTime);
      return 0 !== n2 ? n2 : (n2 = DocumentKey.comparator(e.documentKey, t2.documentKey), 0 !== n2 ? n2 : __PRIVATE_primitiveComparator(e.largestBatchId, t2.largestBatchId));
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const C = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
    class PersistenceTransaction {
      constructor() {
        this.onCommittedListeners = [];
      }
      addOnCommittedListener(e) {
        this.onCommittedListeners.push(e);
      }
      raiseOnCommittedEvent() {
        this.onCommittedListeners.forEach((e) => e());
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_ignoreIfPrimaryLeaseLoss(e) {
      return __async(this, null, function* () {
        if (e.code !== D.FAILED_PRECONDITION || e.message !== C) throw e;
        __PRIVATE_logDebug("LocalStore", "Unexpectedly lost primary lease");
      });
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class PersistencePromise {
      constructor(e) {
        this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
        this.result = void 0, this.error = void 0, this.isDone = false, // Set to true when .then() or .catch() are called and prevents additional
        // chaining.
        this.callbackAttached = false, e((e2) => {
          this.isDone = true, this.result = e2, this.nextCallback && // value should be defined unless T is Void, but we can't express
          // that in the type system.
          this.nextCallback(e2);
        }, (e2) => {
          this.isDone = true, this.error = e2, this.catchCallback && this.catchCallback(e2);
        });
      }
      catch(e) {
        return this.next(void 0, e);
      }
      next(e, t2) {
        return this.callbackAttached && fail(), this.callbackAttached = true, this.isDone ? this.error ? this.wrapFailure(t2, this.error) : this.wrapSuccess(e, this.result) : new PersistencePromise((n2, r2) => {
          this.nextCallback = (t3) => {
            this.wrapSuccess(e, t3).next(n2, r2);
          }, this.catchCallback = (e2) => {
            this.wrapFailure(t2, e2).next(n2, r2);
          };
        });
      }
      toPromise() {
        return new Promise((e, t2) => {
          this.next(e, t2);
        });
      }
      wrapUserFunction(e) {
        try {
          const t2 = e();
          return t2 instanceof PersistencePromise ? t2 : PersistencePromise.resolve(t2);
        } catch (e2) {
          return PersistencePromise.reject(e2);
        }
      }
      wrapSuccess(e, t2) {
        return e ? this.wrapUserFunction(() => e(t2)) : PersistencePromise.resolve(t2);
      }
      wrapFailure(e, t2) {
        return e ? this.wrapUserFunction(() => e(t2)) : PersistencePromise.reject(t2);
      }
      static resolve(e) {
        return new PersistencePromise((t2, n2) => {
          t2(e);
        });
      }
      static reject(e) {
        return new PersistencePromise((t2, n2) => {
          n2(e);
        });
      }
      static waitFor(e) {
        return new PersistencePromise((t2, n2) => {
          let r2 = 0, i = 0, s = false;
          e.forEach((e2) => {
            ++r2, e2.next(() => {
              ++i, s && i === r2 && t2();
            }, (e3) => n2(e3));
          }), s = true, i === r2 && t2();
        });
      }
      /**
       * Given an array of predicate functions that asynchronously evaluate to a
       * boolean, implements a short-circuiting `or` between the results. Predicates
       * will be evaluated until one of them returns `true`, then stop. The final
       * result will be whether any of them returned `true`.
       */
      static or(e) {
        let t2 = PersistencePromise.resolve(false);
        for (const n2 of e) t2 = t2.next((e2) => e2 ? PersistencePromise.resolve(e2) : n2());
        return t2;
      }
      static forEach(e, t2) {
        const n2 = [];
        return e.forEach((e2, r2) => {
          n2.push(t2.call(this, e2, r2));
        }), this.waitFor(n2);
      }
      /**
       * Concurrently map all array elements through asynchronous function.
       */
      static mapArray(e, t2) {
        return new PersistencePromise((n2, r2) => {
          const i = e.length, s = new Array(i);
          let o = 0;
          for (let _ = 0; _ < i; _++) {
            const a = _;
            t2(e[a]).next((e2) => {
              s[a] = e2, ++o, o === i && n2(s);
            }, (e2) => r2(e2));
          }
        });
      }
      /**
       * An alternative to recursive PersistencePromise calls, that avoids
       * potential memory problems from unbounded chains of promises.
       *
       * The `action` will be called repeatedly while `condition` is true.
       */
      static doWhile(e, t2) {
        return new PersistencePromise((n2, r2) => {
          const process2 = () => {
            true === e() ? t2().next(() => {
              process2();
            }, r2) : n2();
          };
          process2();
        });
      }
    }
    function __PRIVATE_getAndroidVersion(e) {
      const t2 = e.match(/Android ([\d.]+)/i), n2 = t2 ? t2[1].split(".").slice(0, 2).join(".") : "-1";
      return Number(n2);
    }
    function __PRIVATE_isIndexedDbTransactionError(e) {
      return "IndexedDbTransactionError" === e.name;
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_ListenSequence {
      constructor(e, t2) {
        this.previousValue = e, t2 && (t2.sequenceNumberHandler = (e2) => this.ie(e2), this.se = (e2) => t2.writeSequenceNumber(e2));
      }
      ie(e) {
        return this.previousValue = Math.max(e, this.previousValue), this.previousValue;
      }
      next() {
        const e = ++this.previousValue;
        return this.se && this.se(e), e;
      }
    }
    __PRIVATE_ListenSequence.oe = -1;
    function __PRIVATE_isNullOrUndefined(e) {
      return null == e;
    }
    function __PRIVATE_isNegativeZero(e) {
      return 0 === e && 1 / e == -1 / 0;
    }
    function isSafeInteger(e) {
      return "number" == typeof e && Number.isInteger(e) && !__PRIVATE_isNegativeZero(e) && e <= Number.MAX_SAFE_INTEGER && e >= Number.MIN_SAFE_INTEGER;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_objectSize(e) {
      let t2 = 0;
      for (const n2 in e) Object.prototype.hasOwnProperty.call(e, n2) && t2++;
      return t2;
    }
    function forEach(e, t2) {
      for (const n2 in e) Object.prototype.hasOwnProperty.call(e, n2) && t2(n2, e[n2]);
    }
    function isEmpty(e) {
      for (const t2 in e) if (Object.prototype.hasOwnProperty.call(e, t2)) return false;
      return true;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let SortedMap$1 = class SortedMap2 {
      constructor(e, t2) {
        this.comparator = e, this.root = t2 || LLRBNode$1.EMPTY;
      }
      // Returns a copy of the map, with the specified key/value added or replaced.
      insert(e, t2) {
        return new SortedMap2(this.comparator, this.root.insert(e, t2, this.comparator).copy(null, null, LLRBNode$1.BLACK, null, null));
      }
      // Returns a copy of the map, with the specified key removed.
      remove(e) {
        return new SortedMap2(this.comparator, this.root.remove(e, this.comparator).copy(null, null, LLRBNode$1.BLACK, null, null));
      }
      // Returns the value of the node with the given key, or null.
      get(e) {
        let t2 = this.root;
        for (; !t2.isEmpty(); ) {
          const n2 = this.comparator(e, t2.key);
          if (0 === n2) return t2.value;
          n2 < 0 ? t2 = t2.left : n2 > 0 && (t2 = t2.right);
        }
        return null;
      }
      // Returns the index of the element in this sorted map, or -1 if it doesn't
      // exist.
      indexOf(e) {
        let t2 = 0, n2 = this.root;
        for (; !n2.isEmpty(); ) {
          const r2 = this.comparator(e, n2.key);
          if (0 === r2) return t2 + n2.left.size;
          r2 < 0 ? n2 = n2.left : (
            // Count all nodes left of the node plus the node itself
            (t2 += n2.left.size + 1, n2 = n2.right)
          );
        }
        return -1;
      }
      isEmpty() {
        return this.root.isEmpty();
      }
      // Returns the total number of nodes in the map.
      get size() {
        return this.root.size;
      }
      // Returns the minimum key in the map.
      minKey() {
        return this.root.minKey();
      }
      // Returns the maximum key in the map.
      maxKey() {
        return this.root.maxKey();
      }
      // Traverses the map in key order and calls the specified action function
      // for each key/value pair. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      inorderTraversal(e) {
        return this.root.inorderTraversal(e);
      }
      forEach(e) {
        this.inorderTraversal((t2, n2) => (e(t2, n2), false));
      }
      toString() {
        const e = [];
        return this.inorderTraversal((t2, n2) => (e.push(`${t2}:${n2}`), false)), `{${e.join(", ")}}`;
      }
      // Traverses the map in reverse key order and calls the specified action
      // function for each key/value pair. If action returns true, traversal is
      // aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      reverseTraversal(e) {
        return this.root.reverseTraversal(e);
      }
      // Returns an iterator over the SortedMap.
      getIterator() {
        return new SortedMapIterator$1(this.root, null, this.comparator, false);
      }
      getIteratorFrom(e) {
        return new SortedMapIterator$1(this.root, e, this.comparator, false);
      }
      getReverseIterator() {
        return new SortedMapIterator$1(this.root, null, this.comparator, true);
      }
      getReverseIteratorFrom(e) {
        return new SortedMapIterator$1(this.root, e, this.comparator, true);
      }
    };
    let SortedMapIterator$1 = class SortedMapIterator {
      constructor(e, t2, n2, r2) {
        this.isReverse = r2, this.nodeStack = [];
        let i = 1;
        for (; !e.isEmpty(); ) if (i = t2 ? n2(e.key, t2) : 1, // flip the comparison if we're going in reverse
        t2 && r2 && (i *= -1), i < 0)
          e = this.isReverse ? e.left : e.right;
        else {
          if (0 === i) {
            this.nodeStack.push(e);
            break;
          }
          this.nodeStack.push(e), e = this.isReverse ? e.right : e.left;
        }
      }
      getNext() {
        let e = this.nodeStack.pop();
        const t2 = {
          key: e.key,
          value: e.value
        };
        if (this.isReverse) for (e = e.left; !e.isEmpty(); ) this.nodeStack.push(e), e = e.right;
        else for (e = e.right; !e.isEmpty(); ) this.nodeStack.push(e), e = e.left;
        return t2;
      }
      hasNext() {
        return this.nodeStack.length > 0;
      }
      peek() {
        if (0 === this.nodeStack.length) return null;
        const e = this.nodeStack[this.nodeStack.length - 1];
        return {
          key: e.key,
          value: e.value
        };
      }
    };
    let LLRBNode$1 = class LLRBNode2 {
      constructor(e, t2, n2, r2, i) {
        this.key = e, this.value = t2, this.color = null != n2 ? n2 : LLRBNode2.RED, this.left = null != r2 ? r2 : LLRBNode2.EMPTY, this.right = null != i ? i : LLRBNode2.EMPTY, this.size = this.left.size + 1 + this.right.size;
      }
      // Returns a copy of the current node, optionally replacing pieces of it.
      copy(e, t2, n2, r2, i) {
        return new LLRBNode2(null != e ? e : this.key, null != t2 ? t2 : this.value, null != n2 ? n2 : this.color, null != r2 ? r2 : this.left, null != i ? i : this.right);
      }
      isEmpty() {
        return false;
      }
      // Traverses the tree in key order and calls the specified action function
      // for each node. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      inorderTraversal(e) {
        return this.left.inorderTraversal(e) || e(this.key, this.value) || this.right.inorderTraversal(e);
      }
      // Traverses the tree in reverse key order and calls the specified action
      // function for each node. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      reverseTraversal(e) {
        return this.right.reverseTraversal(e) || e(this.key, this.value) || this.left.reverseTraversal(e);
      }
      // Returns the minimum node in the tree.
      min() {
        return this.left.isEmpty() ? this : this.left.min();
      }
      // Returns the maximum key in the tree.
      minKey() {
        return this.min().key;
      }
      // Returns the maximum key in the tree.
      maxKey() {
        return this.right.isEmpty() ? this.key : this.right.maxKey();
      }
      // Returns new tree, with the key/value added.
      insert(e, t2, n2) {
        let r2 = this;
        const i = n2(e, r2.key);
        return r2 = i < 0 ? r2.copy(null, null, null, r2.left.insert(e, t2, n2), null) : 0 === i ? r2.copy(null, t2, null, null, null) : r2.copy(null, null, null, null, r2.right.insert(e, t2, n2)), r2.fixUp();
      }
      removeMin() {
        if (this.left.isEmpty()) return LLRBNode2.EMPTY;
        let e = this;
        return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), e = e.copy(null, null, null, e.left.removeMin(), null), e.fixUp();
      }
      // Returns new tree, with the specified item removed.
      remove(e, t2) {
        let n2, r2 = this;
        if (t2(e, r2.key) < 0) r2.left.isEmpty() || r2.left.isRed() || r2.left.left.isRed() || (r2 = r2.moveRedLeft()), r2 = r2.copy(null, null, null, r2.left.remove(e, t2), null);
        else {
          if (r2.left.isRed() && (r2 = r2.rotateRight()), r2.right.isEmpty() || r2.right.isRed() || r2.right.left.isRed() || (r2 = r2.moveRedRight()), 0 === t2(e, r2.key)) {
            if (r2.right.isEmpty()) return LLRBNode2.EMPTY;
            n2 = r2.right.min(), r2 = r2.copy(n2.key, n2.value, null, null, r2.right.removeMin());
          }
          r2 = r2.copy(null, null, null, null, r2.right.remove(e, t2));
        }
        return r2.fixUp();
      }
      isRed() {
        return this.color;
      }
      // Returns new tree after performing any needed rotations.
      fixUp() {
        let e = this;
        return e.right.isRed() && !e.left.isRed() && (e = e.rotateLeft()), e.left.isRed() && e.left.left.isRed() && (e = e.rotateRight()), e.left.isRed() && e.right.isRed() && (e = e.colorFlip()), e;
      }
      moveRedLeft() {
        let e = this.colorFlip();
        return e.right.left.isRed() && (e = e.copy(null, null, null, null, e.right.rotateRight()), e = e.rotateLeft(), e = e.colorFlip()), e;
      }
      moveRedRight() {
        let e = this.colorFlip();
        return e.left.left.isRed() && (e = e.rotateRight(), e = e.colorFlip()), e;
      }
      rotateLeft() {
        const e = this.copy(null, null, LLRBNode2.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, e, null);
      }
      rotateRight() {
        const e = this.copy(null, null, LLRBNode2.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, e);
      }
      colorFlip() {
        const e = this.left.copy(null, null, !this.left.color, null, null), t2 = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, e, t2);
      }
      // For testing.
      checkMaxDepth() {
        const e = this.check();
        return Math.pow(2, e) <= this.size + 1;
      }
      // In a balanced RB tree, the black-depth (number of black nodes) from root to
      // leaves is equal on both sides.  This function verifies that or asserts.
      check() {
        if (this.isRed() && this.left.isRed()) throw fail();
        if (this.right.isRed()) throw fail();
        const e = this.left.check();
        if (e !== this.right.check()) throw fail();
        return e + (this.isRed() ? 0 : 1);
      }
    };
    LLRBNode$1.EMPTY = null, LLRBNode$1.RED = true, LLRBNode$1.BLACK = false;
    LLRBNode$1.EMPTY = new // Represents an empty node (a leaf node in the Red-Black Tree).
    class LLRBEmptyNode {
      constructor() {
        this.size = 0;
      }
      get key() {
        throw fail();
      }
      get value() {
        throw fail();
      }
      get color() {
        throw fail();
      }
      get left() {
        throw fail();
      }
      get right() {
        throw fail();
      }
      // Returns a copy of the current node.
      copy(e, t2, n2, r2, i) {
        return this;
      }
      // Returns a copy of the tree, with the specified key/value added.
      insert(e, t2, n2) {
        return new LLRBNode$1(e, t2);
      }
      // Returns a copy of the tree, with the specified key removed.
      remove(e, t2) {
        return this;
      }
      isEmpty() {
        return true;
      }
      inorderTraversal(e) {
        return false;
      }
      reverseTraversal(e) {
        return false;
      }
      minKey() {
        return null;
      }
      maxKey() {
        return null;
      }
      isRed() {
        return false;
      }
      // For testing.
      checkMaxDepth() {
        return true;
      }
      check() {
        return 0;
      }
    }();
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class SortedSet {
      constructor(e) {
        this.comparator = e, this.data = new SortedMap$1(this.comparator);
      }
      has(e) {
        return null !== this.data.get(e);
      }
      first() {
        return this.data.minKey();
      }
      last() {
        return this.data.maxKey();
      }
      get size() {
        return this.data.size;
      }
      indexOf(e) {
        return this.data.indexOf(e);
      }
      /** Iterates elements in order defined by "comparator" */
      forEach(e) {
        this.data.inorderTraversal((t2, n2) => (e(t2), false));
      }
      /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */
      forEachInRange(e, t2) {
        const n2 = this.data.getIteratorFrom(e[0]);
        for (; n2.hasNext(); ) {
          const r2 = n2.getNext();
          if (this.comparator(r2.key, e[1]) >= 0) return;
          t2(r2.key);
        }
      }
      /**
       * Iterates over `elem`s such that: start &lt;= elem until false is returned.
       */
      forEachWhile(e, t2) {
        let n2;
        for (n2 = void 0 !== t2 ? this.data.getIteratorFrom(t2) : this.data.getIterator(); n2.hasNext(); ) {
          if (!e(n2.getNext().key)) return;
        }
      }
      /** Finds the least element greater than or equal to `elem`. */
      firstAfterOrEqual(e) {
        const t2 = this.data.getIteratorFrom(e);
        return t2.hasNext() ? t2.getNext().key : null;
      }
      getIterator() {
        return new SortedSetIterator(this.data.getIterator());
      }
      getIteratorFrom(e) {
        return new SortedSetIterator(this.data.getIteratorFrom(e));
      }
      /** Inserts or updates an element */
      add(e) {
        return this.copy(this.data.remove(e).insert(e, true));
      }
      /** Deletes an element */
      delete(e) {
        return this.has(e) ? this.copy(this.data.remove(e)) : this;
      }
      isEmpty() {
        return this.data.isEmpty();
      }
      unionWith(e) {
        let t2 = this;
        return t2.size < e.size && (t2 = e, e = this), e.forEach((e2) => {
          t2 = t2.add(e2);
        }), t2;
      }
      isEqual(e) {
        if (!(e instanceof SortedSet)) return false;
        if (this.size !== e.size) return false;
        const t2 = this.data.getIterator(), n2 = e.data.getIterator();
        for (; t2.hasNext(); ) {
          const e2 = t2.getNext().key, r2 = n2.getNext().key;
          if (0 !== this.comparator(e2, r2)) return false;
        }
        return true;
      }
      toArray() {
        const e = [];
        return this.forEach((t2) => {
          e.push(t2);
        }), e;
      }
      toString() {
        const e = [];
        return this.forEach((t2) => e.push(t2)), "SortedSet(" + e.toString() + ")";
      }
      copy(e) {
        const t2 = new SortedSet(this.comparator);
        return t2.data = e, t2;
      }
    }
    class SortedSetIterator {
      constructor(e) {
        this.iter = e;
      }
      getNext() {
        return this.iter.getNext().key;
      }
      hasNext() {
        return this.iter.hasNext();
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FieldMask {
      constructor(e) {
        this.fields = e, // TODO(dimond): validation of FieldMask
        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
        e.sort(FieldPath$1.comparator);
      }
      static empty() {
        return new FieldMask([]);
      }
      /**
       * Returns a new FieldMask object that is the result of adding all the given
       * fields paths to this field mask.
       */
      unionWith(e) {
        let t2 = new SortedSet(FieldPath$1.comparator);
        for (const e2 of this.fields) t2 = t2.add(e2);
        for (const n2 of e) t2 = t2.add(n2);
        return new FieldMask(t2.toArray());
      }
      /**
       * Verifies that `fieldPath` is included by at least one field in this field
       * mask.
       *
       * This is an O(n) operation, where `n` is the size of the field mask.
       */
      covers(e) {
        for (const t2 of this.fields) if (t2.isPrefixOf(e)) return true;
        return false;
      }
      isEqual(e) {
        return __PRIVATE_arrayEquals(this.fields, e.fields, (e2, t2) => e2.isEqual(t2));
      }
    }
    /**
     * @license
     * Copyright 2023 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_Base64DecodeError extends Error {
      constructor() {
        super(...arguments), this.name = "Base64DecodeError";
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ByteString {
      constructor(e) {
        this.binaryString = e;
      }
      static fromBase64String(e) {
        const t2 = function __PRIVATE_decodeBase64(e2) {
          try {
            return atob(e2);
          } catch (e3) {
            throw "undefined" != typeof DOMException && e3 instanceof DOMException ? new __PRIVATE_Base64DecodeError("Invalid base64 string: " + e3) : e3;
          }
        }(e);
        return new ByteString(t2);
      }
      static fromUint8Array(e) {
        const t2 = (
          /**
          * Helper function to convert an Uint8array to a binary string.
          */
          function __PRIVATE_binaryStringFromUint8Array(e2) {
            let t3 = "";
            for (let n2 = 0; n2 < e2.length; ++n2) t3 += String.fromCharCode(e2[n2]);
            return t3;
          }(e)
        );
        return new ByteString(t2);
      }
      [Symbol.iterator]() {
        let e = 0;
        return {
          next: () => e < this.binaryString.length ? {
            value: this.binaryString.charCodeAt(e++),
            done: false
          } : {
            value: void 0,
            done: true
          }
        };
      }
      toBase64() {
        return function __PRIVATE_encodeBase64(e) {
          return btoa(e);
        }(this.binaryString);
      }
      toUint8Array() {
        return function __PRIVATE_uint8ArrayFromBinaryString(e) {
          const t2 = new Uint8Array(e.length);
          for (let n2 = 0; n2 < e.length; n2++) t2[n2] = e.charCodeAt(n2);
          return t2;
        }(this.binaryString);
      }
      approximateByteSize() {
        return 2 * this.binaryString.length;
      }
      compareTo(e) {
        return __PRIVATE_primitiveComparator(this.binaryString, e.binaryString);
      }
      isEqual(e) {
        return this.binaryString === e.binaryString;
      }
    }
    ByteString.EMPTY_BYTE_STRING = new ByteString("");
    const ne = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
    function __PRIVATE_normalizeTimestamp(e) {
      if (__PRIVATE_hardAssert(!!e), "string" == typeof e) {
        let t2 = 0;
        const n2 = ne.exec(e);
        if (__PRIVATE_hardAssert(!!n2), n2[1]) {
          let e2 = n2[1];
          e2 = (e2 + "000000000").substr(0, 9), t2 = Number(e2);
        }
        const r2 = new Date(e);
        return {
          seconds: Math.floor(r2.getTime() / 1e3),
          nanos: t2
        };
      }
      return {
        seconds: __PRIVATE_normalizeNumber(e.seconds),
        nanos: __PRIVATE_normalizeNumber(e.nanos)
      };
    }
    function __PRIVATE_normalizeNumber(e) {
      return "number" == typeof e ? e : "string" == typeof e ? Number(e) : 0;
    }
    function __PRIVATE_normalizeByteString(e) {
      return "string" == typeof e ? ByteString.fromBase64String(e) : ByteString.fromUint8Array(e);
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_isServerTimestamp(e) {
      var t2, n2;
      return "server_timestamp" === (null === (n2 = ((null === (t2 = null == e ? void 0 : e.mapValue) || void 0 === t2 ? void 0 : t2.fields) || {}).__type__) || void 0 === n2 ? void 0 : n2.stringValue);
    }
    function __PRIVATE_getPreviousValue(e) {
      const t2 = e.mapValue.fields.__previous_value__;
      return __PRIVATE_isServerTimestamp(t2) ? __PRIVATE_getPreviousValue(t2) : t2;
    }
    function __PRIVATE_getLocalWriteTime(e) {
      const t2 = __PRIVATE_normalizeTimestamp(e.mapValue.fields.__local_write_time__.timestampValue);
      return new Timestamp(t2.seconds, t2.nanos);
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class DatabaseInfo {
      /**
       * Constructs a DatabaseInfo using the provided host, databaseId and
       * persistenceKey.
       *
       * @param databaseId - The database to use.
       * @param appId - The Firebase App Id.
       * @param persistenceKey - A unique identifier for this Firestore's local
       * storage (used in conjunction with the databaseId).
       * @param host - The Firestore backend host to connect to.
       * @param ssl - Whether to use SSL when connecting.
       * @param forceLongPolling - Whether to use the forceLongPolling option
       * when using WebChannel as the network transport.
       * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
       * option when using WebChannel as the network transport.
       * @param longPollingOptions Options that configure long-polling.
       * @param useFetchStreams Whether to use the Fetch API instead of
       * XMLHTTPRequest
       */
      constructor(e, t2, n2, r2, i, s, o, _, a) {
        this.databaseId = e, this.appId = t2, this.persistenceKey = n2, this.host = r2, this.ssl = i, this.forceLongPolling = s, this.autoDetectLongPolling = o, this.longPollingOptions = _, this.useFetchStreams = a;
      }
    }
    class DatabaseId {
      constructor(e, t2) {
        this.projectId = e, this.database = t2 || "(default)";
      }
      static empty() {
        return new DatabaseId("", "");
      }
      get isDefaultDatabase() {
        return "(default)" === this.database;
      }
      isEqual(e) {
        return e instanceof DatabaseId && e.projectId === this.projectId && e.database === this.database;
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const re = {
      mapValue: {}
    };
    function __PRIVATE_typeOrder(e) {
      return "nullValue" in e ? 0 : "booleanValue" in e ? 1 : "integerValue" in e || "doubleValue" in e ? 2 : "timestampValue" in e ? 3 : "stringValue" in e ? 5 : "bytesValue" in e ? 6 : "referenceValue" in e ? 7 : "geoPointValue" in e ? 8 : "arrayValue" in e ? 9 : "mapValue" in e ? __PRIVATE_isServerTimestamp(e) ? 4 : __PRIVATE_isMaxValue(e) ? 9007199254740991 : __PRIVATE_isVectorValue(e) ? 10 : 11 : fail();
    }
    function __PRIVATE_valueEquals(e, t2) {
      if (e === t2) return true;
      const n2 = __PRIVATE_typeOrder(e);
      if (n2 !== __PRIVATE_typeOrder(t2)) return false;
      switch (n2) {
        case 0:
        case 9007199254740991:
          return true;
        case 1:
          return e.booleanValue === t2.booleanValue;
        case 4:
          return __PRIVATE_getLocalWriteTime(e).isEqual(__PRIVATE_getLocalWriteTime(t2));
        case 3:
          return function __PRIVATE_timestampEquals(e2, t3) {
            if ("string" == typeof e2.timestampValue && "string" == typeof t3.timestampValue && e2.timestampValue.length === t3.timestampValue.length)
              return e2.timestampValue === t3.timestampValue;
            const n3 = __PRIVATE_normalizeTimestamp(e2.timestampValue), r2 = __PRIVATE_normalizeTimestamp(t3.timestampValue);
            return n3.seconds === r2.seconds && n3.nanos === r2.nanos;
          }(e, t2);
        case 5:
          return e.stringValue === t2.stringValue;
        case 6:
          return function __PRIVATE_blobEquals(e2, t3) {
            return __PRIVATE_normalizeByteString(e2.bytesValue).isEqual(__PRIVATE_normalizeByteString(t3.bytesValue));
          }(e, t2);
        case 7:
          return e.referenceValue === t2.referenceValue;
        case 8:
          return function __PRIVATE_geoPointEquals(e2, t3) {
            return __PRIVATE_normalizeNumber(e2.geoPointValue.latitude) === __PRIVATE_normalizeNumber(t3.geoPointValue.latitude) && __PRIVATE_normalizeNumber(e2.geoPointValue.longitude) === __PRIVATE_normalizeNumber(t3.geoPointValue.longitude);
          }(e, t2);
        case 2:
          return function __PRIVATE_numberEquals(e2, t3) {
            if ("integerValue" in e2 && "integerValue" in t3) return __PRIVATE_normalizeNumber(e2.integerValue) === __PRIVATE_normalizeNumber(t3.integerValue);
            if ("doubleValue" in e2 && "doubleValue" in t3) {
              const n3 = __PRIVATE_normalizeNumber(e2.doubleValue), r2 = __PRIVATE_normalizeNumber(t3.doubleValue);
              return n3 === r2 ? __PRIVATE_isNegativeZero(n3) === __PRIVATE_isNegativeZero(r2) : isNaN(n3) && isNaN(r2);
            }
            return false;
          }(e, t2);
        case 9:
          return __PRIVATE_arrayEquals(e.arrayValue.values || [], t2.arrayValue.values || [], __PRIVATE_valueEquals);
        case 10:
        case 11:
          return function __PRIVATE_objectEquals(e2, t3) {
            const n3 = e2.mapValue.fields || {}, r2 = t3.mapValue.fields || {};
            if (__PRIVATE_objectSize(n3) !== __PRIVATE_objectSize(r2)) return false;
            for (const e3 in n3) if (n3.hasOwnProperty(e3) && (void 0 === r2[e3] || !__PRIVATE_valueEquals(n3[e3], r2[e3]))) return false;
            return true;
          }(e, t2);
        default:
          return fail();
      }
    }
    function __PRIVATE_arrayValueContains(e, t2) {
      return void 0 !== (e.values || []).find((e2) => __PRIVATE_valueEquals(e2, t2));
    }
    function __PRIVATE_valueCompare(e, t2) {
      if (e === t2) return 0;
      const n2 = __PRIVATE_typeOrder(e), r2 = __PRIVATE_typeOrder(t2);
      if (n2 !== r2) return __PRIVATE_primitiveComparator(n2, r2);
      switch (n2) {
        case 0:
        case 9007199254740991:
          return 0;
        case 1:
          return __PRIVATE_primitiveComparator(e.booleanValue, t2.booleanValue);
        case 2:
          return function __PRIVATE_compareNumbers(e2, t3) {
            const n3 = __PRIVATE_normalizeNumber(e2.integerValue || e2.doubleValue), r3 = __PRIVATE_normalizeNumber(t3.integerValue || t3.doubleValue);
            return n3 < r3 ? -1 : n3 > r3 ? 1 : n3 === r3 ? 0 : (
              // one or both are NaN.
              isNaN(n3) ? isNaN(r3) ? 0 : -1 : 1
            );
          }(e, t2);
        case 3:
          return __PRIVATE_compareTimestamps(e.timestampValue, t2.timestampValue);
        case 4:
          return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(e), __PRIVATE_getLocalWriteTime(t2));
        case 5:
          return __PRIVATE_primitiveComparator(e.stringValue, t2.stringValue);
        case 6:
          return function __PRIVATE_compareBlobs(e2, t3) {
            const n3 = __PRIVATE_normalizeByteString(e2), r3 = __PRIVATE_normalizeByteString(t3);
            return n3.compareTo(r3);
          }(e.bytesValue, t2.bytesValue);
        case 7:
          return function __PRIVATE_compareReferences(e2, t3) {
            const n3 = e2.split("/"), r3 = t3.split("/");
            for (let e3 = 0; e3 < n3.length && e3 < r3.length; e3++) {
              const t4 = __PRIVATE_primitiveComparator(n3[e3], r3[e3]);
              if (0 !== t4) return t4;
            }
            return __PRIVATE_primitiveComparator(n3.length, r3.length);
          }(e.referenceValue, t2.referenceValue);
        case 8:
          return function __PRIVATE_compareGeoPoints(e2, t3) {
            const n3 = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e2.latitude), __PRIVATE_normalizeNumber(t3.latitude));
            if (0 !== n3) return n3;
            return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e2.longitude), __PRIVATE_normalizeNumber(t3.longitude));
          }(e.geoPointValue, t2.geoPointValue);
        case 9:
          return __PRIVATE_compareArrays(e.arrayValue, t2.arrayValue);
        case 10:
          return function __PRIVATE_compareVectors(e2, t3) {
            var n3, r3, i, s;
            const o = e2.fields || {}, _ = t3.fields || {}, a = null === (n3 = o.value) || void 0 === n3 ? void 0 : n3.arrayValue, u2 = null === (r3 = _.value) || void 0 === r3 ? void 0 : r3.arrayValue, c = __PRIVATE_primitiveComparator((null === (i = null == a ? void 0 : a.values) || void 0 === i ? void 0 : i.length) || 0, (null === (s = null == u2 ? void 0 : u2.values) || void 0 === s ? void 0 : s.length) || 0);
            if (0 !== c) return c;
            return __PRIVATE_compareArrays(a, u2);
          }(e.mapValue, t2.mapValue);
        case 11:
          return function __PRIVATE_compareMaps(e2, t3) {
            if (e2 === re.mapValue && t3 === re.mapValue) return 0;
            if (e2 === re.mapValue) return 1;
            if (t3 === re.mapValue) return -1;
            const n3 = e2.fields || {}, r3 = Object.keys(n3), i = t3.fields || {}, s = Object.keys(i);
            r3.sort(), s.sort();
            for (let e3 = 0; e3 < r3.length && e3 < s.length; ++e3) {
              const t4 = __PRIVATE_primitiveComparator(r3[e3], s[e3]);
              if (0 !== t4) return t4;
              const o = __PRIVATE_valueCompare(n3[r3[e3]], i[s[e3]]);
              if (0 !== o) return o;
            }
            return __PRIVATE_primitiveComparator(r3.length, s.length);
          }(e.mapValue, t2.mapValue);
        default:
          throw fail();
      }
    }
    function __PRIVATE_compareTimestamps(e, t2) {
      if ("string" == typeof e && "string" == typeof t2 && e.length === t2.length) return __PRIVATE_primitiveComparator(e, t2);
      const n2 = __PRIVATE_normalizeTimestamp(e), r2 = __PRIVATE_normalizeTimestamp(t2), i = __PRIVATE_primitiveComparator(n2.seconds, r2.seconds);
      return 0 !== i ? i : __PRIVATE_primitiveComparator(n2.nanos, r2.nanos);
    }
    function __PRIVATE_compareArrays(e, t2) {
      const n2 = e.values || [], r2 = t2.values || [];
      for (let e2 = 0; e2 < n2.length && e2 < r2.length; ++e2) {
        const t3 = __PRIVATE_valueCompare(n2[e2], r2[e2]);
        if (t3) return t3;
      }
      return __PRIVATE_primitiveComparator(n2.length, r2.length);
    }
    function canonicalId(e) {
      return __PRIVATE_canonifyValue(e);
    }
    function __PRIVATE_canonifyValue(e) {
      return "nullValue" in e ? "null" : "booleanValue" in e ? "" + e.booleanValue : "integerValue" in e ? "" + e.integerValue : "doubleValue" in e ? "" + e.doubleValue : "timestampValue" in e ? function __PRIVATE_canonifyTimestamp(e2) {
        const t2 = __PRIVATE_normalizeTimestamp(e2);
        return `time(${t2.seconds},${t2.nanos})`;
      }(e.timestampValue) : "stringValue" in e ? e.stringValue : "bytesValue" in e ? function __PRIVATE_canonifyByteString(e2) {
        return __PRIVATE_normalizeByteString(e2).toBase64();
      }(e.bytesValue) : "referenceValue" in e ? function __PRIVATE_canonifyReference(e2) {
        return DocumentKey.fromName(e2).toString();
      }(e.referenceValue) : "geoPointValue" in e ? function __PRIVATE_canonifyGeoPoint(e2) {
        return `geo(${e2.latitude},${e2.longitude})`;
      }(e.geoPointValue) : "arrayValue" in e ? function __PRIVATE_canonifyArray(e2) {
        let t2 = "[", n2 = true;
        for (const r2 of e2.values || []) n2 ? n2 = false : t2 += ",", t2 += __PRIVATE_canonifyValue(r2);
        return t2 + "]";
      }(e.arrayValue) : "mapValue" in e ? function __PRIVATE_canonifyMap(e2) {
        const t2 = Object.keys(e2.fields || {}).sort();
        let n2 = "{", r2 = true;
        for (const i of t2) r2 ? r2 = false : n2 += ",", n2 += `${i}:${__PRIVATE_canonifyValue(e2.fields[i])}`;
        return n2 + "}";
      }(e.mapValue) : fail();
    }
    function __PRIVATE_refValue(e, t2) {
      return {
        referenceValue: `projects/${e.projectId}/databases/${e.database}/documents/${t2.path.canonicalString()}`
      };
    }
    function isInteger(e) {
      return !!e && "integerValue" in e;
    }
    function isArray(e) {
      return !!e && "arrayValue" in e;
    }
    function __PRIVATE_isNullValue(e) {
      return !!e && "nullValue" in e;
    }
    function __PRIVATE_isNanValue(e) {
      return !!e && "doubleValue" in e && isNaN(Number(e.doubleValue));
    }
    function __PRIVATE_isMapValue(e) {
      return !!e && "mapValue" in e;
    }
    function __PRIVATE_isVectorValue(e) {
      var t2, n2;
      return "__vector__" === (null === (n2 = ((null === (t2 = null == e ? void 0 : e.mapValue) || void 0 === t2 ? void 0 : t2.fields) || {}).__type__) || void 0 === n2 ? void 0 : n2.stringValue);
    }
    function __PRIVATE_deepClone(e) {
      if (e.geoPointValue) return {
        geoPointValue: Object.assign({}, e.geoPointValue)
      };
      if (e.timestampValue && "object" == typeof e.timestampValue) return {
        timestampValue: Object.assign({}, e.timestampValue)
      };
      if (e.mapValue) {
        const t2 = {
          mapValue: {
            fields: {}
          }
        };
        return forEach(e.mapValue.fields, (e2, n2) => t2.mapValue.fields[e2] = __PRIVATE_deepClone(n2)), t2;
      }
      if (e.arrayValue) {
        const t2 = {
          arrayValue: {
            values: []
          }
        };
        for (let n2 = 0; n2 < (e.arrayValue.values || []).length; ++n2) t2.arrayValue.values[n2] = __PRIVATE_deepClone(e.arrayValue.values[n2]);
        return t2;
      }
      return Object.assign({}, e);
    }
    function __PRIVATE_isMaxValue(e) {
      return "__max__" === (((e.mapValue || {}).fields || {}).__type__ || {}).stringValue;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ObjectValue {
      constructor(e) {
        this.value = e;
      }
      static empty() {
        return new ObjectValue({
          mapValue: {}
        });
      }
      /**
       * Returns the value at the given path or null.
       *
       * @param path - the path to search
       * @returns The value at the path or null if the path is not set.
       */
      field(e) {
        if (e.isEmpty()) return this.value;
        {
          let t2 = this.value;
          for (let n2 = 0; n2 < e.length - 1; ++n2) if (t2 = (t2.mapValue.fields || {})[e.get(n2)], !__PRIVATE_isMapValue(t2)) return null;
          return t2 = (t2.mapValue.fields || {})[e.lastSegment()], t2 || null;
        }
      }
      /**
       * Sets the field to the provided value.
       *
       * @param path - The field path to set.
       * @param value - The value to set.
       */
      set(e, t2) {
        this.getFieldsMap(e.popLast())[e.lastSegment()] = __PRIVATE_deepClone(t2);
      }
      /**
       * Sets the provided fields to the provided values.
       *
       * @param data - A map of fields to values (or null for deletes).
       */
      setAll(e) {
        let t2 = FieldPath$1.emptyPath(), n2 = {}, r2 = [];
        e.forEach((e2, i2) => {
          if (!t2.isImmediateParentOf(i2)) {
            const e3 = this.getFieldsMap(t2);
            this.applyChanges(e3, n2, r2), n2 = {}, r2 = [], t2 = i2.popLast();
          }
          e2 ? n2[i2.lastSegment()] = __PRIVATE_deepClone(e2) : r2.push(i2.lastSegment());
        });
        const i = this.getFieldsMap(t2);
        this.applyChanges(i, n2, r2);
      }
      /**
       * Removes the field at the specified path. If there is no field at the
       * specified path, nothing is changed.
       *
       * @param path - The field path to remove.
       */
      delete(e) {
        const t2 = this.field(e.popLast());
        __PRIVATE_isMapValue(t2) && t2.mapValue.fields && delete t2.mapValue.fields[e.lastSegment()];
      }
      isEqual(e) {
        return __PRIVATE_valueEquals(this.value, e.value);
      }
      /**
       * Returns the map that contains the leaf element of `path`. If the parent
       * entry does not yet exist, or if it is not a map, a new map will be created.
       */
      getFieldsMap(e) {
        let t2 = this.value;
        t2.mapValue.fields || (t2.mapValue = {
          fields: {}
        });
        for (let n2 = 0; n2 < e.length; ++n2) {
          let r2 = t2.mapValue.fields[e.get(n2)];
          __PRIVATE_isMapValue(r2) && r2.mapValue.fields || (r2 = {
            mapValue: {
              fields: {}
            }
          }, t2.mapValue.fields[e.get(n2)] = r2), t2 = r2;
        }
        return t2.mapValue.fields;
      }
      /**
       * Modifies `fieldsMap` by adding, replacing or deleting the specified
       * entries.
       */
      applyChanges(e, t2, n2) {
        forEach(t2, (t3, n3) => e[t3] = n3);
        for (const t3 of n2) delete e[t3];
      }
      clone() {
        return new ObjectValue(__PRIVATE_deepClone(this.value));
      }
    }
    function __PRIVATE_extractFieldMask(e) {
      const t2 = [];
      return forEach(e.fields, (e2, n2) => {
        const r2 = new FieldPath$1([e2]);
        if (__PRIVATE_isMapValue(n2)) {
          const e3 = __PRIVATE_extractFieldMask(n2.mapValue).fields;
          if (0 === e3.length)
            t2.push(r2);
          else
            for (const n3 of e3) t2.push(r2.child(n3));
        } else
          t2.push(r2);
      }), new FieldMask(t2);
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class MutableDocument {
      constructor(e, t2, n2, r2, i, s, o) {
        this.key = e, this.documentType = t2, this.version = n2, this.readTime = r2, this.createTime = i, this.data = s, this.documentState = o;
      }
      /**
       * Creates a document with no known version or data, but which can serve as
       * base document for mutations.
       */
      static newInvalidDocument(e) {
        return new MutableDocument(
          e,
          0,
          /* version */
          SnapshotVersion.min(),
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          SnapshotVersion.min(),
          ObjectValue.empty(),
          0
          /* DocumentState.SYNCED */
        );
      }
      /**
       * Creates a new document that is known to exist with the given data at the
       * given version.
       */
      static newFoundDocument(e, t2, n2, r2) {
        return new MutableDocument(
          e,
          1,
          /* version */
          t2,
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          n2,
          r2,
          0
          /* DocumentState.SYNCED */
        );
      }
      /** Creates a new document that is known to not exist at the given version. */
      static newNoDocument(e, t2) {
        return new MutableDocument(
          e,
          2,
          /* version */
          t2,
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          SnapshotVersion.min(),
          ObjectValue.empty(),
          0
          /* DocumentState.SYNCED */
        );
      }
      /**
       * Creates a new document that is known to exist at the given version but
       * whose data is not known (e.g. a document that was updated without a known
       * base document).
       */
      static newUnknownDocument(e, t2) {
        return new MutableDocument(
          e,
          3,
          /* version */
          t2,
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          SnapshotVersion.min(),
          ObjectValue.empty(),
          2
          /* DocumentState.HAS_COMMITTED_MUTATIONS */
        );
      }
      /**
       * Changes the document type to indicate that it exists and that its version
       * and data are known.
       */
      convertToFoundDocument(e, t2) {
        return !this.createTime.isEqual(SnapshotVersion.min()) || 2 !== this.documentType && 0 !== this.documentType || (this.createTime = e), this.version = e, this.documentType = 1, this.data = t2, this.documentState = 0, this;
      }
      /**
       * Changes the document type to indicate that it doesn't exist at the given
       * version.
       */
      convertToNoDocument(e) {
        return this.version = e, this.documentType = 2, this.data = ObjectValue.empty(), this.documentState = 0, this;
      }
      /**
       * Changes the document type to indicate that it exists at a given version but
       * that its data is not known (e.g. a document that was updated without a known
       * base document).
       */
      convertToUnknownDocument(e) {
        return this.version = e, this.documentType = 3, this.data = ObjectValue.empty(), this.documentState = 2, this;
      }
      setHasCommittedMutations() {
        return this.documentState = 2, this;
      }
      setHasLocalMutations() {
        return this.documentState = 1, this.version = SnapshotVersion.min(), this;
      }
      setReadTime(e) {
        return this.readTime = e, this;
      }
      get hasLocalMutations() {
        return 1 === this.documentState;
      }
      get hasCommittedMutations() {
        return 2 === this.documentState;
      }
      get hasPendingWrites() {
        return this.hasLocalMutations || this.hasCommittedMutations;
      }
      isValidDocument() {
        return 0 !== this.documentType;
      }
      isFoundDocument() {
        return 1 === this.documentType;
      }
      isNoDocument() {
        return 2 === this.documentType;
      }
      isUnknownDocument() {
        return 3 === this.documentType;
      }
      isEqual(e) {
        return e instanceof MutableDocument && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
      }
      mutableCopy() {
        return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);
      }
      toString() {
        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
      }
    }
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Bound {
      constructor(e, t2) {
        this.position = e, this.inclusive = t2;
      }
    }
    function __PRIVATE_boundCompareToDocument(e, t2, n2) {
      let r2 = 0;
      for (let i = 0; i < e.position.length; i++) {
        const s = t2[i], o = e.position[i];
        if (s.field.isKeyField()) r2 = DocumentKey.comparator(DocumentKey.fromName(o.referenceValue), n2.key);
        else {
          r2 = __PRIVATE_valueCompare(o, n2.data.field(s.field));
        }
        if ("desc" === s.dir && (r2 *= -1), 0 !== r2) break;
      }
      return r2;
    }
    function __PRIVATE_boundEquals(e, t2) {
      if (null === e) return null === t2;
      if (null === t2) return false;
      if (e.inclusive !== t2.inclusive || e.position.length !== t2.position.length) return false;
      for (let n2 = 0; n2 < e.position.length; n2++) {
        if (!__PRIVATE_valueEquals(e.position[n2], t2.position[n2])) return false;
      }
      return true;
    }
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class OrderBy {
      constructor(e, t2 = "asc") {
        this.field = e, this.dir = t2;
      }
    }
    function __PRIVATE_orderByEquals(e, t2) {
      return e.dir === t2.dir && e.field.isEqual(t2.field);
    }
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Filter {
    }
    class FieldFilter extends Filter {
      constructor(e, t2, n2) {
        super(), this.field = e, this.op = t2, this.value = n2;
      }
      /**
       * Creates a filter based on the provided arguments.
       */
      static create(e, t2, n2) {
        return e.isKeyField() ? "in" === t2 || "not-in" === t2 ? this.createKeyFieldInFilter(e, t2, n2) : new __PRIVATE_KeyFieldFilter(e, t2, n2) : "array-contains" === t2 ? new __PRIVATE_ArrayContainsFilter(e, n2) : "in" === t2 ? new __PRIVATE_InFilter(e, n2) : "not-in" === t2 ? new __PRIVATE_NotInFilter(e, n2) : "array-contains-any" === t2 ? new __PRIVATE_ArrayContainsAnyFilter(e, n2) : new FieldFilter(e, t2, n2);
      }
      static createKeyFieldInFilter(e, t2, n2) {
        return "in" === t2 ? new __PRIVATE_KeyFieldInFilter(e, n2) : new __PRIVATE_KeyFieldNotInFilter(e, n2);
      }
      matches(e) {
        const t2 = e.data.field(this.field);
        return "!=" === this.op ? null !== t2 && this.matchesComparison(__PRIVATE_valueCompare(t2, this.value)) : null !== t2 && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(t2) && this.matchesComparison(__PRIVATE_valueCompare(t2, this.value));
      }
      matchesComparison(e) {
        switch (this.op) {
          case "<":
            return e < 0;
          case "<=":
            return e <= 0;
          case "==":
            return 0 === e;
          case "!=":
            return 0 !== e;
          case ">":
            return e > 0;
          case ">=":
            return e >= 0;
          default:
            return fail();
        }
      }
      isInequality() {
        return [
          "<",
          "<=",
          ">",
          ">=",
          "!=",
          "not-in"
          /* Operator.NOT_IN */
        ].indexOf(this.op) >= 0;
      }
      getFlattenedFilters() {
        return [this];
      }
      getFilters() {
        return [this];
      }
    }
    class CompositeFilter extends Filter {
      constructor(e, t2) {
        super(), this.filters = e, this.op = t2, this.ae = null;
      }
      /**
       * Creates a filter based on the provided arguments.
       */
      static create(e, t2) {
        return new CompositeFilter(e, t2);
      }
      matches(e) {
        return __PRIVATE_compositeFilterIsConjunction(this) ? void 0 === this.filters.find((t2) => !t2.matches(e)) : void 0 !== this.filters.find((t2) => t2.matches(e));
      }
      getFlattenedFilters() {
        return null !== this.ae || (this.ae = this.filters.reduce((e, t2) => e.concat(t2.getFlattenedFilters()), [])), this.ae;
      }
      // Returns a mutable copy of `this.filters`
      getFilters() {
        return Object.assign([], this.filters);
      }
    }
    function __PRIVATE_compositeFilterIsConjunction(e) {
      return "and" === e.op;
    }
    function __PRIVATE_compositeFilterIsFlatConjunction(e) {
      return __PRIVATE_compositeFilterIsFlat(e) && __PRIVATE_compositeFilterIsConjunction(e);
    }
    function __PRIVATE_compositeFilterIsFlat(e) {
      for (const t2 of e.filters) if (t2 instanceof CompositeFilter) return false;
      return true;
    }
    function __PRIVATE_canonifyFilter(e) {
      if (e instanceof FieldFilter)
        return e.field.canonicalString() + e.op.toString() + canonicalId(e.value);
      if (__PRIVATE_compositeFilterIsFlatConjunction(e))
        return e.filters.map((e2) => __PRIVATE_canonifyFilter(e2)).join(",");
      {
        const t2 = e.filters.map((e2) => __PRIVATE_canonifyFilter(e2)).join(",");
        return `${e.op}(${t2})`;
      }
    }
    function __PRIVATE_filterEquals(e, t2) {
      return e instanceof FieldFilter ? function __PRIVATE_fieldFilterEquals(e2, t3) {
        return t3 instanceof FieldFilter && e2.op === t3.op && e2.field.isEqual(t3.field) && __PRIVATE_valueEquals(e2.value, t3.value);
      }(e, t2) : e instanceof CompositeFilter ? function __PRIVATE_compositeFilterEquals(e2, t3) {
        if (t3 instanceof CompositeFilter && e2.op === t3.op && e2.filters.length === t3.filters.length) {
          return e2.filters.reduce((e3, n2, r2) => e3 && __PRIVATE_filterEquals(n2, t3.filters[r2]), true);
        }
        return false;
      }(e, t2) : void fail();
    }
    function __PRIVATE_stringifyFilter(e) {
      return e instanceof FieldFilter ? function __PRIVATE_stringifyFieldFilter(e2) {
        return `${e2.field.canonicalString()} ${e2.op} ${canonicalId(e2.value)}`;
      }(e) : e instanceof CompositeFilter ? function __PRIVATE_stringifyCompositeFilter(e2) {
        return e2.op.toString() + " {" + e2.getFilters().map(__PRIVATE_stringifyFilter).join(" ,") + "}";
      }(e) : "Filter";
    }
    class __PRIVATE_KeyFieldFilter extends FieldFilter {
      constructor(e, t2, n2) {
        super(e, t2, n2), this.key = DocumentKey.fromName(n2.referenceValue);
      }
      matches(e) {
        const t2 = DocumentKey.comparator(e.key, this.key);
        return this.matchesComparison(t2);
      }
    }
    class __PRIVATE_KeyFieldInFilter extends FieldFilter {
      constructor(e, t2) {
        super(e, "in", t2), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("in", t2);
      }
      matches(e) {
        return this.keys.some((t2) => t2.isEqual(e.key));
      }
    }
    class __PRIVATE_KeyFieldNotInFilter extends FieldFilter {
      constructor(e, t2) {
        super(e, "not-in", t2), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("not-in", t2);
      }
      matches(e) {
        return !this.keys.some((t2) => t2.isEqual(e.key));
      }
    }
    function __PRIVATE_extractDocumentKeysFromArrayValue(e, t2) {
      var n2;
      return ((null === (n2 = t2.arrayValue) || void 0 === n2 ? void 0 : n2.values) || []).map((e2) => DocumentKey.fromName(e2.referenceValue));
    }
    class __PRIVATE_ArrayContainsFilter extends FieldFilter {
      constructor(e, t2) {
        super(e, "array-contains", t2);
      }
      matches(e) {
        const t2 = e.data.field(this.field);
        return isArray(t2) && __PRIVATE_arrayValueContains(t2.arrayValue, this.value);
      }
    }
    class __PRIVATE_InFilter extends FieldFilter {
      constructor(e, t2) {
        super(e, "in", t2);
      }
      matches(e) {
        const t2 = e.data.field(this.field);
        return null !== t2 && __PRIVATE_arrayValueContains(this.value.arrayValue, t2);
      }
    }
    class __PRIVATE_NotInFilter extends FieldFilter {
      constructor(e, t2) {
        super(e, "not-in", t2);
      }
      matches(e) {
        if (__PRIVATE_arrayValueContains(this.value.arrayValue, {
          nullValue: "NULL_VALUE"
        })) return false;
        const t2 = e.data.field(this.field);
        return null !== t2 && !__PRIVATE_arrayValueContains(this.value.arrayValue, t2);
      }
    }
    class __PRIVATE_ArrayContainsAnyFilter extends FieldFilter {
      constructor(e, t2) {
        super(e, "array-contains-any", t2);
      }
      matches(e) {
        const t2 = e.data.field(this.field);
        return !(!isArray(t2) || !t2.arrayValue.values) && t2.arrayValue.values.some((e2) => __PRIVATE_arrayValueContains(this.value.arrayValue, e2));
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_TargetImpl {
      constructor(e, t2 = null, n2 = [], r2 = [], i = null, s = null, o = null) {
        this.path = e, this.collectionGroup = t2, this.orderBy = n2, this.filters = r2, this.limit = i, this.startAt = s, this.endAt = o, this.ue = null;
      }
    }
    function __PRIVATE_newTarget(e, t2 = null, n2 = [], r2 = [], i = null, s = null, o = null) {
      return new __PRIVATE_TargetImpl(e, t2, n2, r2, i, s, o);
    }
    function __PRIVATE_canonifyTarget(e) {
      const t2 = __PRIVATE_debugCast(e);
      if (null === t2.ue) {
        let e2 = t2.path.canonicalString();
        null !== t2.collectionGroup && (e2 += "|cg:" + t2.collectionGroup), e2 += "|f:", e2 += t2.filters.map((e3) => __PRIVATE_canonifyFilter(e3)).join(","), e2 += "|ob:", e2 += t2.orderBy.map((e3) => function __PRIVATE_canonifyOrderBy(e4) {
          return e4.field.canonicalString() + e4.dir;
        }(e3)).join(","), __PRIVATE_isNullOrUndefined(t2.limit) || (e2 += "|l:", e2 += t2.limit), t2.startAt && (e2 += "|lb:", e2 += t2.startAt.inclusive ? "b:" : "a:", e2 += t2.startAt.position.map((e3) => canonicalId(e3)).join(",")), t2.endAt && (e2 += "|ub:", e2 += t2.endAt.inclusive ? "a:" : "b:", e2 += t2.endAt.position.map((e3) => canonicalId(e3)).join(",")), t2.ue = e2;
      }
      return t2.ue;
    }
    function __PRIVATE_targetEquals(e, t2) {
      if (e.limit !== t2.limit) return false;
      if (e.orderBy.length !== t2.orderBy.length) return false;
      for (let n2 = 0; n2 < e.orderBy.length; n2++) if (!__PRIVATE_orderByEquals(e.orderBy[n2], t2.orderBy[n2])) return false;
      if (e.filters.length !== t2.filters.length) return false;
      for (let n2 = 0; n2 < e.filters.length; n2++) if (!__PRIVATE_filterEquals(e.filters[n2], t2.filters[n2])) return false;
      return e.collectionGroup === t2.collectionGroup && (!!e.path.isEqual(t2.path) && (!!__PRIVATE_boundEquals(e.startAt, t2.startAt) && __PRIVATE_boundEquals(e.endAt, t2.endAt)));
    }
    function __PRIVATE_targetIsDocumentTarget(e) {
      return DocumentKey.isDocumentKey(e.path) && null === e.collectionGroup && 0 === e.filters.length;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_QueryImpl {
      /**
       * Initializes a Query with a path and optional additional query constraints.
       * Path must currently be empty if this is a collection group query.
       */
      constructor(e, t2 = null, n2 = [], r2 = [], i = null, s = "F", o = null, _ = null) {
        this.path = e, this.collectionGroup = t2, this.explicitOrderBy = n2, this.filters = r2, this.limit = i, this.limitType = s, this.startAt = o, this.endAt = _, this.ce = null, // The corresponding `Target` of this `Query` instance, for use with
        // non-aggregate queries.
        this.le = null, // The corresponding `Target` of this `Query` instance, for use with
        // aggregate queries. Unlike targets for non-aggregate queries,
        // aggregate query targets do not contain normalized order-bys, they only
        // contain explicit order-bys.
        this.he = null, this.startAt, this.endAt;
      }
    }
    function __PRIVATE_newQuery(e, t2, n2, r2, i, s, o, _) {
      return new __PRIVATE_QueryImpl(e, t2, n2, r2, i, s, o, _);
    }
    function __PRIVATE_newQueryForPath(e) {
      return new __PRIVATE_QueryImpl(e);
    }
    function __PRIVATE_queryMatchesAllDocuments(e) {
      return 0 === e.filters.length && null === e.limit && null == e.startAt && null == e.endAt && (0 === e.explicitOrderBy.length || 1 === e.explicitOrderBy.length && e.explicitOrderBy[0].field.isKeyField());
    }
    function __PRIVATE_isCollectionGroupQuery(e) {
      return null !== e.collectionGroup;
    }
    function __PRIVATE_queryNormalizedOrderBy(e) {
      const t2 = __PRIVATE_debugCast(e);
      if (null === t2.ce) {
        t2.ce = [];
        const e2 = /* @__PURE__ */ new Set();
        for (const n3 of t2.explicitOrderBy) t2.ce.push(n3), e2.add(n3.field.canonicalString());
        const n2 = t2.explicitOrderBy.length > 0 ? t2.explicitOrderBy[t2.explicitOrderBy.length - 1].dir : "asc", r2 = function __PRIVATE_getInequalityFilterFields(e3) {
          let t3 = new SortedSet(FieldPath$1.comparator);
          return e3.filters.forEach((e4) => {
            e4.getFlattenedFilters().forEach((e5) => {
              e5.isInequality() && (t3 = t3.add(e5.field));
            });
          }), t3;
        }(t2);
        r2.forEach((r3) => {
          e2.has(r3.canonicalString()) || r3.isKeyField() || t2.ce.push(new OrderBy(r3, n2));
        }), // Add the document key field to the last if it is not explicitly ordered.
        e2.has(FieldPath$1.keyField().canonicalString()) || t2.ce.push(new OrderBy(FieldPath$1.keyField(), n2));
      }
      return t2.ce;
    }
    function __PRIVATE_queryToTarget(e) {
      const t2 = __PRIVATE_debugCast(e);
      return t2.le || (t2.le = __PRIVATE__queryToTarget(t2, __PRIVATE_queryNormalizedOrderBy(e))), t2.le;
    }
    function __PRIVATE__queryToTarget(e, t2) {
      if ("F" === e.limitType) return __PRIVATE_newTarget(e.path, e.collectionGroup, t2, e.filters, e.limit, e.startAt, e.endAt);
      {
        t2 = t2.map((e2) => {
          const t3 = "desc" === e2.dir ? "asc" : "desc";
          return new OrderBy(e2.field, t3);
        });
        const n2 = e.endAt ? new Bound(e.endAt.position, e.endAt.inclusive) : null, r2 = e.startAt ? new Bound(e.startAt.position, e.startAt.inclusive) : null;
        return __PRIVATE_newTarget(e.path, e.collectionGroup, t2, e.filters, e.limit, n2, r2);
      }
    }
    function __PRIVATE_queryWithAddedFilter(e, t2) {
      const n2 = e.filters.concat([t2]);
      return new __PRIVATE_QueryImpl(e.path, e.collectionGroup, e.explicitOrderBy.slice(), n2, e.limit, e.limitType, e.startAt, e.endAt);
    }
    function __PRIVATE_queryWithLimit(e, t2, n2) {
      return new __PRIVATE_QueryImpl(e.path, e.collectionGroup, e.explicitOrderBy.slice(), e.filters.slice(), t2, n2, e.startAt, e.endAt);
    }
    function __PRIVATE_queryEquals(e, t2) {
      return __PRIVATE_targetEquals(__PRIVATE_queryToTarget(e), __PRIVATE_queryToTarget(t2)) && e.limitType === t2.limitType;
    }
    function __PRIVATE_canonifyQuery(e) {
      return `${__PRIVATE_canonifyTarget(__PRIVATE_queryToTarget(e))}|lt:${e.limitType}`;
    }
    function __PRIVATE_stringifyQuery(e) {
      return `Query(target=${function __PRIVATE_stringifyTarget(e2) {
        let t2 = e2.path.canonicalString();
        return null !== e2.collectionGroup && (t2 += " collectionGroup=" + e2.collectionGroup), e2.filters.length > 0 && (t2 += `, filters: [${e2.filters.map((e3) => __PRIVATE_stringifyFilter(e3)).join(", ")}]`), __PRIVATE_isNullOrUndefined(e2.limit) || (t2 += ", limit: " + e2.limit), e2.orderBy.length > 0 && (t2 += `, orderBy: [${e2.orderBy.map((e3) => function __PRIVATE_stringifyOrderBy(e4) {
          return `${e4.field.canonicalString()} (${e4.dir})`;
        }(e3)).join(", ")}]`), e2.startAt && (t2 += ", startAt: ", t2 += e2.startAt.inclusive ? "b:" : "a:", t2 += e2.startAt.position.map((e3) => canonicalId(e3)).join(",")), e2.endAt && (t2 += ", endAt: ", t2 += e2.endAt.inclusive ? "a:" : "b:", t2 += e2.endAt.position.map((e3) => canonicalId(e3)).join(",")), `Target(${t2})`;
      }(__PRIVATE_queryToTarget(e))}; limitType=${e.limitType})`;
    }
    function __PRIVATE_queryMatches(e, t2) {
      return t2.isFoundDocument() && function __PRIVATE_queryMatchesPathAndCollectionGroup(e2, t3) {
        const n2 = t3.key.path;
        return null !== e2.collectionGroup ? t3.key.hasCollectionId(e2.collectionGroup) && e2.path.isPrefixOf(n2) : DocumentKey.isDocumentKey(e2.path) ? e2.path.isEqual(n2) : e2.path.isImmediateParentOf(n2);
      }(e, t2) && function __PRIVATE_queryMatchesOrderBy(e2, t3) {
        for (const n2 of __PRIVATE_queryNormalizedOrderBy(e2))
          if (!n2.field.isKeyField() && null === t3.data.field(n2.field)) return false;
        return true;
      }(e, t2) && function __PRIVATE_queryMatchesFilters(e2, t3) {
        for (const n2 of e2.filters) if (!n2.matches(t3)) return false;
        return true;
      }(e, t2) && function __PRIVATE_queryMatchesBounds(e2, t3) {
        if (e2.startAt && !/**
        * Returns true if a document sorts before a bound using the provided sort
        * order.
        */
        function __PRIVATE_boundSortsBeforeDocument(e3, t4, n2) {
          const r2 = __PRIVATE_boundCompareToDocument(e3, t4, n2);
          return e3.inclusive ? r2 <= 0 : r2 < 0;
        }(e2.startAt, __PRIVATE_queryNormalizedOrderBy(e2), t3)) return false;
        if (e2.endAt && !function __PRIVATE_boundSortsAfterDocument(e3, t4, n2) {
          const r2 = __PRIVATE_boundCompareToDocument(e3, t4, n2);
          return e3.inclusive ? r2 >= 0 : r2 > 0;
        }(e2.endAt, __PRIVATE_queryNormalizedOrderBy(e2), t3)) return false;
        return true;
      }(e, t2);
    }
    function __PRIVATE_queryCollectionGroup(e) {
      return e.collectionGroup || (e.path.length % 2 == 1 ? e.path.lastSegment() : e.path.get(e.path.length - 2));
    }
    function __PRIVATE_newQueryComparator(e) {
      return (t2, n2) => {
        let r2 = false;
        for (const i of __PRIVATE_queryNormalizedOrderBy(e)) {
          const e2 = __PRIVATE_compareDocs(i, t2, n2);
          if (0 !== e2) return e2;
          r2 = r2 || i.field.isKeyField();
        }
        return 0;
      };
    }
    function __PRIVATE_compareDocs(e, t2, n2) {
      const r2 = e.field.isKeyField() ? DocumentKey.comparator(t2.key, n2.key) : function __PRIVATE_compareDocumentsByField(e2, t3, n3) {
        const r3 = t3.data.field(e2), i = n3.data.field(e2);
        return null !== r3 && null !== i ? __PRIVATE_valueCompare(r3, i) : fail();
      }(e.field, t2, n2);
      switch (e.dir) {
        case "asc":
          return r2;
        case "desc":
          return -1 * r2;
        default:
          return fail();
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ObjectMap {
      constructor(e, t2) {
        this.mapKeyFn = e, this.equalsFn = t2, /**
         * The inner map for a key/value pair. Due to the possibility of collisions we
         * keep a list of entries that we do a linear search through to find an actual
         * match. Note that collisions should be rare, so we still expect near
         * constant time lookups in practice.
         */
        this.inner = {}, /** The number of entries stored in the map */
        this.innerSize = 0;
      }
      /** Get a value for this key, or undefined if it does not exist. */
      get(e) {
        const t2 = this.mapKeyFn(e), n2 = this.inner[t2];
        if (void 0 !== n2) {
          for (const [t3, r2] of n2) if (this.equalsFn(t3, e)) return r2;
        }
      }
      has(e) {
        return void 0 !== this.get(e);
      }
      /** Put this key and value in the map. */
      set(e, t2) {
        const n2 = this.mapKeyFn(e), r2 = this.inner[n2];
        if (void 0 === r2) return this.inner[n2] = [[e, t2]], void this.innerSize++;
        for (let n3 = 0; n3 < r2.length; n3++) if (this.equalsFn(r2[n3][0], e))
          return void (r2[n3] = [e, t2]);
        r2.push([e, t2]), this.innerSize++;
      }
      /**
       * Remove this key from the map. Returns a boolean if anything was deleted.
       */
      delete(e) {
        const t2 = this.mapKeyFn(e), n2 = this.inner[t2];
        if (void 0 === n2) return false;
        for (let r2 = 0; r2 < n2.length; r2++) if (this.equalsFn(n2[r2][0], e)) return 1 === n2.length ? delete this.inner[t2] : n2.splice(r2, 1), this.innerSize--, true;
        return false;
      }
      forEach(e) {
        forEach(this.inner, (t2, n2) => {
          for (const [t3, r2] of n2) e(t3, r2);
        });
      }
      isEmpty() {
        return isEmpty(this.inner);
      }
      size() {
        return this.innerSize;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const oe = new SortedMap$1(DocumentKey.comparator);
    function __PRIVATE_mutableDocumentMap() {
      return oe;
    }
    const _e = new SortedMap$1(DocumentKey.comparator);
    function documentMap(...e) {
      let t2 = _e;
      for (const n2 of e) t2 = t2.insert(n2.key, n2);
      return t2;
    }
    function __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e) {
      let t2 = _e;
      return e.forEach((e2, n2) => t2 = t2.insert(e2, n2.overlayedDocument)), t2;
    }
    function __PRIVATE_newOverlayMap() {
      return __PRIVATE_newDocumentKeyMap();
    }
    function __PRIVATE_newMutationMap() {
      return __PRIVATE_newDocumentKeyMap();
    }
    function __PRIVATE_newDocumentKeyMap() {
      return new ObjectMap((e) => e.toString(), (e, t2) => e.isEqual(t2));
    }
    const ae = new SortedMap$1(DocumentKey.comparator);
    const ue = new SortedSet(DocumentKey.comparator);
    function __PRIVATE_documentKeySet(...e) {
      let t2 = ue;
      for (const n2 of e) t2 = t2.add(n2);
      return t2;
    }
    const ce = new SortedSet(__PRIVATE_primitiveComparator);
    function __PRIVATE_targetIdSet() {
      return ce;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_toDouble(e, t2) {
      if (e.useProto3Json) {
        if (isNaN(t2)) return {
          doubleValue: "NaN"
        };
        if (t2 === 1 / 0) return {
          doubleValue: "Infinity"
        };
        if (t2 === -1 / 0) return {
          doubleValue: "-Infinity"
        };
      }
      return {
        doubleValue: __PRIVATE_isNegativeZero(t2) ? "-0" : t2
      };
    }
    function __PRIVATE_toInteger(e) {
      return {
        integerValue: "" + e
      };
    }
    function toNumber(e, t2) {
      return isSafeInteger(t2) ? __PRIVATE_toInteger(t2) : __PRIVATE_toDouble(e, t2);
    }
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class TransformOperation {
      constructor() {
        this._ = void 0;
      }
    }
    function __PRIVATE_applyTransformOperationToLocalView(e, t2, n2) {
      return e instanceof __PRIVATE_ServerTimestampTransform ? function serverTimestamp$1(e2, t3) {
        const n3 = {
          fields: {
            __type__: {
              stringValue: "server_timestamp"
            },
            __local_write_time__: {
              timestampValue: {
                seconds: e2.seconds,
                nanos: e2.nanoseconds
              }
            }
          }
        };
        return t3 && __PRIVATE_isServerTimestamp(t3) && (t3 = __PRIVATE_getPreviousValue(t3)), t3 && (n3.fields.__previous_value__ = t3), {
          mapValue: n3
        };
      }(n2, t2) : e instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e, t2) : e instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e, t2) : function __PRIVATE_applyNumericIncrementTransformOperationToLocalView(e2, t3) {
        const n3 = __PRIVATE_computeTransformOperationBaseValue(e2, t3), r2 = asNumber(n3) + asNumber(e2.Pe);
        return isInteger(n3) && isInteger(e2.Pe) ? __PRIVATE_toInteger(r2) : __PRIVATE_toDouble(e2.serializer, r2);
      }(e, t2);
    }
    function __PRIVATE_applyTransformOperationToRemoteDocument(e, t2, n2) {
      return e instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e, t2) : e instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e, t2) : n2;
    }
    function __PRIVATE_computeTransformOperationBaseValue(e, t2) {
      return e instanceof __PRIVATE_NumericIncrementTransformOperation ? (
        /** Returns true if `value` is either an IntegerValue or a DoubleValue. */
        function __PRIVATE_isNumber(e2) {
          return isInteger(e2) || function __PRIVATE_isDouble(e3) {
            return !!e3 && "doubleValue" in e3;
          }(e2);
        }(t2) ? t2 : {
          integerValue: 0
        }
      ) : null;
    }
    class __PRIVATE_ServerTimestampTransform extends TransformOperation {
    }
    class __PRIVATE_ArrayUnionTransformOperation extends TransformOperation {
      constructor(e) {
        super(), this.elements = e;
      }
    }
    function __PRIVATE_applyArrayUnionTransformOperation(e, t2) {
      const n2 = __PRIVATE_coercedFieldValuesArray(t2);
      for (const t3 of e.elements) n2.some((e2) => __PRIVATE_valueEquals(e2, t3)) || n2.push(t3);
      return {
        arrayValue: {
          values: n2
        }
      };
    }
    class __PRIVATE_ArrayRemoveTransformOperation extends TransformOperation {
      constructor(e) {
        super(), this.elements = e;
      }
    }
    function __PRIVATE_applyArrayRemoveTransformOperation(e, t2) {
      let n2 = __PRIVATE_coercedFieldValuesArray(t2);
      for (const t3 of e.elements) n2 = n2.filter((e2) => !__PRIVATE_valueEquals(e2, t3));
      return {
        arrayValue: {
          values: n2
        }
      };
    }
    class __PRIVATE_NumericIncrementTransformOperation extends TransformOperation {
      constructor(e, t2) {
        super(), this.serializer = e, this.Pe = t2;
      }
    }
    function asNumber(e) {
      return __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);
    }
    function __PRIVATE_coercedFieldValuesArray(e) {
      return isArray(e) && e.arrayValue.values ? e.arrayValue.values.slice() : [];
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FieldTransform {
      constructor(e, t2) {
        this.field = e, this.transform = t2;
      }
    }
    function __PRIVATE_fieldTransformEquals(e, t2) {
      return e.field.isEqual(t2.field) && function __PRIVATE_transformOperationEquals(e2, t3) {
        return e2 instanceof __PRIVATE_ArrayUnionTransformOperation && t3 instanceof __PRIVATE_ArrayUnionTransformOperation || e2 instanceof __PRIVATE_ArrayRemoveTransformOperation && t3 instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_arrayEquals(e2.elements, t3.elements, __PRIVATE_valueEquals) : e2 instanceof __PRIVATE_NumericIncrementTransformOperation && t3 instanceof __PRIVATE_NumericIncrementTransformOperation ? __PRIVATE_valueEquals(e2.Pe, t3.Pe) : e2 instanceof __PRIVATE_ServerTimestampTransform && t3 instanceof __PRIVATE_ServerTimestampTransform;
      }(e.transform, t2.transform);
    }
    class MutationResult {
      constructor(e, t2) {
        this.version = e, this.transformResults = t2;
      }
    }
    class Precondition {
      constructor(e, t2) {
        this.updateTime = e, this.exists = t2;
      }
      /** Creates a new empty Precondition. */
      static none() {
        return new Precondition();
      }
      /** Creates a new Precondition with an exists flag. */
      static exists(e) {
        return new Precondition(void 0, e);
      }
      /** Creates a new Precondition based on a version a document exists at. */
      static updateTime(e) {
        return new Precondition(e);
      }
      /** Returns whether this Precondition is empty. */
      get isNone() {
        return void 0 === this.updateTime && void 0 === this.exists;
      }
      isEqual(e) {
        return this.exists === e.exists && (this.updateTime ? !!e.updateTime && this.updateTime.isEqual(e.updateTime) : !e.updateTime);
      }
    }
    function __PRIVATE_preconditionIsValidForDocument(e, t2) {
      return void 0 !== e.updateTime ? t2.isFoundDocument() && t2.version.isEqual(e.updateTime) : void 0 === e.exists || e.exists === t2.isFoundDocument();
    }
    class Mutation {
    }
    function __PRIVATE_calculateOverlayMutation(e, t2) {
      if (!e.hasLocalMutations || t2 && 0 === t2.fields.length) return null;
      if (null === t2) return e.isNoDocument() ? new __PRIVATE_DeleteMutation(e.key, Precondition.none()) : new __PRIVATE_SetMutation(e.key, e.data, Precondition.none());
      {
        const n2 = e.data, r2 = ObjectValue.empty();
        let i = new SortedSet(FieldPath$1.comparator);
        for (let e2 of t2.fields) if (!i.has(e2)) {
          let t3 = n2.field(e2);
          null === t3 && e2.length > 1 && (e2 = e2.popLast(), t3 = n2.field(e2)), null === t3 ? r2.delete(e2) : r2.set(e2, t3), i = i.add(e2);
        }
        return new __PRIVATE_PatchMutation(e.key, r2, new FieldMask(i.toArray()), Precondition.none());
      }
    }
    function __PRIVATE_mutationApplyToRemoteDocument(e, t2, n2) {
      e instanceof __PRIVATE_SetMutation ? function __PRIVATE_setMutationApplyToRemoteDocument(e2, t3, n3) {
        const r2 = e2.value.clone(), i = __PRIVATE_serverTransformResults(e2.fieldTransforms, t3, n3.transformResults);
        r2.setAll(i), t3.convertToFoundDocument(n3.version, r2).setHasCommittedMutations();
      }(e, t2, n2) : e instanceof __PRIVATE_PatchMutation ? function __PRIVATE_patchMutationApplyToRemoteDocument(e2, t3, n3) {
        if (!__PRIVATE_preconditionIsValidForDocument(e2.precondition, t3))
          return void t3.convertToUnknownDocument(n3.version);
        const r2 = __PRIVATE_serverTransformResults(e2.fieldTransforms, t3, n3.transformResults), i = t3.data;
        i.setAll(__PRIVATE_getPatch(e2)), i.setAll(r2), t3.convertToFoundDocument(n3.version, i).setHasCommittedMutations();
      }(e, t2, n2) : function __PRIVATE_deleteMutationApplyToRemoteDocument(e2, t3, n3) {
        t3.convertToNoDocument(n3.version).setHasCommittedMutations();
      }(0, t2, n2);
    }
    function __PRIVATE_mutationApplyToLocalView(e, t2, n2, r2) {
      return e instanceof __PRIVATE_SetMutation ? function __PRIVATE_setMutationApplyToLocalView(e2, t3, n3, r3) {
        if (!__PRIVATE_preconditionIsValidForDocument(e2.precondition, t3))
          return n3;
        const i = e2.value.clone(), s = __PRIVATE_localTransformResults(e2.fieldTransforms, r3, t3);
        return i.setAll(s), t3.convertToFoundDocument(t3.version, i).setHasLocalMutations(), null;
      }(e, t2, n2, r2) : e instanceof __PRIVATE_PatchMutation ? function __PRIVATE_patchMutationApplyToLocalView(e2, t3, n3, r3) {
        if (!__PRIVATE_preconditionIsValidForDocument(e2.precondition, t3)) return n3;
        const i = __PRIVATE_localTransformResults(e2.fieldTransforms, r3, t3), s = t3.data;
        if (s.setAll(__PRIVATE_getPatch(e2)), s.setAll(i), t3.convertToFoundDocument(t3.version, s).setHasLocalMutations(), null === n3) return null;
        return n3.unionWith(e2.fieldMask.fields).unionWith(e2.fieldTransforms.map((e3) => e3.field));
      }(e, t2, n2, r2) : function __PRIVATE_deleteMutationApplyToLocalView(e2, t3, n3) {
        if (__PRIVATE_preconditionIsValidForDocument(e2.precondition, t3)) return t3.convertToNoDocument(t3.version).setHasLocalMutations(), null;
        return n3;
      }(e, t2, n2);
    }
    function __PRIVATE_mutationExtractBaseValue(e, t2) {
      let n2 = null;
      for (const r2 of e.fieldTransforms) {
        const e2 = t2.data.field(r2.field), i = __PRIVATE_computeTransformOperationBaseValue(r2.transform, e2 || null);
        null != i && (null === n2 && (n2 = ObjectValue.empty()), n2.set(r2.field, i));
      }
      return n2 || null;
    }
    function __PRIVATE_mutationEquals(e, t2) {
      return e.type === t2.type && (!!e.key.isEqual(t2.key) && (!!e.precondition.isEqual(t2.precondition) && (!!function __PRIVATE_fieldTransformsAreEqual(e2, t3) {
        return void 0 === e2 && void 0 === t3 || !(!e2 || !t3) && __PRIVATE_arrayEquals(e2, t3, (e3, t4) => __PRIVATE_fieldTransformEquals(e3, t4));
      }(e.fieldTransforms, t2.fieldTransforms) && (0 === e.type ? e.value.isEqual(t2.value) : 1 !== e.type || e.data.isEqual(t2.data) && e.fieldMask.isEqual(t2.fieldMask)))));
    }
    class __PRIVATE_SetMutation extends Mutation {
      constructor(e, t2, n2, r2 = []) {
        super(), this.key = e, this.value = t2, this.precondition = n2, this.fieldTransforms = r2, this.type = 0;
      }
      getFieldMask() {
        return null;
      }
    }
    class __PRIVATE_PatchMutation extends Mutation {
      constructor(e, t2, n2, r2, i = []) {
        super(), this.key = e, this.data = t2, this.fieldMask = n2, this.precondition = r2, this.fieldTransforms = i, this.type = 1;
      }
      getFieldMask() {
        return this.fieldMask;
      }
    }
    function __PRIVATE_getPatch(e) {
      const t2 = /* @__PURE__ */ new Map();
      return e.fieldMask.fields.forEach((n2) => {
        if (!n2.isEmpty()) {
          const r2 = e.data.field(n2);
          t2.set(n2, r2);
        }
      }), t2;
    }
    function __PRIVATE_serverTransformResults(e, t2, n2) {
      const r2 = /* @__PURE__ */ new Map();
      __PRIVATE_hardAssert(e.length === n2.length);
      for (let i = 0; i < n2.length; i++) {
        const s = e[i], o = s.transform, _ = t2.data.field(s.field);
        r2.set(s.field, __PRIVATE_applyTransformOperationToRemoteDocument(o, _, n2[i]));
      }
      return r2;
    }
    function __PRIVATE_localTransformResults(e, t2, n2) {
      const r2 = /* @__PURE__ */ new Map();
      for (const i of e) {
        const e2 = i.transform, s = n2.data.field(i.field);
        r2.set(i.field, __PRIVATE_applyTransformOperationToLocalView(e2, s, t2));
      }
      return r2;
    }
    class __PRIVATE_DeleteMutation extends Mutation {
      constructor(e, t2) {
        super(), this.key = e, this.precondition = t2, this.type = 2, this.fieldTransforms = [];
      }
      getFieldMask() {
        return null;
      }
    }
    class __PRIVATE_VerifyMutation extends Mutation {
      constructor(e, t2) {
        super(), this.key = e, this.precondition = t2, this.type = 3, this.fieldTransforms = [];
      }
      getFieldMask() {
        return null;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class MutationBatch {
      /**
       * @param batchId - The unique ID of this mutation batch.
       * @param localWriteTime - The original write time of this mutation.
       * @param baseMutations - Mutations that are used to populate the base
       * values when this mutation is applied locally. This can be used to locally
       * overwrite values that are persisted in the remote document cache. Base
       * mutations are never sent to the backend.
       * @param mutations - The user-provided mutations in this mutation batch.
       * User-provided mutations are applied both locally and remotely on the
       * backend.
       */
      constructor(e, t2, n2, r2) {
        this.batchId = e, this.localWriteTime = t2, this.baseMutations = n2, this.mutations = r2;
      }
      /**
       * Applies all the mutations in this MutationBatch to the specified document
       * to compute the state of the remote document
       *
       * @param document - The document to apply mutations to.
       * @param batchResult - The result of applying the MutationBatch to the
       * backend.
       */
      applyToRemoteDocument(e, t2) {
        const n2 = t2.mutationResults;
        for (let t3 = 0; t3 < this.mutations.length; t3++) {
          const r2 = this.mutations[t3];
          if (r2.key.isEqual(e.key)) {
            __PRIVATE_mutationApplyToRemoteDocument(r2, e, n2[t3]);
          }
        }
      }
      /**
       * Computes the local view of a document given all the mutations in this
       * batch.
       *
       * @param document - The document to apply mutations to.
       * @param mutatedFields - Fields that have been updated before applying this mutation batch.
       * @returns A `FieldMask` representing all the fields that are mutated.
       */
      applyToLocalView(e, t2) {
        for (const n2 of this.baseMutations) n2.key.isEqual(e.key) && (t2 = __PRIVATE_mutationApplyToLocalView(n2, e, t2, this.localWriteTime));
        for (const n2 of this.mutations) n2.key.isEqual(e.key) && (t2 = __PRIVATE_mutationApplyToLocalView(n2, e, t2, this.localWriteTime));
        return t2;
      }
      /**
       * Computes the local view for all provided documents given the mutations in
       * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
       * replace all the mutation applications.
       */
      applyToLocalDocumentSet(e, t2) {
        const n2 = __PRIVATE_newMutationMap();
        return this.mutations.forEach((r2) => {
          const i = e.get(r2.key), s = i.overlayedDocument;
          let o = this.applyToLocalView(s, i.mutatedFields);
          o = t2.has(r2.key) ? null : o;
          const _ = __PRIVATE_calculateOverlayMutation(s, o);
          null !== _ && n2.set(r2.key, _), s.isValidDocument() || s.convertToNoDocument(SnapshotVersion.min());
        }), n2;
      }
      keys() {
        return this.mutations.reduce((e, t2) => e.add(t2.key), __PRIVATE_documentKeySet());
      }
      isEqual(e) {
        return this.batchId === e.batchId && __PRIVATE_arrayEquals(this.mutations, e.mutations, (e2, t2) => __PRIVATE_mutationEquals(e2, t2)) && __PRIVATE_arrayEquals(this.baseMutations, e.baseMutations, (e2, t2) => __PRIVATE_mutationEquals(e2, t2));
      }
    }
    class MutationBatchResult {
      constructor(e, t2, n2, r2) {
        this.batch = e, this.commitVersion = t2, this.mutationResults = n2, this.docVersions = r2;
      }
      /**
       * Creates a new MutationBatchResult for the given batch and results. There
       * must be one result for each mutation in the batch. This static factory
       * caches a document=&gt;version mapping (docVersions).
       */
      static from(e, t2, n2) {
        __PRIVATE_hardAssert(e.mutations.length === n2.length);
        let r2 = /* @__PURE__ */ function __PRIVATE_documentVersionMap() {
          return ae;
        }();
        const i = e.mutations;
        for (let e2 = 0; e2 < i.length; e2++) r2 = r2.insert(i[e2].key, n2[e2].version);
        return new MutationBatchResult(e, t2, n2, r2);
      }
    }
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Overlay {
      constructor(e, t2) {
        this.largestBatchId = e, this.mutation = t2;
      }
      getKey() {
        return this.mutation.key;
      }
      isEqual(e) {
        return null !== e && this.mutation === e.mutation;
      }
      toString() {
        return `Overlay{
      largestBatchId: ${this.largestBatchId},
      mutation: ${this.mutation.toString()}
    }`;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ExistenceFilter {
      constructor(e, t2) {
        this.count = e, this.unchangedNames = t2;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var le, he;
    function __PRIVATE_isPermanentError(e) {
      switch (e) {
        default:
          return fail();
        case D.CANCELLED:
        case D.UNKNOWN:
        case D.DEADLINE_EXCEEDED:
        case D.RESOURCE_EXHAUSTED:
        case D.INTERNAL:
        case D.UNAVAILABLE:
        case D.UNAUTHENTICATED:
          return false;
        case D.INVALID_ARGUMENT:
        case D.NOT_FOUND:
        case D.ALREADY_EXISTS:
        case D.PERMISSION_DENIED:
        case D.FAILED_PRECONDITION:
        case D.ABORTED:
        case D.OUT_OF_RANGE:
        case D.UNIMPLEMENTED:
        case D.DATA_LOSS:
          return true;
      }
    }
    function __PRIVATE_mapCodeFromRpcCode(e) {
      if (void 0 === e)
        return __PRIVATE_logError("GRPC error has no .code"), D.UNKNOWN;
      switch (e) {
        case le.OK:
          return D.OK;
        case le.CANCELLED:
          return D.CANCELLED;
        case le.UNKNOWN:
          return D.UNKNOWN;
        case le.DEADLINE_EXCEEDED:
          return D.DEADLINE_EXCEEDED;
        case le.RESOURCE_EXHAUSTED:
          return D.RESOURCE_EXHAUSTED;
        case le.INTERNAL:
          return D.INTERNAL;
        case le.UNAVAILABLE:
          return D.UNAVAILABLE;
        case le.UNAUTHENTICATED:
          return D.UNAUTHENTICATED;
        case le.INVALID_ARGUMENT:
          return D.INVALID_ARGUMENT;
        case le.NOT_FOUND:
          return D.NOT_FOUND;
        case le.ALREADY_EXISTS:
          return D.ALREADY_EXISTS;
        case le.PERMISSION_DENIED:
          return D.PERMISSION_DENIED;
        case le.FAILED_PRECONDITION:
          return D.FAILED_PRECONDITION;
        case le.ABORTED:
          return D.ABORTED;
        case le.OUT_OF_RANGE:
          return D.OUT_OF_RANGE;
        case le.UNIMPLEMENTED:
          return D.UNIMPLEMENTED;
        case le.DATA_LOSS:
          return D.DATA_LOSS;
        default:
          return fail();
      }
    }
    (he = le || (le = {}))[he.OK = 0] = "OK", he[he.CANCELLED = 1] = "CANCELLED", he[he.UNKNOWN = 2] = "UNKNOWN", he[he.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", he[he.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", he[he.NOT_FOUND = 5] = "NOT_FOUND", he[he.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", he[he.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", he[he.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", he[he.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", he[he.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", he[he.ABORTED = 10] = "ABORTED", he[he.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", he[he.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", he[he.INTERNAL = 13] = "INTERNAL", he[he.UNAVAILABLE = 14] = "UNAVAILABLE", he[he.DATA_LOSS = 15] = "DATA_LOSS";
    /**
     * @license
     * Copyright 2023 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_newTextEncoder() {
      return new TextEncoder();
    }
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const Ie = new Integer([4294967295, 4294967295], 0);
    function __PRIVATE_getMd5HashValue(e) {
      const t2 = __PRIVATE_newTextEncoder().encode(e), n2 = new Md5();
      return n2.update(t2), new Uint8Array(n2.digest());
    }
    function __PRIVATE_get64BitUints(e) {
      const t2 = new DataView(e.buffer), n2 = t2.getUint32(
        0,
        /* littleEndian= */
        true
      ), r2 = t2.getUint32(
        4,
        /* littleEndian= */
        true
      ), i = t2.getUint32(
        8,
        /* littleEndian= */
        true
      ), s = t2.getUint32(
        12,
        /* littleEndian= */
        true
      );
      return [new Integer([n2, r2], 0), new Integer([i, s], 0)];
    }
    class BloomFilter {
      constructor(e, t2, n2) {
        if (this.bitmap = e, this.padding = t2, this.hashCount = n2, t2 < 0 || t2 >= 8) throw new __PRIVATE_BloomFilterError(`Invalid padding: ${t2}`);
        if (n2 < 0) throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n2}`);
        if (e.length > 0 && 0 === this.hashCount)
          throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n2}`);
        if (0 === e.length && 0 !== t2)
          throw new __PRIVATE_BloomFilterError(`Invalid padding when bitmap length is 0: ${t2}`);
        this.Ie = 8 * e.length - t2, // Set the bit count in Integer to avoid repetition in mightContain().
        this.Te = Integer.fromNumber(this.Ie);
      }
      // Calculate the ith hash value based on the hashed 64bit integers,
      // and calculate its corresponding bit index in the bitmap to be checked.
      Ee(e, t2, n2) {
        let r2 = e.add(t2.multiply(Integer.fromNumber(n2)));
        return 1 === r2.compare(Ie) && (r2 = new Integer([r2.getBits(0), r2.getBits(1)], 0)), r2.modulo(this.Te).toNumber();
      }
      // Return whether the bit on the given index in the bitmap is set to 1.
      de(e) {
        return 0 != (this.bitmap[Math.floor(e / 8)] & 1 << e % 8);
      }
      mightContain(e) {
        if (0 === this.Ie) return false;
        const t2 = __PRIVATE_getMd5HashValue(e), [n2, r2] = __PRIVATE_get64BitUints(t2);
        for (let e2 = 0; e2 < this.hashCount; e2++) {
          const t3 = this.Ee(n2, r2, e2);
          if (!this.de(t3)) return false;
        }
        return true;
      }
      /** Create bloom filter for testing purposes only. */
      static create(e, t2, n2) {
        const r2 = e % 8 == 0 ? 0 : 8 - e % 8, i = new Uint8Array(Math.ceil(e / 8)), s = new BloomFilter(i, r2, t2);
        return n2.forEach((e2) => s.insert(e2)), s;
      }
      insert(e) {
        if (0 === this.Ie) return;
        const t2 = __PRIVATE_getMd5HashValue(e), [n2, r2] = __PRIVATE_get64BitUints(t2);
        for (let e2 = 0; e2 < this.hashCount; e2++) {
          const t3 = this.Ee(n2, r2, e2);
          this.Ae(t3);
        }
      }
      Ae(e) {
        const t2 = Math.floor(e / 8), n2 = e % 8;
        this.bitmap[t2] |= 1 << n2;
      }
    }
    class __PRIVATE_BloomFilterError extends Error {
      constructor() {
        super(...arguments), this.name = "BloomFilterError";
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class RemoteEvent {
      constructor(e, t2, n2, r2, i) {
        this.snapshotVersion = e, this.targetChanges = t2, this.targetMismatches = n2, this.documentUpdates = r2, this.resolvedLimboDocuments = i;
      }
      /**
       * HACK: Views require RemoteEvents in order to determine whether the view is
       * CURRENT, but secondary tabs don't receive remote events. So this method is
       * used to create a synthesized RemoteEvent that can be used to apply a
       * CURRENT status change to a View, for queries executed in a different tab.
       */
      // PORTING NOTE: Multi-tab only
      static createSynthesizedRemoteEventForCurrentChange(e, t2, n2) {
        const r2 = /* @__PURE__ */ new Map();
        return r2.set(e, TargetChange.createSynthesizedTargetChangeForCurrentChange(e, t2, n2)), new RemoteEvent(SnapshotVersion.min(), r2, new SortedMap$1(__PRIVATE_primitiveComparator), __PRIVATE_mutableDocumentMap(), __PRIVATE_documentKeySet());
      }
    }
    class TargetChange {
      constructor(e, t2, n2, r2, i) {
        this.resumeToken = e, this.current = t2, this.addedDocuments = n2, this.modifiedDocuments = r2, this.removedDocuments = i;
      }
      /**
       * This method is used to create a synthesized TargetChanges that can be used to
       * apply a CURRENT status change to a View (for queries executed in a different
       * tab) or for new queries (to raise snapshots with correct CURRENT status).
       */
      static createSynthesizedTargetChangeForCurrentChange(e, t2, n2) {
        return new TargetChange(n2, t2, __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet());
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_DocumentWatchChange {
      constructor(e, t2, n2, r2) {
        this.Re = e, this.removedTargetIds = t2, this.key = n2, this.Ve = r2;
      }
    }
    class __PRIVATE_ExistenceFilterChange {
      constructor(e, t2) {
        this.targetId = e, this.me = t2;
      }
    }
    class __PRIVATE_WatchTargetChange {
      constructor(e, t2, n2 = ByteString.EMPTY_BYTE_STRING, r2 = null) {
        this.state = e, this.targetIds = t2, this.resumeToken = n2, this.cause = r2;
      }
    }
    class __PRIVATE_TargetState {
      constructor() {
        this.fe = 0, /**
         * Keeps track of the document changes since the last raised snapshot.
         *
         * These changes are continuously updated as we receive document updates and
         * always reflect the current set of changes against the last issued snapshot.
         */
        this.ge = __PRIVATE_snapshotChangesMap(), /** See public getters for explanations of these fields. */
        this.pe = ByteString.EMPTY_BYTE_STRING, this.ye = false, /**
         * Whether this target state should be included in the next snapshot. We
         * initialize to true so that newly-added targets are included in the next
         * RemoteEvent.
         */
        this.we = true;
      }
      /**
       * Whether this target has been marked 'current'.
       *
       * 'Current' has special meaning in the RPC protocol: It implies that the
       * Watch backend has sent us all changes up to the point at which the target
       * was added and that the target is consistent with the rest of the watch
       * stream.
       */
      get current() {
        return this.ye;
      }
      /** The last resume token sent to us for this target. */
      get resumeToken() {
        return this.pe;
      }
      /** Whether this target has pending target adds or target removes. */
      get Se() {
        return 0 !== this.fe;
      }
      /** Whether we have modified any state that should trigger a snapshot. */
      get be() {
        return this.we;
      }
      /**
       * Applies the resume token to the TargetChange, but only when it has a new
       * value. Empty resumeTokens are discarded.
       */
      De(e) {
        e.approximateByteSize() > 0 && (this.we = true, this.pe = e);
      }
      /**
       * Creates a target change from the current set of changes.
       *
       * To reset the document changes after raising this snapshot, call
       * `clearPendingChanges()`.
       */
      ve() {
        let e = __PRIVATE_documentKeySet(), t2 = __PRIVATE_documentKeySet(), n2 = __PRIVATE_documentKeySet();
        return this.ge.forEach((r2, i) => {
          switch (i) {
            case 0:
              e = e.add(r2);
              break;
            case 2:
              t2 = t2.add(r2);
              break;
            case 1:
              n2 = n2.add(r2);
              break;
            default:
              fail();
          }
        }), new TargetChange(this.pe, this.ye, e, t2, n2);
      }
      /**
       * Resets the document changes and sets `hasPendingChanges` to false.
       */
      Ce() {
        this.we = false, this.ge = __PRIVATE_snapshotChangesMap();
      }
      Fe(e, t2) {
        this.we = true, this.ge = this.ge.insert(e, t2);
      }
      Me(e) {
        this.we = true, this.ge = this.ge.remove(e);
      }
      xe() {
        this.fe += 1;
      }
      Oe() {
        this.fe -= 1, __PRIVATE_hardAssert(this.fe >= 0);
      }
      Ne() {
        this.we = true, this.ye = true;
      }
    }
    class __PRIVATE_WatchChangeAggregator {
      constructor(e) {
        this.Le = e, /** The internal state of all tracked targets. */
        this.Be = /* @__PURE__ */ new Map(), /** Keeps track of the documents to update since the last raised snapshot. */
        this.ke = __PRIVATE_mutableDocumentMap(), /** A mapping of document keys to their set of target IDs. */
        this.qe = __PRIVATE_documentTargetMap(), /**
         * A map of targets with existence filter mismatches. These targets are
         * known to be inconsistent and their listens needs to be re-established by
         * RemoteStore.
         */
        this.Qe = new SortedMap$1(__PRIVATE_primitiveComparator);
      }
      /**
       * Processes and adds the DocumentWatchChange to the current set of changes.
       */
      Ke(e) {
        for (const t2 of e.Re) e.Ve && e.Ve.isFoundDocument() ? this.$e(t2, e.Ve) : this.Ue(t2, e.key, e.Ve);
        for (const t2 of e.removedTargetIds) this.Ue(t2, e.key, e.Ve);
      }
      /** Processes and adds the WatchTargetChange to the current set of changes. */
      We(e) {
        this.forEachTarget(e, (t2) => {
          const n2 = this.Ge(t2);
          switch (e.state) {
            case 0:
              this.ze(t2) && n2.De(e.resumeToken);
              break;
            case 1:
              n2.Oe(), n2.Se || // We have a freshly added target, so we need to reset any state
              // that we had previously. This can happen e.g. when remove and add
              // back a target for existence filter mismatches.
              n2.Ce(), n2.De(e.resumeToken);
              break;
            case 2:
              n2.Oe(), n2.Se || this.removeTarget(t2);
              break;
            case 3:
              this.ze(t2) && (n2.Ne(), n2.De(e.resumeToken));
              break;
            case 4:
              this.ze(t2) && // Reset the target and synthesizes removes for all existing
              // documents. The backend will re-add any documents that still
              // match the target before it sends the next global snapshot.
              (this.je(t2), n2.De(e.resumeToken));
              break;
            default:
              fail();
          }
        });
      }
      /**
       * Iterates over all targetIds that the watch change applies to: either the
       * targetIds explicitly listed in the change or the targetIds of all currently
       * active targets.
       */
      forEachTarget(e, t2) {
        e.targetIds.length > 0 ? e.targetIds.forEach(t2) : this.Be.forEach((e2, n2) => {
          this.ze(n2) && t2(n2);
        });
      }
      /**
       * Handles existence filters and synthesizes deletes for filter mismatches.
       * Targets that are invalidated by filter mismatches are added to
       * `pendingTargetResets`.
       */
      He(e) {
        const t2 = e.targetId, n2 = e.me.count, r2 = this.Je(t2);
        if (r2) {
          const i = r2.target;
          if (__PRIVATE_targetIsDocumentTarget(i)) if (0 === n2) {
            const e2 = new DocumentKey(i.path);
            this.Ue(t2, e2, MutableDocument.newNoDocument(e2, SnapshotVersion.min()));
          } else __PRIVATE_hardAssert(1 === n2);
          else {
            const r3 = this.Ye(t2);
            if (r3 !== n2) {
              const n3 = this.Ze(e), i2 = n3 ? this.Xe(n3, e, r3) : 1;
              if (0 !== i2) {
                this.je(t2);
                const e2 = 2 === i2 ? "TargetPurposeExistenceFilterMismatchBloom" : "TargetPurposeExistenceFilterMismatch";
                this.Qe = this.Qe.insert(t2, e2);
              }
            }
          }
        }
      }
      /**
       * Parse the bloom filter from the "unchanged_names" field of an existence
       * filter.
       */
      Ze(e) {
        const t2 = e.me.unchangedNames;
        if (!t2 || !t2.bits) return null;
        const { bits: { bitmap: n2 = "", padding: r2 = 0 }, hashCount: i = 0 } = t2;
        let s, o;
        try {
          s = __PRIVATE_normalizeByteString(n2).toUint8Array();
        } catch (e2) {
          if (e2 instanceof __PRIVATE_Base64DecodeError) return __PRIVATE_logWarn("Decoding the base64 bloom filter in existence filter failed (" + e2.message + "); ignoring the bloom filter and falling back to full re-query."), null;
          throw e2;
        }
        try {
          o = new BloomFilter(s, r2, i);
        } catch (e2) {
          return __PRIVATE_logWarn(e2 instanceof __PRIVATE_BloomFilterError ? "BloomFilter error: " : "Applying bloom filter failed: ", e2), null;
        }
        return 0 === o.Ie ? null : o;
      }
      /**
       * Apply bloom filter to remove the deleted documents, and return the
       * application status.
       */
      Xe(e, t2, n2) {
        return t2.me.count === n2 - this.nt(e, t2.targetId) ? 0 : 2;
      }
      /**
       * Filter out removed documents based on bloom filter membership result and
       * return number of documents removed.
       */
      nt(e, t2) {
        const n2 = this.Le.getRemoteKeysForTarget(t2);
        let r2 = 0;
        return n2.forEach((n3) => {
          const i = this.Le.tt(), s = `projects/${i.projectId}/databases/${i.database}/documents/${n3.path.canonicalString()}`;
          e.mightContain(s) || (this.Ue(
            t2,
            n3,
            /*updatedDocument=*/
            null
          ), r2++);
        }), r2;
      }
      /**
       * Converts the currently accumulated state into a remote event at the
       * provided snapshot version. Resets the accumulated changes before returning.
       */
      rt(e) {
        const t2 = /* @__PURE__ */ new Map();
        this.Be.forEach((n3, r3) => {
          const i = this.Je(r3);
          if (i) {
            if (n3.current && __PRIVATE_targetIsDocumentTarget(i.target)) {
              const t3 = new DocumentKey(i.target.path);
              null !== this.ke.get(t3) || this.it(r3, t3) || this.Ue(r3, t3, MutableDocument.newNoDocument(t3, e));
            }
            n3.be && (t2.set(r3, n3.ve()), n3.Ce());
          }
        });
        let n2 = __PRIVATE_documentKeySet();
        this.qe.forEach((e2, t3) => {
          let r3 = true;
          t3.forEachWhile((e3) => {
            const t4 = this.Je(e3);
            return !t4 || "TargetPurposeLimboResolution" === t4.purpose || (r3 = false, false);
          }), r3 && (n2 = n2.add(e2));
        }), this.ke.forEach((t3, n3) => n3.setReadTime(e));
        const r2 = new RemoteEvent(e, t2, this.Qe, this.ke, n2);
        return this.ke = __PRIVATE_mutableDocumentMap(), this.qe = __PRIVATE_documentTargetMap(), this.Qe = new SortedMap$1(__PRIVATE_primitiveComparator), r2;
      }
      /**
       * Adds the provided document to the internal list of document updates and
       * its document key to the given target's mapping.
       */
      // Visible for testing.
      $e(e, t2) {
        if (!this.ze(e)) return;
        const n2 = this.it(e, t2.key) ? 2 : 0;
        this.Ge(e).Fe(t2.key, n2), this.ke = this.ke.insert(t2.key, t2), this.qe = this.qe.insert(t2.key, this.st(t2.key).add(e));
      }
      /**
       * Removes the provided document from the target mapping. If the
       * document no longer matches the target, but the document's state is still
       * known (e.g. we know that the document was deleted or we received the change
       * that caused the filter mismatch), the new document can be provided
       * to update the remote document cache.
       */
      // Visible for testing.
      Ue(e, t2, n2) {
        if (!this.ze(e)) return;
        const r2 = this.Ge(e);
        this.it(e, t2) ? r2.Fe(
          t2,
          1
          /* ChangeType.Removed */
        ) : (
          // The document may have entered and left the target before we raised a
          // snapshot, so we can just ignore the change.
          r2.Me(t2)
        ), this.qe = this.qe.insert(t2, this.st(t2).delete(e)), n2 && (this.ke = this.ke.insert(t2, n2));
      }
      removeTarget(e) {
        this.Be.delete(e);
      }
      /**
       * Returns the current count of documents in the target. This includes both
       * the number of documents that the LocalStore considers to be part of the
       * target as well as any accumulated changes.
       */
      Ye(e) {
        const t2 = this.Ge(e).ve();
        return this.Le.getRemoteKeysForTarget(e).size + t2.addedDocuments.size - t2.removedDocuments.size;
      }
      /**
       * Increment the number of acks needed from watch before we can consider the
       * server to be 'in-sync' with the client's active targets.
       */
      xe(e) {
        this.Ge(e).xe();
      }
      Ge(e) {
        let t2 = this.Be.get(e);
        return t2 || (t2 = new __PRIVATE_TargetState(), this.Be.set(e, t2)), t2;
      }
      st(e) {
        let t2 = this.qe.get(e);
        return t2 || (t2 = new SortedSet(__PRIVATE_primitiveComparator), this.qe = this.qe.insert(e, t2)), t2;
      }
      /**
       * Verifies that the user is still interested in this target (by calling
       * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
       * from watch.
       */
      ze(e) {
        const t2 = null !== this.Je(e);
        return t2 || __PRIVATE_logDebug("WatchChangeAggregator", "Detected inactive target", e), t2;
      }
      /**
       * Returns the TargetData for an active target (i.e. a target that the user
       * is still interested in that has no outstanding target change requests).
       */
      Je(e) {
        const t2 = this.Be.get(e);
        return t2 && t2.Se ? null : this.Le.ot(e);
      }
      /**
       * Resets the state of a Watch target to its initial state (e.g. sets
       * 'current' to false, clears the resume token and removes its target mapping
       * from all documents).
       */
      je(e) {
        this.Be.set(e, new __PRIVATE_TargetState());
        this.Le.getRemoteKeysForTarget(e).forEach((t2) => {
          this.Ue(
            e,
            t2,
            /*updatedDocument=*/
            null
          );
        });
      }
      /**
       * Returns whether the LocalStore considers the document to be part of the
       * specified target.
       */
      it(e, t2) {
        return this.Le.getRemoteKeysForTarget(e).has(t2);
      }
    }
    function __PRIVATE_documentTargetMap() {
      return new SortedMap$1(DocumentKey.comparator);
    }
    function __PRIVATE_snapshotChangesMap() {
      return new SortedMap$1(DocumentKey.comparator);
    }
    const Te = /* @__PURE__ */ (() => {
      const e = {
        asc: "ASCENDING",
        desc: "DESCENDING"
      };
      return e;
    })(), Ee = /* @__PURE__ */ (() => {
      const e = {
        "<": "LESS_THAN",
        "<=": "LESS_THAN_OR_EQUAL",
        ">": "GREATER_THAN",
        ">=": "GREATER_THAN_OR_EQUAL",
        "==": "EQUAL",
        "!=": "NOT_EQUAL",
        "array-contains": "ARRAY_CONTAINS",
        in: "IN",
        "not-in": "NOT_IN",
        "array-contains-any": "ARRAY_CONTAINS_ANY"
      };
      return e;
    })(), de = /* @__PURE__ */ (() => {
      const e = {
        and: "AND",
        or: "OR"
      };
      return e;
    })();
    class JsonProtoSerializer {
      constructor(e, t2) {
        this.databaseId = e, this.useProto3Json = t2;
      }
    }
    function __PRIVATE_toInt32Proto(e, t2) {
      return e.useProto3Json || __PRIVATE_isNullOrUndefined(t2) ? t2 : {
        value: t2
      };
    }
    function toTimestamp(e, t2) {
      if (e.useProto3Json) {
        return `${new Date(1e3 * t2.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + t2.nanoseconds).slice(-9)}Z`;
      }
      return {
        seconds: "" + t2.seconds,
        nanos: t2.nanoseconds
      };
    }
    function __PRIVATE_toBytes(e, t2) {
      return e.useProto3Json ? t2.toBase64() : t2.toUint8Array();
    }
    function __PRIVATE_toVersion(e, t2) {
      return toTimestamp(e, t2.toTimestamp());
    }
    function __PRIVATE_fromVersion(e) {
      return __PRIVATE_hardAssert(!!e), SnapshotVersion.fromTimestamp(function fromTimestamp(e2) {
        const t2 = __PRIVATE_normalizeTimestamp(e2);
        return new Timestamp(t2.seconds, t2.nanos);
      }(e));
    }
    function __PRIVATE_toResourceName(e, t2) {
      return __PRIVATE_toResourcePath(e, t2).canonicalString();
    }
    function __PRIVATE_toResourcePath(e, t2) {
      const n2 = function __PRIVATE_fullyQualifiedPrefixPath(e2) {
        return new ResourcePath(["projects", e2.projectId, "databases", e2.database]);
      }(e).child("documents");
      return void 0 === t2 ? n2 : n2.child(t2);
    }
    function __PRIVATE_fromResourceName(e) {
      const t2 = ResourcePath.fromString(e);
      return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(t2)), t2;
    }
    function __PRIVATE_toName(e, t2) {
      return __PRIVATE_toResourceName(e.databaseId, t2.path);
    }
    function fromName(e, t2) {
      const n2 = __PRIVATE_fromResourceName(t2);
      if (n2.get(1) !== e.databaseId.projectId) throw new FirestoreError(D.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n2.get(1) + " vs " + e.databaseId.projectId);
      if (n2.get(3) !== e.databaseId.database) throw new FirestoreError(D.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n2.get(3) + " vs " + e.databaseId.database);
      return new DocumentKey(__PRIVATE_extractLocalPathFromResourceName(n2));
    }
    function __PRIVATE_toQueryPath(e, t2) {
      return __PRIVATE_toResourceName(e.databaseId, t2);
    }
    function __PRIVATE_fromQueryPath(e) {
      const t2 = __PRIVATE_fromResourceName(e);
      return 4 === t2.length ? ResourcePath.emptyPath() : __PRIVATE_extractLocalPathFromResourceName(t2);
    }
    function __PRIVATE_getEncodedDatabaseId(e) {
      return new ResourcePath(["projects", e.databaseId.projectId, "databases", e.databaseId.database]).canonicalString();
    }
    function __PRIVATE_extractLocalPathFromResourceName(e) {
      return __PRIVATE_hardAssert(e.length > 4 && "documents" === e.get(4)), e.popFirst(5);
    }
    function __PRIVATE_toMutationDocument(e, t2, n2) {
      return {
        name: __PRIVATE_toName(e, t2),
        fields: n2.value.mapValue.fields
      };
    }
    function __PRIVATE_fromWatchChange(e, t2) {
      let n2;
      if ("targetChange" in t2) {
        t2.targetChange;
        const r2 = function __PRIVATE_fromWatchTargetChangeState(e2) {
          return "NO_CHANGE" === e2 ? 0 : "ADD" === e2 ? 1 : "REMOVE" === e2 ? 2 : "CURRENT" === e2 ? 3 : "RESET" === e2 ? 4 : fail();
        }(t2.targetChange.targetChangeType || "NO_CHANGE"), i = t2.targetChange.targetIds || [], s = function __PRIVATE_fromBytes(e2, t3) {
          return e2.useProto3Json ? (__PRIVATE_hardAssert(void 0 === t3 || "string" == typeof t3), ByteString.fromBase64String(t3 || "")) : (__PRIVATE_hardAssert(void 0 === t3 || // Check if the value is an instance of both Buffer and Uint8Array,
          // despite the fact that Buffer extends Uint8Array. In some
          // environments, such as jsdom, the prototype chain of Buffer
          // does not indicate that it extends Uint8Array.
          t3 instanceof Buffer || t3 instanceof Uint8Array), ByteString.fromUint8Array(t3 || new Uint8Array()));
        }(e, t2.targetChange.resumeToken), o = t2.targetChange.cause, _ = o && function __PRIVATE_fromRpcStatus(e2) {
          const t3 = void 0 === e2.code ? D.UNKNOWN : __PRIVATE_mapCodeFromRpcCode(e2.code);
          return new FirestoreError(t3, e2.message || "");
        }(o);
        n2 = new __PRIVATE_WatchTargetChange(r2, i, s, _ || null);
      } else if ("documentChange" in t2) {
        t2.documentChange;
        const r2 = t2.documentChange;
        r2.document, r2.document.name, r2.document.updateTime;
        const i = fromName(e, r2.document.name), s = __PRIVATE_fromVersion(r2.document.updateTime), o = r2.document.createTime ? __PRIVATE_fromVersion(r2.document.createTime) : SnapshotVersion.min(), _ = new ObjectValue({
          mapValue: {
            fields: r2.document.fields
          }
        }), a = MutableDocument.newFoundDocument(i, s, o, _), u2 = r2.targetIds || [], c = r2.removedTargetIds || [];
        n2 = new __PRIVATE_DocumentWatchChange(u2, c, a.key, a);
      } else if ("documentDelete" in t2) {
        t2.documentDelete;
        const r2 = t2.documentDelete;
        r2.document;
        const i = fromName(e, r2.document), s = r2.readTime ? __PRIVATE_fromVersion(r2.readTime) : SnapshotVersion.min(), o = MutableDocument.newNoDocument(i, s), _ = r2.removedTargetIds || [];
        n2 = new __PRIVATE_DocumentWatchChange([], _, o.key, o);
      } else if ("documentRemove" in t2) {
        t2.documentRemove;
        const r2 = t2.documentRemove;
        r2.document;
        const i = fromName(e, r2.document), s = r2.removedTargetIds || [];
        n2 = new __PRIVATE_DocumentWatchChange([], s, i, null);
      } else {
        if (!("filter" in t2)) return fail();
        {
          t2.filter;
          const e2 = t2.filter;
          e2.targetId;
          const { count: r2 = 0, unchangedNames: i } = e2, s = new ExistenceFilter(r2, i), o = e2.targetId;
          n2 = new __PRIVATE_ExistenceFilterChange(o, s);
        }
      }
      return n2;
    }
    function toMutation(e, t2) {
      let n2;
      if (t2 instanceof __PRIVATE_SetMutation) n2 = {
        update: __PRIVATE_toMutationDocument(e, t2.key, t2.value)
      };
      else if (t2 instanceof __PRIVATE_DeleteMutation) n2 = {
        delete: __PRIVATE_toName(e, t2.key)
      };
      else if (t2 instanceof __PRIVATE_PatchMutation) n2 = {
        update: __PRIVATE_toMutationDocument(e, t2.key, t2.data),
        updateMask: __PRIVATE_toDocumentMask(t2.fieldMask)
      };
      else {
        if (!(t2 instanceof __PRIVATE_VerifyMutation)) return fail();
        n2 = {
          verify: __PRIVATE_toName(e, t2.key)
        };
      }
      return t2.fieldTransforms.length > 0 && (n2.updateTransforms = t2.fieldTransforms.map((e2) => function __PRIVATE_toFieldTransform(e3, t3) {
        const n3 = t3.transform;
        if (n3 instanceof __PRIVATE_ServerTimestampTransform) return {
          fieldPath: t3.field.canonicalString(),
          setToServerValue: "REQUEST_TIME"
        };
        if (n3 instanceof __PRIVATE_ArrayUnionTransformOperation) return {
          fieldPath: t3.field.canonicalString(),
          appendMissingElements: {
            values: n3.elements
          }
        };
        if (n3 instanceof __PRIVATE_ArrayRemoveTransformOperation) return {
          fieldPath: t3.field.canonicalString(),
          removeAllFromArray: {
            values: n3.elements
          }
        };
        if (n3 instanceof __PRIVATE_NumericIncrementTransformOperation) return {
          fieldPath: t3.field.canonicalString(),
          increment: n3.Pe
        };
        throw fail();
      }(0, e2))), t2.precondition.isNone || (n2.currentDocument = function __PRIVATE_toPrecondition(e2, t3) {
        return void 0 !== t3.updateTime ? {
          updateTime: __PRIVATE_toVersion(e2, t3.updateTime)
        } : void 0 !== t3.exists ? {
          exists: t3.exists
        } : fail();
      }(e, t2.precondition)), n2;
    }
    function __PRIVATE_fromWriteResults(e, t2) {
      return e && e.length > 0 ? (__PRIVATE_hardAssert(void 0 !== t2), e.map((e2) => function __PRIVATE_fromWriteResult(e3, t3) {
        let n2 = e3.updateTime ? __PRIVATE_fromVersion(e3.updateTime) : __PRIVATE_fromVersion(t3);
        return n2.isEqual(SnapshotVersion.min()) && // The Firestore Emulator currently returns an update time of 0 for
        // deletes of non-existing documents (rather than null). This breaks the
        // test "get deleted doc while offline with source=cache" as NoDocuments
        // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
        // TODO(#2149): Remove this when Emulator is fixed
        (n2 = __PRIVATE_fromVersion(t3)), new MutationResult(n2, e3.transformResults || []);
      }(e2, t2))) : [];
    }
    function __PRIVATE_toDocumentsTarget(e, t2) {
      return {
        documents: [__PRIVATE_toQueryPath(e, t2.path)]
      };
    }
    function __PRIVATE_toQueryTarget(e, t2) {
      const n2 = {
        structuredQuery: {}
      }, r2 = t2.path;
      let i;
      null !== t2.collectionGroup ? (i = r2, n2.structuredQuery.from = [{
        collectionId: t2.collectionGroup,
        allDescendants: true
      }]) : (i = r2.popLast(), n2.structuredQuery.from = [{
        collectionId: r2.lastSegment()
      }]), n2.parent = __PRIVATE_toQueryPath(e, i);
      const s = function __PRIVATE_toFilters(e2) {
        if (0 === e2.length) return;
        return __PRIVATE_toFilter(CompositeFilter.create(
          e2,
          "and"
          /* CompositeOperator.AND */
        ));
      }(t2.filters);
      s && (n2.structuredQuery.where = s);
      const o = function __PRIVATE_toOrder(e2) {
        if (0 === e2.length) return;
        return e2.map((e3) => (
          // visible for testing
          function __PRIVATE_toPropertyOrder(e4) {
            return {
              field: __PRIVATE_toFieldPathReference(e4.field),
              direction: __PRIVATE_toDirection(e4.dir)
            };
          }(e3)
        ));
      }(t2.orderBy);
      o && (n2.structuredQuery.orderBy = o);
      const _ = __PRIVATE_toInt32Proto(e, t2.limit);
      return null !== _ && (n2.structuredQuery.limit = _), t2.startAt && (n2.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(e2) {
        return {
          before: e2.inclusive,
          values: e2.position
        };
      }(t2.startAt)), t2.endAt && (n2.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(e2) {
        return {
          before: !e2.inclusive,
          values: e2.position
        };
      }(t2.endAt)), {
        _t: n2,
        parent: i
      };
    }
    function __PRIVATE_convertQueryTargetToQuery(e) {
      let t2 = __PRIVATE_fromQueryPath(e.parent);
      const n2 = e.structuredQuery, r2 = n2.from ? n2.from.length : 0;
      let i = null;
      if (r2 > 0) {
        __PRIVATE_hardAssert(1 === r2);
        const e2 = n2.from[0];
        e2.allDescendants ? i = e2.collectionId : t2 = t2.child(e2.collectionId);
      }
      let s = [];
      n2.where && (s = function __PRIVATE_fromFilters(e2) {
        const t3 = __PRIVATE_fromFilter(e2);
        if (t3 instanceof CompositeFilter && __PRIVATE_compositeFilterIsFlatConjunction(t3)) return t3.getFilters();
        return [t3];
      }(n2.where));
      let o = [];
      n2.orderBy && (o = function __PRIVATE_fromOrder(e2) {
        return e2.map((e3) => function __PRIVATE_fromPropertyOrder(e4) {
          return new OrderBy(
            __PRIVATE_fromFieldPathReference(e4.field),
            // visible for testing
            function __PRIVATE_fromDirection(e5) {
              switch (e5) {
                case "ASCENDING":
                  return "asc";
                case "DESCENDING":
                  return "desc";
                default:
                  return;
              }
            }(e4.direction)
          );
        }(e3));
      }(n2.orderBy));
      let _ = null;
      n2.limit && (_ = function __PRIVATE_fromInt32Proto(e2) {
        let t3;
        return t3 = "object" == typeof e2 ? e2.value : e2, __PRIVATE_isNullOrUndefined(t3) ? null : t3;
      }(n2.limit));
      let a = null;
      n2.startAt && (a = function __PRIVATE_fromStartAtCursor(e2) {
        const t3 = !!e2.before, n3 = e2.values || [];
        return new Bound(n3, t3);
      }(n2.startAt));
      let u2 = null;
      return n2.endAt && (u2 = function __PRIVATE_fromEndAtCursor(e2) {
        const t3 = !e2.before, n3 = e2.values || [];
        return new Bound(n3, t3);
      }(n2.endAt)), __PRIVATE_newQuery(t2, i, o, s, _, "F", a, u2);
    }
    function __PRIVATE_toListenRequestLabels(e, t2) {
      const n2 = function __PRIVATE_toLabel(e2) {
        switch (e2) {
          case "TargetPurposeListen":
            return null;
          case "TargetPurposeExistenceFilterMismatch":
            return "existence-filter-mismatch";
          case "TargetPurposeExistenceFilterMismatchBloom":
            return "existence-filter-mismatch-bloom";
          case "TargetPurposeLimboResolution":
            return "limbo-document";
          default:
            return fail();
        }
      }(t2.purpose);
      return null == n2 ? null : {
        "goog-listen-tags": n2
      };
    }
    function __PRIVATE_fromFilter(e) {
      return void 0 !== e.unaryFilter ? function __PRIVATE_fromUnaryFilter(e2) {
        switch (e2.unaryFilter.op) {
          case "IS_NAN":
            const t2 = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);
            return FieldFilter.create(t2, "==", {
              doubleValue: NaN
            });
          case "IS_NULL":
            const n2 = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);
            return FieldFilter.create(n2, "==", {
              nullValue: "NULL_VALUE"
            });
          case "IS_NOT_NAN":
            const r2 = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);
            return FieldFilter.create(r2, "!=", {
              doubleValue: NaN
            });
          case "IS_NOT_NULL":
            const i = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);
            return FieldFilter.create(i, "!=", {
              nullValue: "NULL_VALUE"
            });
          default:
            return fail();
        }
      }(e) : void 0 !== e.fieldFilter ? function __PRIVATE_fromFieldFilter(e2) {
        return FieldFilter.create(__PRIVATE_fromFieldPathReference(e2.fieldFilter.field), function __PRIVATE_fromOperatorName(e3) {
          switch (e3) {
            case "EQUAL":
              return "==";
            case "NOT_EQUAL":
              return "!=";
            case "GREATER_THAN":
              return ">";
            case "GREATER_THAN_OR_EQUAL":
              return ">=";
            case "LESS_THAN":
              return "<";
            case "LESS_THAN_OR_EQUAL":
              return "<=";
            case "ARRAY_CONTAINS":
              return "array-contains";
            case "IN":
              return "in";
            case "NOT_IN":
              return "not-in";
            case "ARRAY_CONTAINS_ANY":
              return "array-contains-any";
            default:
              return fail();
          }
        }(e2.fieldFilter.op), e2.fieldFilter.value);
      }(e) : void 0 !== e.compositeFilter ? function __PRIVATE_fromCompositeFilter(e2) {
        return CompositeFilter.create(e2.compositeFilter.filters.map((e3) => __PRIVATE_fromFilter(e3)), function __PRIVATE_fromCompositeOperatorName(e3) {
          switch (e3) {
            case "AND":
              return "and";
            case "OR":
              return "or";
            default:
              return fail();
          }
        }(e2.compositeFilter.op));
      }(e) : fail();
    }
    function __PRIVATE_toDirection(e) {
      return Te[e];
    }
    function __PRIVATE_toOperatorName(e) {
      return Ee[e];
    }
    function __PRIVATE_toCompositeOperatorName(e) {
      return de[e];
    }
    function __PRIVATE_toFieldPathReference(e) {
      return {
        fieldPath: e.canonicalString()
      };
    }
    function __PRIVATE_fromFieldPathReference(e) {
      return FieldPath$1.fromServerFormat(e.fieldPath);
    }
    function __PRIVATE_toFilter(e) {
      return e instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(e2) {
        if ("==" === e2.op) {
          if (__PRIVATE_isNanValue(e2.value)) return {
            unaryFilter: {
              field: __PRIVATE_toFieldPathReference(e2.field),
              op: "IS_NAN"
            }
          };
          if (__PRIVATE_isNullValue(e2.value)) return {
            unaryFilter: {
              field: __PRIVATE_toFieldPathReference(e2.field),
              op: "IS_NULL"
            }
          };
        } else if ("!=" === e2.op) {
          if (__PRIVATE_isNanValue(e2.value)) return {
            unaryFilter: {
              field: __PRIVATE_toFieldPathReference(e2.field),
              op: "IS_NOT_NAN"
            }
          };
          if (__PRIVATE_isNullValue(e2.value)) return {
            unaryFilter: {
              field: __PRIVATE_toFieldPathReference(e2.field),
              op: "IS_NOT_NULL"
            }
          };
        }
        return {
          fieldFilter: {
            field: __PRIVATE_toFieldPathReference(e2.field),
            op: __PRIVATE_toOperatorName(e2.op),
            value: e2.value
          }
        };
      }(e) : e instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(e2) {
        const t2 = e2.getFilters().map((e3) => __PRIVATE_toFilter(e3));
        if (1 === t2.length) return t2[0];
        return {
          compositeFilter: {
            op: __PRIVATE_toCompositeOperatorName(e2.op),
            filters: t2
          }
        };
      }(e) : fail();
    }
    function __PRIVATE_toDocumentMask(e) {
      const t2 = [];
      return e.fields.forEach((e2) => t2.push(e2.canonicalString())), {
        fieldPaths: t2
      };
    }
    function __PRIVATE_isValidResourceName(e) {
      return e.length >= 4 && "projects" === e.get(0) && "databases" === e.get(2);
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class TargetData {
      constructor(e, t2, n2, r2, i = SnapshotVersion.min(), s = SnapshotVersion.min(), o = ByteString.EMPTY_BYTE_STRING, _ = null) {
        this.target = e, this.targetId = t2, this.purpose = n2, this.sequenceNumber = r2, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = s, this.resumeToken = o, this.expectedCount = _;
      }
      /** Creates a new target data instance with an updated sequence number. */
      withSequenceNumber(e) {
        return new TargetData(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);
      }
      /**
       * Creates a new target data instance with an updated resume token and
       * snapshot version.
       */
      withResumeToken(e, t2) {
        return new TargetData(
          this.target,
          this.targetId,
          this.purpose,
          this.sequenceNumber,
          t2,
          this.lastLimboFreeSnapshotVersion,
          e,
          /* expectedCount= */
          null
        );
      }
      /**
       * Creates a new target data instance with an updated expected count.
       */
      withExpectedCount(e) {
        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, e);
      }
      /**
       * Creates a new target data instance with an updated last limbo free
       * snapshot version number.
       */
      withLastLimboFreeSnapshotVersion(e) {
        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken, this.expectedCount);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_LocalSerializer {
      constructor(e) {
        this.ct = e;
      }
    }
    function __PRIVATE_fromBundledQuery(e) {
      const t2 = __PRIVATE_convertQueryTargetToQuery({
        parent: e.parent,
        structuredQuery: e.structuredQuery
      });
      return "LAST" === e.limitType ? __PRIVATE_queryWithLimit(
        t2,
        t2.limit,
        "L"
        /* LimitType.Last */
      ) : t2;
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_MemoryIndexManager {
      constructor() {
        this.un = new __PRIVATE_MemoryCollectionParentIndex();
      }
      addToCollectionParentIndex(e, t2) {
        return this.un.add(t2), PersistencePromise.resolve();
      }
      getCollectionParents(e, t2) {
        return PersistencePromise.resolve(this.un.getEntries(t2));
      }
      addFieldIndex(e, t2) {
        return PersistencePromise.resolve();
      }
      deleteFieldIndex(e, t2) {
        return PersistencePromise.resolve();
      }
      deleteAllFieldIndexes(e) {
        return PersistencePromise.resolve();
      }
      createTargetIndexes(e, t2) {
        return PersistencePromise.resolve();
      }
      getDocumentsMatchingTarget(e, t2) {
        return PersistencePromise.resolve(null);
      }
      getIndexType(e, t2) {
        return PersistencePromise.resolve(
          0
          /* IndexType.NONE */
        );
      }
      getFieldIndexes(e, t2) {
        return PersistencePromise.resolve([]);
      }
      getNextCollectionGroupToUpdate(e) {
        return PersistencePromise.resolve(null);
      }
      getMinOffset(e, t2) {
        return PersistencePromise.resolve(IndexOffset.min());
      }
      getMinOffsetFromCollectionGroup(e, t2) {
        return PersistencePromise.resolve(IndexOffset.min());
      }
      updateCollectionGroup(e, t2, n2) {
        return PersistencePromise.resolve();
      }
      updateIndexEntries(e, t2) {
        return PersistencePromise.resolve();
      }
    }
    class __PRIVATE_MemoryCollectionParentIndex {
      constructor() {
        this.index = {};
      }
      // Returns false if the entry already existed.
      add(e) {
        const t2 = e.lastSegment(), n2 = e.popLast(), r2 = this.index[t2] || new SortedSet(ResourcePath.comparator), i = !r2.has(n2);
        return this.index[t2] = r2.add(n2), i;
      }
      has(e) {
        const t2 = e.lastSegment(), n2 = e.popLast(), r2 = this.index[t2];
        return r2 && r2.has(n2);
      }
      getEntries(e) {
        return (this.index[e] || new SortedSet(ResourcePath.comparator)).toArray();
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_TargetIdGenerator {
      constructor(e) {
        this.Ln = e;
      }
      next() {
        return this.Ln += 2, this.Ln;
      }
      static Bn() {
        return new __PRIVATE_TargetIdGenerator(0);
      }
      static kn() {
        return new __PRIVATE_TargetIdGenerator(-1);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class RemoteDocumentChangeBuffer {
      constructor() {
        this.changes = new ObjectMap((e) => e.toString(), (e, t2) => e.isEqual(t2)), this.changesApplied = false;
      }
      /**
       * Buffers a `RemoteDocumentCache.addEntry()` call.
       *
       * You can only modify documents that have already been retrieved via
       * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
       */
      addEntry(e) {
        this.assertNotApplied(), this.changes.set(e.key, e);
      }
      /**
       * Buffers a `RemoteDocumentCache.removeEntry()` call.
       *
       * You can only remove documents that have already been retrieved via
       * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
       */
      removeEntry(e, t2) {
        this.assertNotApplied(), this.changes.set(e, MutableDocument.newInvalidDocument(e).setReadTime(t2));
      }
      /**
       * Looks up an entry in the cache. The buffered changes will first be checked,
       * and if no buffered change applies, this will forward to
       * `RemoteDocumentCache.getEntry()`.
       *
       * @param transaction - The transaction in which to perform any persistence
       *     operations.
       * @param documentKey - The key of the entry to look up.
       * @returns The cached document or an invalid document if we have nothing
       * cached.
       */
      getEntry(e, t2) {
        this.assertNotApplied();
        const n2 = this.changes.get(t2);
        return void 0 !== n2 ? PersistencePromise.resolve(n2) : this.getFromCache(e, t2);
      }
      /**
       * Looks up several entries in the cache, forwarding to
       * `RemoteDocumentCache.getEntry()`.
       *
       * @param transaction - The transaction in which to perform any persistence
       *     operations.
       * @param documentKeys - The keys of the entries to look up.
       * @returns A map of cached documents, indexed by key. If an entry cannot be
       *     found, the corresponding key will be mapped to an invalid document.
       */
      getEntries(e, t2) {
        return this.getAllFromCache(e, t2);
      }
      /**
       * Applies buffered changes to the underlying RemoteDocumentCache, using
       * the provided transaction.
       */
      apply(e) {
        return this.assertNotApplied(), this.changesApplied = true, this.applyChanges(e);
      }
      /** Helper to assert this.changes is not null  */
      assertNotApplied() {
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class OverlayedDocument {
      constructor(e, t2) {
        this.overlayedDocument = e, this.mutatedFields = t2;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class LocalDocumentsView {
      constructor(e, t2, n2, r2) {
        this.remoteDocumentCache = e, this.mutationQueue = t2, this.documentOverlayCache = n2, this.indexManager = r2;
      }
      /**
       * Get the local view of the document identified by `key`.
       *
       * @returns Local view of the document or null if we don't have any cached
       * state for it.
       */
      getDocument(e, t2) {
        let n2 = null;
        return this.documentOverlayCache.getOverlay(e, t2).next((r2) => (n2 = r2, this.remoteDocumentCache.getEntry(e, t2))).next((e2) => (null !== n2 && __PRIVATE_mutationApplyToLocalView(n2.mutation, e2, FieldMask.empty(), Timestamp.now()), e2));
      }
      /**
       * Gets the local view of the documents identified by `keys`.
       *
       * If we don't have cached state for a document in `keys`, a NoDocument will
       * be stored for that key in the resulting set.
       */
      getDocuments(e, t2) {
        return this.remoteDocumentCache.getEntries(e, t2).next((t3) => this.getLocalViewOfDocuments(e, t3, __PRIVATE_documentKeySet()).next(() => t3));
      }
      /**
       * Similar to `getDocuments`, but creates the local view from the given
       * `baseDocs` without retrieving documents from the local store.
       *
       * @param transaction - The transaction this operation is scoped to.
       * @param docs - The documents to apply local mutations to get the local views.
       * @param existenceStateChanged - The set of document keys whose existence state
       *   is changed. This is useful to determine if some documents overlay needs
       *   to be recalculated.
       */
      getLocalViewOfDocuments(e, t2, n2 = __PRIVATE_documentKeySet()) {
        const r2 = __PRIVATE_newOverlayMap();
        return this.populateOverlays(e, r2, t2).next(() => this.computeViews(e, t2, r2, n2).next((e2) => {
          let t3 = documentMap();
          return e2.forEach((e3, n3) => {
            t3 = t3.insert(e3, n3.overlayedDocument);
          }), t3;
        }));
      }
      /**
       * Gets the overlayed documents for the given document map, which will include
       * the local view of those documents and a `FieldMask` indicating which fields
       * are mutated locally, `null` if overlay is a Set or Delete mutation.
       */
      getOverlayedDocuments(e, t2) {
        const n2 = __PRIVATE_newOverlayMap();
        return this.populateOverlays(e, n2, t2).next(() => this.computeViews(e, t2, n2, __PRIVATE_documentKeySet()));
      }
      /**
       * Fetches the overlays for {@code docs} and adds them to provided overlay map
       * if the map does not already contain an entry for the given document key.
       */
      populateOverlays(e, t2, n2) {
        const r2 = [];
        return n2.forEach((e2) => {
          t2.has(e2) || r2.push(e2);
        }), this.documentOverlayCache.getOverlays(e, r2).next((e2) => {
          e2.forEach((e3, n3) => {
            t2.set(e3, n3);
          });
        });
      }
      /**
       * Computes the local view for the given documents.
       *
       * @param docs - The documents to compute views for. It also has the base
       *   version of the documents.
       * @param overlays - The overlays that need to be applied to the given base
       *   version of the documents.
       * @param existenceStateChanged - A set of documents whose existence states
       *   might have changed. This is used to determine if we need to re-calculate
       *   overlays from mutation queues.
       * @return A map represents the local documents view.
       */
      computeViews(e, t2, n2, r2) {
        let i = __PRIVATE_mutableDocumentMap();
        const s = __PRIVATE_newDocumentKeyMap(), o = function __PRIVATE_newOverlayedDocumentMap() {
          return __PRIVATE_newDocumentKeyMap();
        }();
        return t2.forEach((e2, t3) => {
          const o2 = n2.get(t3.key);
          r2.has(t3.key) && (void 0 === o2 || o2.mutation instanceof __PRIVATE_PatchMutation) ? i = i.insert(t3.key, t3) : void 0 !== o2 ? (s.set(t3.key, o2.mutation.getFieldMask()), __PRIVATE_mutationApplyToLocalView(o2.mutation, t3, o2.mutation.getFieldMask(), Timestamp.now())) : (
            // no overlay exists
            // Using EMPTY to indicate there is no overlay for the document.
            s.set(t3.key, FieldMask.empty())
          );
        }), this.recalculateAndSaveOverlays(e, i).next((e2) => (e2.forEach((e3, t3) => s.set(e3, t3)), t2.forEach((e3, t3) => {
          var n3;
          return o.set(e3, new OverlayedDocument(t3, null !== (n3 = s.get(e3)) && void 0 !== n3 ? n3 : null));
        }), o));
      }
      recalculateAndSaveOverlays(e, t2) {
        const n2 = __PRIVATE_newDocumentKeyMap();
        let r2 = new SortedMap$1((e2, t3) => e2 - t3), i = __PRIVATE_documentKeySet();
        return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e, t2).next((e2) => {
          for (const i2 of e2) i2.keys().forEach((e3) => {
            const s = t2.get(e3);
            if (null === s) return;
            let o = n2.get(e3) || FieldMask.empty();
            o = i2.applyToLocalView(s, o), n2.set(e3, o);
            const _ = (r2.get(i2.batchId) || __PRIVATE_documentKeySet()).add(e3);
            r2 = r2.insert(i2.batchId, _);
          });
        }).next(() => {
          const s = [], o = r2.getReverseIterator();
          for (; o.hasNext(); ) {
            const r3 = o.getNext(), _ = r3.key, a = r3.value, u2 = __PRIVATE_newMutationMap();
            a.forEach((e2) => {
              if (!i.has(e2)) {
                const r4 = __PRIVATE_calculateOverlayMutation(t2.get(e2), n2.get(e2));
                null !== r4 && u2.set(e2, r4), i = i.add(e2);
              }
            }), s.push(this.documentOverlayCache.saveOverlays(e, _, u2));
          }
          return PersistencePromise.waitFor(s);
        }).next(() => n2);
      }
      /**
       * Recalculates overlays by reading the documents from remote document cache
       * first, and saves them after they are calculated.
       */
      recalculateAndSaveOverlaysForDocumentKeys(e, t2) {
        return this.remoteDocumentCache.getEntries(e, t2).next((t3) => this.recalculateAndSaveOverlays(e, t3));
      }
      /**
       * Performs a query against the local view of all documents.
       *
       * @param transaction - The persistence transaction.
       * @param query - The query to match documents against.
       * @param offset - Read time and key to start scanning by (exclusive).
       * @param context - A optional tracker to keep a record of important details
       *   during database local query execution.
       */
      getDocumentsMatchingQuery(e, t2, n2, r2) {
        return function __PRIVATE_isDocumentQuery$1(e2) {
          return DocumentKey.isDocumentKey(e2.path) && null === e2.collectionGroup && 0 === e2.filters.length;
        }(t2) ? this.getDocumentsMatchingDocumentQuery(e, t2.path) : __PRIVATE_isCollectionGroupQuery(t2) ? this.getDocumentsMatchingCollectionGroupQuery(e, t2, n2, r2) : this.getDocumentsMatchingCollectionQuery(e, t2, n2, r2);
      }
      /**
       * Given a collection group, returns the next documents that follow the provided offset, along
       * with an updated batch ID.
       *
       * <p>The documents returned by this method are ordered by remote version from the provided
       * offset. If there are no more remote documents after the provided offset, documents with
       * mutations in order of batch id from the offset are returned. Since all documents in a batch are
       * returned together, the total number of documents returned can exceed {@code count}.
       *
       * @param transaction
       * @param collectionGroup The collection group for the documents.
       * @param offset The offset to index into.
       * @param count The number of documents to return
       * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
       */
      getNextDocuments(e, t2, n2, r2) {
        return this.remoteDocumentCache.getAllFromCollectionGroup(e, t2, n2, r2).next((i) => {
          const s = r2 - i.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(e, t2, n2.largestBatchId, r2 - i.size) : PersistencePromise.resolve(__PRIVATE_newOverlayMap());
          let o = -1, _ = i;
          return s.next((t3) => PersistencePromise.forEach(t3, (t4, n3) => (o < n3.largestBatchId && (o = n3.largestBatchId), i.get(t4) ? PersistencePromise.resolve() : this.remoteDocumentCache.getEntry(e, t4).next((e2) => {
            _ = _.insert(t4, e2);
          }))).next(() => this.populateOverlays(e, t3, i)).next(() => this.computeViews(e, _, t3, __PRIVATE_documentKeySet())).next((e2) => ({
            batchId: o,
            changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e2)
          })));
        });
      }
      getDocumentsMatchingDocumentQuery(e, t2) {
        return this.getDocument(e, new DocumentKey(t2)).next((e2) => {
          let t3 = documentMap();
          return e2.isFoundDocument() && (t3 = t3.insert(e2.key, e2)), t3;
        });
      }
      getDocumentsMatchingCollectionGroupQuery(e, t2, n2, r2) {
        const i = t2.collectionGroup;
        let s = documentMap();
        return this.indexManager.getCollectionParents(e, i).next((o) => PersistencePromise.forEach(o, (o2) => {
          const _ = function __PRIVATE_asCollectionQueryAtPath(e2, t3) {
            return new __PRIVATE_QueryImpl(
              t3,
              /*collectionGroup=*/
              null,
              e2.explicitOrderBy.slice(),
              e2.filters.slice(),
              e2.limit,
              e2.limitType,
              e2.startAt,
              e2.endAt
            );
          }(t2, o2.child(i));
          return this.getDocumentsMatchingCollectionQuery(e, _, n2, r2).next((e2) => {
            e2.forEach((e3, t3) => {
              s = s.insert(e3, t3);
            });
          });
        }).next(() => s));
      }
      getDocumentsMatchingCollectionQuery(e, t2, n2, r2) {
        let i;
        return this.documentOverlayCache.getOverlaysForCollection(e, t2.path, n2.largestBatchId).next((s) => (i = s, this.remoteDocumentCache.getDocumentsMatchingQuery(e, t2, n2, i, r2))).next((e2) => {
          i.forEach((t3, n4) => {
            const r3 = n4.getKey();
            null === e2.get(r3) && (e2 = e2.insert(r3, MutableDocument.newInvalidDocument(r3)));
          });
          let n3 = documentMap();
          return e2.forEach((e3, r3) => {
            const s = i.get(e3);
            void 0 !== s && __PRIVATE_mutationApplyToLocalView(s.mutation, r3, FieldMask.empty(), Timestamp.now()), // Finally, insert the documents that still match the query
            __PRIVATE_queryMatches(t2, r3) && (n3 = n3.insert(e3, r3));
          }), n3;
        });
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_MemoryBundleCache {
      constructor(e) {
        this.serializer = e, this.hr = /* @__PURE__ */ new Map(), this.Pr = /* @__PURE__ */ new Map();
      }
      getBundleMetadata(e, t2) {
        return PersistencePromise.resolve(this.hr.get(t2));
      }
      saveBundleMetadata(e, t2) {
        return this.hr.set(
          t2.id,
          /** Decodes a BundleMetadata proto into a BundleMetadata object. */
          function __PRIVATE_fromBundleMetadata(e2) {
            return {
              id: e2.id,
              version: e2.version,
              createTime: __PRIVATE_fromVersion(e2.createTime)
            };
          }(t2)
        ), PersistencePromise.resolve();
      }
      getNamedQuery(e, t2) {
        return PersistencePromise.resolve(this.Pr.get(t2));
      }
      saveNamedQuery(e, t2) {
        return this.Pr.set(t2.name, function __PRIVATE_fromProtoNamedQuery(e2) {
          return {
            name: e2.name,
            query: __PRIVATE_fromBundledQuery(e2.bundledQuery),
            readTime: __PRIVATE_fromVersion(e2.readTime)
          };
        }(t2)), PersistencePromise.resolve();
      }
    }
    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_MemoryDocumentOverlayCache {
      constructor() {
        this.overlays = new SortedMap$1(DocumentKey.comparator), this.Ir = /* @__PURE__ */ new Map();
      }
      getOverlay(e, t2) {
        return PersistencePromise.resolve(this.overlays.get(t2));
      }
      getOverlays(e, t2) {
        const n2 = __PRIVATE_newOverlayMap();
        return PersistencePromise.forEach(t2, (t3) => this.getOverlay(e, t3).next((e2) => {
          null !== e2 && n2.set(t3, e2);
        })).next(() => n2);
      }
      saveOverlays(e, t2, n2) {
        return n2.forEach((n3, r2) => {
          this.ht(e, t2, r2);
        }), PersistencePromise.resolve();
      }
      removeOverlaysForBatchId(e, t2, n2) {
        const r2 = this.Ir.get(n2);
        return void 0 !== r2 && (r2.forEach((e2) => this.overlays = this.overlays.remove(e2)), this.Ir.delete(n2)), PersistencePromise.resolve();
      }
      getOverlaysForCollection(e, t2, n2) {
        const r2 = __PRIVATE_newOverlayMap(), i = t2.length + 1, s = new DocumentKey(t2.child("")), o = this.overlays.getIteratorFrom(s);
        for (; o.hasNext(); ) {
          const e2 = o.getNext().value, s2 = e2.getKey();
          if (!t2.isPrefixOf(s2.path)) break;
          s2.path.length === i && (e2.largestBatchId > n2 && r2.set(e2.getKey(), e2));
        }
        return PersistencePromise.resolve(r2);
      }
      getOverlaysForCollectionGroup(e, t2, n2, r2) {
        let i = new SortedMap$1((e2, t3) => e2 - t3);
        const s = this.overlays.getIterator();
        for (; s.hasNext(); ) {
          const e2 = s.getNext().value;
          if (e2.getKey().getCollectionGroup() === t2 && e2.largestBatchId > n2) {
            let t3 = i.get(e2.largestBatchId);
            null === t3 && (t3 = __PRIVATE_newOverlayMap(), i = i.insert(e2.largestBatchId, t3)), t3.set(e2.getKey(), e2);
          }
        }
        const o = __PRIVATE_newOverlayMap(), _ = i.getIterator();
        for (; _.hasNext(); ) {
          if (_.getNext().value.forEach((e2, t3) => o.set(e2, t3)), o.size() >= r2) break;
        }
        return PersistencePromise.resolve(o);
      }
      ht(e, t2, n2) {
        const r2 = this.overlays.get(n2.key);
        if (null !== r2) {
          const e2 = this.Ir.get(r2.largestBatchId).delete(n2.key);
          this.Ir.set(r2.largestBatchId, e2);
        }
        this.overlays = this.overlays.insert(n2.key, new Overlay(t2, n2));
        let i = this.Ir.get(t2);
        void 0 === i && (i = __PRIVATE_documentKeySet(), this.Ir.set(t2, i)), this.Ir.set(t2, i.add(n2.key));
      }
    }
    /**
     * @license
     * Copyright 2024 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_MemoryGlobalsCache {
      constructor() {
        this.sessionToken = ByteString.EMPTY_BYTE_STRING;
      }
      getSessionToken(e) {
        return PersistencePromise.resolve(this.sessionToken);
      }
      setSessionToken(e, t2) {
        return this.sessionToken = t2, PersistencePromise.resolve();
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_ReferenceSet {
      constructor() {
        this.Tr = new SortedSet(__PRIVATE_DocReference.Er), // A set of outstanding references to a document sorted by target id.
        this.dr = new SortedSet(__PRIVATE_DocReference.Ar);
      }
      /** Returns true if the reference set contains no references. */
      isEmpty() {
        return this.Tr.isEmpty();
      }
      /** Adds a reference to the given document key for the given ID. */
      addReference(e, t2) {
        const n2 = new __PRIVATE_DocReference(e, t2);
        this.Tr = this.Tr.add(n2), this.dr = this.dr.add(n2);
      }
      /** Add references to the given document keys for the given ID. */
      Rr(e, t2) {
        e.forEach((e2) => this.addReference(e2, t2));
      }
      /**
       * Removes a reference to the given document key for the given
       * ID.
       */
      removeReference(e, t2) {
        this.Vr(new __PRIVATE_DocReference(e, t2));
      }
      mr(e, t2) {
        e.forEach((e2) => this.removeReference(e2, t2));
      }
      /**
       * Clears all references with a given ID. Calls removeRef() for each key
       * removed.
       */
      gr(e) {
        const t2 = new DocumentKey(new ResourcePath([])), n2 = new __PRIVATE_DocReference(t2, e), r2 = new __PRIVATE_DocReference(t2, e + 1), i = [];
        return this.dr.forEachInRange([n2, r2], (e2) => {
          this.Vr(e2), i.push(e2.key);
        }), i;
      }
      pr() {
        this.Tr.forEach((e) => this.Vr(e));
      }
      Vr(e) {
        this.Tr = this.Tr.delete(e), this.dr = this.dr.delete(e);
      }
      yr(e) {
        const t2 = new DocumentKey(new ResourcePath([])), n2 = new __PRIVATE_DocReference(t2, e), r2 = new __PRIVATE_DocReference(t2, e + 1);
        let i = __PRIVATE_documentKeySet();
        return this.dr.forEachInRange([n2, r2], (e2) => {
          i = i.add(e2.key);
        }), i;
      }
      containsKey(e) {
        const t2 = new __PRIVATE_DocReference(e, 0), n2 = this.Tr.firstAfterOrEqual(t2);
        return null !== n2 && e.isEqual(n2.key);
      }
    }
    class __PRIVATE_DocReference {
      constructor(e, t2) {
        this.key = e, this.wr = t2;
      }
      /** Compare by key then by ID */
      static Er(e, t2) {
        return DocumentKey.comparator(e.key, t2.key) || __PRIVATE_primitiveComparator(e.wr, t2.wr);
      }
      /** Compare by ID then by key */
      static Ar(e, t2) {
        return __PRIVATE_primitiveComparator(e.wr, t2.wr) || DocumentKey.comparator(e.key, t2.key);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_MemoryMutationQueue {
      constructor(e, t2) {
        this.indexManager = e, this.referenceDelegate = t2, /**
         * The set of all mutations that have been sent but not yet been applied to
         * the backend.
         */
        this.mutationQueue = [], /** Next value to use when assigning sequential IDs to each mutation batch. */
        this.Sr = 1, /** An ordered mapping between documents and the mutations batch IDs. */
        this.br = new SortedSet(__PRIVATE_DocReference.Er);
      }
      checkEmpty(e) {
        return PersistencePromise.resolve(0 === this.mutationQueue.length);
      }
      addMutationBatch(e, t2, n2, r2) {
        const i = this.Sr;
        this.Sr++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
        const s = new MutationBatch(i, t2, n2, r2);
        this.mutationQueue.push(s);
        for (const t3 of r2) this.br = this.br.add(new __PRIVATE_DocReference(t3.key, i)), this.indexManager.addToCollectionParentIndex(e, t3.key.path.popLast());
        return PersistencePromise.resolve(s);
      }
      lookupMutationBatch(e, t2) {
        return PersistencePromise.resolve(this.Dr(t2));
      }
      getNextMutationBatchAfterBatchId(e, t2) {
        const n2 = t2 + 1, r2 = this.vr(n2), i = r2 < 0 ? 0 : r2;
        return PersistencePromise.resolve(this.mutationQueue.length > i ? this.mutationQueue[i] : null);
      }
      getHighestUnacknowledgedBatchId() {
        return PersistencePromise.resolve(0 === this.mutationQueue.length ? -1 : this.Sr - 1);
      }
      getAllMutationBatches(e) {
        return PersistencePromise.resolve(this.mutationQueue.slice());
      }
      getAllMutationBatchesAffectingDocumentKey(e, t2) {
        const n2 = new __PRIVATE_DocReference(t2, 0), r2 = new __PRIVATE_DocReference(t2, Number.POSITIVE_INFINITY), i = [];
        return this.br.forEachInRange([n2, r2], (e2) => {
          const t3 = this.Dr(e2.wr);
          i.push(t3);
        }), PersistencePromise.resolve(i);
      }
      getAllMutationBatchesAffectingDocumentKeys(e, t2) {
        let n2 = new SortedSet(__PRIVATE_primitiveComparator);
        return t2.forEach((e2) => {
          const t3 = new __PRIVATE_DocReference(e2, 0), r2 = new __PRIVATE_DocReference(e2, Number.POSITIVE_INFINITY);
          this.br.forEachInRange([t3, r2], (e3) => {
            n2 = n2.add(e3.wr);
          });
        }), PersistencePromise.resolve(this.Cr(n2));
      }
      getAllMutationBatchesAffectingQuery(e, t2) {
        const n2 = t2.path, r2 = n2.length + 1;
        let i = n2;
        DocumentKey.isDocumentKey(i) || (i = i.child(""));
        const s = new __PRIVATE_DocReference(new DocumentKey(i), 0);
        let o = new SortedSet(__PRIVATE_primitiveComparator);
        return this.br.forEachWhile((e2) => {
          const t3 = e2.key.path;
          return !!n2.isPrefixOf(t3) && // Rows with document keys more than one segment longer than the query
          // path can't be matches. For example, a query on 'rooms' can't match
          // the document /rooms/abc/messages/xyx.
          // TODO(mcg): we'll need a different scanner when we implement
          // ancestor queries.
          (t3.length === r2 && (o = o.add(e2.wr)), true);
        }, s), PersistencePromise.resolve(this.Cr(o));
      }
      Cr(e) {
        const t2 = [];
        return e.forEach((e2) => {
          const n2 = this.Dr(e2);
          null !== n2 && t2.push(n2);
        }), t2;
      }
      removeMutationBatch(e, t2) {
        __PRIVATE_hardAssert(0 === this.Fr(t2.batchId, "removed")), this.mutationQueue.shift();
        let n2 = this.br;
        return PersistencePromise.forEach(t2.mutations, (r2) => {
          const i = new __PRIVATE_DocReference(r2.key, t2.batchId);
          return n2 = n2.delete(i), this.referenceDelegate.markPotentiallyOrphaned(e, r2.key);
        }).next(() => {
          this.br = n2;
        });
      }
      On(e) {
      }
      containsKey(e, t2) {
        const n2 = new __PRIVATE_DocReference(t2, 0), r2 = this.br.firstAfterOrEqual(n2);
        return PersistencePromise.resolve(t2.isEqual(r2 && r2.key));
      }
      performConsistencyCheck(e) {
        return this.mutationQueue.length, PersistencePromise.resolve();
      }
      /**
       * Finds the index of the given batchId in the mutation queue and asserts that
       * the resulting index is within the bounds of the queue.
       *
       * @param batchId - The batchId to search for
       * @param action - A description of what the caller is doing, phrased in passive
       * form (e.g. "acknowledged" in a routine that acknowledges batches).
       */
      Fr(e, t2) {
        return this.vr(e);
      }
      /**
       * Finds the index of the given batchId in the mutation queue. This operation
       * is O(1).
       *
       * @returns The computed index of the batch with the given batchId, based on
       * the state of the queue. Note this index can be negative if the requested
       * batchId has already been removed from the queue or past the end of the
       * queue if the batchId is larger than the last added batch.
       */
      vr(e) {
        if (0 === this.mutationQueue.length)
          return 0;
        return e - this.mutationQueue[0].batchId;
      }
      /**
       * A version of lookupMutationBatch that doesn't return a promise, this makes
       * other functions that uses this code easier to read and more efficient.
       */
      Dr(e) {
        const t2 = this.vr(e);
        if (t2 < 0 || t2 >= this.mutationQueue.length) return null;
        return this.mutationQueue[t2];
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_MemoryRemoteDocumentCacheImpl {
      /**
       * @param sizer - Used to assess the size of a document. For eager GC, this is
       * expected to just return 0 to avoid unnecessarily doing the work of
       * calculating the size.
       */
      constructor(e) {
        this.Mr = e, /** Underlying cache of documents and their read times. */
        this.docs = function __PRIVATE_documentEntryMap() {
          return new SortedMap$1(DocumentKey.comparator);
        }(), /** Size of all cached documents. */
        this.size = 0;
      }
      setIndexManager(e) {
        this.indexManager = e;
      }
      /**
       * Adds the supplied entry to the cache and updates the cache size as appropriate.
       *
       * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()`.
       */
      addEntry(e, t2) {
        const n2 = t2.key, r2 = this.docs.get(n2), i = r2 ? r2.size : 0, s = this.Mr(t2);
        return this.docs = this.docs.insert(n2, {
          document: t2.mutableCopy(),
          size: s
        }), this.size += s - i, this.indexManager.addToCollectionParentIndex(e, n2.path.popLast());
      }
      /**
       * Removes the specified entry from the cache and updates the cache size as appropriate.
       *
       * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()`.
       */
      removeEntry(e) {
        const t2 = this.docs.get(e);
        t2 && (this.docs = this.docs.remove(e), this.size -= t2.size);
      }
      getEntry(e, t2) {
        const n2 = this.docs.get(t2);
        return PersistencePromise.resolve(n2 ? n2.document.mutableCopy() : MutableDocument.newInvalidDocument(t2));
      }
      getEntries(e, t2) {
        let n2 = __PRIVATE_mutableDocumentMap();
        return t2.forEach((e2) => {
          const t3 = this.docs.get(e2);
          n2 = n2.insert(e2, t3 ? t3.document.mutableCopy() : MutableDocument.newInvalidDocument(e2));
        }), PersistencePromise.resolve(n2);
      }
      getDocumentsMatchingQuery(e, t2, n2, r2) {
        let i = __PRIVATE_mutableDocumentMap();
        const s = t2.path, o = new DocumentKey(s.child("")), _ = this.docs.getIteratorFrom(o);
        for (; _.hasNext(); ) {
          const { key: e2, value: { document: o2 } } = _.getNext();
          if (!s.isPrefixOf(e2.path)) break;
          e2.path.length > s.length + 1 || (__PRIVATE_indexOffsetComparator(__PRIVATE_newIndexOffsetFromDocument(o2), n2) <= 0 || (r2.has(o2.key) || __PRIVATE_queryMatches(t2, o2)) && (i = i.insert(o2.key, o2.mutableCopy())));
        }
        return PersistencePromise.resolve(i);
      }
      getAllFromCollectionGroup(e, t2, n2, r2) {
        fail();
      }
      Or(e, t2) {
        return PersistencePromise.forEach(this.docs, (e2) => t2(e2));
      }
      newChangeBuffer(e) {
        return new __PRIVATE_MemoryRemoteDocumentChangeBuffer(this);
      }
      getSize(e) {
        return PersistencePromise.resolve(this.size);
      }
    }
    class __PRIVATE_MemoryRemoteDocumentChangeBuffer extends RemoteDocumentChangeBuffer {
      constructor(e) {
        super(), this.cr = e;
      }
      applyChanges(e) {
        const t2 = [];
        return this.changes.forEach((n2, r2) => {
          r2.isValidDocument() ? t2.push(this.cr.addEntry(e, r2)) : this.cr.removeEntry(n2);
        }), PersistencePromise.waitFor(t2);
      }
      getFromCache(e, t2) {
        return this.cr.getEntry(e, t2);
      }
      getAllFromCache(e, t2) {
        return this.cr.getEntries(e, t2);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_MemoryTargetCache {
      constructor(e) {
        this.persistence = e, /**
         * Maps a target to the data about that target
         */
        this.Nr = new ObjectMap((e2) => __PRIVATE_canonifyTarget(e2), __PRIVATE_targetEquals), /** The last received snapshot version. */
        this.lastRemoteSnapshotVersion = SnapshotVersion.min(), /** The highest numbered target ID encountered. */
        this.highestTargetId = 0, /** The highest sequence number encountered. */
        this.Lr = 0, /**
         * A ordered bidirectional mapping between documents and the remote target
         * IDs.
         */
        this.Br = new __PRIVATE_ReferenceSet(), this.targetCount = 0, this.kr = __PRIVATE_TargetIdGenerator.Bn();
      }
      forEachTarget(e, t2) {
        return this.Nr.forEach((e2, n2) => t2(n2)), PersistencePromise.resolve();
      }
      getLastRemoteSnapshotVersion(e) {
        return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
      }
      getHighestSequenceNumber(e) {
        return PersistencePromise.resolve(this.Lr);
      }
      allocateTargetId(e) {
        return this.highestTargetId = this.kr.next(), PersistencePromise.resolve(this.highestTargetId);
      }
      setTargetsMetadata(e, t2, n2) {
        return n2 && (this.lastRemoteSnapshotVersion = n2), t2 > this.Lr && (this.Lr = t2), PersistencePromise.resolve();
      }
      Kn(e) {
        this.Nr.set(e.target, e);
        const t2 = e.targetId;
        t2 > this.highestTargetId && (this.kr = new __PRIVATE_TargetIdGenerator(t2), this.highestTargetId = t2), e.sequenceNumber > this.Lr && (this.Lr = e.sequenceNumber);
      }
      addTargetData(e, t2) {
        return this.Kn(t2), this.targetCount += 1, PersistencePromise.resolve();
      }
      updateTargetData(e, t2) {
        return this.Kn(t2), PersistencePromise.resolve();
      }
      removeTargetData(e, t2) {
        return this.Nr.delete(t2.target), this.Br.gr(t2.targetId), this.targetCount -= 1, PersistencePromise.resolve();
      }
      removeTargets(e, t2, n2) {
        let r2 = 0;
        const i = [];
        return this.Nr.forEach((s, o) => {
          o.sequenceNumber <= t2 && null === n2.get(o.targetId) && (this.Nr.delete(s), i.push(this.removeMatchingKeysForTargetId(e, o.targetId)), r2++);
        }), PersistencePromise.waitFor(i).next(() => r2);
      }
      getTargetCount(e) {
        return PersistencePromise.resolve(this.targetCount);
      }
      getTargetData(e, t2) {
        const n2 = this.Nr.get(t2) || null;
        return PersistencePromise.resolve(n2);
      }
      addMatchingKeys(e, t2, n2) {
        return this.Br.Rr(t2, n2), PersistencePromise.resolve();
      }
      removeMatchingKeys(e, t2, n2) {
        this.Br.mr(t2, n2);
        const r2 = this.persistence.referenceDelegate, i = [];
        return r2 && t2.forEach((t3) => {
          i.push(r2.markPotentiallyOrphaned(e, t3));
        }), PersistencePromise.waitFor(i);
      }
      removeMatchingKeysForTargetId(e, t2) {
        return this.Br.gr(t2), PersistencePromise.resolve();
      }
      getMatchingKeysForTargetId(e, t2) {
        const n2 = this.Br.yr(t2);
        return PersistencePromise.resolve(n2);
      }
      containsKey(e, t2) {
        return PersistencePromise.resolve(this.Br.containsKey(t2));
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_MemoryPersistence {
      /**
       * The constructor accepts a factory for creating a reference delegate. This
       * allows both the delegate and this instance to have strong references to
       * each other without having nullable fields that would then need to be
       * checked or asserted on every access.
       */
      constructor(e, t2) {
        this.qr = {}, this.overlays = {}, this.Qr = new __PRIVATE_ListenSequence(0), this.Kr = false, this.Kr = true, this.$r = new __PRIVATE_MemoryGlobalsCache(), this.referenceDelegate = e(this), this.Ur = new __PRIVATE_MemoryTargetCache(this);
        this.indexManager = new __PRIVATE_MemoryIndexManager(), this.remoteDocumentCache = function __PRIVATE_newMemoryRemoteDocumentCache(e2) {
          return new __PRIVATE_MemoryRemoteDocumentCacheImpl(e2);
        }((e2) => this.referenceDelegate.Wr(e2)), this.serializer = new __PRIVATE_LocalSerializer(t2), this.Gr = new __PRIVATE_MemoryBundleCache(this.serializer);
      }
      start() {
        return Promise.resolve();
      }
      shutdown() {
        return this.Kr = false, Promise.resolve();
      }
      get started() {
        return this.Kr;
      }
      setDatabaseDeletedListener() {
      }
      setNetworkEnabled() {
      }
      getIndexManager(e) {
        return this.indexManager;
      }
      getDocumentOverlayCache(e) {
        let t2 = this.overlays[e.toKey()];
        return t2 || (t2 = new __PRIVATE_MemoryDocumentOverlayCache(), this.overlays[e.toKey()] = t2), t2;
      }
      getMutationQueue(e, t2) {
        let n2 = this.qr[e.toKey()];
        return n2 || (n2 = new __PRIVATE_MemoryMutationQueue(t2, this.referenceDelegate), this.qr[e.toKey()] = n2), n2;
      }
      getGlobalsCache() {
        return this.$r;
      }
      getTargetCache() {
        return this.Ur;
      }
      getRemoteDocumentCache() {
        return this.remoteDocumentCache;
      }
      getBundleCache() {
        return this.Gr;
      }
      runTransaction(e, t2, n2) {
        __PRIVATE_logDebug("MemoryPersistence", "Starting transaction:", e);
        const r2 = new __PRIVATE_MemoryTransaction(this.Qr.next());
        return this.referenceDelegate.zr(), n2(r2).next((e2) => this.referenceDelegate.jr(r2).next(() => e2)).toPromise().then((e2) => (r2.raiseOnCommittedEvent(), e2));
      }
      Hr(e, t2) {
        return PersistencePromise.or(Object.values(this.qr).map((n2) => () => n2.containsKey(e, t2)));
      }
    }
    class __PRIVATE_MemoryTransaction extends PersistenceTransaction {
      constructor(e) {
        super(), this.currentSequenceNumber = e;
      }
    }
    class __PRIVATE_MemoryEagerDelegate {
      constructor(e) {
        this.persistence = e, /** Tracks all documents that are active in Query views. */
        this.Jr = new __PRIVATE_ReferenceSet(), /** The list of documents that are potentially GCed after each transaction. */
        this.Yr = null;
      }
      static Zr(e) {
        return new __PRIVATE_MemoryEagerDelegate(e);
      }
      get Xr() {
        if (this.Yr) return this.Yr;
        throw fail();
      }
      addReference(e, t2, n2) {
        return this.Jr.addReference(n2, t2), this.Xr.delete(n2.toString()), PersistencePromise.resolve();
      }
      removeReference(e, t2, n2) {
        return this.Jr.removeReference(n2, t2), this.Xr.add(n2.toString()), PersistencePromise.resolve();
      }
      markPotentiallyOrphaned(e, t2) {
        return this.Xr.add(t2.toString()), PersistencePromise.resolve();
      }
      removeTarget(e, t2) {
        this.Jr.gr(t2.targetId).forEach((e2) => this.Xr.add(e2.toString()));
        const n2 = this.persistence.getTargetCache();
        return n2.getMatchingKeysForTargetId(e, t2.targetId).next((e2) => {
          e2.forEach((e3) => this.Xr.add(e3.toString()));
        }).next(() => n2.removeTargetData(e, t2));
      }
      zr() {
        this.Yr = /* @__PURE__ */ new Set();
      }
      jr(e) {
        const t2 = this.persistence.getRemoteDocumentCache().newChangeBuffer();
        return PersistencePromise.forEach(this.Xr, (n2) => {
          const r2 = DocumentKey.fromPath(n2);
          return this.ei(e, r2).next((e2) => {
            e2 || t2.removeEntry(r2, SnapshotVersion.min());
          });
        }).next(() => (this.Yr = null, t2.apply(e)));
      }
      updateLimboDocument(e, t2) {
        return this.ei(e, t2).next((e2) => {
          e2 ? this.Xr.delete(t2.toString()) : this.Xr.add(t2.toString());
        });
      }
      Wr(e) {
        return 0;
      }
      ei(e, t2) {
        return PersistencePromise.or([() => PersistencePromise.resolve(this.Jr.containsKey(t2)), () => this.persistence.getTargetCache().containsKey(e, t2), () => this.persistence.Hr(e, t2)]);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_LocalViewChanges {
      constructor(e, t2, n2, r2) {
        this.targetId = e, this.fromCache = t2, this.$i = n2, this.Ui = r2;
      }
      static Wi(e, t2) {
        let n2 = __PRIVATE_documentKeySet(), r2 = __PRIVATE_documentKeySet();
        for (const e2 of t2.docChanges) switch (e2.type) {
          case 0:
            n2 = n2.add(e2.doc.key);
            break;
          case 1:
            r2 = r2.add(e2.doc.key);
        }
        return new __PRIVATE_LocalViewChanges(e, t2.fromCache, n2, r2);
      }
    }
    /**
     * @license
     * Copyright 2023 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class QueryContext {
      constructor() {
        this._documentReadCount = 0;
      }
      get documentReadCount() {
        return this._documentReadCount;
      }
      incrementDocumentReadCount(e) {
        this._documentReadCount += e;
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_QueryEngine {
      constructor() {
        this.Gi = false, this.zi = false, /**
         * SDK only decides whether it should create index when collection size is
         * larger than this.
         */
        this.ji = 100, this.Hi = /**
        * This cost represents the evaluation result of
        * (([index, docKey] + [docKey, docContent]) per document in the result set)
        * / ([docKey, docContent] per documents in full collection scan) coming from
        * experiment [enter PR experiment URL here].
        */
        function __PRIVATE_getDefaultRelativeIndexReadCostPerDocument() {
          return isSafari() ? 8 : __PRIVATE_getAndroidVersion(getUA()) > 0 ? 6 : 4;
        }();
      }
      /** Sets the document view to query against. */
      initialize(e, t2) {
        this.Ji = e, this.indexManager = t2, this.Gi = true;
      }
      /** Returns all local documents matching the specified query. */
      getDocumentsMatchingQuery(e, t2, n2, r2) {
        const i = {
          result: null
        };
        return this.Yi(e, t2).next((e2) => {
          i.result = e2;
        }).next(() => {
          if (!i.result) return this.Zi(e, t2, r2, n2).next((e2) => {
            i.result = e2;
          });
        }).next(() => {
          if (i.result) return;
          const n3 = new QueryContext();
          return this.Xi(e, t2, n3).next((r3) => {
            if (i.result = r3, this.zi) return this.es(e, t2, n3, r3.size);
          });
        }).next(() => i.result);
      }
      es(e, t2, n2, r2) {
        return n2.documentReadCount < this.ji ? (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "SDK will not create cache indexes for query:", __PRIVATE_stringifyQuery(t2), "since it only creates cache indexes for collection contains", "more than or equal to", this.ji, "documents"), PersistencePromise.resolve()) : (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Query:", __PRIVATE_stringifyQuery(t2), "scans", n2.documentReadCount, "local documents and returns", r2, "documents as results."), n2.documentReadCount > this.Hi * r2 ? (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "The SDK decides to create cache indexes for query:", __PRIVATE_stringifyQuery(t2), "as using cache indexes may help improve performance."), this.indexManager.createTargetIndexes(e, __PRIVATE_queryToTarget(t2))) : PersistencePromise.resolve());
      }
      /**
       * Performs an indexed query that evaluates the query based on a collection's
       * persisted index values. Returns `null` if an index is not available.
       */
      Yi(e, t2) {
        if (__PRIVATE_queryMatchesAllDocuments(t2))
          return PersistencePromise.resolve(null);
        let n2 = __PRIVATE_queryToTarget(t2);
        return this.indexManager.getIndexType(e, n2).next((r2) => 0 === r2 ? null : (null !== t2.limit && 1 === r2 && // We cannot apply a limit for targets that are served using a partial
        // index. If a partial index will be used to serve the target, the
        // query may return a superset of documents that match the target
        // (e.g. if the index doesn't include all the target's filters), or
        // may return the correct set of documents in the wrong order (e.g. if
        // the index doesn't include a segment for one of the orderBys).
        // Therefore, a limit should not be applied in such cases.
        (t2 = __PRIVATE_queryWithLimit(
          t2,
          null,
          "F"
          /* LimitType.First */
        ), n2 = __PRIVATE_queryToTarget(t2)), this.indexManager.getDocumentsMatchingTarget(e, n2).next((r3) => {
          const i = __PRIVATE_documentKeySet(...r3);
          return this.Ji.getDocuments(e, i).next((r4) => this.indexManager.getMinOffset(e, n2).next((n3) => {
            const s = this.ts(t2, r4);
            return this.ns(t2, s, i, n3.readTime) ? this.Yi(e, __PRIVATE_queryWithLimit(
              t2,
              null,
              "F"
              /* LimitType.First */
            )) : this.rs(e, s, t2, n3);
          }));
        })));
      }
      /**
       * Performs a query based on the target's persisted query mapping. Returns
       * `null` if the mapping is not available or cannot be used.
       */
      Zi(e, t2, n2, r2) {
        return __PRIVATE_queryMatchesAllDocuments(t2) || r2.isEqual(SnapshotVersion.min()) ? PersistencePromise.resolve(null) : this.Ji.getDocuments(e, n2).next((i) => {
          const s = this.ts(t2, i);
          return this.ns(t2, s, n2, r2) ? PersistencePromise.resolve(null) : (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Re-using previous result from %s to execute query: %s", r2.toString(), __PRIVATE_stringifyQuery(t2)), this.rs(e, s, t2, __PRIVATE_newIndexOffsetSuccessorFromReadTime(r2, -1)).next((e2) => e2));
        });
      }
      /** Applies the query filter and sorting to the provided documents.  */
      ts(e, t2) {
        let n2 = new SortedSet(__PRIVATE_newQueryComparator(e));
        return t2.forEach((t3, r2) => {
          __PRIVATE_queryMatches(e, r2) && (n2 = n2.add(r2));
        }), n2;
      }
      /**
       * Determines if a limit query needs to be refilled from cache, making it
       * ineligible for index-free execution.
       *
       * @param query - The query.
       * @param sortedPreviousResults - The documents that matched the query when it
       * was last synchronized, sorted by the query's comparator.
       * @param remoteKeys - The document keys that matched the query at the last
       * snapshot.
       * @param limboFreeSnapshotVersion - The version of the snapshot when the
       * query was last synchronized.
       */
      ns(e, t2, n2, r2) {
        if (null === e.limit)
          return false;
        if (n2.size !== t2.size)
          return true;
        const i = "F" === e.limitType ? t2.last() : t2.first();
        return !!i && (i.hasPendingWrites || i.version.compareTo(r2) > 0);
      }
      Xi(e, t2, n2) {
        return __PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Using full collection scan to execute query:", __PRIVATE_stringifyQuery(t2)), this.Ji.getDocumentsMatchingQuery(e, t2, IndexOffset.min(), n2);
      }
      /**
       * Combines the results from an indexed execution with the remaining documents
       * that have not yet been indexed.
       */
      rs(e, t2, n2, r2) {
        return this.Ji.getDocumentsMatchingQuery(e, n2, r2).next((e2) => (
          // Merge with existing results
          (t2.forEach((t3) => {
            e2 = e2.insert(t3.key, t3);
          }), e2)
        ));
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_LocalStoreImpl {
      constructor(e, t2, n2, r2) {
        this.persistence = e, this.ss = t2, this.serializer = r2, /**
         * Maps a targetID to data about its target.
         *
         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
         * of `applyRemoteEvent()` idempotent.
         */
        this.os = new SortedMap$1(__PRIVATE_primitiveComparator), /** Maps a target to its targetID. */
        // TODO(wuandy): Evaluate if TargetId can be part of Target.
        this._s = new ObjectMap((e2) => __PRIVATE_canonifyTarget(e2), __PRIVATE_targetEquals), /**
         * A per collection group index of the last read time processed by
         * `getNewDocumentChanges()`.
         *
         * PORTING NOTE: This is only used for multi-tab synchronization.
         */
        this.us = /* @__PURE__ */ new Map(), this.cs = e.getRemoteDocumentCache(), this.Ur = e.getTargetCache(), this.Gr = e.getBundleCache(), this.ls(n2);
      }
      ls(e) {
        this.documentOverlayCache = this.persistence.getDocumentOverlayCache(e), this.indexManager = this.persistence.getIndexManager(e), this.mutationQueue = this.persistence.getMutationQueue(e, this.indexManager), this.localDocuments = new LocalDocumentsView(this.cs, this.mutationQueue, this.documentOverlayCache, this.indexManager), this.cs.setIndexManager(this.indexManager), this.ss.initialize(this.localDocuments, this.indexManager);
      }
      collectGarbage(e) {
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (t2) => e.collect(t2, this.os));
      }
    }
    function __PRIVATE_newLocalStore(e, t2, n2, r2) {
      return new __PRIVATE_LocalStoreImpl(e, t2, n2, r2);
    }
    function __PRIVATE_localStoreHandleUserChange(e, t2) {
      return __async(this, null, function* () {
        const n2 = __PRIVATE_debugCast(e);
        return yield n2.persistence.runTransaction("Handle user change", "readonly", (e2) => {
          let r2;
          return n2.mutationQueue.getAllMutationBatches(e2).next((i) => (r2 = i, n2.ls(t2), n2.mutationQueue.getAllMutationBatches(e2))).next((t3) => {
            const i = [], s = [];
            let o = __PRIVATE_documentKeySet();
            for (const e3 of r2) {
              i.push(e3.batchId);
              for (const t4 of e3.mutations) o = o.add(t4.key);
            }
            for (const e3 of t3) {
              s.push(e3.batchId);
              for (const t4 of e3.mutations) o = o.add(t4.key);
            }
            return n2.localDocuments.getDocuments(e2, o).next((e3) => ({
              hs: e3,
              removedBatchIds: i,
              addedBatchIds: s
            }));
          });
        });
      });
    }
    function __PRIVATE_localStoreAcknowledgeBatch(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      return n2.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (e2) => {
        const r2 = t2.batch.keys(), i = n2.cs.newChangeBuffer({
          trackRemovals: true
        });
        return function __PRIVATE_applyWriteToRemoteDocuments(e3, t3, n3, r3) {
          const i2 = n3.batch, s = i2.keys();
          let o = PersistencePromise.resolve();
          return s.forEach((e4) => {
            o = o.next(() => r3.getEntry(t3, e4)).next((t4) => {
              const s2 = n3.docVersions.get(e4);
              __PRIVATE_hardAssert(null !== s2), t4.version.compareTo(s2) < 0 && (i2.applyToRemoteDocument(t4, n3), t4.isValidDocument() && // We use the commitVersion as the readTime rather than the
              // document's updateTime since the updateTime is not advanced
              // for updates that do not modify the underlying document.
              (t4.setReadTime(n3.commitVersion), r3.addEntry(t4)));
            });
          }), o.next(() => e3.mutationQueue.removeMutationBatch(t3, i2));
        }(n2, e2, t2, i).next(() => i.apply(e2)).next(() => n2.mutationQueue.performConsistencyCheck(e2)).next(() => n2.documentOverlayCache.removeOverlaysForBatchId(e2, r2, t2.batch.batchId)).next(() => n2.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e2, function __PRIVATE_getKeysWithTransformResults(e3) {
          let t3 = __PRIVATE_documentKeySet();
          for (let n3 = 0; n3 < e3.mutationResults.length; ++n3) {
            e3.mutationResults[n3].transformResults.length > 0 && (t3 = t3.add(e3.batch.mutations[n3].key));
          }
          return t3;
        }(t2))).next(() => n2.localDocuments.getDocuments(e2, r2));
      });
    }
    function __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e) {
      const t2 = __PRIVATE_debugCast(e);
      return t2.persistence.runTransaction("Get last remote snapshot version", "readonly", (e2) => t2.Ur.getLastRemoteSnapshotVersion(e2));
    }
    function __PRIVATE_localStoreApplyRemoteEventToLocalCache(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = t2.snapshotVersion;
      let i = n2.os;
      return n2.persistence.runTransaction("Apply remote event", "readwrite-primary", (e2) => {
        const s = n2.cs.newChangeBuffer({
          trackRemovals: true
        });
        i = n2.os;
        const o = [];
        t2.targetChanges.forEach((s2, _2) => {
          const a2 = i.get(_2);
          if (!a2) return;
          o.push(n2.Ur.removeMatchingKeys(e2, s2.removedDocuments, _2).next(() => n2.Ur.addMatchingKeys(e2, s2.addedDocuments, _2)));
          let u2 = a2.withSequenceNumber(e2.currentSequenceNumber);
          null !== t2.targetMismatches.get(_2) ? u2 = u2.withResumeToken(ByteString.EMPTY_BYTE_STRING, SnapshotVersion.min()).withLastLimboFreeSnapshotVersion(SnapshotVersion.min()) : s2.resumeToken.approximateByteSize() > 0 && (u2 = u2.withResumeToken(s2.resumeToken, r2)), i = i.insert(_2, u2), // Update the target data if there are target changes (or if
          // sufficient time has passed since the last update).
          /**
          * Returns true if the newTargetData should be persisted during an update of
          * an active target. TargetData should always be persisted when a target is
          * being released and should not call this function.
          *
          * While the target is active, TargetData updates can be omitted when nothing
          * about the target has changed except metadata like the resume token or
          * snapshot version. Occasionally it's worth the extra write to prevent these
          * values from getting too stale after a crash, but this doesn't have to be
          * too frequent.
          */
          function __PRIVATE_shouldPersistTargetData(e3, t3, n3) {
            if (0 === e3.resumeToken.approximateByteSize()) return true;
            if (t3.snapshotVersion.toMicroseconds() - e3.snapshotVersion.toMicroseconds() >= 3e8) return true;
            return n3.addedDocuments.size + n3.modifiedDocuments.size + n3.removedDocuments.size > 0;
          }(a2, u2, s2) && o.push(n2.Ur.updateTargetData(e2, u2));
        });
        let _ = __PRIVATE_mutableDocumentMap(), a = __PRIVATE_documentKeySet();
        if (t2.documentUpdates.forEach((r3) => {
          t2.resolvedLimboDocuments.has(r3) && o.push(n2.persistence.referenceDelegate.updateLimboDocument(e2, r3));
        }), // Each loop iteration only affects its "own" doc, so it's safe to get all
        // the remote documents in advance in a single call.
        o.push(__PRIVATE_populateDocumentChangeBuffer(e2, s, t2.documentUpdates).next((e3) => {
          _ = e3.Ps, a = e3.Is;
        })), !r2.isEqual(SnapshotVersion.min())) {
          const t3 = n2.Ur.getLastRemoteSnapshotVersion(e2).next((t4) => n2.Ur.setTargetsMetadata(e2, e2.currentSequenceNumber, r2));
          o.push(t3);
        }
        return PersistencePromise.waitFor(o).next(() => s.apply(e2)).next(() => n2.localDocuments.getLocalViewOfDocuments(e2, _, a)).next(() => _);
      }).then((e2) => (n2.os = i, e2));
    }
    function __PRIVATE_populateDocumentChangeBuffer(e, t2, n2) {
      let r2 = __PRIVATE_documentKeySet(), i = __PRIVATE_documentKeySet();
      return n2.forEach((e2) => r2 = r2.add(e2)), t2.getEntries(e, r2).next((e2) => {
        let r3 = __PRIVATE_mutableDocumentMap();
        return n2.forEach((n3, s) => {
          const o = e2.get(n3);
          s.isFoundDocument() !== o.isFoundDocument() && (i = i.add(n3)), // Note: The order of the steps below is important, since we want
          // to ensure that rejected limbo resolutions (which fabricate
          // NoDocuments with SnapshotVersion.min()) never add documents to
          // cache.
          s.isNoDocument() && s.version.isEqual(SnapshotVersion.min()) ? (
            // NoDocuments with SnapshotVersion.min() are used in manufactured
            // events. We remove these documents from cache since we lost
            // access.
            (t2.removeEntry(n3, s.readTime), r3 = r3.insert(n3, s))
          ) : !o.isValidDocument() || s.version.compareTo(o.version) > 0 || 0 === s.version.compareTo(o.version) && o.hasPendingWrites ? (t2.addEntry(s), r3 = r3.insert(n3, s)) : __PRIVATE_logDebug("LocalStore", "Ignoring outdated watch update for ", n3, ". Current version:", o.version, " Watch version:", s.version);
        }), {
          Ps: r3,
          Is: i
        };
      });
    }
    function __PRIVATE_localStoreGetNextMutationBatch(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      return n2.persistence.runTransaction("Get next mutation batch", "readonly", (e2) => (void 0 === t2 && (t2 = -1), n2.mutationQueue.getNextMutationBatchAfterBatchId(e2, t2)));
    }
    function __PRIVATE_localStoreAllocateTarget(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      return n2.persistence.runTransaction("Allocate target", "readwrite", (e2) => {
        let r2;
        return n2.Ur.getTargetData(e2, t2).next((i) => i ? (
          // This target has been listened to previously, so reuse the
          // previous targetID.
          // TODO(mcg): freshen last accessed date?
          (r2 = i, PersistencePromise.resolve(r2))
        ) : n2.Ur.allocateTargetId(e2).next((i2) => (r2 = new TargetData(t2, i2, "TargetPurposeListen", e2.currentSequenceNumber), n2.Ur.addTargetData(e2, r2).next(() => r2))));
      }).then((e2) => {
        const r2 = n2.os.get(e2.targetId);
        return (null === r2 || e2.snapshotVersion.compareTo(r2.snapshotVersion) > 0) && (n2.os = n2.os.insert(e2.targetId, e2), n2._s.set(t2, e2.targetId)), e2;
      });
    }
    function __PRIVATE_localStoreReleaseTarget(e, t2, n2) {
      return __async(this, null, function* () {
        const r2 = __PRIVATE_debugCast(e), i = r2.os.get(t2), s = n2 ? "readwrite" : "readwrite-primary";
        try {
          n2 || (yield r2.persistence.runTransaction("Release target", s, (e2) => r2.persistence.referenceDelegate.removeTarget(e2, i)));
        } catch (e2) {
          if (!__PRIVATE_isIndexedDbTransactionError(e2)) throw e2;
          __PRIVATE_logDebug("LocalStore", `Failed to update sequence numbers for target ${t2}: ${e2}`);
        }
        r2.os = r2.os.remove(t2), r2._s.delete(i.target);
      });
    }
    function __PRIVATE_localStoreExecuteQuery(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e);
      let i = SnapshotVersion.min(), s = __PRIVATE_documentKeySet();
      return r2.persistence.runTransaction(
        "Execute query",
        "readwrite",
        // Use readwrite instead of readonly so indexes can be created
        // Use readwrite instead of readonly so indexes can be created
        (e2) => function __PRIVATE_localStoreGetTargetData(e3, t3, n3) {
          const r3 = __PRIVATE_debugCast(e3), i2 = r3._s.get(n3);
          return void 0 !== i2 ? PersistencePromise.resolve(r3.os.get(i2)) : r3.Ur.getTargetData(t3, n3);
        }(r2, e2, __PRIVATE_queryToTarget(t2)).next((t3) => {
          if (t3) return i = t3.lastLimboFreeSnapshotVersion, r2.Ur.getMatchingKeysForTargetId(e2, t3.targetId).next((e3) => {
            s = e3;
          });
        }).next(() => r2.ss.getDocumentsMatchingQuery(e2, t2, n2 ? i : SnapshotVersion.min(), n2 ? s : __PRIVATE_documentKeySet())).next((e3) => (__PRIVATE_setMaxReadTime(r2, __PRIVATE_queryCollectionGroup(t2), e3), {
          documents: e3,
          Ts: s
        }))
      );
    }
    function __PRIVATE_setMaxReadTime(e, t2, n2) {
      let r2 = e.us.get(t2) || SnapshotVersion.min();
      n2.forEach((e2, t3) => {
        t3.readTime.compareTo(r2) > 0 && (r2 = t3.readTime);
      }), e.us.set(t2, r2);
    }
    class __PRIVATE_LocalClientState {
      constructor() {
        this.activeTargetIds = __PRIVATE_targetIdSet();
      }
      fs(e) {
        this.activeTargetIds = this.activeTargetIds.add(e);
      }
      gs(e) {
        this.activeTargetIds = this.activeTargetIds.delete(e);
      }
      /**
       * Converts this entry into a JSON-encoded format we can use for WebStorage.
       * Does not encode `clientId` as it is part of the key in WebStorage.
       */
      Vs() {
        const e = {
          activeTargetIds: this.activeTargetIds.toArray(),
          updateTimeMs: Date.now()
        };
        return JSON.stringify(e);
      }
    }
    class __PRIVATE_MemorySharedClientState {
      constructor() {
        this.so = new __PRIVATE_LocalClientState(), this.oo = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
      }
      addPendingMutation(e) {
      }
      updateMutationState(e, t2, n2) {
      }
      addLocalQueryTarget(e, t2 = true) {
        return t2 && this.so.fs(e), this.oo[e] || "not-current";
      }
      updateQueryState(e, t2, n2) {
        this.oo[e] = t2;
      }
      removeLocalQueryTarget(e) {
        this.so.gs(e);
      }
      isLocalQueryTarget(e) {
        return this.so.activeTargetIds.has(e);
      }
      clearQueryState(e) {
        delete this.oo[e];
      }
      getAllActiveQueryTargets() {
        return this.so.activeTargetIds;
      }
      isActiveQueryTarget(e) {
        return this.so.activeTargetIds.has(e);
      }
      start() {
        return this.so = new __PRIVATE_LocalClientState(), Promise.resolve();
      }
      handleUserChange(e, t2, n2) {
      }
      setOnlineState(e) {
      }
      shutdown() {
      }
      writeSequenceNumber(e) {
      }
      notifyBundleLoaded(e) {
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_NoopConnectivityMonitor {
      _o(e) {
      }
      shutdown() {
      }
    }
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_BrowserConnectivityMonitor {
      constructor() {
        this.ao = () => this.uo(), this.co = () => this.lo(), this.ho = [], this.Po();
      }
      _o(e) {
        this.ho.push(e);
      }
      shutdown() {
        window.removeEventListener("online", this.ao), window.removeEventListener("offline", this.co);
      }
      Po() {
        window.addEventListener("online", this.ao), window.addEventListener("offline", this.co);
      }
      uo() {
        __PRIVATE_logDebug("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
        for (const e of this.ho) e(
          0
          /* NetworkStatus.AVAILABLE */
        );
      }
      lo() {
        __PRIVATE_logDebug("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
        for (const e of this.ho) e(
          1
          /* NetworkStatus.UNAVAILABLE */
        );
      }
      // TODO(chenbrian): Consider passing in window either into this component or
      // here for testing via FakeWindow.
      /** Checks that all used attributes of window are available. */
      static D() {
        return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
      }
    }
    /**
     * @license
     * Copyright 2023 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let me = null;
    function __PRIVATE_generateUniqueDebugId() {
      return null === me ? me = function __PRIVATE_generateInitialUniqueDebugId() {
        return 268435456 + Math.round(2147483648 * Math.random());
      }() : me++, "0x" + me.toString(16);
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const fe = {
      BatchGetDocuments: "batchGet",
      Commit: "commit",
      RunQuery: "runQuery",
      RunAggregationQuery: "runAggregationQuery"
    };
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_StreamBridge {
      constructor(e) {
        this.Io = e.Io, this.To = e.To;
      }
      Eo(e) {
        this.Ao = e;
      }
      Ro(e) {
        this.Vo = e;
      }
      mo(e) {
        this.fo = e;
      }
      onMessage(e) {
        this.po = e;
      }
      close() {
        this.To();
      }
      send(e) {
        this.Io(e);
      }
      yo() {
        this.Ao();
      }
      wo() {
        this.Vo();
      }
      So(e) {
        this.fo(e);
      }
      bo(e) {
        this.po(e);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const ge = "WebChannelConnection";
    class __PRIVATE_WebChannelConnection extends /**
     * Base class for all Rest-based connections to the backend (WebChannel and
     * HTTP).
     */
    class __PRIVATE_RestConnection {
      constructor(e) {
        this.databaseInfo = e, this.databaseId = e.databaseId;
        const t2 = e.ssl ? "https" : "http", n2 = encodeURIComponent(this.databaseId.projectId), r2 = encodeURIComponent(this.databaseId.database);
        this.Do = t2 + "://" + e.host, this.vo = `projects/${n2}/databases/${r2}`, this.Co = "(default)" === this.databaseId.database ? `project_id=${n2}` : `project_id=${n2}&database_id=${r2}`;
      }
      get Fo() {
        return false;
      }
      Mo(e, t2, n2, r2, i) {
        const s = __PRIVATE_generateUniqueDebugId(), o = this.xo(e, t2.toUriEncodedString());
        __PRIVATE_logDebug("RestConnection", `Sending RPC '${e}' ${s}:`, o, n2);
        const _ = {
          "google-cloud-resource-prefix": this.vo,
          "x-goog-request-params": this.Co
        };
        return this.Oo(_, r2, i), this.No(e, o, _, n2).then((t3) => (__PRIVATE_logDebug("RestConnection", `Received RPC '${e}' ${s}: `, t3), t3), (t3) => {
          throw __PRIVATE_logWarn("RestConnection", `RPC '${e}' ${s} failed with error: `, t3, "url: ", o, "request:", n2), t3;
        });
      }
      Lo(e, t2, n2, r2, i, s) {
        return this.Mo(e, t2, n2, r2, i);
      }
      /**
       * Modifies the headers for a request, adding any authorization token if
       * present and any additional headers for the request.
       */
      Oo(e, t2, n2) {
        e["X-Goog-Api-Client"] = // SDK_VERSION is updated to different value at runtime depending on the entry point,
        // so we need to get its value when we need it in a function.
        function __PRIVATE_getGoogApiClientValue() {
          return "gl-js/ fire/" + S;
        }(), // Content-Type: text/plain will avoid preflight requests which might
        // mess with CORS and redirects by proxies. If we add custom headers
        // we will need to change this code to potentially use the $httpOverwrite
        // parameter supported by ESF to avoid triggering preflight requests.
        e["Content-Type"] = "text/plain", this.databaseInfo.appId && (e["X-Firebase-GMPID"] = this.databaseInfo.appId), t2 && t2.headers.forEach((t3, n3) => e[n3] = t3), n2 && n2.headers.forEach((t3, n3) => e[n3] = t3);
      }
      xo(e, t2) {
        const n2 = fe[e];
        return `${this.Do}/v1/${t2}:${n2}`;
      }
      /**
       * Closes and cleans up any resources associated with the connection. This
       * implementation is a no-op because there are no resources associated
       * with the RestConnection that need to be cleaned up.
       */
      terminate() {
      }
    } {
      constructor(e) {
        super(e), this.forceLongPolling = e.forceLongPolling, this.autoDetectLongPolling = e.autoDetectLongPolling, this.useFetchStreams = e.useFetchStreams, this.longPollingOptions = e.longPollingOptions;
      }
      No(e, t2, n2, r2) {
        const i = __PRIVATE_generateUniqueDebugId();
        return new Promise((s, o) => {
          const _ = new XhrIo();
          _.setWithCredentials(true), _.listenOnce(EventType.COMPLETE, () => {
            try {
              switch (_.getLastErrorCode()) {
                case ErrorCode.NO_ERROR:
                  const t3 = _.getResponseJson();
                  __PRIVATE_logDebug(ge, `XHR for RPC '${e}' ${i} received:`, JSON.stringify(t3)), s(t3);
                  break;
                case ErrorCode.TIMEOUT:
                  __PRIVATE_logDebug(ge, `RPC '${e}' ${i} timed out`), o(new FirestoreError(D.DEADLINE_EXCEEDED, "Request time out"));
                  break;
                case ErrorCode.HTTP_ERROR:
                  const n3 = _.getStatus();
                  if (__PRIVATE_logDebug(ge, `RPC '${e}' ${i} failed with status:`, n3, "response text:", _.getResponseText()), n3 > 0) {
                    let e2 = _.getResponseJson();
                    Array.isArray(e2) && (e2 = e2[0]);
                    const t4 = null == e2 ? void 0 : e2.error;
                    if (t4 && t4.status && t4.message) {
                      const e3 = function __PRIVATE_mapCodeFromHttpResponseErrorStatus(e4) {
                        const t5 = e4.toLowerCase().replace(/_/g, "-");
                        return Object.values(D).indexOf(t5) >= 0 ? t5 : D.UNKNOWN;
                      }(t4.status);
                      o(new FirestoreError(e3, t4.message));
                    } else o(new FirestoreError(D.UNKNOWN, "Server responded with status " + _.getStatus()));
                  } else
                    o(new FirestoreError(D.UNAVAILABLE, "Connection failed."));
                  break;
                default:
                  fail();
              }
            } finally {
              __PRIVATE_logDebug(ge, `RPC '${e}' ${i} completed.`);
            }
          });
          const a = JSON.stringify(r2);
          __PRIVATE_logDebug(ge, `RPC '${e}' ${i} sending request:`, r2), _.send(t2, "POST", a, n2, 15);
        });
      }
      Bo(e, t2, n2) {
        const r2 = __PRIVATE_generateUniqueDebugId(), i = [this.Do, "/", "google.firestore.v1.Firestore", "/", e, "/channel"], s = createWebChannelTransport(), o = getStatEventTarget(), _ = {
          // Required for backend stickiness, routing behavior is based on this
          // parameter.
          httpSessionIdParam: "gsessionid",
          initMessageHeaders: {},
          messageUrlParams: {
            // This param is used to improve routing and project isolation by the
            // backend and must be included in every request.
            database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
          },
          sendRawJson: true,
          supportsCrossDomainXhr: true,
          internalChannelParams: {
            // Override the default timeout (randomized between 10-20 seconds) since
            // a large write batch on a slow internet connection may take a long
            // time to send to the backend. Rather than have WebChannel impose a
            // tight timeout which could lead to infinite timeouts and retries, we
            // set it very large (5-10 minutes) and rely on the browser's builtin
            // timeouts to kick in if the request isn't working.
            forwardChannelRequestTimeoutMs: 6e5
          },
          forceLongPolling: this.forceLongPolling,
          detectBufferingProxy: this.autoDetectLongPolling
        }, a = this.longPollingOptions.timeoutSeconds;
        void 0 !== a && (_.longPollingTimeout = Math.round(1e3 * a)), this.useFetchStreams && (_.useFetchStreams = true), this.Oo(_.initMessageHeaders, t2, n2), // Sending the custom headers we just added to request.initMessageHeaders
        // (Authorization, etc.) will trigger the browser to make a CORS preflight
        // request because the XHR will no longer meet the criteria for a "simple"
        // CORS request:
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
        // Therefore to avoid the CORS preflight request (an extra network
        // roundtrip), we use the encodeInitMessageHeaders option to specify that
        // the headers should instead be encoded in the request's POST payload,
        // which is recognized by the webchannel backend.
        _.encodeInitMessageHeaders = true;
        const u2 = i.join("");
        __PRIVATE_logDebug(ge, `Creating RPC '${e}' stream ${r2}: ${u2}`, _);
        const c = s.createWebChannel(u2, _);
        let l2 = false, h = false;
        const P2 = new __PRIVATE_StreamBridge({
          Io: (t3) => {
            h ? __PRIVATE_logDebug(ge, `Not sending because RPC '${e}' stream ${r2} is closed:`, t3) : (l2 || (__PRIVATE_logDebug(ge, `Opening RPC '${e}' stream ${r2} transport.`), c.open(), l2 = true), __PRIVATE_logDebug(ge, `RPC '${e}' stream ${r2} sending:`, t3), c.send(t3));
          },
          To: () => c.close()
        }), __PRIVATE_unguardedEventListen = (e2, t3, n3) => {
          e2.listen(t3, (e3) => {
            try {
              n3(e3);
            } catch (e4) {
              setTimeout(() => {
                throw e4;
              }, 0);
            }
          });
        };
        return __PRIVATE_unguardedEventListen(c, WebChannel.EventType.OPEN, () => {
          h || (__PRIVATE_logDebug(ge, `RPC '${e}' stream ${r2} transport opened.`), P2.yo());
        }), __PRIVATE_unguardedEventListen(c, WebChannel.EventType.CLOSE, () => {
          h || (h = true, __PRIVATE_logDebug(ge, `RPC '${e}' stream ${r2} transport closed`), P2.So());
        }), __PRIVATE_unguardedEventListen(c, WebChannel.EventType.ERROR, (t3) => {
          h || (h = true, __PRIVATE_logWarn(ge, `RPC '${e}' stream ${r2} transport errored:`, t3), P2.So(new FirestoreError(D.UNAVAILABLE, "The operation could not be completed")));
        }), __PRIVATE_unguardedEventListen(c, WebChannel.EventType.MESSAGE, (t3) => {
          var n3;
          if (!h) {
            const i2 = t3.data[0];
            __PRIVATE_hardAssert(!!i2);
            const s2 = i2, o2 = s2.error || (null === (n3 = s2[0]) || void 0 === n3 ? void 0 : n3.error);
            if (o2) {
              __PRIVATE_logDebug(ge, `RPC '${e}' stream ${r2} received error:`, o2);
              const t4 = o2.status;
              let n4 = (
                /**
                * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
                *
                * @returns The Code equivalent to the given status string or undefined if
                *     there is no match.
                */
                function __PRIVATE_mapCodeFromRpcStatus(e2) {
                  const t5 = le[e2];
                  if (void 0 !== t5) return __PRIVATE_mapCodeFromRpcCode(t5);
                }(t4)
              ), i3 = o2.message;
              void 0 === n4 && (n4 = D.INTERNAL, i3 = "Unknown error status: " + t4 + " with message " + o2.message), // Mark closed so no further events are propagated
              h = true, P2.So(new FirestoreError(n4, i3)), c.close();
            } else __PRIVATE_logDebug(ge, `RPC '${e}' stream ${r2} received:`, i2), P2.bo(i2);
          }
        }), __PRIVATE_unguardedEventListen(o, Event$1.STAT_EVENT, (t3) => {
          t3.stat === Stat.PROXY ? __PRIVATE_logDebug(ge, `RPC '${e}' stream ${r2} detected buffering proxy`) : t3.stat === Stat.NOPROXY && __PRIVATE_logDebug(ge, `RPC '${e}' stream ${r2} detected no buffering proxy`);
        }), setTimeout(() => {
          P2.wo();
        }, 0), P2;
      }
    }
    function getDocument() {
      return "undefined" != typeof document ? document : null;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_newSerializer(e) {
      return new JsonProtoSerializer(
        e,
        /* useProto3Json= */
        true
      );
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_ExponentialBackoff {
      constructor(e, t2, n2 = 1e3, r2 = 1.5, i = 6e4) {
        this.ui = e, this.timerId = t2, this.ko = n2, this.qo = r2, this.Qo = i, this.Ko = 0, this.$o = null, /** The last backoff attempt, as epoch milliseconds. */
        this.Uo = Date.now(), this.reset();
      }
      /**
       * Resets the backoff delay.
       *
       * The very next backoffAndWait() will have no delay. If it is called again
       * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
       * subsequent ones will increase according to the backoffFactor.
       */
      reset() {
        this.Ko = 0;
      }
      /**
       * Resets the backoff delay to the maximum delay (e.g. for use after a
       * RESOURCE_EXHAUSTED error).
       */
      Wo() {
        this.Ko = this.Qo;
      }
      /**
       * Returns a promise that resolves after currentDelayMs, and increases the
       * delay for any subsequent attempts. If there was a pending backoff operation
       * already, it will be canceled.
       */
      Go(e) {
        this.cancel();
        const t2 = Math.floor(this.Ko + this.zo()), n2 = Math.max(0, Date.now() - this.Uo), r2 = Math.max(0, t2 - n2);
        r2 > 0 && __PRIVATE_logDebug("ExponentialBackoff", `Backing off for ${r2} ms (base delay: ${this.Ko} ms, delay with jitter: ${t2} ms, last attempt: ${n2} ms ago)`), this.$o = this.ui.enqueueAfterDelay(this.timerId, r2, () => (this.Uo = Date.now(), e())), // Apply backoff factor to determine next delay and ensure it is within
        // bounds.
        this.Ko *= this.qo, this.Ko < this.ko && (this.Ko = this.ko), this.Ko > this.Qo && (this.Ko = this.Qo);
      }
      jo() {
        null !== this.$o && (this.$o.skipDelay(), this.$o = null);
      }
      cancel() {
        null !== this.$o && (this.$o.cancel(), this.$o = null);
      }
      /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
      zo() {
        return (Math.random() - 0.5) * this.Ko;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_PersistentStream {
      constructor(e, t2, n2, r2, i, s, o, _) {
        this.ui = e, this.Ho = n2, this.Jo = r2, this.connection = i, this.authCredentialsProvider = s, this.appCheckCredentialsProvider = o, this.listener = _, this.state = 0, /**
         * A close count that's incremented every time the stream is closed; used by
         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
         * close.
         */
        this.Yo = 0, this.Zo = null, this.Xo = null, this.stream = null, /**
         * Count of response messages received.
         */
        this.e_ = 0, this.t_ = new __PRIVATE_ExponentialBackoff(e, t2);
      }
      /**
       * Returns true if start() has been called and no error has occurred. True
       * indicates the stream is open or in the process of opening (which
       * encompasses respecting backoff, getting auth tokens, and starting the
       * actual RPC). Use isOpen() to determine if the stream is open and ready for
       * outbound requests.
       */
      n_() {
        return 1 === this.state || 5 === this.state || this.r_();
      }
      /**
       * Returns true if the underlying RPC is open (the onOpen() listener has been
       * called) and the stream is ready for outbound requests.
       */
      r_() {
        return 2 === this.state || 3 === this.state;
      }
      /**
       * Starts the RPC. Only allowed if isStarted() returns false. The stream is
       * not immediately ready for use: onOpen() will be invoked when the RPC is
       * ready for outbound requests, at which point isOpen() will return true.
       *
       * When start returns, isStarted() will return true.
       */
      start() {
        this.e_ = 0, 4 !== this.state ? this.auth() : this.i_();
      }
      /**
       * Stops the RPC. This call is idempotent and allowed regardless of the
       * current isStarted() state.
       *
       * When stop returns, isStarted() and isOpen() will both return false.
       */
      stop() {
        return __async(this, null, function* () {
          this.n_() && (yield this.close(
            0
            /* PersistentStreamState.Initial */
          ));
        });
      }
      /**
       * After an error the stream will usually back off on the next attempt to
       * start it. If the error warrants an immediate restart of the stream, the
       * sender can use this to indicate that the receiver should not back off.
       *
       * Each error will call the onClose() listener. That function can decide to
       * inhibit backoff if required.
       */
      s_() {
        this.state = 0, this.t_.reset();
      }
      /**
       * Marks this stream as idle. If no further actions are performed on the
       * stream for one minute, the stream will automatically close itself and
       * notify the stream's onClose() handler with Status.OK. The stream will then
       * be in a !isStarted() state, requiring the caller to start the stream again
       * before further use.
       *
       * Only streams that are in state 'Open' can be marked idle, as all other
       * states imply pending network operations.
       */
      o_() {
        this.r_() && null === this.Zo && (this.Zo = this.ui.enqueueAfterDelay(this.Ho, 6e4, () => this.__()));
      }
      /** Sends a message to the underlying stream. */
      a_(e) {
        this.u_(), this.stream.send(e);
      }
      /** Called by the idle timer when the stream should close due to inactivity. */
      __() {
        return __async(this, null, function* () {
          if (this.r_())
            return this.close(
              0
              /* PersistentStreamState.Initial */
            );
        });
      }
      /** Marks the stream as active again. */
      u_() {
        this.Zo && (this.Zo.cancel(), this.Zo = null);
      }
      /** Cancels the health check delayed operation. */
      c_() {
        this.Xo && (this.Xo.cancel(), this.Xo = null);
      }
      /**
       * Closes the stream and cleans up as necessary:
       *
       * * closes the underlying GRPC stream;
       * * calls the onClose handler with the given 'error';
       * * sets internal stream state to 'finalState';
       * * adjusts the backoff timer based on the error
       *
       * A new stream can be opened by calling start().
       *
       * @param finalState - the intended state of the stream after closing.
       * @param error - the error the connection was closed with.
       */
      close(e, t2) {
        return __async(this, null, function* () {
          this.u_(), this.c_(), this.t_.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
          // underlying stream), guaranteeing they won't execute.
          this.Yo++, 4 !== e ? (
            // If this is an intentional close ensure we don't delay our next connection attempt.
            this.t_.reset()
          ) : t2 && t2.code === D.RESOURCE_EXHAUSTED ? (
            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
            (__PRIVATE_logError(t2.toString()), __PRIVATE_logError("Using maximum backoff delay to prevent overloading the backend."), this.t_.Wo())
          ) : t2 && t2.code === D.UNAUTHENTICATED && 3 !== this.state && // "unauthenticated" error means the token was rejected. This should rarely
          // happen since both Auth and AppCheck ensure a sufficient TTL when we
          // request a token. If a user manually resets their system clock this can
          // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
          // before we received the first message and we need to invalidate the token
          // to ensure that we fetch a new token.
          (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), // Clean up the underlying stream because we are no longer interested in events.
          null !== this.stream && (this.l_(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
          // inhibit backoff or otherwise manipulate the state in its non-started state.
          this.state = e, // Notify the listener that the stream closed.
          yield this.listener.mo(t2);
        });
      }
      /**
       * Can be overridden to perform additional cleanup before the stream is closed.
       * Calling super.tearDown() is not required.
       */
      l_() {
      }
      auth() {
        this.state = 1;
        const e = this.h_(this.Yo), t2 = this.Yo;
        Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(([e2, n2]) => {
          this.Yo === t2 && // Normally we'd have to schedule the callback on the AsyncQueue.
          // However, the following calls are safe to be called outside the
          // AsyncQueue since they don't chain asynchronous calls
          this.P_(e2, n2);
        }, (t3) => {
          e(() => {
            const e2 = new FirestoreError(D.UNKNOWN, "Fetching auth token failed: " + t3.message);
            return this.I_(e2);
          });
        });
      }
      P_(e, t2) {
        const n2 = this.h_(this.Yo);
        this.stream = this.T_(e, t2), this.stream.Eo(() => {
          n2(() => this.listener.Eo());
        }), this.stream.Ro(() => {
          n2(() => (this.state = 2, this.Xo = this.ui.enqueueAfterDelay(this.Jo, 1e4, () => (this.r_() && (this.state = 3), Promise.resolve())), this.listener.Ro()));
        }), this.stream.mo((e2) => {
          n2(() => this.I_(e2));
        }), this.stream.onMessage((e2) => {
          n2(() => 1 == ++this.e_ ? this.E_(e2) : this.onNext(e2));
        });
      }
      i_() {
        this.state = 5, this.t_.Go(() => __async(this, null, function* () {
          this.state = 0, this.start();
        }));
      }
      // Visible for tests
      I_(e) {
        return __PRIVATE_logDebug("PersistentStream", `close with error: ${e}`), this.stream = null, this.close(4, e);
      }
      /**
       * Returns a "dispatcher" function that dispatches operations onto the
       * AsyncQueue but only runs them if closeCount remains unchanged. This allows
       * us to turn auth / stream callbacks into no-ops if the stream is closed /
       * re-opened, etc.
       */
      h_(e) {
        return (t2) => {
          this.ui.enqueueAndForget(() => this.Yo === e ? t2() : (__PRIVATE_logDebug("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve()));
        };
      }
    }
    class __PRIVATE_PersistentListenStream extends __PRIVATE_PersistentStream {
      constructor(e, t2, n2, r2, i, s) {
        super(e, "listen_stream_connection_backoff", "listen_stream_idle", "health_check_timeout", t2, n2, r2, s), this.serializer = i;
      }
      T_(e, t2) {
        return this.connection.Bo("Listen", e, t2);
      }
      E_(e) {
        return this.onNext(e);
      }
      onNext(e) {
        this.t_.reset();
        const t2 = __PRIVATE_fromWatchChange(this.serializer, e), n2 = function __PRIVATE_versionFromListenResponse(e2) {
          if (!("targetChange" in e2)) return SnapshotVersion.min();
          const t3 = e2.targetChange;
          return t3.targetIds && t3.targetIds.length ? SnapshotVersion.min() : t3.readTime ? __PRIVATE_fromVersion(t3.readTime) : SnapshotVersion.min();
        }(e);
        return this.listener.d_(t2, n2);
      }
      /**
       * Registers interest in the results of the given target. If the target
       * includes a resumeToken it will be included in the request. Results that
       * affect the target will be streamed back as WatchChange messages that
       * reference the targetId.
       */
      A_(e) {
        const t2 = {};
        t2.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t2.addTarget = function __PRIVATE_toTarget(e2, t3) {
          let n3;
          const r2 = t3.target;
          if (n3 = __PRIVATE_targetIsDocumentTarget(r2) ? {
            documents: __PRIVATE_toDocumentsTarget(e2, r2)
          } : {
            query: __PRIVATE_toQueryTarget(e2, r2)._t
          }, n3.targetId = t3.targetId, t3.resumeToken.approximateByteSize() > 0) {
            n3.resumeToken = __PRIVATE_toBytes(e2, t3.resumeToken);
            const r3 = __PRIVATE_toInt32Proto(e2, t3.expectedCount);
            null !== r3 && (n3.expectedCount = r3);
          } else if (t3.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
            n3.readTime = toTimestamp(e2, t3.snapshotVersion.toTimestamp());
            const r3 = __PRIVATE_toInt32Proto(e2, t3.expectedCount);
            null !== r3 && (n3.expectedCount = r3);
          }
          return n3;
        }(this.serializer, e);
        const n2 = __PRIVATE_toListenRequestLabels(this.serializer, e);
        n2 && (t2.labels = n2), this.a_(t2);
      }
      /**
       * Unregisters interest in the results of the target associated with the
       * given targetId.
       */
      R_(e) {
        const t2 = {};
        t2.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t2.removeTarget = e, this.a_(t2);
      }
    }
    class __PRIVATE_PersistentWriteStream extends __PRIVATE_PersistentStream {
      constructor(e, t2, n2, r2, i, s) {
        super(e, "write_stream_connection_backoff", "write_stream_idle", "health_check_timeout", t2, n2, r2, s), this.serializer = i;
      }
      /**
       * Tracks whether or not a handshake has been successfully exchanged and
       * the stream is ready to accept mutations.
       */
      get V_() {
        return this.e_ > 0;
      }
      // Override of PersistentStream.start
      start() {
        this.lastStreamToken = void 0, super.start();
      }
      l_() {
        this.V_ && this.m_([]);
      }
      T_(e, t2) {
        return this.connection.Bo("Write", e, t2);
      }
      E_(e) {
        return __PRIVATE_hardAssert(!!e.streamToken), this.lastStreamToken = e.streamToken, // The first response is always the handshake response
        __PRIVATE_hardAssert(!e.writeResults || 0 === e.writeResults.length), this.listener.f_();
      }
      onNext(e) {
        __PRIVATE_hardAssert(!!e.streamToken), this.lastStreamToken = e.streamToken, // A successful first write response means the stream is healthy,
        // Note, that we could consider a successful handshake healthy, however,
        // the write itself might be causing an error we want to back off from.
        this.t_.reset();
        const t2 = __PRIVATE_fromWriteResults(e.writeResults, e.commitTime), n2 = __PRIVATE_fromVersion(e.commitTime);
        return this.listener.g_(n2, t2);
      }
      /**
       * Sends an initial streamToken to the server, performing the handshake
       * required to make the StreamingWrite RPC work. Subsequent
       * calls should wait until onHandshakeComplete was called.
       */
      p_() {
        const e = {};
        e.database = __PRIVATE_getEncodedDatabaseId(this.serializer), this.a_(e);
      }
      /** Sends a group of mutations to the Firestore backend to apply. */
      m_(e) {
        const t2 = {
          streamToken: this.lastStreamToken,
          writes: e.map((e2) => toMutation(this.serializer, e2))
        };
        this.a_(t2);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_DatastoreImpl extends class Datastore {
    } {
      constructor(e, t2, n2, r2) {
        super(), this.authCredentials = e, this.appCheckCredentials = t2, this.connection = n2, this.serializer = r2, this.y_ = false;
      }
      w_() {
        if (this.y_) throw new FirestoreError(D.FAILED_PRECONDITION, "The client has already been terminated.");
      }
      /** Invokes the provided RPC with auth and AppCheck tokens. */
      Mo(e, t2, n2, r2) {
        return this.w_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([i, s]) => this.connection.Mo(e, __PRIVATE_toResourcePath(t2, n2), r2, i, s)).catch((e2) => {
          throw "FirebaseError" === e2.name ? (e2.code === D.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), e2) : new FirestoreError(D.UNKNOWN, e2.toString());
        });
      }
      /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */
      Lo(e, t2, n2, r2, i) {
        return this.w_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([s, o]) => this.connection.Lo(e, __PRIVATE_toResourcePath(t2, n2), r2, s, o, i)).catch((e2) => {
          throw "FirebaseError" === e2.name ? (e2.code === D.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), e2) : new FirestoreError(D.UNKNOWN, e2.toString());
        });
      }
      terminate() {
        this.y_ = true, this.connection.terminate();
      }
    }
    class __PRIVATE_OnlineStateTracker {
      constructor(e, t2) {
        this.asyncQueue = e, this.onlineStateHandler = t2, /** The current OnlineState. */
        this.state = "Unknown", /**
         * A count of consecutive failures to open the stream. If it reaches the
         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
         * Offline.
         */
        this.S_ = 0, /**
         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
         */
        this.b_ = null, /**
         * Whether the client should log a warning message if it fails to connect to
         * the backend (initially true, cleared after a successful stream, or if we've
         * logged the message already).
         */
        this.D_ = true;
      }
      /**
       * Called by RemoteStore when a watch stream is started (including on each
       * backoff attempt).
       *
       * If this is the first attempt, it sets the OnlineState to Unknown and starts
       * the onlineStateTimer.
       */
      v_() {
        0 === this.S_ && (this.C_(
          "Unknown"
          /* OnlineState.Unknown */
        ), this.b_ = this.asyncQueue.enqueueAfterDelay("online_state_timeout", 1e4, () => (this.b_ = null, this.F_("Backend didn't respond within 10 seconds."), this.C_(
          "Offline"
          /* OnlineState.Offline */
        ), Promise.resolve())));
      }
      /**
       * Updates our OnlineState as appropriate after the watch stream reports a
       * failure. The first failure moves us to the 'Unknown' state. We then may
       * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
       * actually transition to the 'Offline' state.
       */
      M_(e) {
        "Online" === this.state ? this.C_(
          "Unknown"
          /* OnlineState.Unknown */
        ) : (this.S_++, this.S_ >= 1 && (this.x_(), this.F_(`Connection failed 1 times. Most recent error: ${e.toString()}`), this.C_(
          "Offline"
          /* OnlineState.Offline */
        )));
      }
      /**
       * Explicitly sets the OnlineState to the specified state.
       *
       * Note that this resets our timers / failure counters, etc. used by our
       * Offline heuristics, so must not be used in place of
       * handleWatchStreamStart() and handleWatchStreamFailure().
       */
      set(e) {
        this.x_(), this.S_ = 0, "Online" === e && // We've connected to watch at least once. Don't warn the developer
        // about being offline going forward.
        (this.D_ = false), this.C_(e);
      }
      C_(e) {
        e !== this.state && (this.state = e, this.onlineStateHandler(e));
      }
      F_(e) {
        const t2 = `Could not reach Cloud Firestore backend. ${e}
This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
        this.D_ ? (__PRIVATE_logError(t2), this.D_ = false) : __PRIVATE_logDebug("OnlineStateTracker", t2);
      }
      x_() {
        null !== this.b_ && (this.b_.cancel(), this.b_ = null);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_RemoteStoreImpl {
      constructor(e, t2, n2, r2, i) {
        this.localStore = e, this.datastore = t2, this.asyncQueue = n2, this.remoteSyncer = {}, /**
         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
         * LocalStore via fillWritePipeline() and have or will send to the write
         * stream.
         *
         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
         * restart the write stream. When the stream is established the writes in the
         * pipeline will be sent in order.
         *
         * Writes remain in writePipeline until they are acknowledged by the backend
         * and thus will automatically be re-sent if the stream is interrupted /
         * restarted before they're acknowledged.
         *
         * Write responses from the backend are linked to their originating request
         * purely based on order, and so we can just shift() writes from the front of
         * the writePipeline as we receive responses.
         */
        this.O_ = [], /**
         * A mapping of watched targets that the client cares about tracking and the
         * user has explicitly called a 'listen' for this target.
         *
         * These targets may or may not have been sent to or acknowledged by the
         * server. On re-establishing the listen stream, these targets should be sent
         * to the server. The targets removed with unlistens are removed eagerly
         * without waiting for confirmation from the listen stream.
         */
        this.N_ = /* @__PURE__ */ new Map(), /**
         * A set of reasons for why the RemoteStore may be offline. If empty, the
         * RemoteStore may start its network connections.
         */
        this.L_ = /* @__PURE__ */ new Set(), /**
         * Event handlers that get called when the network is disabled or enabled.
         *
         * PORTING NOTE: These functions are used on the Web client to create the
         * underlying streams (to support tree-shakeable streams). On Android and iOS,
         * the streams are created during construction of RemoteStore.
         */
        this.B_ = [], this.k_ = i, this.k_._o((e2) => {
          n2.enqueueAndForget(() => __async(this, null, function* () {
            __PRIVATE_canUseNetwork(this) && (__PRIVATE_logDebug("RemoteStore", "Restarting streams for network reachability change."), yield function __PRIVATE_restartNetwork(e3) {
              return __async(this, null, function* () {
                const t3 = __PRIVATE_debugCast(e3);
                t3.L_.add(
                  4
                  /* OfflineCause.ConnectivityChange */
                ), yield __PRIVATE_disableNetworkInternal(t3), t3.q_.set(
                  "Unknown"
                  /* OnlineState.Unknown */
                ), t3.L_.delete(
                  4
                  /* OfflineCause.ConnectivityChange */
                ), yield __PRIVATE_enableNetworkInternal(t3);
              });
            }(this));
          }));
        }), this.q_ = new __PRIVATE_OnlineStateTracker(n2, r2);
      }
    }
    function __PRIVATE_enableNetworkInternal(e) {
      return __async(this, null, function* () {
        if (__PRIVATE_canUseNetwork(e)) for (const t2 of e.B_) yield t2(
          /* enabled= */
          true
        );
      });
    }
    function __PRIVATE_disableNetworkInternal(e) {
      return __async(this, null, function* () {
        for (const t2 of e.B_) yield t2(
          /* enabled= */
          false
        );
      });
    }
    function __PRIVATE_remoteStoreListen(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      n2.N_.has(t2.targetId) || // Mark this as something the client is currently listening for.
      (n2.N_.set(t2.targetId, t2), __PRIVATE_shouldStartWatchStream(n2) ? (
        // The listen will be sent in onWatchStreamOpen
        __PRIVATE_startWatchStream(n2)
      ) : __PRIVATE_ensureWatchStream(n2).r_() && __PRIVATE_sendWatchRequest(n2, t2));
    }
    function __PRIVATE_remoteStoreUnlisten(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = __PRIVATE_ensureWatchStream(n2);
      n2.N_.delete(t2), r2.r_() && __PRIVATE_sendUnwatchRequest(n2, t2), 0 === n2.N_.size && (r2.r_() ? r2.o_() : __PRIVATE_canUseNetwork(n2) && // Revert to OnlineState.Unknown if the watch stream is not open and we
      // have no listeners, since without any listens to send we cannot
      // confirm if the stream is healthy and upgrade to OnlineState.Online.
      n2.q_.set(
        "Unknown"
        /* OnlineState.Unknown */
      ));
    }
    function __PRIVATE_sendWatchRequest(e, t2) {
      if (e.Q_.xe(t2.targetId), t2.resumeToken.approximateByteSize() > 0 || t2.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
        const n2 = e.remoteSyncer.getRemoteKeysForTarget(t2.targetId).size;
        t2 = t2.withExpectedCount(n2);
      }
      __PRIVATE_ensureWatchStream(e).A_(t2);
    }
    function __PRIVATE_sendUnwatchRequest(e, t2) {
      e.Q_.xe(t2), __PRIVATE_ensureWatchStream(e).R_(t2);
    }
    function __PRIVATE_startWatchStream(e) {
      e.Q_ = new __PRIVATE_WatchChangeAggregator({
        getRemoteKeysForTarget: (t2) => e.remoteSyncer.getRemoteKeysForTarget(t2),
        ot: (t2) => e.N_.get(t2) || null,
        tt: () => e.datastore.serializer.databaseId
      }), __PRIVATE_ensureWatchStream(e).start(), e.q_.v_();
    }
    function __PRIVATE_shouldStartWatchStream(e) {
      return __PRIVATE_canUseNetwork(e) && !__PRIVATE_ensureWatchStream(e).n_() && e.N_.size > 0;
    }
    function __PRIVATE_canUseNetwork(e) {
      return 0 === __PRIVATE_debugCast(e).L_.size;
    }
    function __PRIVATE_cleanUpWatchStreamState(e) {
      e.Q_ = void 0;
    }
    function __PRIVATE_onWatchStreamConnected(e) {
      return __async(this, null, function* () {
        e.q_.set(
          "Online"
          /* OnlineState.Online */
        );
      });
    }
    function __PRIVATE_onWatchStreamOpen(e) {
      return __async(this, null, function* () {
        e.N_.forEach((t2, n2) => {
          __PRIVATE_sendWatchRequest(e, t2);
        });
      });
    }
    function __PRIVATE_onWatchStreamClose(e, t2) {
      return __async(this, null, function* () {
        __PRIVATE_cleanUpWatchStreamState(e), // If we still need the watch stream, retry the connection.
        __PRIVATE_shouldStartWatchStream(e) ? (e.q_.M_(t2), __PRIVATE_startWatchStream(e)) : (
          // No need to restart watch stream because there are no active targets.
          // The online state is set to unknown because there is no active attempt
          // at establishing a connection
          e.q_.set(
            "Unknown"
            /* OnlineState.Unknown */
          )
        );
      });
    }
    function __PRIVATE_onWatchStreamChange(e, t2, n2) {
      return __async(this, null, function* () {
        if (
          // Mark the client as online since we got a message from the server
          e.q_.set(
            "Online"
            /* OnlineState.Online */
          ), t2 instanceof __PRIVATE_WatchTargetChange && 2 === t2.state && t2.cause
        )
          try {
            yield (
              /** Handles an error on a target */
              function __PRIVATE_handleTargetError(e2, t3) {
                return __async(this, null, function* () {
                  const n3 = t3.cause;
                  for (const r2 of t3.targetIds)
                    e2.N_.has(r2) && (yield e2.remoteSyncer.rejectListen(r2, n3), e2.N_.delete(r2), e2.Q_.removeTarget(r2));
                });
              }(e, t2)
            );
          } catch (n3) {
            __PRIVATE_logDebug("RemoteStore", "Failed to remove targets %s: %s ", t2.targetIds.join(","), n3), yield __PRIVATE_disableNetworkUntilRecovery(e, n3);
          }
        else if (t2 instanceof __PRIVATE_DocumentWatchChange ? e.Q_.Ke(t2) : t2 instanceof __PRIVATE_ExistenceFilterChange ? e.Q_.He(t2) : e.Q_.We(t2), !n2.isEqual(SnapshotVersion.min())) try {
          const t3 = yield __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e.localStore);
          n2.compareTo(t3) >= 0 && // We have received a target change with a global snapshot if the snapshot
          // version is not equal to SnapshotVersion.min().
          (yield (
            /**
            * Takes a batch of changes from the Datastore, repackages them as a
            * RemoteEvent, and passes that on to the listener, which is typically the
            * SyncEngine.
            */
            function __PRIVATE_raiseWatchSnapshot(e2, t4) {
              const n3 = e2.Q_.rt(t4);
              return n3.targetChanges.forEach((n4, r2) => {
                if (n4.resumeToken.approximateByteSize() > 0) {
                  const i = e2.N_.get(r2);
                  i && e2.N_.set(r2, i.withResumeToken(n4.resumeToken, t4));
                }
              }), // Re-establish listens for the targets that have been invalidated by
              // existence filter mismatches.
              n3.targetMismatches.forEach((t5, n4) => {
                const r2 = e2.N_.get(t5);
                if (!r2)
                  return;
                e2.N_.set(t5, r2.withResumeToken(ByteString.EMPTY_BYTE_STRING, r2.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
                // deliberately don't send a resume token so that we get a full update.
                __PRIVATE_sendUnwatchRequest(e2, t5);
                const i = new TargetData(r2.target, t5, n4, r2.sequenceNumber);
                __PRIVATE_sendWatchRequest(e2, i);
              }), e2.remoteSyncer.applyRemoteEvent(n3);
            }(e, n2)
          ));
        } catch (t3) {
          __PRIVATE_logDebug("RemoteStore", "Failed to raise snapshot:", t3), yield __PRIVATE_disableNetworkUntilRecovery(e, t3);
        }
      });
    }
    function __PRIVATE_disableNetworkUntilRecovery(e, t2, n2) {
      return __async(this, null, function* () {
        if (!__PRIVATE_isIndexedDbTransactionError(t2)) throw t2;
        e.L_.add(
          1
          /* OfflineCause.IndexedDbFailed */
        ), // Disable network and raise offline snapshots
        yield __PRIVATE_disableNetworkInternal(e), e.q_.set(
          "Offline"
          /* OnlineState.Offline */
        ), n2 || // Use a simple read operation to determine if IndexedDB recovered.
        // Ideally, we would expose a health check directly on SimpleDb, but
        // RemoteStore only has access to persistence through LocalStore.
        (n2 = () => __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e.localStore)), // Probe IndexedDB periodically and re-enable network
        e.asyncQueue.enqueueRetryable(() => __async(this, null, function* () {
          __PRIVATE_logDebug("RemoteStore", "Retrying IndexedDB access"), yield n2(), e.L_.delete(
            1
            /* OfflineCause.IndexedDbFailed */
          ), yield __PRIVATE_enableNetworkInternal(e);
        }));
      });
    }
    function __PRIVATE_executeWithRecovery(e, t2) {
      return t2().catch((n2) => __PRIVATE_disableNetworkUntilRecovery(e, n2, t2));
    }
    function __PRIVATE_fillWritePipeline(e) {
      return __async(this, null, function* () {
        const t2 = __PRIVATE_debugCast(e), n2 = __PRIVATE_ensureWriteStream(t2);
        let r2 = t2.O_.length > 0 ? t2.O_[t2.O_.length - 1].batchId : -1;
        for (; __PRIVATE_canAddToWritePipeline(t2); ) try {
          const e2 = yield __PRIVATE_localStoreGetNextMutationBatch(t2.localStore, r2);
          if (null === e2) {
            0 === t2.O_.length && n2.o_();
            break;
          }
          r2 = e2.batchId, __PRIVATE_addToWritePipeline(t2, e2);
        } catch (e2) {
          yield __PRIVATE_disableNetworkUntilRecovery(t2, e2);
        }
        __PRIVATE_shouldStartWriteStream(t2) && __PRIVATE_startWriteStream(t2);
      });
    }
    function __PRIVATE_canAddToWritePipeline(e) {
      return __PRIVATE_canUseNetwork(e) && e.O_.length < 10;
    }
    function __PRIVATE_addToWritePipeline(e, t2) {
      e.O_.push(t2);
      const n2 = __PRIVATE_ensureWriteStream(e);
      n2.r_() && n2.V_ && n2.m_(t2.mutations);
    }
    function __PRIVATE_shouldStartWriteStream(e) {
      return __PRIVATE_canUseNetwork(e) && !__PRIVATE_ensureWriteStream(e).n_() && e.O_.length > 0;
    }
    function __PRIVATE_startWriteStream(e) {
      __PRIVATE_ensureWriteStream(e).start();
    }
    function __PRIVATE_onWriteStreamOpen(e) {
      return __async(this, null, function* () {
        __PRIVATE_ensureWriteStream(e).p_();
      });
    }
    function __PRIVATE_onWriteHandshakeComplete(e) {
      return __async(this, null, function* () {
        const t2 = __PRIVATE_ensureWriteStream(e);
        for (const n2 of e.O_) t2.m_(n2.mutations);
      });
    }
    function __PRIVATE_onMutationResult(e, t2, n2) {
      return __async(this, null, function* () {
        const r2 = e.O_.shift(), i = MutationBatchResult.from(r2, t2, n2);
        yield __PRIVATE_executeWithRecovery(e, () => e.remoteSyncer.applySuccessfulWrite(i)), // It's possible that with the completion of this mutation another
        // slot has freed up.
        yield __PRIVATE_fillWritePipeline(e);
      });
    }
    function __PRIVATE_onWriteStreamClose(e, t2) {
      return __async(this, null, function* () {
        t2 && __PRIVATE_ensureWriteStream(e).V_ && // This error affects the actual write.
        (yield function __PRIVATE_handleWriteError(e2, t3) {
          return __async(this, null, function* () {
            if (function __PRIVATE_isPermanentWriteError(e3) {
              return __PRIVATE_isPermanentError(e3) && e3 !== D.ABORTED;
            }(t3.code)) {
              const n2 = e2.O_.shift();
              __PRIVATE_ensureWriteStream(e2).s_(), yield __PRIVATE_executeWithRecovery(e2, () => e2.remoteSyncer.rejectFailedWrite(n2.batchId, t3)), // It's possible that with the completion of this mutation
              // another slot has freed up.
              yield __PRIVATE_fillWritePipeline(e2);
            }
          });
        }(e, t2)), // The write stream might have been started by refilling the write
        // pipeline for failed writes
        __PRIVATE_shouldStartWriteStream(e) && __PRIVATE_startWriteStream(e);
      });
    }
    function __PRIVATE_remoteStoreHandleCredentialChange(e, t2) {
      return __async(this, null, function* () {
        const n2 = __PRIVATE_debugCast(e);
        n2.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug("RemoteStore", "RemoteStore received new credentials");
        const r2 = __PRIVATE_canUseNetwork(n2);
        n2.L_.add(
          3
          /* OfflineCause.CredentialChange */
        ), yield __PRIVATE_disableNetworkInternal(n2), r2 && // Don't set the network status to Unknown if we are offline.
        n2.q_.set(
          "Unknown"
          /* OnlineState.Unknown */
        ), yield n2.remoteSyncer.handleCredentialChange(t2), n2.L_.delete(
          3
          /* OfflineCause.CredentialChange */
        ), yield __PRIVATE_enableNetworkInternal(n2);
      });
    }
    function __PRIVATE_remoteStoreApplyPrimaryState(e, t2) {
      return __async(this, null, function* () {
        const n2 = __PRIVATE_debugCast(e);
        t2 ? (n2.L_.delete(
          2
          /* OfflineCause.IsSecondary */
        ), yield __PRIVATE_enableNetworkInternal(n2)) : t2 || (n2.L_.add(
          2
          /* OfflineCause.IsSecondary */
        ), yield __PRIVATE_disableNetworkInternal(n2), n2.q_.set(
          "Unknown"
          /* OnlineState.Unknown */
        ));
      });
    }
    function __PRIVATE_ensureWatchStream(e) {
      return e.K_ || // Create stream (but note that it is not started yet).
      (e.K_ = function __PRIVATE_newPersistentWatchStream(e2, t2, n2) {
        const r2 = __PRIVATE_debugCast(e2);
        return r2.w_(), new __PRIVATE_PersistentListenStream(t2, r2.connection, r2.authCredentials, r2.appCheckCredentials, r2.serializer, n2);
      }(e.datastore, e.asyncQueue, {
        Eo: __PRIVATE_onWatchStreamConnected.bind(null, e),
        Ro: __PRIVATE_onWatchStreamOpen.bind(null, e),
        mo: __PRIVATE_onWatchStreamClose.bind(null, e),
        d_: __PRIVATE_onWatchStreamChange.bind(null, e)
      }), e.B_.push((t2) => __async(this, null, function* () {
        t2 ? (e.K_.s_(), __PRIVATE_shouldStartWatchStream(e) ? __PRIVATE_startWatchStream(e) : e.q_.set(
          "Unknown"
          /* OnlineState.Unknown */
        )) : (yield e.K_.stop(), __PRIVATE_cleanUpWatchStreamState(e));
      }))), e.K_;
    }
    function __PRIVATE_ensureWriteStream(e) {
      return e.U_ || // Create stream (but note that it is not started yet).
      (e.U_ = function __PRIVATE_newPersistentWriteStream(e2, t2, n2) {
        const r2 = __PRIVATE_debugCast(e2);
        return r2.w_(), new __PRIVATE_PersistentWriteStream(t2, r2.connection, r2.authCredentials, r2.appCheckCredentials, r2.serializer, n2);
      }(e.datastore, e.asyncQueue, {
        Eo: () => Promise.resolve(),
        Ro: __PRIVATE_onWriteStreamOpen.bind(null, e),
        mo: __PRIVATE_onWriteStreamClose.bind(null, e),
        f_: __PRIVATE_onWriteHandshakeComplete.bind(null, e),
        g_: __PRIVATE_onMutationResult.bind(null, e)
      }), e.B_.push((t2) => __async(this, null, function* () {
        t2 ? (e.U_.s_(), // This will start the write stream if necessary.
        yield __PRIVATE_fillWritePipeline(e)) : (yield e.U_.stop(), e.O_.length > 0 && (__PRIVATE_logDebug("RemoteStore", `Stopping write stream with ${e.O_.length} pending writes`), e.O_ = []));
      }))), e.U_;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class DelayedOperation {
      constructor(e, t2, n2, r2, i) {
        this.asyncQueue = e, this.timerId = t2, this.targetTimeMs = n2, this.op = r2, this.removalCallback = i, this.deferred = new __PRIVATE_Deferred(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
        // and so we attach a dummy catch callback to avoid
        // 'UnhandledPromiseRejectionWarning' log spam.
        this.deferred.promise.catch((e2) => {
        });
      }
      get promise() {
        return this.deferred.promise;
      }
      /**
       * Creates and returns a DelayedOperation that has been scheduled to be
       * executed on the provided asyncQueue after the provided delayMs.
       *
       * @param asyncQueue - The queue to schedule the operation on.
       * @param id - A Timer ID identifying the type of operation this is.
       * @param delayMs - The delay (ms) before the operation should be scheduled.
       * @param op - The operation to run.
       * @param removalCallback - A callback to be called synchronously once the
       *   operation is executed or canceled, notifying the AsyncQueue to remove it
       *   from its delayedOperations list.
       *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
       *   the DelayedOperation class public.
       */
      static createAndSchedule(e, t2, n2, r2, i) {
        const s = Date.now() + n2, o = new DelayedOperation(e, t2, s, r2, i);
        return o.start(n2), o;
      }
      /**
       * Starts the timer. This is called immediately after construction by
       * createAndSchedule().
       */
      start(e) {
        this.timerHandle = setTimeout(() => this.handleDelayElapsed(), e);
      }
      /**
       * Queues the operation to run immediately (if it hasn't already been run or
       * canceled).
       */
      skipDelay() {
        return this.handleDelayElapsed();
      }
      /**
       * Cancels the operation if it hasn't already been executed or canceled. The
       * promise will be rejected.
       *
       * As long as the operation has not yet been run, calling cancel() provides a
       * guarantee that the operation will not be run.
       */
      cancel(e) {
        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(D.CANCELLED, "Operation cancelled" + (e ? ": " + e : ""))));
      }
      handleDelayElapsed() {
        this.asyncQueue.enqueueAndForget(() => null !== this.timerHandle ? (this.clearTimeout(), this.op().then((e) => this.deferred.resolve(e))) : Promise.resolve());
      }
      clearTimeout() {
        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
      }
    }
    function __PRIVATE_wrapInUserErrorIfRecoverable(e, t2) {
      if (__PRIVATE_logError("AsyncQueue", `${t2}: ${e}`), __PRIVATE_isIndexedDbTransactionError(e)) return new FirestoreError(D.UNAVAILABLE, `${t2}: ${e}`);
      throw e;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class DocumentSet {
      /** The default ordering is by key if the comparator is omitted */
      constructor(e) {
        this.comparator = e ? (t2, n2) => e(t2, n2) || DocumentKey.comparator(t2.key, n2.key) : (e2, t2) => DocumentKey.comparator(e2.key, t2.key), this.keyedMap = documentMap(), this.sortedSet = new SortedMap$1(this.comparator);
      }
      /**
       * Returns an empty copy of the existing DocumentSet, using the same
       * comparator.
       */
      static emptySet(e) {
        return new DocumentSet(e.comparator);
      }
      has(e) {
        return null != this.keyedMap.get(e);
      }
      get(e) {
        return this.keyedMap.get(e);
      }
      first() {
        return this.sortedSet.minKey();
      }
      last() {
        return this.sortedSet.maxKey();
      }
      isEmpty() {
        return this.sortedSet.isEmpty();
      }
      /**
       * Returns the index of the provided key in the document set, or -1 if the
       * document key is not present in the set;
       */
      indexOf(e) {
        const t2 = this.keyedMap.get(e);
        return t2 ? this.sortedSet.indexOf(t2) : -1;
      }
      get size() {
        return this.sortedSet.size;
      }
      /** Iterates documents in order defined by "comparator" */
      forEach(e) {
        this.sortedSet.inorderTraversal((t2, n2) => (e(t2), false));
      }
      /** Inserts or updates a document with the same key */
      add(e) {
        const t2 = this.delete(e.key);
        return t2.copy(t2.keyedMap.insert(e.key, e), t2.sortedSet.insert(e, null));
      }
      /** Deletes a document with a given key */
      delete(e) {
        const t2 = this.get(e);
        return t2 ? this.copy(this.keyedMap.remove(e), this.sortedSet.remove(t2)) : this;
      }
      isEqual(e) {
        if (!(e instanceof DocumentSet)) return false;
        if (this.size !== e.size) return false;
        const t2 = this.sortedSet.getIterator(), n2 = e.sortedSet.getIterator();
        for (; t2.hasNext(); ) {
          const e2 = t2.getNext().key, r2 = n2.getNext().key;
          if (!e2.isEqual(r2)) return false;
        }
        return true;
      }
      toString() {
        const e = [];
        return this.forEach((t2) => {
          e.push(t2.toString());
        }), 0 === e.length ? "DocumentSet ()" : "DocumentSet (\n  " + e.join("  \n") + "\n)";
      }
      copy(e, t2) {
        const n2 = new DocumentSet();
        return n2.comparator = this.comparator, n2.keyedMap = e, n2.sortedSet = t2, n2;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_DocumentChangeSet {
      constructor() {
        this.W_ = new SortedMap$1(DocumentKey.comparator);
      }
      track(e) {
        const t2 = e.doc.key, n2 = this.W_.get(t2);
        n2 ? (
          // Merge the new change with the existing change.
          0 !== e.type && 3 === n2.type ? this.W_ = this.W_.insert(t2, e) : 3 === e.type && 1 !== n2.type ? this.W_ = this.W_.insert(t2, {
            type: n2.type,
            doc: e.doc
          }) : 2 === e.type && 2 === n2.type ? this.W_ = this.W_.insert(t2, {
            type: 2,
            doc: e.doc
          }) : 2 === e.type && 0 === n2.type ? this.W_ = this.W_.insert(t2, {
            type: 0,
            doc: e.doc
          }) : 1 === e.type && 0 === n2.type ? this.W_ = this.W_.remove(t2) : 1 === e.type && 2 === n2.type ? this.W_ = this.W_.insert(t2, {
            type: 1,
            doc: n2.doc
          }) : 0 === e.type && 1 === n2.type ? this.W_ = this.W_.insert(t2, {
            type: 2,
            doc: e.doc
          }) : (
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            fail()
          )
        ) : this.W_ = this.W_.insert(t2, e);
      }
      G_() {
        const e = [];
        return this.W_.inorderTraversal((t2, n2) => {
          e.push(n2);
        }), e;
      }
    }
    class ViewSnapshot {
      constructor(e, t2, n2, r2, i, s, o, _, a) {
        this.query = e, this.docs = t2, this.oldDocs = n2, this.docChanges = r2, this.mutatedKeys = i, this.fromCache = s, this.syncStateChanged = o, this.excludesMetadataChanges = _, this.hasCachedResults = a;
      }
      /** Returns a view snapshot as if all documents in the snapshot were added. */
      static fromInitialDocuments(e, t2, n2, r2, i) {
        const s = [];
        return t2.forEach((e2) => {
          s.push({
            type: 0,
            doc: e2
          });
        }), new ViewSnapshot(
          e,
          t2,
          DocumentSet.emptySet(t2),
          s,
          n2,
          r2,
          /* syncStateChanged= */
          true,
          /* excludesMetadataChanges= */
          false,
          i
        );
      }
      get hasPendingWrites() {
        return !this.mutatedKeys.isEmpty();
      }
      isEqual(e) {
        if (!(this.fromCache === e.fromCache && this.hasCachedResults === e.hasCachedResults && this.syncStateChanged === e.syncStateChanged && this.mutatedKeys.isEqual(e.mutatedKeys) && __PRIVATE_queryEquals(this.query, e.query) && this.docs.isEqual(e.docs) && this.oldDocs.isEqual(e.oldDocs))) return false;
        const t2 = this.docChanges, n2 = e.docChanges;
        if (t2.length !== n2.length) return false;
        for (let e2 = 0; e2 < t2.length; e2++) if (t2[e2].type !== n2[e2].type || !t2[e2].doc.isEqual(n2[e2].doc)) return false;
        return true;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_QueryListenersInfo {
      constructor() {
        this.z_ = void 0, this.j_ = [];
      }
      // Helper methods that checks if the query has listeners that listening to remote store
      H_() {
        return this.j_.some((e) => e.J_());
      }
    }
    class __PRIVATE_EventManagerImpl {
      constructor() {
        this.queries = __PRIVATE_newQueriesObjectMap(), this.onlineState = "Unknown", this.Y_ = /* @__PURE__ */ new Set();
      }
      terminate() {
        !function __PRIVATE_errorAllTargets(e, t2) {
          const n2 = __PRIVATE_debugCast(e), r2 = n2.queries;
          n2.queries = __PRIVATE_newQueriesObjectMap(), r2.forEach((e2, n3) => {
            for (const e3 of n3.j_) e3.onError(t2);
          });
        }(this, new FirestoreError(D.ABORTED, "Firestore shutting down"));
      }
    }
    function __PRIVATE_newQueriesObjectMap() {
      return new ObjectMap((e) => __PRIVATE_canonifyQuery(e), __PRIVATE_queryEquals);
    }
    function __PRIVATE_eventManagerListen(e, t2) {
      return __async(this, null, function* () {
        const n2 = __PRIVATE_debugCast(e);
        let r2 = 3;
        const i = t2.query;
        let s = n2.queries.get(i);
        s ? !s.H_() && t2.J_() && // Query has been listening to local cache, and tries to add a new listener sourced from watch.
        (r2 = 2) : (s = new __PRIVATE_QueryListenersInfo(), r2 = t2.J_() ? 0 : 1);
        try {
          switch (r2) {
            case 0:
              s.z_ = yield n2.onListen(
                i,
                /** enableRemoteListen= */
                true
              );
              break;
            case 1:
              s.z_ = yield n2.onListen(
                i,
                /** enableRemoteListen= */
                false
              );
              break;
            case 2:
              yield n2.onFirstRemoteStoreListen(i);
          }
        } catch (e2) {
          const n3 = __PRIVATE_wrapInUserErrorIfRecoverable(e2, `Initialization of query '${__PRIVATE_stringifyQuery(t2.query)}' failed`);
          return void t2.onError(n3);
        }
        if (n2.queries.set(i, s), s.j_.push(t2), // Run global snapshot listeners if a consistent snapshot has been emitted.
        t2.Z_(n2.onlineState), s.z_) {
          t2.X_(s.z_) && __PRIVATE_raiseSnapshotsInSyncEvent(n2);
        }
      });
    }
    function __PRIVATE_eventManagerUnlisten(e, t2) {
      return __async(this, null, function* () {
        const n2 = __PRIVATE_debugCast(e), r2 = t2.query;
        let i = 3;
        const s = n2.queries.get(r2);
        if (s) {
          const e2 = s.j_.indexOf(t2);
          e2 >= 0 && (s.j_.splice(e2, 1), 0 === s.j_.length ? i = t2.J_() ? 0 : 1 : !s.H_() && t2.J_() && // The removed listener is the last one that sourced from watch.
          (i = 2));
        }
        switch (i) {
          case 0:
            return n2.queries.delete(r2), n2.onUnlisten(
              r2,
              /** disableRemoteListen= */
              true
            );
          case 1:
            return n2.queries.delete(r2), n2.onUnlisten(
              r2,
              /** disableRemoteListen= */
              false
            );
          case 2:
            return n2.onLastRemoteStoreUnlisten(r2);
          default:
            return;
        }
      });
    }
    function __PRIVATE_eventManagerOnWatchChange(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      let r2 = false;
      for (const e2 of t2) {
        const t3 = e2.query, i = n2.queries.get(t3);
        if (i) {
          for (const t4 of i.j_) t4.X_(e2) && (r2 = true);
          i.z_ = e2;
        }
      }
      r2 && __PRIVATE_raiseSnapshotsInSyncEvent(n2);
    }
    function __PRIVATE_eventManagerOnWatchError(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e), i = r2.queries.get(t2);
      if (i) for (const e2 of i.j_) e2.onError(n2);
      r2.queries.delete(t2);
    }
    function __PRIVATE_raiseSnapshotsInSyncEvent(e) {
      e.Y_.forEach((e2) => {
        e2.next();
      });
    }
    var pe, ye;
    (ye = pe || (pe = {})).ea = "default", /** Listen to changes in cache only */
    ye.Cache = "cache";
    class __PRIVATE_QueryListener {
      constructor(e, t2, n2) {
        this.query = e, this.ta = t2, /**
         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
         * observer. This flag is set to true once we've actually raised an event.
         */
        this.na = false, this.ra = null, this.onlineState = "Unknown", this.options = n2 || {};
      }
      /**
       * Applies the new ViewSnapshot to this listener, raising a user-facing event
       * if applicable (depending on what changed, whether the user has opted into
       * metadata-only changes, etc.). Returns true if a user-facing event was
       * indeed raised.
       */
      X_(e) {
        if (!this.options.includeMetadataChanges) {
          const t3 = [];
          for (const n2 of e.docChanges) 3 !== n2.type && t3.push(n2);
          e = new ViewSnapshot(
            e.query,
            e.docs,
            e.oldDocs,
            t3,
            e.mutatedKeys,
            e.fromCache,
            e.syncStateChanged,
            /* excludesMetadataChanges= */
            true,
            e.hasCachedResults
          );
        }
        let t2 = false;
        return this.na ? this.ia(e) && (this.ta.next(e), t2 = true) : this.sa(e, this.onlineState) && (this.oa(e), t2 = true), this.ra = e, t2;
      }
      onError(e) {
        this.ta.error(e);
      }
      /** Returns whether a snapshot was raised. */
      Z_(e) {
        this.onlineState = e;
        let t2 = false;
        return this.ra && !this.na && this.sa(this.ra, e) && (this.oa(this.ra), t2 = true), t2;
      }
      sa(e, t2) {
        if (!e.fromCache) return true;
        if (!this.J_()) return true;
        const n2 = "Offline" !== t2;
        return (!this.options._a || !n2) && (!e.docs.isEmpty() || e.hasCachedResults || "Offline" === t2);
      }
      ia(e) {
        if (e.docChanges.length > 0) return true;
        const t2 = this.ra && this.ra.hasPendingWrites !== e.hasPendingWrites;
        return !(!e.syncStateChanged && !t2) && true === this.options.includeMetadataChanges;
      }
      oa(e) {
        e = ViewSnapshot.fromInitialDocuments(e.query, e.docs, e.mutatedKeys, e.fromCache, e.hasCachedResults), this.na = true, this.ta.next(e);
      }
      J_() {
        return this.options.source !== pe.Cache;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_AddedLimboDocument {
      constructor(e) {
        this.key = e;
      }
    }
    class __PRIVATE_RemovedLimboDocument {
      constructor(e) {
        this.key = e;
      }
    }
    class __PRIVATE_View {
      constructor(e, t2) {
        this.query = e, this.Ta = t2, this.Ea = null, this.hasCachedResults = false, /**
         * A flag whether the view is current with the backend. A view is considered
         * current after it has seen the current flag from the backend and did not
         * lose consistency within the watch stream (e.g. because of an existence
         * filter mismatch).
         */
        this.current = false, /** Documents in the view but not in the remote target */
        this.da = __PRIVATE_documentKeySet(), /** Document Keys that have local changes */
        this.mutatedKeys = __PRIVATE_documentKeySet(), this.Aa = __PRIVATE_newQueryComparator(e), this.Ra = new DocumentSet(this.Aa);
      }
      /**
       * The set of remote documents that the server has told us belongs to the target associated with
       * this view.
       */
      get Va() {
        return this.Ta;
      }
      /**
       * Iterates over a set of doc changes, applies the query limit, and computes
       * what the new results should be, what the changes were, and whether we may
       * need to go back to the local cache for more results. Does not make any
       * changes to the view.
       * @param docChanges - The doc changes to apply to this view.
       * @param previousChanges - If this is being called with a refill, then start
       *        with this set of docs and changes instead of the current view.
       * @returns a new set of docs, changes, and refill flag.
       */
      ma(e, t2) {
        const n2 = t2 ? t2.fa : new __PRIVATE_DocumentChangeSet(), r2 = t2 ? t2.Ra : this.Ra;
        let i = t2 ? t2.mutatedKeys : this.mutatedKeys, s = r2, o = false;
        const _ = "F" === this.query.limitType && r2.size === this.query.limit ? r2.last() : null, a = "L" === this.query.limitType && r2.size === this.query.limit ? r2.first() : null;
        if (e.inorderTraversal((e2, t3) => {
          const u2 = r2.get(e2), c = __PRIVATE_queryMatches(this.query, t3) ? t3 : null, l2 = !!u2 && this.mutatedKeys.has(u2.key), h = !!c && (c.hasLocalMutations || // We only consider committed mutations for documents that were
          // mutated during the lifetime of the view.
          this.mutatedKeys.has(c.key) && c.hasCommittedMutations);
          let P2 = false;
          if (u2 && c) {
            u2.data.isEqual(c.data) ? l2 !== h && (n2.track({
              type: 3,
              doc: c
            }), P2 = true) : this.ga(u2, c) || (n2.track({
              type: 2,
              doc: c
            }), P2 = true, (_ && this.Aa(c, _) > 0 || a && this.Aa(c, a) < 0) && // This doc moved from inside the limit to outside the limit.
            // That means there may be some other doc in the local cache
            // that should be included instead.
            (o = true));
          } else !u2 && c ? (n2.track({
            type: 0,
            doc: c
          }), P2 = true) : u2 && !c && (n2.track({
            type: 1,
            doc: u2
          }), P2 = true, (_ || a) && // A doc was removed from a full limit query. We'll need to
          // requery from the local cache to see if we know about some other
          // doc that should be in the results.
          (o = true));
          P2 && (c ? (s = s.add(c), i = h ? i.add(e2) : i.delete(e2)) : (s = s.delete(e2), i = i.delete(e2)));
        }), null !== this.query.limit) for (; s.size > this.query.limit; ) {
          const e2 = "F" === this.query.limitType ? s.last() : s.first();
          s = s.delete(e2.key), i = i.delete(e2.key), n2.track({
            type: 1,
            doc: e2
          });
        }
        return {
          Ra: s,
          fa: n2,
          ns: o,
          mutatedKeys: i
        };
      }
      ga(e, t2) {
        return e.hasLocalMutations && t2.hasCommittedMutations && !t2.hasLocalMutations;
      }
      /**
       * Updates the view with the given ViewDocumentChanges and optionally updates
       * limbo docs and sync state from the provided target change.
       * @param docChanges - The set of changes to make to the view's docs.
       * @param limboResolutionEnabled - Whether to update limbo documents based on
       *        this change.
       * @param targetChange - A target change to apply for computing limbo docs and
       *        sync state.
       * @param targetIsPendingReset - Whether the target is pending to reset due to
       *        existence filter mismatch. If not explicitly specified, it is treated
       *        equivalently to `false`.
       * @returns A new ViewChange with the given docs, changes, and sync state.
       */
      // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
      applyChanges(e, t2, n2, r2) {
        const i = this.Ra;
        this.Ra = e.Ra, this.mutatedKeys = e.mutatedKeys;
        const s = e.fa.G_();
        s.sort((e2, t3) => function __PRIVATE_compareChangeType(e3, t4) {
          const order = (e4) => {
            switch (e4) {
              case 0:
                return 1;
              case 2:
              case 3:
                return 2;
              case 1:
                return 0;
              default:
                return fail();
            }
          };
          return order(e3) - order(t4);
        }(e2.type, t3.type) || this.Aa(e2.doc, t3.doc)), this.pa(n2), r2 = null != r2 && r2;
        const o = t2 && !r2 ? this.ya() : [], _ = 0 === this.da.size && this.current && !r2 ? 1 : 0, a = _ !== this.Ea;
        if (this.Ea = _, 0 !== s.length || a) {
          return {
            snapshot: new ViewSnapshot(
              this.query,
              e.Ra,
              i,
              s,
              e.mutatedKeys,
              0 === _,
              a,
              /* excludesMetadataChanges= */
              false,
              !!n2 && n2.resumeToken.approximateByteSize() > 0
            ),
            wa: o
          };
        }
        return {
          wa: o
        };
      }
      /**
       * Applies an OnlineState change to the view, potentially generating a
       * ViewChange if the view's syncState changes as a result.
       */
      Z_(e) {
        return this.current && "Offline" === e ? (
          // If we're offline, set `current` to false and then call applyChanges()
          // to refresh our syncState and generate a ViewChange as appropriate. We
          // are guaranteed to get a new TargetChange that sets `current` back to
          // true once the client is back online.
          (this.current = false, this.applyChanges(
            {
              Ra: this.Ra,
              fa: new __PRIVATE_DocumentChangeSet(),
              mutatedKeys: this.mutatedKeys,
              ns: false
            },
            /* limboResolutionEnabled= */
            false
          ))
        ) : {
          wa: []
        };
      }
      /**
       * Returns whether the doc for the given key should be in limbo.
       */
      Sa(e) {
        return !this.Ta.has(e) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
        (!!this.Ra.has(e) && !this.Ra.get(e).hasLocalMutations);
      }
      /**
       * Updates syncedDocuments, current, and limbo docs based on the given change.
       * Returns the list of changes to which docs are in limbo.
       */
      pa(e) {
        e && (e.addedDocuments.forEach((e2) => this.Ta = this.Ta.add(e2)), e.modifiedDocuments.forEach((e2) => {
        }), e.removedDocuments.forEach((e2) => this.Ta = this.Ta.delete(e2)), this.current = e.current);
      }
      ya() {
        if (!this.current) return [];
        const e = this.da;
        this.da = __PRIVATE_documentKeySet(), this.Ra.forEach((e2) => {
          this.Sa(e2.key) && (this.da = this.da.add(e2.key));
        });
        const t2 = [];
        return e.forEach((e2) => {
          this.da.has(e2) || t2.push(new __PRIVATE_RemovedLimboDocument(e2));
        }), this.da.forEach((n2) => {
          e.has(n2) || t2.push(new __PRIVATE_AddedLimboDocument(n2));
        }), t2;
      }
      /**
       * Update the in-memory state of the current view with the state read from
       * persistence.
       *
       * We update the query view whenever a client's primary status changes:
       * - When a client transitions from primary to secondary, it can miss
       *   LocalStorage updates and its query views may temporarily not be
       *   synchronized with the state on disk.
       * - For secondary to primary transitions, the client needs to update the list
       *   of `syncedDocuments` since secondary clients update their query views
       *   based purely on synthesized RemoteEvents.
       *
       * @param queryResult.documents - The documents that match the query according
       * to the LocalStore.
       * @param queryResult.remoteKeys - The keys of the documents that match the
       * query according to the backend.
       *
       * @returns The ViewChange that resulted from this synchronization.
       */
      // PORTING NOTE: Multi-tab only.
      ba(e) {
        this.Ta = e.Ts, this.da = __PRIVATE_documentKeySet();
        const t2 = this.ma(e.documents);
        return this.applyChanges(
          t2,
          /* limboResolutionEnabled= */
          true
        );
      }
      /**
       * Returns a view snapshot as if this query was just listened to. Contains
       * a document add for every existing document and the `fromCache` and
       * `hasPendingWrites` status of the already established view.
       */
      // PORTING NOTE: Multi-tab only.
      Da() {
        return ViewSnapshot.fromInitialDocuments(this.query, this.Ra, this.mutatedKeys, 0 === this.Ea, this.hasCachedResults);
      }
    }
    class __PRIVATE_QueryView {
      constructor(e, t2, n2) {
        this.query = e, this.targetId = t2, this.view = n2;
      }
    }
    class LimboResolution {
      constructor(e) {
        this.key = e, /**
         * Set to true once we've received a document. This is used in
         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
         * decide whether it needs to manufacture a delete event for the target once
         * the target is CURRENT.
         */
        this.va = false;
      }
    }
    class __PRIVATE_SyncEngineImpl {
      constructor(e, t2, n2, r2, i, s) {
        this.localStore = e, this.remoteStore = t2, this.eventManager = n2, this.sharedClientState = r2, this.currentUser = i, this.maxConcurrentLimboResolutions = s, this.Ca = {}, this.Fa = new ObjectMap((e2) => __PRIVATE_canonifyQuery(e2), __PRIVATE_queryEquals), this.Ma = /* @__PURE__ */ new Map(), /**
         * The keys of documents that are in limbo for which we haven't yet started a
         * limbo resolution query. The strings in this set are the result of calling
         * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
         *
         * The `Set` type was chosen because it provides efficient lookup and removal
         * of arbitrary elements and it also maintains insertion order, providing the
         * desired queue-like FIFO semantics.
         */
        this.xa = /* @__PURE__ */ new Set(), /**
         * Keeps track of the target ID for each document that is in limbo with an
         * active target.
         */
        this.Oa = new SortedMap$1(DocumentKey.comparator), /**
         * Keeps track of the information about an active limbo resolution for each
         * active target ID that was started for the purpose of limbo resolution.
         */
        this.Na = /* @__PURE__ */ new Map(), this.La = new __PRIVATE_ReferenceSet(), /** Stores user completion handlers, indexed by User and BatchId. */
        this.Ba = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged. */
        this.ka = /* @__PURE__ */ new Map(), this.qa = __PRIVATE_TargetIdGenerator.kn(), this.onlineState = "Unknown", // The primary state is set to `true` or `false` immediately after Firestore
        // startup. In the interim, a client should only be considered primary if
        // `isPrimary` is true.
        this.Qa = void 0;
      }
      get isPrimaryClient() {
        return true === this.Qa;
      }
    }
    function __PRIVATE_syncEngineListen(e, t2, n2 = true) {
      return __async(this, null, function* () {
        const r2 = __PRIVATE_ensureWatchCallbacks(e);
        let i;
        const s = r2.Fa.get(t2);
        return s ? (
          // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
          // already exists when EventManager calls us for the first time. This
          // happens when the primary tab is already listening to this query on
          // behalf of another tab and the user of the primary also starts listening
          // to the query. EventManager will not have an assigned target ID in this
          // case and calls `listen` to obtain this ID.
          (r2.sharedClientState.addLocalQueryTarget(s.targetId), i = s.view.Da())
        ) : i = yield __PRIVATE_allocateTargetAndMaybeListen(
          r2,
          t2,
          n2,
          /** shouldInitializeView= */
          true
        ), i;
      });
    }
    function __PRIVATE_triggerRemoteStoreListen(e, t2) {
      return __async(this, null, function* () {
        const n2 = __PRIVATE_ensureWatchCallbacks(e);
        yield __PRIVATE_allocateTargetAndMaybeListen(
          n2,
          t2,
          /** shouldListenToRemote= */
          true,
          /** shouldInitializeView= */
          false
        );
      });
    }
    function __PRIVATE_allocateTargetAndMaybeListen(e, t2, n2, r2) {
      return __async(this, null, function* () {
        const i = yield __PRIVATE_localStoreAllocateTarget(e.localStore, __PRIVATE_queryToTarget(t2)), s = i.targetId, o = e.sharedClientState.addLocalQueryTarget(s, n2);
        let _;
        return r2 && (_ = yield __PRIVATE_initializeViewAndComputeSnapshot(e, t2, s, "current" === o, i.resumeToken)), e.isPrimaryClient && n2 && __PRIVATE_remoteStoreListen(e.remoteStore, i), _;
      });
    }
    function __PRIVATE_initializeViewAndComputeSnapshot(e, t2, n2, r2, i) {
      return __async(this, null, function* () {
        e.Ka = (t3, n3, r3) => function __PRIVATE_applyDocChanges(e2, t4, n4, r4) {
          return __async(this, null, function* () {
            let i2 = t4.view.ma(n4);
            i2.ns && // The query has a limit and some docs were removed, so we need
            // to re-run the query against the local store to make sure we
            // didn't lose any good docs that had been past the limit.
            (i2 = yield __PRIVATE_localStoreExecuteQuery(
              e2.localStore,
              t4.query,
              /* usePreviousResults= */
              false
            ).then(({ documents: e3 }) => t4.view.ma(e3, i2)));
            const s2 = r4 && r4.targetChanges.get(t4.targetId), o2 = r4 && null != r4.targetMismatches.get(t4.targetId), _2 = t4.view.applyChanges(
              i2,
              /* limboResolutionEnabled= */
              e2.isPrimaryClient,
              s2,
              o2
            );
            return __PRIVATE_updateTrackedLimbos(e2, t4.targetId, _2.wa), _2.snapshot;
          });
        }(e, t3, n3, r3);
        const s = yield __PRIVATE_localStoreExecuteQuery(
          e.localStore,
          t2,
          /* usePreviousResults= */
          true
        ), o = new __PRIVATE_View(t2, s.Ts), _ = o.ma(s.documents), a = TargetChange.createSynthesizedTargetChangeForCurrentChange(n2, r2 && "Offline" !== e.onlineState, i), u2 = o.applyChanges(
          _,
          /* limboResolutionEnabled= */
          e.isPrimaryClient,
          a
        );
        __PRIVATE_updateTrackedLimbos(e, n2, u2.wa);
        const c = new __PRIVATE_QueryView(t2, n2, o);
        return e.Fa.set(t2, c), e.Ma.has(n2) ? e.Ma.get(n2).push(t2) : e.Ma.set(n2, [t2]), u2.snapshot;
      });
    }
    function __PRIVATE_syncEngineUnlisten(e, t2, n2) {
      return __async(this, null, function* () {
        const r2 = __PRIVATE_debugCast(e), i = r2.Fa.get(t2), s = r2.Ma.get(i.targetId);
        if (s.length > 1) return r2.Ma.set(i.targetId, s.filter((e2) => !__PRIVATE_queryEquals(e2, t2))), void r2.Fa.delete(t2);
        if (r2.isPrimaryClient) {
          r2.sharedClientState.removeLocalQueryTarget(i.targetId);
          r2.sharedClientState.isActiveQueryTarget(i.targetId) || (yield __PRIVATE_localStoreReleaseTarget(
            r2.localStore,
            i.targetId,
            /*keepPersistedTargetData=*/
            false
          ).then(() => {
            r2.sharedClientState.clearQueryState(i.targetId), n2 && __PRIVATE_remoteStoreUnlisten(r2.remoteStore, i.targetId), __PRIVATE_removeAndCleanupTarget(r2, i.targetId);
          }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss));
        } else __PRIVATE_removeAndCleanupTarget(r2, i.targetId), yield __PRIVATE_localStoreReleaseTarget(
          r2.localStore,
          i.targetId,
          /*keepPersistedTargetData=*/
          true
        );
      });
    }
    function __PRIVATE_triggerRemoteStoreUnlisten(e, t2) {
      return __async(this, null, function* () {
        const n2 = __PRIVATE_debugCast(e), r2 = n2.Fa.get(t2), i = n2.Ma.get(r2.targetId);
        n2.isPrimaryClient && 1 === i.length && // PORTING NOTE: Unregister the target ID with local Firestore client as
        // watch target.
        (n2.sharedClientState.removeLocalQueryTarget(r2.targetId), __PRIVATE_remoteStoreUnlisten(n2.remoteStore, r2.targetId));
      });
    }
    function __PRIVATE_syncEngineWrite(e, t2, n2) {
      return __async(this, null, function* () {
        const r2 = __PRIVATE_syncEngineEnsureWriteCallbacks(e);
        try {
          const e2 = yield function __PRIVATE_localStoreWriteLocally(e3, t3) {
            const n3 = __PRIVATE_debugCast(e3), r3 = Timestamp.now(), i = t3.reduce((e4, t4) => e4.add(t4.key), __PRIVATE_documentKeySet());
            let s, o;
            return n3.persistence.runTransaction("Locally write mutations", "readwrite", (e4) => {
              let _ = __PRIVATE_mutableDocumentMap(), a = __PRIVATE_documentKeySet();
              return n3.cs.getEntries(e4, i).next((e5) => {
                _ = e5, _.forEach((e6, t4) => {
                  t4.isValidDocument() || (a = a.add(e6));
                });
              }).next(() => n3.localDocuments.getOverlayedDocuments(e4, _)).next((i2) => {
                s = i2;
                const o2 = [];
                for (const e5 of t3) {
                  const t4 = __PRIVATE_mutationExtractBaseValue(e5, s.get(e5.key).overlayedDocument);
                  null != t4 && // NOTE: The base state should only be applied if there's some
                  // existing document to override, so use a Precondition of
                  // exists=true
                  o2.push(new __PRIVATE_PatchMutation(e5.key, t4, __PRIVATE_extractFieldMask(t4.value.mapValue), Precondition.exists(true)));
                }
                return n3.mutationQueue.addMutationBatch(e4, r3, o2, t3);
              }).next((t4) => {
                o = t4;
                const r4 = t4.applyToLocalDocumentSet(s, a);
                return n3.documentOverlayCache.saveOverlays(e4, t4.batchId, r4);
              });
            }).then(() => ({
              batchId: o.batchId,
              changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(s)
            }));
          }(r2.localStore, t2);
          r2.sharedClientState.addPendingMutation(e2.batchId), function __PRIVATE_addMutationCallback(e3, t3, n3) {
            let r3 = e3.Ba[e3.currentUser.toKey()];
            r3 || (r3 = new SortedMap$1(__PRIVATE_primitiveComparator));
            r3 = r3.insert(t3, n3), e3.Ba[e3.currentUser.toKey()] = r3;
          }(r2, e2.batchId, n2), yield __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(r2, e2.changes), yield __PRIVATE_fillWritePipeline(r2.remoteStore);
        } catch (e2) {
          const t3 = __PRIVATE_wrapInUserErrorIfRecoverable(e2, "Failed to persist write");
          n2.reject(t3);
        }
      });
    }
    function __PRIVATE_syncEngineApplyRemoteEvent(e, t2) {
      return __async(this, null, function* () {
        const n2 = __PRIVATE_debugCast(e);
        try {
          const e2 = yield __PRIVATE_localStoreApplyRemoteEventToLocalCache(n2.localStore, t2);
          t2.targetChanges.forEach((e3, t3) => {
            const r2 = n2.Na.get(t3);
            r2 && // Since this is a limbo resolution lookup, it's for a single document
            // and it could be added, modified, or removed, but not a combination.
            (__PRIVATE_hardAssert(e3.addedDocuments.size + e3.modifiedDocuments.size + e3.removedDocuments.size <= 1), e3.addedDocuments.size > 0 ? r2.va = true : e3.modifiedDocuments.size > 0 ? __PRIVATE_hardAssert(r2.va) : e3.removedDocuments.size > 0 && (__PRIVATE_hardAssert(r2.va), r2.va = false));
          }), yield __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n2, e2, t2);
        } catch (e2) {
          yield __PRIVATE_ignoreIfPrimaryLeaseLoss(e2);
        }
      });
    }
    function __PRIVATE_syncEngineApplyOnlineStateChange(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e);
      if (r2.isPrimaryClient && 0 === n2 || !r2.isPrimaryClient && 1 === n2) {
        const e2 = [];
        r2.Fa.forEach((n3, r3) => {
          const i = r3.view.Z_(t2);
          i.snapshot && e2.push(i.snapshot);
        }), function __PRIVATE_eventManagerOnOnlineStateChange(e3, t3) {
          const n3 = __PRIVATE_debugCast(e3);
          n3.onlineState = t3;
          let r3 = false;
          n3.queries.forEach((e4, n4) => {
            for (const e5 of n4.j_)
              e5.Z_(t3) && (r3 = true);
          }), r3 && __PRIVATE_raiseSnapshotsInSyncEvent(n3);
        }(r2.eventManager, t2), e2.length && r2.Ca.d_(e2), r2.onlineState = t2, r2.isPrimaryClient && r2.sharedClientState.setOnlineState(t2);
      }
    }
    function __PRIVATE_syncEngineRejectListen(e, t2, n2) {
      return __async(this, null, function* () {
        const r2 = __PRIVATE_debugCast(e);
        r2.sharedClientState.updateQueryState(t2, "rejected", n2);
        const i = r2.Na.get(t2), s = i && i.key;
        if (s) {
          let e2 = new SortedMap$1(DocumentKey.comparator);
          e2 = e2.insert(s, MutableDocument.newNoDocument(s, SnapshotVersion.min()));
          const n3 = __PRIVATE_documentKeySet().add(s), i2 = new RemoteEvent(
            SnapshotVersion.min(),
            /* targetChanges= */
            /* @__PURE__ */ new Map(),
            /* targetMismatches= */
            new SortedMap$1(__PRIVATE_primitiveComparator),
            e2,
            n3
          );
          yield __PRIVATE_syncEngineApplyRemoteEvent(r2, i2), // Since this query failed, we won't want to manually unlisten to it.
          // We only remove it from bookkeeping after we successfully applied the
          // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
          // this query when the RemoteStore restarts the Watch stream, which should
          // re-trigger the target failure.
          r2.Oa = r2.Oa.remove(s), r2.Na.delete(t2), __PRIVATE_pumpEnqueuedLimboResolutions(r2);
        } else yield __PRIVATE_localStoreReleaseTarget(
          r2.localStore,
          t2,
          /* keepPersistedTargetData */
          false
        ).then(() => __PRIVATE_removeAndCleanupTarget(r2, t2, n2)).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
      });
    }
    function __PRIVATE_syncEngineApplySuccessfulWrite(e, t2) {
      return __async(this, null, function* () {
        const n2 = __PRIVATE_debugCast(e), r2 = t2.batch.batchId;
        try {
          const e2 = yield __PRIVATE_localStoreAcknowledgeBatch(n2.localStore, t2);
          __PRIVATE_processUserCallback(
            n2,
            r2,
            /*error=*/
            null
          ), __PRIVATE_triggerPendingWritesCallbacks(n2, r2), n2.sharedClientState.updateMutationState(r2, "acknowledged"), yield __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n2, e2);
        } catch (e2) {
          yield __PRIVATE_ignoreIfPrimaryLeaseLoss(e2);
        }
      });
    }
    function __PRIVATE_syncEngineRejectFailedWrite(e, t2, n2) {
      return __async(this, null, function* () {
        const r2 = __PRIVATE_debugCast(e);
        try {
          const e2 = yield function __PRIVATE_localStoreRejectBatch(e3, t3) {
            const n3 = __PRIVATE_debugCast(e3);
            return n3.persistence.runTransaction("Reject batch", "readwrite-primary", (e4) => {
              let r3;
              return n3.mutationQueue.lookupMutationBatch(e4, t3).next((t4) => (__PRIVATE_hardAssert(null !== t4), r3 = t4.keys(), n3.mutationQueue.removeMutationBatch(e4, t4))).next(() => n3.mutationQueue.performConsistencyCheck(e4)).next(() => n3.documentOverlayCache.removeOverlaysForBatchId(e4, r3, t3)).next(() => n3.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e4, r3)).next(() => n3.localDocuments.getDocuments(e4, r3));
            });
          }(r2.localStore, t2);
          __PRIVATE_processUserCallback(r2, t2, n2), __PRIVATE_triggerPendingWritesCallbacks(r2, t2), r2.sharedClientState.updateMutationState(t2, "rejected", n2), yield __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(r2, e2);
        } catch (n3) {
          yield __PRIVATE_ignoreIfPrimaryLeaseLoss(n3);
        }
      });
    }
    function __PRIVATE_triggerPendingWritesCallbacks(e, t2) {
      (e.ka.get(t2) || []).forEach((e2) => {
        e2.resolve();
      }), e.ka.delete(t2);
    }
    function __PRIVATE_processUserCallback(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e);
      let i = r2.Ba[r2.currentUser.toKey()];
      if (i) {
        const e2 = i.get(t2);
        e2 && (n2 ? e2.reject(n2) : e2.resolve(), i = i.remove(t2)), r2.Ba[r2.currentUser.toKey()] = i;
      }
    }
    function __PRIVATE_removeAndCleanupTarget(e, t2, n2 = null) {
      e.sharedClientState.removeLocalQueryTarget(t2);
      for (const r2 of e.Ma.get(t2)) e.Fa.delete(r2), n2 && e.Ca.$a(r2, n2);
      if (e.Ma.delete(t2), e.isPrimaryClient) {
        e.La.gr(t2).forEach((t3) => {
          e.La.containsKey(t3) || // We removed the last reference for this key
          __PRIVATE_removeLimboTarget(e, t3);
        });
      }
    }
    function __PRIVATE_removeLimboTarget(e, t2) {
      e.xa.delete(t2.path.canonicalString());
      const n2 = e.Oa.get(t2);
      null !== n2 && (__PRIVATE_remoteStoreUnlisten(e.remoteStore, n2), e.Oa = e.Oa.remove(t2), e.Na.delete(n2), __PRIVATE_pumpEnqueuedLimboResolutions(e));
    }
    function __PRIVATE_updateTrackedLimbos(e, t2, n2) {
      for (const r2 of n2) if (r2 instanceof __PRIVATE_AddedLimboDocument) e.La.addReference(r2.key, t2), __PRIVATE_trackLimboChange(e, r2);
      else if (r2 instanceof __PRIVATE_RemovedLimboDocument) {
        __PRIVATE_logDebug("SyncEngine", "Document no longer in limbo: " + r2.key), e.La.removeReference(r2.key, t2);
        e.La.containsKey(r2.key) || // We removed the last reference for this key
        __PRIVATE_removeLimboTarget(e, r2.key);
      } else fail();
    }
    function __PRIVATE_trackLimboChange(e, t2) {
      const n2 = t2.key, r2 = n2.path.canonicalString();
      e.Oa.get(n2) || e.xa.has(r2) || (__PRIVATE_logDebug("SyncEngine", "New document in limbo: " + n2), e.xa.add(r2), __PRIVATE_pumpEnqueuedLimboResolutions(e));
    }
    function __PRIVATE_pumpEnqueuedLimboResolutions(e) {
      for (; e.xa.size > 0 && e.Oa.size < e.maxConcurrentLimboResolutions; ) {
        const t2 = e.xa.values().next().value;
        e.xa.delete(t2);
        const n2 = new DocumentKey(ResourcePath.fromString(t2)), r2 = e.qa.next();
        e.Na.set(r2, new LimboResolution(n2)), e.Oa = e.Oa.insert(n2, r2), __PRIVATE_remoteStoreListen(e.remoteStore, new TargetData(__PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(n2.path)), r2, "TargetPurposeLimboResolution", __PRIVATE_ListenSequence.oe));
      }
    }
    function __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(e, t2, n2) {
      return __async(this, null, function* () {
        const r2 = __PRIVATE_debugCast(e), i = [], s = [], o = [];
        r2.Fa.isEmpty() || (r2.Fa.forEach((e2, _) => {
          o.push(r2.Ka(_, t2, n2).then((e3) => {
            var t3;
            if ((e3 || n2) && r2.isPrimaryClient) {
              const i2 = e3 ? !e3.fromCache : null === (t3 = null == n2 ? void 0 : n2.targetChanges.get(_.targetId)) || void 0 === t3 ? void 0 : t3.current;
              r2.sharedClientState.updateQueryState(_.targetId, i2 ? "current" : "not-current");
            }
            if (e3) {
              i.push(e3);
              const t4 = __PRIVATE_LocalViewChanges.Wi(_.targetId, e3);
              s.push(t4);
            }
          }));
        }), yield Promise.all(o), r2.Ca.d_(i), yield function __PRIVATE_localStoreNotifyLocalViewChanges(e2, t3) {
          return __async(this, null, function* () {
            const n3 = __PRIVATE_debugCast(e2);
            try {
              yield n3.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (e3) => PersistencePromise.forEach(t3, (t4) => PersistencePromise.forEach(t4.$i, (r3) => n3.persistence.referenceDelegate.addReference(e3, t4.targetId, r3)).next(() => PersistencePromise.forEach(t4.Ui, (r3) => n3.persistence.referenceDelegate.removeReference(e3, t4.targetId, r3)))));
            } catch (e3) {
              if (!__PRIVATE_isIndexedDbTransactionError(e3)) throw e3;
              __PRIVATE_logDebug("LocalStore", "Failed to update sequence numbers: " + e3);
            }
            for (const e3 of t3) {
              const t4 = e3.targetId;
              if (!e3.fromCache) {
                const e4 = n3.os.get(t4), r3 = e4.snapshotVersion, i2 = e4.withLastLimboFreeSnapshotVersion(r3);
                n3.os = n3.os.insert(t4, i2);
              }
            }
          });
        }(r2.localStore, s));
      });
    }
    function __PRIVATE_syncEngineHandleCredentialChange(e, t2) {
      return __async(this, null, function* () {
        const n2 = __PRIVATE_debugCast(e);
        if (!n2.currentUser.isEqual(t2)) {
          __PRIVATE_logDebug("SyncEngine", "User change. New user:", t2.toKey());
          const e2 = yield __PRIVATE_localStoreHandleUserChange(n2.localStore, t2);
          n2.currentUser = t2, // Fails tasks waiting for pending writes requested by previous user.
          function __PRIVATE_rejectOutstandingPendingWritesCallbacks(e3, t3) {
            e3.ka.forEach((e4) => {
              e4.forEach((e5) => {
                e5.reject(new FirestoreError(D.CANCELLED, t3));
              });
            }), e3.ka.clear();
          }(n2, "'waitForPendingWrites' promise is rejected due to a user change."), // TODO(b/114226417): Consider calling this only in the primary tab.
          n2.sharedClientState.handleUserChange(t2, e2.removedBatchIds, e2.addedBatchIds), yield __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n2, e2.hs);
        }
      });
    }
    function __PRIVATE_syncEngineGetRemoteKeysForTarget(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = n2.Na.get(t2);
      if (r2 && r2.va) return __PRIVATE_documentKeySet().add(r2.key);
      {
        let e2 = __PRIVATE_documentKeySet();
        const r3 = n2.Ma.get(t2);
        if (!r3) return e2;
        for (const t3 of r3) {
          const r4 = n2.Fa.get(t3);
          e2 = e2.unionWith(r4.view.Va);
        }
        return e2;
      }
    }
    function __PRIVATE_ensureWatchCallbacks(e) {
      const t2 = __PRIVATE_debugCast(e);
      return t2.remoteStore.remoteSyncer.applyRemoteEvent = __PRIVATE_syncEngineApplyRemoteEvent.bind(null, t2), t2.remoteStore.remoteSyncer.getRemoteKeysForTarget = __PRIVATE_syncEngineGetRemoteKeysForTarget.bind(null, t2), t2.remoteStore.remoteSyncer.rejectListen = __PRIVATE_syncEngineRejectListen.bind(null, t2), t2.Ca.d_ = __PRIVATE_eventManagerOnWatchChange.bind(null, t2.eventManager), t2.Ca.$a = __PRIVATE_eventManagerOnWatchError.bind(null, t2.eventManager), t2;
    }
    function __PRIVATE_syncEngineEnsureWriteCallbacks(e) {
      const t2 = __PRIVATE_debugCast(e);
      return t2.remoteStore.remoteSyncer.applySuccessfulWrite = __PRIVATE_syncEngineApplySuccessfulWrite.bind(null, t2), t2.remoteStore.remoteSyncer.rejectFailedWrite = __PRIVATE_syncEngineRejectFailedWrite.bind(null, t2), t2;
    }
    class __PRIVATE_MemoryOfflineComponentProvider {
      constructor() {
        this.kind = "memory", this.synchronizeTabs = false;
      }
      initialize(e) {
        return __async(this, null, function* () {
          this.serializer = __PRIVATE_newSerializer(e.databaseInfo.databaseId), this.sharedClientState = this.Wa(e), this.persistence = this.Ga(e), yield this.persistence.start(), this.localStore = this.za(e), this.gcScheduler = this.ja(e, this.localStore), this.indexBackfillerScheduler = this.Ha(e, this.localStore);
        });
      }
      ja(e, t2) {
        return null;
      }
      Ha(e, t2) {
        return null;
      }
      za(e) {
        return __PRIVATE_newLocalStore(this.persistence, new __PRIVATE_QueryEngine(), e.initialUser, this.serializer);
      }
      Ga(e) {
        return new __PRIVATE_MemoryPersistence(__PRIVATE_MemoryEagerDelegate.Zr, this.serializer);
      }
      Wa(e) {
        return new __PRIVATE_MemorySharedClientState();
      }
      terminate() {
        return __async(this, null, function* () {
          var e, t2;
          null === (e = this.gcScheduler) || void 0 === e || e.stop(), null === (t2 = this.indexBackfillerScheduler) || void 0 === t2 || t2.stop(), this.sharedClientState.shutdown(), yield this.persistence.shutdown();
        });
      }
    }
    __PRIVATE_MemoryOfflineComponentProvider.provider = {
      build: () => new __PRIVATE_MemoryOfflineComponentProvider()
    };
    class OnlineComponentProvider {
      initialize(e, t2) {
        return __async(this, null, function* () {
          this.localStore || (this.localStore = e.localStore, this.sharedClientState = e.sharedClientState, this.datastore = this.createDatastore(t2), this.remoteStore = this.createRemoteStore(t2), this.eventManager = this.createEventManager(t2), this.syncEngine = this.createSyncEngine(
            t2,
            /* startAsPrimary=*/
            !e.synchronizeTabs
          ), this.sharedClientState.onlineStateHandler = (e2) => __PRIVATE_syncEngineApplyOnlineStateChange(
            this.syncEngine,
            e2,
            1
            /* OnlineStateSource.SharedClientState */
          ), this.remoteStore.remoteSyncer.handleCredentialChange = __PRIVATE_syncEngineHandleCredentialChange.bind(null, this.syncEngine), yield __PRIVATE_remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient));
        });
      }
      createEventManager(e) {
        return function __PRIVATE_newEventManager() {
          return new __PRIVATE_EventManagerImpl();
        }();
      }
      createDatastore(e) {
        const t2 = __PRIVATE_newSerializer(e.databaseInfo.databaseId), n2 = function __PRIVATE_newConnection(e2) {
          return new __PRIVATE_WebChannelConnection(e2);
        }(e.databaseInfo);
        return function __PRIVATE_newDatastore(e2, t3, n3, r2) {
          return new __PRIVATE_DatastoreImpl(e2, t3, n3, r2);
        }(e.authCredentials, e.appCheckCredentials, n2, t2);
      }
      createRemoteStore(e) {
        return function __PRIVATE_newRemoteStore(e2, t2, n2, r2, i) {
          return new __PRIVATE_RemoteStoreImpl(e2, t2, n2, r2, i);
        }(this.localStore, this.datastore, e.asyncQueue, (e2) => __PRIVATE_syncEngineApplyOnlineStateChange(
          this.syncEngine,
          e2,
          0
          /* OnlineStateSource.RemoteStore */
        ), function __PRIVATE_newConnectivityMonitor() {
          return __PRIVATE_BrowserConnectivityMonitor.D() ? new __PRIVATE_BrowserConnectivityMonitor() : new __PRIVATE_NoopConnectivityMonitor();
        }());
      }
      createSyncEngine(e, t2) {
        return function __PRIVATE_newSyncEngine(e2, t3, n2, r2, i, s, o) {
          const _ = new __PRIVATE_SyncEngineImpl(e2, t3, n2, r2, i, s);
          return o && (_.Qa = true), _;
        }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, e.initialUser, e.maxConcurrentLimboResolutions, t2);
      }
      terminate() {
        return __async(this, null, function* () {
          var e, t2;
          yield function __PRIVATE_remoteStoreShutdown(e2) {
            return __async(this, null, function* () {
              const t3 = __PRIVATE_debugCast(e2);
              __PRIVATE_logDebug("RemoteStore", "RemoteStore shutting down."), t3.L_.add(
                5
                /* OfflineCause.Shutdown */
              ), yield __PRIVATE_disableNetworkInternal(t3), t3.k_.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
              // triggering spurious listener events with cached data, etc.
              t3.q_.set(
                "Unknown"
                /* OnlineState.Unknown */
              );
            });
          }(this.remoteStore), null === (e = this.datastore) || void 0 === e || e.terminate(), null === (t2 = this.eventManager) || void 0 === t2 || t2.terminate();
        });
      }
    }
    OnlineComponentProvider.provider = {
      build: () => new OnlineComponentProvider()
    };
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_AsyncObserver {
      constructor(e) {
        this.observer = e, /**
         * When set to true, will not raise future events. Necessary to deal with
         * async detachment of listener.
         */
        this.muted = false;
      }
      next(e) {
        this.muted || this.observer.next && this.Ya(this.observer.next, e);
      }
      error(e) {
        this.muted || (this.observer.error ? this.Ya(this.observer.error, e) : __PRIVATE_logError("Uncaught Error in snapshot listener:", e.toString()));
      }
      Za() {
        this.muted = true;
      }
      Ya(e, t2) {
        setTimeout(() => {
          this.muted || e(t2);
        }, 0);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FirestoreClient {
      constructor(e, t2, n2, r2, i) {
        this.authCredentials = e, this.appCheckCredentials = t2, this.asyncQueue = n2, this.databaseInfo = r2, this.user = User.UNAUTHENTICATED, this.clientId = __PRIVATE_AutoId.newId(), this.authCredentialListener = () => Promise.resolve(), this.appCheckCredentialListener = () => Promise.resolve(), this._uninitializedComponentsProvider = i, this.authCredentials.start(n2, (e2) => __async(this, null, function* () {
          __PRIVATE_logDebug("FirestoreClient", "Received user=", e2.uid), yield this.authCredentialListener(e2), this.user = e2;
        })), this.appCheckCredentials.start(n2, (e2) => (__PRIVATE_logDebug("FirestoreClient", "Received new app check token=", e2), this.appCheckCredentialListener(e2, this.user)));
      }
      get configuration() {
        return {
          asyncQueue: this.asyncQueue,
          databaseInfo: this.databaseInfo,
          clientId: this.clientId,
          authCredentials: this.authCredentials,
          appCheckCredentials: this.appCheckCredentials,
          initialUser: this.user,
          maxConcurrentLimboResolutions: 100
        };
      }
      setCredentialChangeListener(e) {
        this.authCredentialListener = e;
      }
      setAppCheckTokenChangeListener(e) {
        this.appCheckCredentialListener = e;
      }
      terminate() {
        this.asyncQueue.enterRestrictedMode();
        const e = new __PRIVATE_Deferred();
        return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(() => __async(this, null, function* () {
          try {
            this._onlineComponents && (yield this._onlineComponents.terminate()), this._offlineComponents && (yield this._offlineComponents.terminate()), // The credentials provider must be terminated after shutting down the
            // RemoteStore as it will prevent the RemoteStore from retrieving auth
            // tokens.
            this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), e.resolve();
          } catch (t2) {
            const n2 = __PRIVATE_wrapInUserErrorIfRecoverable(t2, "Failed to shutdown persistence");
            e.reject(n2);
          }
        })), e.promise;
      }
    }
    function __PRIVATE_setOfflineComponentProvider(e, t2) {
      return __async(this, null, function* () {
        e.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug("FirestoreClient", "Initializing OfflineComponentProvider");
        const n2 = e.configuration;
        yield t2.initialize(n2);
        let r2 = n2.initialUser;
        e.setCredentialChangeListener((e2) => __async(this, null, function* () {
          r2.isEqual(e2) || (yield __PRIVATE_localStoreHandleUserChange(t2.localStore, e2), r2 = e2);
        })), // When a user calls clearPersistence() in one client, all other clients
        // need to be terminated to allow the delete to succeed.
        t2.persistence.setDatabaseDeletedListener(() => e.terminate()), e._offlineComponents = t2;
      });
    }
    function __PRIVATE_setOnlineComponentProvider(e, t2) {
      return __async(this, null, function* () {
        e.asyncQueue.verifyOperationInProgress();
        const n2 = yield __PRIVATE_ensureOfflineComponents(e);
        __PRIVATE_logDebug("FirestoreClient", "Initializing OnlineComponentProvider"), yield t2.initialize(n2, e.configuration), // The CredentialChangeListener of the online component provider takes
        // precedence over the offline component provider.
        e.setCredentialChangeListener((e2) => __PRIVATE_remoteStoreHandleCredentialChange(t2.remoteStore, e2)), e.setAppCheckTokenChangeListener((e2, n3) => __PRIVATE_remoteStoreHandleCredentialChange(t2.remoteStore, n3)), e._onlineComponents = t2;
      });
    }
    function __PRIVATE_ensureOfflineComponents(e) {
      return __async(this, null, function* () {
        if (!e._offlineComponents) if (e._uninitializedComponentsProvider) {
          __PRIVATE_logDebug("FirestoreClient", "Using user provided OfflineComponentProvider");
          try {
            yield __PRIVATE_setOfflineComponentProvider(e, e._uninitializedComponentsProvider._offline);
          } catch (t2) {
            const n2 = t2;
            if (!function __PRIVATE_canFallbackFromIndexedDbError(e2) {
              return "FirebaseError" === e2.name ? e2.code === D.FAILED_PRECONDITION || e2.code === D.UNIMPLEMENTED : !("undefined" != typeof DOMException && e2 instanceof DOMException) || // When the browser is out of quota we could get either quota exceeded
              // or an aborted error depending on whether the error happened during
              // schema migration.
              22 === e2.code || 20 === e2.code || // Firefox Private Browsing mode disables IndexedDb and returns
              // INVALID_STATE for any usage.
              11 === e2.code;
            }(n2)) throw n2;
            __PRIVATE_logWarn("Error using user provided cache. Falling back to memory cache: " + n2), yield __PRIVATE_setOfflineComponentProvider(e, new __PRIVATE_MemoryOfflineComponentProvider());
          }
        } else __PRIVATE_logDebug("FirestoreClient", "Using default OfflineComponentProvider"), yield __PRIVATE_setOfflineComponentProvider(e, new __PRIVATE_MemoryOfflineComponentProvider());
        return e._offlineComponents;
      });
    }
    function __PRIVATE_ensureOnlineComponents(e) {
      return __async(this, null, function* () {
        return e._onlineComponents || (e._uninitializedComponentsProvider ? (__PRIVATE_logDebug("FirestoreClient", "Using user provided OnlineComponentProvider"), yield __PRIVATE_setOnlineComponentProvider(e, e._uninitializedComponentsProvider._online)) : (__PRIVATE_logDebug("FirestoreClient", "Using default OnlineComponentProvider"), yield __PRIVATE_setOnlineComponentProvider(e, new OnlineComponentProvider()))), e._onlineComponents;
      });
    }
    function __PRIVATE_getSyncEngine(e) {
      return __PRIVATE_ensureOnlineComponents(e).then((e2) => e2.syncEngine);
    }
    function __PRIVATE_getEventManager(e) {
      return __async(this, null, function* () {
        const t2 = yield __PRIVATE_ensureOnlineComponents(e), n2 = t2.eventManager;
        return n2.onListen = __PRIVATE_syncEngineListen.bind(null, t2.syncEngine), n2.onUnlisten = __PRIVATE_syncEngineUnlisten.bind(null, t2.syncEngine), n2.onFirstRemoteStoreListen = __PRIVATE_triggerRemoteStoreListen.bind(null, t2.syncEngine), n2.onLastRemoteStoreUnlisten = __PRIVATE_triggerRemoteStoreUnlisten.bind(null, t2.syncEngine), n2;
      });
    }
    function __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(e, t2, n2 = {}) {
      const r2 = new __PRIVATE_Deferred();
      return e.asyncQueue.enqueueAndForget(() => __async(this, null, function* () {
        return function __PRIVATE_readDocumentViaSnapshotListener(e2, t3, n3, r3, i) {
          const s = new __PRIVATE_AsyncObserver({
            next: (_) => {
              s.Za(), t3.enqueueAndForget(() => __PRIVATE_eventManagerUnlisten(e2, o));
              const a = _.docs.has(n3);
              !a && _.fromCache ? (
                // TODO(dimond): If we're online and the document doesn't
                // exist then we resolve with a doc.exists set to false. If
                // we're offline however, we reject the Promise in this
                // case. Two options: 1) Cache the negative response from
                // the server so we can deliver that even when you're
                // offline 2) Actually reject the Promise in the online case
                // if the document doesn't exist.
                i.reject(new FirestoreError(D.UNAVAILABLE, "Failed to get document because the client is offline."))
              ) : a && _.fromCache && r3 && "server" === r3.source ? i.reject(new FirestoreError(D.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(_);
            },
            error: (e3) => i.reject(e3)
          }), o = new __PRIVATE_QueryListener(__PRIVATE_newQueryForPath(n3.path), s, {
            includeMetadataChanges: true,
            _a: true
          });
          return __PRIVATE_eventManagerListen(e2, o);
        }(yield __PRIVATE_getEventManager(e), e.asyncQueue, t2, n2, r2);
      })), r2.promise;
    }
    function __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(e, t2, n2 = {}) {
      const r2 = new __PRIVATE_Deferred();
      return e.asyncQueue.enqueueAndForget(() => __async(this, null, function* () {
        return function __PRIVATE_executeQueryViaSnapshotListener(e2, t3, n3, r3, i) {
          const s = new __PRIVATE_AsyncObserver({
            next: (n4) => {
              s.Za(), t3.enqueueAndForget(() => __PRIVATE_eventManagerUnlisten(e2, o)), n4.fromCache && "server" === r3.source ? i.reject(new FirestoreError(D.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n4);
            },
            error: (e3) => i.reject(e3)
          }), o = new __PRIVATE_QueryListener(n3, s, {
            includeMetadataChanges: true,
            _a: true
          });
          return __PRIVATE_eventManagerListen(e2, o);
        }(yield __PRIVATE_getEventManager(e), e.asyncQueue, t2, n2, r2);
      })), r2.promise;
    }
    /**
     * @license
     * Copyright 2023 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_cloneLongPollingOptions(e) {
      const t2 = {};
      return void 0 !== e.timeoutSeconds && (t2.timeoutSeconds = e.timeoutSeconds), t2;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const we = /* @__PURE__ */ new Map();
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_validateNonEmptyArgument(e, t2, n2) {
      if (!n2) throw new FirestoreError(D.INVALID_ARGUMENT, `Function ${e}() cannot be called with an empty ${t2}.`);
    }
    function __PRIVATE_validateIsNotUsedTogether(e, t2, n2, r2) {
      if (true === t2 && true === r2) throw new FirestoreError(D.INVALID_ARGUMENT, `${e} and ${n2} cannot be used together.`);
    }
    function __PRIVATE_validateDocumentPath(e) {
      if (!DocumentKey.isDocumentKey(e)) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${e} has ${e.length}.`);
    }
    function __PRIVATE_validateCollectionPath(e) {
      if (DocumentKey.isDocumentKey(e)) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${e} has ${e.length}.`);
    }
    function __PRIVATE_valueDescription(e) {
      if (void 0 === e) return "undefined";
      if (null === e) return "null";
      if ("string" == typeof e) return e.length > 20 && (e = `${e.substring(0, 20)}...`), JSON.stringify(e);
      if ("number" == typeof e || "boolean" == typeof e) return "" + e;
      if ("object" == typeof e) {
        if (e instanceof Array) return "an array";
        {
          const t2 = (
            /** try to get the constructor name for an object. */
            function __PRIVATE_tryGetCustomObjectType(e2) {
              if (e2.constructor) return e2.constructor.name;
              return null;
            }(e)
          );
          return t2 ? `a custom ${t2} object` : "an object";
        }
      }
      return "function" == typeof e ? "a function" : fail();
    }
    function __PRIVATE_cast(e, t2) {
      if ("_delegate" in e && // Unwrap Compat types
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (e = e._delegate), !(e instanceof t2)) {
        if (t2.name === e.constructor.name) throw new FirestoreError(D.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
        {
          const n2 = __PRIVATE_valueDescription(e);
          throw new FirestoreError(D.INVALID_ARGUMENT, `Expected type '${t2.name}', but it was: ${n2}`);
        }
      }
      return e;
    }
    function __PRIVATE_validatePositiveNumber(e, t2) {
      if (t2 <= 0) throw new FirestoreError(D.INVALID_ARGUMENT, `Function ${e}() requires a positive number, but it was: ${t2}.`);
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FirestoreSettingsImpl {
      constructor(e) {
        var t2, n2;
        if (void 0 === e.host) {
          if (void 0 !== e.ssl) throw new FirestoreError(D.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
          this.host = "firestore.googleapis.com", this.ssl = true;
        } else this.host = e.host, this.ssl = null === (t2 = e.ssl) || void 0 === t2 || t2;
        if (this.credentials = e.credentials, this.ignoreUndefinedProperties = !!e.ignoreUndefinedProperties, this.localCache = e.localCache, void 0 === e.cacheSizeBytes) this.cacheSizeBytes = 41943040;
        else {
          if (-1 !== e.cacheSizeBytes && e.cacheSizeBytes < 1048576) throw new FirestoreError(D.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
          this.cacheSizeBytes = e.cacheSizeBytes;
        }
        __PRIVATE_validateIsNotUsedTogether("experimentalForceLongPolling", e.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", e.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!e.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = false : void 0 === e.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : (
          // For backwards compatibility, coerce the value to boolean even though
          // the TypeScript compiler has narrowed the type to boolean already.
          // noinspection PointlessBooleanExpressionJS
          this.experimentalAutoDetectLongPolling = !!e.experimentalAutoDetectLongPolling
        ), this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (n2 = e.experimentalLongPollingOptions) && void 0 !== n2 ? n2 : {}), function __PRIVATE_validateLongPollingOptions(e2) {
          if (void 0 !== e2.timeoutSeconds) {
            if (isNaN(e2.timeoutSeconds)) throw new FirestoreError(D.INVALID_ARGUMENT, `invalid long polling timeout: ${e2.timeoutSeconds} (must not be NaN)`);
            if (e2.timeoutSeconds < 5) throw new FirestoreError(D.INVALID_ARGUMENT, `invalid long polling timeout: ${e2.timeoutSeconds} (minimum allowed value is 5)`);
            if (e2.timeoutSeconds > 30) throw new FirestoreError(D.INVALID_ARGUMENT, `invalid long polling timeout: ${e2.timeoutSeconds} (maximum allowed value is 30)`);
          }
        }(this.experimentalLongPollingOptions), this.useFetchStreams = !!e.useFetchStreams;
      }
      isEqual(e) {
        return this.host === e.host && this.ssl === e.ssl && this.credentials === e.credentials && this.cacheSizeBytes === e.cacheSizeBytes && this.experimentalForceLongPolling === e.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === e.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(e2, t2) {
          return e2.timeoutSeconds === t2.timeoutSeconds;
        }(this.experimentalLongPollingOptions, e.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === e.ignoreUndefinedProperties && this.useFetchStreams === e.useFetchStreams;
      }
    }
    class Firestore$1 {
      /** @hideconstructor */
      constructor(e, t2, n2, r2) {
        this._authCredentials = e, this._appCheckCredentials = t2, this._databaseId = n2, this._app = r2, /**
         * Whether it's a Firestore or Firestore Lite instance.
         */
        this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new FirestoreSettingsImpl({}), this._settingsFrozen = false, // A task that is assigned when the terminate() is invoked and resolved when
        // all components have shut down. Otherwise, Firestore is not terminated,
        // which can mean either the FirestoreClient is in the process of starting,
        // or restarting.
        this._terminateTask = "notTerminated";
      }
      /**
       * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
       * instance.
       */
      get app() {
        if (!this._app) throw new FirestoreError(D.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this._app;
      }
      get _initialized() {
        return this._settingsFrozen;
      }
      get _terminated() {
        return "notTerminated" !== this._terminateTask;
      }
      _setSettings(e) {
        if (this._settingsFrozen) throw new FirestoreError(D.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
        this._settings = new FirestoreSettingsImpl(e), void 0 !== e.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(e2) {
          if (!e2) return new __PRIVATE_EmptyAuthCredentialsProvider();
          switch (e2.type) {
            case "firstParty":
              return new __PRIVATE_FirstPartyAuthCredentialsProvider(e2.sessionIndex || "0", e2.iamToken || null, e2.authTokenFactory || null);
            case "provider":
              return e2.client;
            default:
              throw new FirestoreError(D.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
          }
        }(e.credentials));
      }
      _getSettings() {
        return this._settings;
      }
      _freezeSettings() {
        return this._settingsFrozen = true, this._settings;
      }
      _delete() {
        return "notTerminated" === this._terminateTask && (this._terminateTask = this._terminate()), this._terminateTask;
      }
      _restart() {
        return __async(this, null, function* () {
          "notTerminated" === this._terminateTask ? yield this._terminate() : this._terminateTask = "notTerminated";
        });
      }
      /** Returns a JSON-serializable representation of this `Firestore` instance. */
      toJSON() {
        return {
          app: this._app,
          databaseId: this._databaseId,
          settings: this._settings
        };
      }
      /**
       * Terminates all components used by this client. Subclasses can override
       * this method to clean up their own dependencies, but must also call this
       * method.
       *
       * Only ever called once.
       */
      _terminate() {
        return function __PRIVATE_removeComponents(e) {
          const t2 = we.get(e);
          t2 && (__PRIVATE_logDebug("ComponentProvider", "Removing Datastore"), we.delete(e), t2.terminate());
        }(this), Promise.resolve();
      }
    }
    function connectFirestoreEmulator(e, t2, n2, r2 = {}) {
      var i;
      const s = (e = __PRIVATE_cast(e, Firestore$1))._getSettings(), o = `${t2}:${n2}`;
      if ("firestore.googleapis.com" !== s.host && s.host !== o && __PRIVATE_logWarn("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."), e._setSettings(Object.assign(Object.assign({}, s), {
        host: o,
        ssl: false
      })), r2.mockUserToken) {
        let t3, n3;
        if ("string" == typeof r2.mockUserToken) t3 = r2.mockUserToken, n3 = User.MOCK_USER;
        else {
          t3 = createMockUserToken(r2.mockUserToken, null === (i = e._app) || void 0 === i ? void 0 : i.options.projectId);
          const s2 = r2.mockUserToken.sub || r2.mockUserToken.user_id;
          if (!s2) throw new FirestoreError(D.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
          n3 = new User(s2);
        }
        e._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(t3, n3));
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Query {
      // This is the lite version of the Query class in the main SDK.
      /** @hideconstructor protected */
      constructor(e, t2, n2) {
        this.converter = t2, this._query = n2, /** The type of this Firestore reference. */
        this.type = "query", this.firestore = e;
      }
      withConverter(e) {
        return new Query(this.firestore, e, this._query);
      }
    }
    class DocumentReference {
      /** @hideconstructor */
      constructor(e, t2, n2) {
        this.converter = t2, this._key = n2, /** The type of this Firestore reference. */
        this.type = "document", this.firestore = e;
      }
      get _path() {
        return this._key.path;
      }
      /**
       * The document's identifier within its collection.
       */
      get id() {
        return this._key.path.lastSegment();
      }
      /**
       * A string representing the path of the referenced document (relative
       * to the root of the database).
       */
      get path() {
        return this._key.path.canonicalString();
      }
      /**
       * The collection this `DocumentReference` belongs to.
       */
      get parent() {
        return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());
      }
      withConverter(e) {
        return new DocumentReference(this.firestore, e, this._key);
      }
    }
    class CollectionReference extends Query {
      /** @hideconstructor */
      constructor(e, t2, n2) {
        super(e, t2, __PRIVATE_newQueryForPath(n2)), this._path = n2, /** The type of this Firestore reference. */
        this.type = "collection";
      }
      /** The collection's identifier. */
      get id() {
        return this._query.path.lastSegment();
      }
      /**
       * A string representing the path of the referenced collection (relative
       * to the root of the database).
       */
      get path() {
        return this._query.path.canonicalString();
      }
      /**
       * A reference to the containing `DocumentReference` if this is a
       * subcollection. If this isn't a subcollection, the reference is null.
       */
      get parent() {
        const e = this._path.popLast();
        return e.isEmpty() ? null : new DocumentReference(
          this.firestore,
          /* converter= */
          null,
          new DocumentKey(e)
        );
      }
      withConverter(e) {
        return new CollectionReference(this.firestore, e, this._path);
      }
    }
    function collection(e, t2, ...n2) {
      if (e = getModularInstance(e), __PRIVATE_validateNonEmptyArgument("collection", "path", t2), e instanceof Firestore$1) {
        const r2 = ResourcePath.fromString(t2, ...n2);
        return __PRIVATE_validateCollectionPath(r2), new CollectionReference(
          e,
          /* converter= */
          null,
          r2
        );
      }
      {
        if (!(e instanceof DocumentReference || e instanceof CollectionReference)) throw new FirestoreError(D.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const r2 = e._path.child(ResourcePath.fromString(t2, ...n2));
        return __PRIVATE_validateCollectionPath(r2), new CollectionReference(
          e.firestore,
          /* converter= */
          null,
          r2
        );
      }
    }
    function doc(e, t2, ...n2) {
      if (e = getModularInstance(e), // We allow omission of 'pathString' but explicitly prohibit passing in both
      // 'undefined' and 'null'.
      1 === arguments.length && (t2 = __PRIVATE_AutoId.newId()), __PRIVATE_validateNonEmptyArgument("doc", "path", t2), e instanceof Firestore$1) {
        const r2 = ResourcePath.fromString(t2, ...n2);
        return __PRIVATE_validateDocumentPath(r2), new DocumentReference(
          e,
          /* converter= */
          null,
          new DocumentKey(r2)
        );
      }
      {
        if (!(e instanceof DocumentReference || e instanceof CollectionReference)) throw new FirestoreError(D.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const r2 = e._path.child(ResourcePath.fromString(t2, ...n2));
        return __PRIVATE_validateDocumentPath(r2), new DocumentReference(e.firestore, e instanceof CollectionReference ? e.converter : null, new DocumentKey(r2));
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class __PRIVATE_AsyncQueueImpl {
      constructor(e = Promise.resolve()) {
        this.Pu = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
        // be changed again.
        this.Iu = false, // Operations scheduled to be queued in the future. Operations are
        // automatically removed after they are run or canceled.
        this.Tu = [], // visible for testing
        this.Eu = null, // Flag set while there's an outstanding AsyncQueue operation, used for
        // assertion sanity-checks.
        this.du = false, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
        this.Au = false, // List of TimerIds to fast-forward delays for.
        this.Ru = [], // Backoff timer used to schedule retries for retryable operations
        this.t_ = new __PRIVATE_ExponentialBackoff(
          this,
          "async_queue_retry"
          /* TimerId.AsyncQueueRetry */
        ), // Visibility handler that triggers an immediate retry of all retryable
        // operations. Meant to speed up recovery when we regain file system access
        // after page comes into foreground.
        this.Vu = () => {
          const e2 = getDocument();
          e2 && __PRIVATE_logDebug("AsyncQueue", "Visibility state changed to " + e2.visibilityState), this.t_.jo();
        }, this.mu = e;
        const t2 = getDocument();
        t2 && "function" == typeof t2.addEventListener && t2.addEventListener("visibilitychange", this.Vu);
      }
      get isShuttingDown() {
        return this.Iu;
      }
      /**
       * Adds a new operation to the queue without waiting for it to complete (i.e.
       * we ignore the Promise result).
       */
      enqueueAndForget(e) {
        this.enqueue(e);
      }
      enqueueAndForgetEvenWhileRestricted(e) {
        this.fu(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.gu(e);
      }
      enterRestrictedMode(e) {
        if (!this.Iu) {
          this.Iu = true, this.Au = e || false;
          const t2 = getDocument();
          t2 && "function" == typeof t2.removeEventListener && t2.removeEventListener("visibilitychange", this.Vu);
        }
      }
      enqueue(e) {
        if (this.fu(), this.Iu)
          return new Promise(() => {
          });
        const t2 = new __PRIVATE_Deferred();
        return this.gu(() => this.Iu && this.Au ? Promise.resolve() : (e().then(t2.resolve, t2.reject), t2.promise)).then(() => t2.promise);
      }
      enqueueRetryable(e) {
        this.enqueueAndForget(() => (this.Pu.push(e), this.pu()));
      }
      /**
       * Runs the next operation from the retryable queue. If the operation fails,
       * reschedules with backoff.
       */
      pu() {
        return __async(this, null, function* () {
          if (0 !== this.Pu.length) {
            try {
              yield this.Pu[0](), this.Pu.shift(), this.t_.reset();
            } catch (e) {
              if (!__PRIVATE_isIndexedDbTransactionError(e)) throw e;
              __PRIVATE_logDebug("AsyncQueue", "Operation failed with retryable error: " + e);
            }
            this.Pu.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
            // This is necessary to run retryable operations that failed during
            // their initial attempt since we don't know whether they are already
            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
            // call scheduled here.
            // Since `backoffAndRun()` cancels an existing backoff and schedules a
            // new backoff on every call, there is only ever a single additional
            // operation in the queue.
            this.t_.Go(() => this.pu());
          }
        });
      }
      gu(e) {
        const t2 = this.mu.then(() => (this.du = true, e().catch((e2) => {
          this.Eu = e2, this.du = false;
          const t3 = (
            /**
            * Chrome includes Error.message in Error.stack. Other browsers do not.
            * This returns expected output of message + stack when available.
            * @param error - Error or FirestoreError
            */
            function __PRIVATE_getMessageOrStack(e3) {
              let t4 = e3.message || "";
              e3.stack && (t4 = e3.stack.includes(e3.message) ? e3.stack : e3.message + "\n" + e3.stack);
              return t4;
            }(e2)
          );
          throw __PRIVATE_logError("INTERNAL UNHANDLED ERROR: ", t3), e2;
        }).then((e2) => (this.du = false, e2))));
        return this.mu = t2, t2;
      }
      enqueueAfterDelay(e, t2, n2) {
        this.fu(), // Fast-forward delays for timerIds that have been overridden.
        this.Ru.indexOf(e) > -1 && (t2 = 0);
        const r2 = DelayedOperation.createAndSchedule(this, e, t2, n2, (e2) => this.yu(e2));
        return this.Tu.push(r2), r2;
      }
      fu() {
        this.Eu && fail();
      }
      verifyOperationInProgress() {
      }
      /**
       * Waits until all currently queued tasks are finished executing. Delayed
       * operations are not run.
       */
      wu() {
        return __async(this, null, function* () {
          let e;
          do {
            e = this.mu, yield e;
          } while (e !== this.mu);
        });
      }
      /**
       * For Tests: Determine if a delayed operation with a particular TimerId
       * exists.
       */
      Su(e) {
        for (const t2 of this.Tu) if (t2.timerId === e) return true;
        return false;
      }
      /**
       * For Tests: Runs some or all delayed operations early.
       *
       * @param lastTimerId - Delayed operations up to and including this TimerId
       * will be drained. Pass TimerId.All to run all delayed operations.
       * @returns a Promise that resolves once all operations have been run.
       */
      bu(e) {
        return this.wu().then(() => {
          this.Tu.sort((e2, t2) => e2.targetTimeMs - t2.targetTimeMs);
          for (const t2 of this.Tu) if (t2.skipDelay(), "all" !== e && t2.timerId === e) break;
          return this.wu();
        });
      }
      /**
       * For Tests: Skip all subsequent delays for a timer id.
       */
      Du(e) {
        this.Ru.push(e);
      }
      /** Called once a DelayedOperation is run or canceled. */
      yu(e) {
        const t2 = this.Tu.indexOf(e);
        this.Tu.splice(t2, 1);
      }
    }
    class Firestore extends Firestore$1 {
      /** @hideconstructor */
      constructor(e, t2, n2, r2) {
        super(e, t2, n2, r2), /**
         * Whether it's a {@link Firestore} or Firestore Lite instance.
         */
        this.type = "firestore", this._queue = new __PRIVATE_AsyncQueueImpl(), this._persistenceKey = (null == r2 ? void 0 : r2.name) || "[DEFAULT]";
      }
      _terminate() {
        return __async(this, null, function* () {
          if (this._firestoreClient) {
            const e = this._firestoreClient.terminate();
            this._queue = new __PRIVATE_AsyncQueueImpl(e), this._firestoreClient = void 0, yield e;
          }
        });
      }
    }
    function getFirestore(t2, n2) {
      const r2 = "object" == typeof t2 ? t2 : getApp(), i = "string" == typeof t2 ? t2 : "(default)", s = _getProvider(r2, "firestore").getImmediate({
        identifier: i
      });
      if (!s._initialized) {
        const e = getDefaultEmulatorHostnameAndPort("firestore");
        e && connectFirestoreEmulator(s, ...e);
      }
      return s;
    }
    function ensureFirestoreConfigured(e) {
      if (e._terminated) throw new FirestoreError(D.FAILED_PRECONDITION, "The client has already been terminated.");
      return e._firestoreClient || __PRIVATE_configureFirestore(e), e._firestoreClient;
    }
    function __PRIVATE_configureFirestore(e) {
      var t2, n2, r2;
      const i = e._freezeSettings(), s = function __PRIVATE_makeDatabaseInfo(e2, t3, n3, r3) {
        return new DatabaseInfo(e2, t3, n3, r3.host, r3.ssl, r3.experimentalForceLongPolling, r3.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(r3.experimentalLongPollingOptions), r3.useFetchStreams);
      }(e._databaseId, (null === (t2 = e._app) || void 0 === t2 ? void 0 : t2.options.appId) || "", e._persistenceKey, i);
      e._componentsProvider || (null === (n2 = i.localCache) || void 0 === n2 ? void 0 : n2._offlineComponentProvider) && (null === (r2 = i.localCache) || void 0 === r2 ? void 0 : r2._onlineComponentProvider) && (e._componentsProvider = {
        _offline: i.localCache._offlineComponentProvider,
        _online: i.localCache._onlineComponentProvider
      }), e._firestoreClient = new FirestoreClient(e._authCredentials, e._appCheckCredentials, e._queue, s, e._componentsProvider && function __PRIVATE_buildComponentProvider(e2) {
        const t3 = null == e2 ? void 0 : e2._online.build();
        return {
          _offline: null == e2 ? void 0 : e2._offline.build(t3),
          _online: t3
        };
      }(e._componentsProvider));
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Bytes {
      /** @hideconstructor */
      constructor(e) {
        this._byteString = e;
      }
      /**
       * Creates a new `Bytes` object from the given Base64 string, converting it to
       * bytes.
       *
       * @param base64 - The Base64 string used to create the `Bytes` object.
       */
      static fromBase64String(e) {
        try {
          return new Bytes(ByteString.fromBase64String(e));
        } catch (e2) {
          throw new FirestoreError(D.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e2);
        }
      }
      /**
       * Creates a new `Bytes` object from the given Uint8Array.
       *
       * @param array - The Uint8Array used to create the `Bytes` object.
       */
      static fromUint8Array(e) {
        return new Bytes(ByteString.fromUint8Array(e));
      }
      /**
       * Returns the underlying bytes as a Base64-encoded string.
       *
       * @returns The Base64-encoded string created from the `Bytes` object.
       */
      toBase64() {
        return this._byteString.toBase64();
      }
      /**
       * Returns the underlying bytes in a new `Uint8Array`.
       *
       * @returns The Uint8Array created from the `Bytes` object.
       */
      toUint8Array() {
        return this._byteString.toUint8Array();
      }
      /**
       * Returns a string representation of the `Bytes` object.
       *
       * @returns A string representation of the `Bytes` object.
       */
      toString() {
        return "Bytes(base64: " + this.toBase64() + ")";
      }
      /**
       * Returns true if this `Bytes` object is equal to the provided one.
       *
       * @param other - The `Bytes` object to compare against.
       * @returns true if this `Bytes` object is equal to the provided one.
       */
      isEqual(e) {
        return this._byteString.isEqual(e._byteString);
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FieldPath {
      /**
       * Creates a `FieldPath` from the provided field names. If more than one field
       * name is provided, the path will point to a nested field in a document.
       *
       * @param fieldNames - A list of field names.
       */
      constructor(...e) {
        for (let t2 = 0; t2 < e.length; ++t2) if (0 === e[t2].length) throw new FirestoreError(D.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this._internalPath = new FieldPath$1(e);
      }
      /**
       * Returns true if this `FieldPath` is equal to the provided one.
       *
       * @param other - The `FieldPath` to compare against.
       * @returns true if this `FieldPath` is equal to the provided one.
       */
      isEqual(e) {
        return this._internalPath.isEqual(e._internalPath);
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FieldValue {
      /**
       * @param _methodName - The public API endpoint that returns this class.
       * @hideconstructor
       */
      constructor(e) {
        this._methodName = e;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class GeoPoint {
      /**
       * Creates a new immutable `GeoPoint` object with the provided latitude and
       * longitude values.
       * @param latitude - The latitude as number between -90 and 90.
       * @param longitude - The longitude as number between -180 and 180.
       */
      constructor(e, t2) {
        if (!isFinite(e) || e < -90 || e > 90) throw new FirestoreError(D.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + e);
        if (!isFinite(t2) || t2 < -180 || t2 > 180) throw new FirestoreError(D.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + t2);
        this._lat = e, this._long = t2;
      }
      /**
       * The latitude of this `GeoPoint` instance.
       */
      get latitude() {
        return this._lat;
      }
      /**
       * The longitude of this `GeoPoint` instance.
       */
      get longitude() {
        return this._long;
      }
      /**
       * Returns true if this `GeoPoint` is equal to the provided one.
       *
       * @param other - The `GeoPoint` to compare against.
       * @returns true if this `GeoPoint` is equal to the provided one.
       */
      isEqual(e) {
        return this._lat === e._lat && this._long === e._long;
      }
      /** Returns a JSON-serializable representation of this GeoPoint. */
      toJSON() {
        return {
          latitude: this._lat,
          longitude: this._long
        };
      }
      /**
       * Actually private to JS consumers of our API, so this function is prefixed
       * with an underscore.
       */
      _compareTo(e) {
        return __PRIVATE_primitiveComparator(this._lat, e._lat) || __PRIVATE_primitiveComparator(this._long, e._long);
      }
    }
    /**
     * @license
     * Copyright 2024 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class VectorValue {
      /**
       * @private
       * @internal
       */
      constructor(e) {
        this._values = (e || []).map((e2) => e2);
      }
      /**
       * Returns a copy of the raw number array form of the vector.
       */
      toArray() {
        return this._values.map((e) => e);
      }
      /**
       * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.
       */
      isEqual(e) {
        return function __PRIVATE_isPrimitiveArrayEqual(e2, t2) {
          if (e2.length !== t2.length) return false;
          for (let n2 = 0; n2 < e2.length; ++n2) if (e2[n2] !== t2[n2]) return false;
          return true;
        }(this._values, e._values);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const be = /^__.*__$/;
    class ParsedSetData {
      constructor(e, t2, n2) {
        this.data = e, this.fieldMask = t2, this.fieldTransforms = n2;
      }
      toMutation(e, t2) {
        return null !== this.fieldMask ? new __PRIVATE_PatchMutation(e, this.data, this.fieldMask, t2, this.fieldTransforms) : new __PRIVATE_SetMutation(e, this.data, t2, this.fieldTransforms);
      }
    }
    class ParsedUpdateData {
      constructor(e, t2, n2) {
        this.data = e, this.fieldMask = t2, this.fieldTransforms = n2;
      }
      toMutation(e, t2) {
        return new __PRIVATE_PatchMutation(e, this.data, this.fieldMask, t2, this.fieldTransforms);
      }
    }
    function __PRIVATE_isWrite(e) {
      switch (e) {
        case 0:
        case 2:
        case 1:
          return true;
        case 3:
        case 4:
          return false;
        default:
          throw fail();
      }
    }
    class __PRIVATE_ParseContextImpl {
      /**
       * Initializes a ParseContext with the given source and path.
       *
       * @param settings - The settings for the parser.
       * @param databaseId - The database ID of the Firestore instance.
       * @param serializer - The serializer to use to generate the Value proto.
       * @param ignoreUndefinedProperties - Whether to ignore undefined properties
       * rather than throw.
       * @param fieldTransforms - A mutable list of field transforms encountered
       * while parsing the data.
       * @param fieldMask - A mutable list of field paths encountered while parsing
       * the data.
       *
       * TODO(b/34871131): We don't support array paths right now, so path can be
       * null to indicate the context represents any location within an array (in
       * which case certain features will not work and errors will be somewhat
       * compromised).
       */
      constructor(e, t2, n2, r2, i, s) {
        this.settings = e, this.databaseId = t2, this.serializer = n2, this.ignoreUndefinedProperties = r2, // Minor hack: If fieldTransforms is undefined, we assume this is an
        // external call and we need to validate the entire path.
        void 0 === i && this.vu(), this.fieldTransforms = i || [], this.fieldMask = s || [];
      }
      get path() {
        return this.settings.path;
      }
      get Cu() {
        return this.settings.Cu;
      }
      /** Returns a new context with the specified settings overwritten. */
      Fu(e) {
        return new __PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
      }
      Mu(e) {
        var t2;
        const n2 = null === (t2 = this.path) || void 0 === t2 ? void 0 : t2.child(e), r2 = this.Fu({
          path: n2,
          xu: false
        });
        return r2.Ou(e), r2;
      }
      Nu(e) {
        var t2;
        const n2 = null === (t2 = this.path) || void 0 === t2 ? void 0 : t2.child(e), r2 = this.Fu({
          path: n2,
          xu: false
        });
        return r2.vu(), r2;
      }
      Lu(e) {
        return this.Fu({
          path: void 0,
          xu: true
        });
      }
      Bu(e) {
        return __PRIVATE_createError(e, this.settings.methodName, this.settings.ku || false, this.path, this.settings.qu);
      }
      /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
      contains(e) {
        return void 0 !== this.fieldMask.find((t2) => e.isPrefixOf(t2)) || void 0 !== this.fieldTransforms.find((t2) => e.isPrefixOf(t2.field));
      }
      vu() {
        if (this.path) for (let e = 0; e < this.path.length; e++) this.Ou(this.path.get(e));
      }
      Ou(e) {
        if (0 === e.length) throw this.Bu("Document fields must not be empty");
        if (__PRIVATE_isWrite(this.Cu) && be.test(e)) throw this.Bu('Document fields cannot begin and end with "__"');
      }
    }
    class __PRIVATE_UserDataReader {
      constructor(e, t2, n2) {
        this.databaseId = e, this.ignoreUndefinedProperties = t2, this.serializer = n2 || __PRIVATE_newSerializer(e);
      }
      /** Creates a new top-level parse context. */
      Qu(e, t2, n2, r2 = false) {
        return new __PRIVATE_ParseContextImpl({
          Cu: e,
          methodName: t2,
          qu: n2,
          path: FieldPath$1.emptyPath(),
          xu: false,
          ku: r2
        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
      }
    }
    function __PRIVATE_newUserDataReader(e) {
      const t2 = e._freezeSettings(), n2 = __PRIVATE_newSerializer(e._databaseId);
      return new __PRIVATE_UserDataReader(e._databaseId, !!t2.ignoreUndefinedProperties, n2);
    }
    function __PRIVATE_parseSetData(e, t2, n2, r2, i, s = {}) {
      const o = e.Qu(s.merge || s.mergeFields ? 2 : 0, t2, n2, i);
      __PRIVATE_validatePlainObject("Data must be an object, but it was:", o, r2);
      const _ = __PRIVATE_parseObject(r2, o);
      let a, u2;
      if (s.merge) a = new FieldMask(o.fieldMask), u2 = o.fieldTransforms;
      else if (s.mergeFields) {
        const e2 = [];
        for (const r3 of s.mergeFields) {
          const i2 = __PRIVATE_fieldPathFromArgument$1(t2, r3, n2);
          if (!o.contains(i2)) throw new FirestoreError(D.INVALID_ARGUMENT, `Field '${i2}' is specified in your field mask but missing from your input data.`);
          __PRIVATE_fieldMaskContains(e2, i2) || e2.push(i2);
        }
        a = new FieldMask(e2), u2 = o.fieldTransforms.filter((e3) => a.covers(e3.field));
      } else a = null, u2 = o.fieldTransforms;
      return new ParsedSetData(new ObjectValue(_), a, u2);
    }
    class __PRIVATE_DeleteFieldValueImpl extends FieldValue {
      _toFieldTransform(e) {
        if (2 !== e.Cu) throw 1 === e.Cu ? e.Bu(`${this._methodName}() can only appear at the top level of your update data`) : e.Bu(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
        return e.fieldMask.push(e.path), null;
      }
      isEqual(e) {
        return e instanceof __PRIVATE_DeleteFieldValueImpl;
      }
    }
    class __PRIVATE_ServerTimestampFieldValueImpl extends FieldValue {
      _toFieldTransform(e) {
        return new FieldTransform(e.path, new __PRIVATE_ServerTimestampTransform());
      }
      isEqual(e) {
        return e instanceof __PRIVATE_ServerTimestampFieldValueImpl;
      }
    }
    function __PRIVATE_parseUpdateData(e, t2, n2, r2) {
      const i = e.Qu(1, t2, n2);
      __PRIVATE_validatePlainObject("Data must be an object, but it was:", i, r2);
      const s = [], o = ObjectValue.empty();
      forEach(r2, (e2, r3) => {
        const _2 = __PRIVATE_fieldPathFromDotSeparatedString(t2, e2, n2);
        r3 = getModularInstance(r3);
        const a = i.Nu(_2);
        if (r3 instanceof __PRIVATE_DeleteFieldValueImpl)
          s.push(_2);
        else {
          const e3 = __PRIVATE_parseData(r3, a);
          null != e3 && (s.push(_2), o.set(_2, e3));
        }
      });
      const _ = new FieldMask(s);
      return new ParsedUpdateData(o, _, i.fieldTransforms);
    }
    function __PRIVATE_parseUpdateVarargs(e, t2, n2, r2, i, s) {
      const o = e.Qu(1, t2, n2), _ = [__PRIVATE_fieldPathFromArgument$1(t2, r2, n2)], a = [i];
      if (s.length % 2 != 0) throw new FirestoreError(D.INVALID_ARGUMENT, `Function ${t2}() needs to be called with an even number of arguments that alternate between field names and values.`);
      for (let e2 = 0; e2 < s.length; e2 += 2) _.push(__PRIVATE_fieldPathFromArgument$1(t2, s[e2])), a.push(s[e2 + 1]);
      const u2 = [], c = ObjectValue.empty();
      for (let e2 = _.length - 1; e2 >= 0; --e2) if (!__PRIVATE_fieldMaskContains(u2, _[e2])) {
        const t3 = _[e2];
        let n3 = a[e2];
        n3 = getModularInstance(n3);
        const r3 = o.Nu(t3);
        if (n3 instanceof __PRIVATE_DeleteFieldValueImpl)
          u2.push(t3);
        else {
          const e3 = __PRIVATE_parseData(n3, r3);
          null != e3 && (u2.push(t3), c.set(t3, e3));
        }
      }
      const l2 = new FieldMask(u2);
      return new ParsedUpdateData(c, l2, o.fieldTransforms);
    }
    function __PRIVATE_parseQueryValue(e, t2, n2, r2 = false) {
      return __PRIVATE_parseData(n2, e.Qu(r2 ? 4 : 3, t2));
    }
    function __PRIVATE_parseData(e, t2) {
      if (__PRIVATE_looksLikeJsonObject(
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        e = getModularInstance(e)
      )) return __PRIVATE_validatePlainObject("Unsupported field value:", t2, e), __PRIVATE_parseObject(e, t2);
      if (e instanceof FieldValue)
        return function __PRIVATE_parseSentinelFieldValue(e2, t3) {
          if (!__PRIVATE_isWrite(t3.Cu)) throw t3.Bu(`${e2._methodName}() can only be used with update() and set()`);
          if (!t3.path) throw t3.Bu(`${e2._methodName}() is not currently supported inside arrays`);
          const n2 = e2._toFieldTransform(t3);
          n2 && t3.fieldTransforms.push(n2);
        }(e, t2), null;
      if (void 0 === e && t2.ignoreUndefinedProperties)
        return null;
      if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        t2.path && t2.fieldMask.push(t2.path), e instanceof Array
      ) {
        if (t2.settings.xu && 4 !== t2.Cu) throw t2.Bu("Nested arrays are not supported");
        return function __PRIVATE_parseArray(e2, t3) {
          const n2 = [];
          let r2 = 0;
          for (const i of e2) {
            let e3 = __PRIVATE_parseData(i, t3.Lu(r2));
            null == e3 && // Just include nulls in the array for fields being replaced with a
            // sentinel.
            (e3 = {
              nullValue: "NULL_VALUE"
            }), n2.push(e3), r2++;
          }
          return {
            arrayValue: {
              values: n2
            }
          };
        }(e, t2);
      }
      return function __PRIVATE_parseScalarValue(e2, t3) {
        if (null === (e2 = getModularInstance(e2))) return {
          nullValue: "NULL_VALUE"
        };
        if ("number" == typeof e2) return toNumber(t3.serializer, e2);
        if ("boolean" == typeof e2) return {
          booleanValue: e2
        };
        if ("string" == typeof e2) return {
          stringValue: e2
        };
        if (e2 instanceof Date) {
          const n2 = Timestamp.fromDate(e2);
          return {
            timestampValue: toTimestamp(t3.serializer, n2)
          };
        }
        if (e2 instanceof Timestamp) {
          const n2 = new Timestamp(e2.seconds, 1e3 * Math.floor(e2.nanoseconds / 1e3));
          return {
            timestampValue: toTimestamp(t3.serializer, n2)
          };
        }
        if (e2 instanceof GeoPoint) return {
          geoPointValue: {
            latitude: e2.latitude,
            longitude: e2.longitude
          }
        };
        if (e2 instanceof Bytes) return {
          bytesValue: __PRIVATE_toBytes(t3.serializer, e2._byteString)
        };
        if (e2 instanceof DocumentReference) {
          const n2 = t3.databaseId, r2 = e2.firestore._databaseId;
          if (!r2.isEqual(n2)) throw t3.Bu(`Document reference is for database ${r2.projectId}/${r2.database} but should be for database ${n2.projectId}/${n2.database}`);
          return {
            referenceValue: __PRIVATE_toResourceName(e2.firestore._databaseId || t3.databaseId, e2._key.path)
          };
        }
        if (e2 instanceof VectorValue)
          return function __PRIVATE_parseVectorValue(e3, t4) {
            return {
              mapValue: {
                fields: {
                  __type__: {
                    stringValue: "__vector__"
                  },
                  value: {
                    arrayValue: {
                      values: e3.toArray().map((e4) => {
                        if ("number" != typeof e4) throw t4.Bu("VectorValues must only contain numeric values.");
                        return __PRIVATE_toDouble(t4.serializer, e4);
                      })
                    }
                  }
                }
              }
            };
          }(e2, t3);
        throw t3.Bu(`Unsupported field value: ${__PRIVATE_valueDescription(e2)}`);
      }(e, t2);
    }
    function __PRIVATE_parseObject(e, t2) {
      const n2 = {};
      return isEmpty(e) ? (
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        t2.path && t2.path.length > 0 && t2.fieldMask.push(t2.path)
      ) : forEach(e, (e2, r2) => {
        const i = __PRIVATE_parseData(r2, t2.Mu(e2));
        null != i && (n2[e2] = i);
      }), {
        mapValue: {
          fields: n2
        }
      };
    }
    function __PRIVATE_looksLikeJsonObject(e) {
      return !("object" != typeof e || null === e || e instanceof Array || e instanceof Date || e instanceof Timestamp || e instanceof GeoPoint || e instanceof Bytes || e instanceof DocumentReference || e instanceof FieldValue || e instanceof VectorValue);
    }
    function __PRIVATE_validatePlainObject(e, t2, n2) {
      if (!__PRIVATE_looksLikeJsonObject(n2) || !function __PRIVATE_isPlainObject(e2) {
        return "object" == typeof e2 && null !== e2 && (Object.getPrototypeOf(e2) === Object.prototype || null === Object.getPrototypeOf(e2));
      }(n2)) {
        const r2 = __PRIVATE_valueDescription(n2);
        throw "an object" === r2 ? t2.Bu(e + " a custom object") : t2.Bu(e + " " + r2);
      }
    }
    function __PRIVATE_fieldPathFromArgument$1(e, t2, n2) {
      if (
        // If required, replace the FieldPath Compat class with the firestore-exp
        // FieldPath.
        (t2 = getModularInstance(t2)) instanceof FieldPath
      ) return t2._internalPath;
      if ("string" == typeof t2) return __PRIVATE_fieldPathFromDotSeparatedString(e, t2);
      throw __PRIVATE_createError(
        "Field path arguments must be of type string or ",
        e,
        /* hasConverter= */
        false,
        /* path= */
        void 0,
        n2
      );
    }
    const De = new RegExp("[~\\*/\\[\\]]");
    function __PRIVATE_fieldPathFromDotSeparatedString(e, t2, n2) {
      if (t2.search(De) >= 0) throw __PRIVATE_createError(
        `Invalid field path (${t2}). Paths must not contain '~', '*', '/', '[', or ']'`,
        e,
        /* hasConverter= */
        false,
        /* path= */
        void 0,
        n2
      );
      try {
        return new FieldPath(...t2.split("."))._internalPath;
      } catch (r2) {
        throw __PRIVATE_createError(
          `Invalid field path (${t2}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,
          e,
          /* hasConverter= */
          false,
          /* path= */
          void 0,
          n2
        );
      }
    }
    function __PRIVATE_createError(e, t2, n2, r2, i) {
      const s = r2 && !r2.isEmpty(), o = void 0 !== i;
      let _ = `Function ${t2}() called with invalid data`;
      n2 && (_ += " (via `toFirestore()`)"), _ += ". ";
      let a = "";
      return (s || o) && (a += " (found", s && (a += ` in field ${r2}`), o && (a += ` in document ${i}`), a += ")"), new FirestoreError(D.INVALID_ARGUMENT, _ + e + a);
    }
    function __PRIVATE_fieldMaskContains(e, t2) {
      return e.some((e2) => e2.isEqual(t2));
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class DocumentSnapshot$1 {
      // Note: This class is stripped down version of the DocumentSnapshot in
      // the legacy SDK. The changes are:
      // - No support for SnapshotMetadata.
      // - No support for SnapshotOptions.
      /** @hideconstructor protected */
      constructor(e, t2, n2, r2, i) {
        this._firestore = e, this._userDataWriter = t2, this._key = n2, this._document = r2, this._converter = i;
      }
      /** Property of the `DocumentSnapshot` that provides the document's ID. */
      get id() {
        return this._key.path.lastSegment();
      }
      /**
       * The `DocumentReference` for the document included in the `DocumentSnapshot`.
       */
      get ref() {
        return new DocumentReference(this._firestore, this._converter, this._key);
      }
      /**
       * Signals whether or not the document at the snapshot's location exists.
       *
       * @returns true if the document exists.
       */
      exists() {
        return null !== this._document;
      }
      /**
       * Retrieves all fields in the document as an `Object`. Returns `undefined` if
       * the document doesn't exist.
       *
       * @returns An `Object` containing all fields in the document or `undefined`
       * if the document doesn't exist.
       */
      data() {
        if (this._document) {
          if (this._converter) {
            const e = new QueryDocumentSnapshot$1(
              this._firestore,
              this._userDataWriter,
              this._key,
              this._document,
              /* converter= */
              null
            );
            return this._converter.fromFirestore(e);
          }
          return this._userDataWriter.convertValue(this._document.data.value);
        }
      }
      /**
       * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
       * document or field doesn't exist.
       *
       * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
       * field.
       * @returns The data at the specified field location or undefined if no such
       * field exists in the document.
       */
      // We are using `any` here to avoid an explicit cast by our users.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      get(e) {
        if (this._document) {
          const t2 = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", e));
          if (null !== t2) return this._userDataWriter.convertValue(t2);
        }
      }
    }
    class QueryDocumentSnapshot$1 extends DocumentSnapshot$1 {
      /**
       * Retrieves all fields in the document as an `Object`.
       *
       * @override
       * @returns An `Object` containing all fields in the document.
       */
      data() {
        return super.data();
      }
    }
    function __PRIVATE_fieldPathFromArgument(e, t2) {
      return "string" == typeof t2 ? __PRIVATE_fieldPathFromDotSeparatedString(e, t2) : t2 instanceof FieldPath ? t2._internalPath : t2._delegate._internalPath;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_validateHasExplicitOrderByForLimitToLast(e) {
      if ("L" === e.limitType && 0 === e.explicitOrderBy.length) throw new FirestoreError(D.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }
    class AppliableConstraint {
    }
    class QueryConstraint extends AppliableConstraint {
    }
    function query(e, t2, ...n2) {
      let r2 = [];
      t2 instanceof AppliableConstraint && r2.push(t2), r2 = r2.concat(n2), function __PRIVATE_validateQueryConstraintArray(e2) {
        const t3 = e2.filter((e3) => e3 instanceof QueryCompositeFilterConstraint).length, n3 = e2.filter((e3) => e3 instanceof QueryFieldFilterConstraint).length;
        if (t3 > 1 || t3 > 0 && n3 > 0) throw new FirestoreError(D.INVALID_ARGUMENT, "InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.");
      }(r2);
      for (const t3 of r2) e = t3._apply(e);
      return e;
    }
    class QueryFieldFilterConstraint extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e, t2, n2) {
        super(), this._field = e, this._op = t2, this._value = n2, /** The type of this query constraint */
        this.type = "where";
      }
      static _create(e, t2, n2) {
        return new QueryFieldFilterConstraint(e, t2, n2);
      }
      _apply(e) {
        const t2 = this._parse(e);
        return __PRIVATE_validateNewFieldFilter(e._query, t2), new Query(e.firestore, e.converter, __PRIVATE_queryWithAddedFilter(e._query, t2));
      }
      _parse(e) {
        const t2 = __PRIVATE_newUserDataReader(e.firestore), n2 = function __PRIVATE_newQueryFilter(e2, t3, n3, r2, i, s, o) {
          let _;
          if (i.isKeyField()) {
            if ("array-contains" === s || "array-contains-any" === s) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid Query. You can't perform '${s}' queries on documentId().`);
            if ("in" === s || "not-in" === s) {
              __PRIVATE_validateDisjunctiveFilterElements(o, s);
              const t4 = [];
              for (const n4 of o) t4.push(__PRIVATE_parseDocumentIdValue(r2, e2, n4));
              _ = {
                arrayValue: {
                  values: t4
                }
              };
            } else _ = __PRIVATE_parseDocumentIdValue(r2, e2, o);
          } else "in" !== s && "not-in" !== s && "array-contains-any" !== s || __PRIVATE_validateDisjunctiveFilterElements(o, s), _ = __PRIVATE_parseQueryValue(
            n3,
            t3,
            o,
            /* allowArrays= */
            "in" === s || "not-in" === s
          );
          return FieldFilter.create(i, s, _);
        }(e._query, "where", t2, e.firestore._databaseId, this._field, this._op, this._value);
        return n2;
      }
    }
    function where(e, t2, n2) {
      const r2 = t2, i = __PRIVATE_fieldPathFromArgument("where", e);
      return QueryFieldFilterConstraint._create(i, r2, n2);
    }
    class QueryCompositeFilterConstraint extends AppliableConstraint {
      /**
       * @internal
       */
      constructor(e, t2) {
        super(), this.type = e, this._queryConstraints = t2;
      }
      static _create(e, t2) {
        return new QueryCompositeFilterConstraint(e, t2);
      }
      _parse(e) {
        const t2 = this._queryConstraints.map((t3) => t3._parse(e)).filter((e2) => e2.getFilters().length > 0);
        return 1 === t2.length ? t2[0] : CompositeFilter.create(t2, this._getOperator());
      }
      _apply(e) {
        const t2 = this._parse(e);
        return 0 === t2.getFilters().length ? e : (function __PRIVATE_validateNewFilter(e2, t3) {
          let n2 = e2;
          const r2 = t3.getFlattenedFilters();
          for (const e3 of r2) __PRIVATE_validateNewFieldFilter(n2, e3), n2 = __PRIVATE_queryWithAddedFilter(n2, e3);
        }(e._query, t2), new Query(e.firestore, e.converter, __PRIVATE_queryWithAddedFilter(e._query, t2)));
      }
      _getQueryConstraints() {
        return this._queryConstraints;
      }
      _getOperator() {
        return "and" === this.type ? "and" : "or";
      }
    }
    class QueryOrderByConstraint extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e, t2) {
        super(), this._field = e, this._direction = t2, /** The type of this query constraint */
        this.type = "orderBy";
      }
      static _create(e, t2) {
        return new QueryOrderByConstraint(e, t2);
      }
      _apply(e) {
        const t2 = function __PRIVATE_newQueryOrderBy(e2, t3, n2) {
          if (null !== e2.startAt) throw new FirestoreError(D.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
          if (null !== e2.endAt) throw new FirestoreError(D.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
          return new OrderBy(t3, n2);
        }(e._query, this._field, this._direction);
        return new Query(e.firestore, e.converter, function __PRIVATE_queryWithAddedOrderBy(e2, t3) {
          const n2 = e2.explicitOrderBy.concat([t3]);
          return new __PRIVATE_QueryImpl(e2.path, e2.collectionGroup, n2, e2.filters.slice(), e2.limit, e2.limitType, e2.startAt, e2.endAt);
        }(e._query, t2));
      }
    }
    function orderBy(e, t2 = "asc") {
      const n2 = t2, r2 = __PRIVATE_fieldPathFromArgument("orderBy", e);
      return QueryOrderByConstraint._create(r2, n2);
    }
    class QueryLimitConstraint extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e, t2, n2) {
        super(), this.type = e, this._limit = t2, this._limitType = n2;
      }
      static _create(e, t2, n2) {
        return new QueryLimitConstraint(e, t2, n2);
      }
      _apply(e) {
        return new Query(e.firestore, e.converter, __PRIVATE_queryWithLimit(e._query, this._limit, this._limitType));
      }
    }
    function limit(e) {
      return __PRIVATE_validatePositiveNumber("limit", e), QueryLimitConstraint._create(
        "limit",
        e,
        "F"
        /* LimitType.First */
      );
    }
    class QueryStartAtConstraint extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e, t2, n2) {
        super(), this.type = e, this._docOrFields = t2, this._inclusive = n2;
      }
      static _create(e, t2, n2) {
        return new QueryStartAtConstraint(e, t2, n2);
      }
      _apply(e) {
        const t2 = __PRIVATE_newQueryBoundFromDocOrFields(e, this.type, this._docOrFields, this._inclusive);
        return new Query(e.firestore, e.converter, function __PRIVATE_queryWithStartAt(e2, t3) {
          return new __PRIVATE_QueryImpl(e2.path, e2.collectionGroup, e2.explicitOrderBy.slice(), e2.filters.slice(), e2.limit, e2.limitType, t3, e2.endAt);
        }(e._query, t2));
      }
    }
    function startAfter(...e) {
      return QueryStartAtConstraint._create(
        "startAfter",
        e,
        /*inclusive=*/
        false
      );
    }
    function __PRIVATE_newQueryBoundFromDocOrFields(e, t2, n2, r2) {
      if (n2[0] = getModularInstance(n2[0]), n2[0] instanceof DocumentSnapshot$1) return function __PRIVATE_newQueryBoundFromDocument(e2, t3, n3, r3, i) {
        if (!r3) throw new FirestoreError(D.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ${n3}().`);
        const s = [];
        for (const n4 of __PRIVATE_queryNormalizedOrderBy(e2)) if (n4.field.isKeyField()) s.push(__PRIVATE_refValue(t3, r3.key));
        else {
          const e3 = r3.data.field(n4.field);
          if (__PRIVATE_isServerTimestamp(e3)) throw new FirestoreError(D.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + n4.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
          if (null === e3) {
            const e4 = n4.field.canonicalString();
            throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a document for which the field '${e4}' (used as the orderBy) does not exist.`);
          }
          s.push(e3);
        }
        return new Bound(s, i);
      }(e._query, e.firestore._databaseId, t2, n2[0]._document, r2);
      {
        const i = __PRIVATE_newUserDataReader(e.firestore);
        return function __PRIVATE_newQueryBoundFromFields(e2, t3, n3, r3, i2, s) {
          const o = e2.explicitOrderBy;
          if (i2.length > o.length) throw new FirestoreError(D.INVALID_ARGUMENT, `Too many arguments provided to ${r3}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
          const _ = [];
          for (let s2 = 0; s2 < i2.length; s2++) {
            const a = i2[s2];
            if (o[s2].field.isKeyField()) {
              if ("string" != typeof a) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ${r3}(), but got a ${typeof a}`);
              if (!__PRIVATE_isCollectionGroupQuery(e2) && -1 !== a.indexOf("/")) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r3}() must be a plain document ID, but '${a}' contains a slash.`);
              const n4 = e2.path.child(ResourcePath.fromString(a));
              if (!DocumentKey.isDocumentKey(n4)) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r3}() must result in a valid document path, but '${n4}' is not because it contains an odd number of segments.`);
              const i3 = new DocumentKey(n4);
              _.push(__PRIVATE_refValue(t3, i3));
            } else {
              const e3 = __PRIVATE_parseQueryValue(n3, r3, a);
              _.push(e3);
            }
          }
          return new Bound(_, s);
        }(e._query, e.firestore._databaseId, i, t2, n2, r2);
      }
    }
    function __PRIVATE_parseDocumentIdValue(e, t2, n2) {
      if ("string" == typeof (n2 = getModularInstance(n2))) {
        if ("" === n2) throw new FirestoreError(D.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
        if (!__PRIVATE_isCollectionGroupQuery(t2) && -1 !== n2.indexOf("/")) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n2}' contains a '/' character.`);
        const r2 = t2.path.child(ResourcePath.fromString(n2));
        if (!DocumentKey.isDocumentKey(r2)) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r2}' is not because it has an odd number of segments (${r2.length}).`);
        return __PRIVATE_refValue(e, new DocumentKey(r2));
      }
      if (n2 instanceof DocumentReference) return __PRIVATE_refValue(e, n2._key);
      throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(n2)}.`);
    }
    function __PRIVATE_validateDisjunctiveFilterElements(e, t2) {
      if (!Array.isArray(e) || 0 === e.length) throw new FirestoreError(D.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${t2.toString()}' filters.`);
    }
    function __PRIVATE_validateNewFieldFilter(e, t2) {
      const n2 = function __PRIVATE_findOpInsideFilters(e2, t3) {
        for (const n3 of e2) for (const e3 of n3.getFlattenedFilters()) if (t3.indexOf(e3.op) >= 0) return e3.op;
        return null;
      }(e.filters, function __PRIVATE_conflictingOps(e2) {
        switch (e2) {
          case "!=":
            return [
              "!=",
              "not-in"
              /* Operator.NOT_IN */
            ];
          case "array-contains-any":
          case "in":
            return [
              "not-in"
              /* Operator.NOT_IN */
            ];
          case "not-in":
            return [
              "array-contains-any",
              "in",
              "not-in",
              "!="
              /* Operator.NOT_EQUAL */
            ];
          default:
            return [];
        }
      }(t2.op));
      if (null !== n2)
        throw n2 === t2.op ? new FirestoreError(D.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${t2.op.toString()}' filter.`) : new FirestoreError(D.INVALID_ARGUMENT, `Invalid query. You cannot use '${t2.op.toString()}' filters with '${n2.toString()}' filters.`);
    }
    class AbstractUserDataWriter {
      convertValue(e, t2 = "none") {
        switch (__PRIVATE_typeOrder(e)) {
          case 0:
            return null;
          case 1:
            return e.booleanValue;
          case 2:
            return __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);
          case 3:
            return this.convertTimestamp(e.timestampValue);
          case 4:
            return this.convertServerTimestamp(e, t2);
          case 5:
            return e.stringValue;
          case 6:
            return this.convertBytes(__PRIVATE_normalizeByteString(e.bytesValue));
          case 7:
            return this.convertReference(e.referenceValue);
          case 8:
            return this.convertGeoPoint(e.geoPointValue);
          case 9:
            return this.convertArray(e.arrayValue, t2);
          case 11:
            return this.convertObject(e.mapValue, t2);
          case 10:
            return this.convertVectorValue(e.mapValue);
          default:
            throw fail();
        }
      }
      convertObject(e, t2) {
        return this.convertObjectMap(e.fields, t2);
      }
      /**
       * @internal
       */
      convertObjectMap(e, t2 = "none") {
        const n2 = {};
        return forEach(e, (e2, r2) => {
          n2[e2] = this.convertValue(r2, t2);
        }), n2;
      }
      /**
       * @internal
       */
      convertVectorValue(e) {
        var t2, n2, r2;
        const i = null === (r2 = null === (n2 = null === (t2 = e.fields) || void 0 === t2 ? void 0 : t2.value.arrayValue) || void 0 === n2 ? void 0 : n2.values) || void 0 === r2 ? void 0 : r2.map((e2) => __PRIVATE_normalizeNumber(e2.doubleValue));
        return new VectorValue(i);
      }
      convertGeoPoint(e) {
        return new GeoPoint(__PRIVATE_normalizeNumber(e.latitude), __PRIVATE_normalizeNumber(e.longitude));
      }
      convertArray(e, t2) {
        return (e.values || []).map((e2) => this.convertValue(e2, t2));
      }
      convertServerTimestamp(e, t2) {
        switch (t2) {
          case "previous":
            const n2 = __PRIVATE_getPreviousValue(e);
            return null == n2 ? null : this.convertValue(n2, t2);
          case "estimate":
            return this.convertTimestamp(__PRIVATE_getLocalWriteTime(e));
          default:
            return null;
        }
      }
      convertTimestamp(e) {
        const t2 = __PRIVATE_normalizeTimestamp(e);
        return new Timestamp(t2.seconds, t2.nanos);
      }
      convertDocumentKey(e, t2) {
        const n2 = ResourcePath.fromString(e);
        __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(n2));
        const r2 = new DatabaseId(n2.get(1), n2.get(3)), i = new DocumentKey(n2.popFirst(5));
        return r2.isEqual(t2) || // TODO(b/64130202): Somehow support foreign references.
        __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${r2.projectId}/${r2.database}) which is not supported. It will be treated as a reference in the current database (${t2.projectId}/${t2.database}) instead.`), i;
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function __PRIVATE_applyFirestoreDataConverter(e, t2, n2) {
      let r2;
      return r2 = e ? n2 && (n2.merge || n2.mergeFields) ? e.toFirestore(t2, n2) : e.toFirestore(t2) : t2, r2;
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class SnapshotMetadata {
      /** @hideconstructor */
      constructor(e, t2) {
        this.hasPendingWrites = e, this.fromCache = t2;
      }
      /**
       * Returns true if this `SnapshotMetadata` is equal to the provided one.
       *
       * @param other - The `SnapshotMetadata` to compare against.
       * @returns true if this `SnapshotMetadata` is equal to the provided one.
       */
      isEqual(e) {
        return this.hasPendingWrites === e.hasPendingWrites && this.fromCache === e.fromCache;
      }
    }
    class DocumentSnapshot extends DocumentSnapshot$1 {
      /** @hideconstructor protected */
      constructor(e, t2, n2, r2, i, s) {
        super(e, t2, n2, r2, s), this._firestore = e, this._firestoreImpl = e, this.metadata = i;
      }
      /**
       * Returns whether or not the data exists. True if the document exists.
       */
      exists() {
        return super.exists();
      }
      /**
       * Retrieves all fields in the document as an `Object`. Returns `undefined` if
       * the document doesn't exist.
       *
       * By default, `serverTimestamp()` values that have not yet been
       * set to their final value will be returned as `null`. You can override
       * this by passing an options object.
       *
       * @param options - An options object to configure how data is retrieved from
       * the snapshot (for example the desired behavior for server timestamps that
       * have not yet been set to their final value).
       * @returns An `Object` containing all fields in the document or `undefined` if
       * the document doesn't exist.
       */
      data(e = {}) {
        if (this._document) {
          if (this._converter) {
            const t2 = new QueryDocumentSnapshot(
              this._firestore,
              this._userDataWriter,
              this._key,
              this._document,
              this.metadata,
              /* converter= */
              null
            );
            return this._converter.fromFirestore(t2, e);
          }
          return this._userDataWriter.convertValue(this._document.data.value, e.serverTimestamps);
        }
      }
      /**
       * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
       * document or field doesn't exist.
       *
       * By default, a `serverTimestamp()` that has not yet been set to
       * its final value will be returned as `null`. You can override this by
       * passing an options object.
       *
       * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
       * field.
       * @param options - An options object to configure how the field is retrieved
       * from the snapshot (for example the desired behavior for server timestamps
       * that have not yet been set to their final value).
       * @returns The data at the specified field location or undefined if no such
       * field exists in the document.
       */
      // We are using `any` here to avoid an explicit cast by our users.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      get(e, t2 = {}) {
        if (this._document) {
          const n2 = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", e));
          if (null !== n2) return this._userDataWriter.convertValue(n2, t2.serverTimestamps);
        }
      }
    }
    class QueryDocumentSnapshot extends DocumentSnapshot {
      /**
       * Retrieves all fields in the document as an `Object`.
       *
       * By default, `serverTimestamp()` values that have not yet been
       * set to their final value will be returned as `null`. You can override
       * this by passing an options object.
       *
       * @override
       * @param options - An options object to configure how data is retrieved from
       * the snapshot (for example the desired behavior for server timestamps that
       * have not yet been set to their final value).
       * @returns An `Object` containing all fields in the document.
       */
      data(e = {}) {
        return super.data(e);
      }
    }
    class QuerySnapshot {
      /** @hideconstructor */
      constructor(e, t2, n2, r2) {
        this._firestore = e, this._userDataWriter = t2, this._snapshot = r2, this.metadata = new SnapshotMetadata(r2.hasPendingWrites, r2.fromCache), this.query = n2;
      }
      /** An array of all the documents in the `QuerySnapshot`. */
      get docs() {
        const e = [];
        return this.forEach((t2) => e.push(t2)), e;
      }
      /** The number of documents in the `QuerySnapshot`. */
      get size() {
        return this._snapshot.docs.size;
      }
      /** True if there are no documents in the `QuerySnapshot`. */
      get empty() {
        return 0 === this.size;
      }
      /**
       * Enumerates all of the documents in the `QuerySnapshot`.
       *
       * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
       * each document in the snapshot.
       * @param thisArg - The `this` binding for the callback.
       */
      forEach(e, t2) {
        this._snapshot.docs.forEach((n2) => {
          e.call(t2, new QueryDocumentSnapshot(this._firestore, this._userDataWriter, n2.key, n2, new SnapshotMetadata(this._snapshot.mutatedKeys.has(n2.key), this._snapshot.fromCache), this.query.converter));
        });
      }
      /**
       * Returns an array of the documents changes since the last snapshot. If this
       * is the first snapshot, all documents will be in the list as 'added'
       * changes.
       *
       * @param options - `SnapshotListenOptions` that control whether metadata-only
       * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
       * snapshot events.
       */
      docChanges(e = {}) {
        const t2 = !!e.includeMetadataChanges;
        if (t2 && this._snapshot.excludesMetadataChanges) throw new FirestoreError(D.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === t2 || (this._cachedChanges = /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
        function __PRIVATE_changesFromSnapshot(e2, t3) {
          if (e2._snapshot.oldDocs.isEmpty()) {
            let t4 = 0;
            return e2._snapshot.docChanges.map((n2) => {
              const r2 = new QueryDocumentSnapshot(e2._firestore, e2._userDataWriter, n2.doc.key, n2.doc, new SnapshotMetadata(e2._snapshot.mutatedKeys.has(n2.doc.key), e2._snapshot.fromCache), e2.query.converter);
              return n2.doc, {
                type: "added",
                doc: r2,
                oldIndex: -1,
                newIndex: t4++
              };
            });
          }
          {
            let n2 = e2._snapshot.oldDocs;
            return e2._snapshot.docChanges.filter((e3) => t3 || 3 !== e3.type).map((t4) => {
              const r2 = new QueryDocumentSnapshot(e2._firestore, e2._userDataWriter, t4.doc.key, t4.doc, new SnapshotMetadata(e2._snapshot.mutatedKeys.has(t4.doc.key), e2._snapshot.fromCache), e2.query.converter);
              let i = -1, s = -1;
              return 0 !== t4.type && (i = n2.indexOf(t4.doc.key), n2 = n2.delete(t4.doc.key)), 1 !== t4.type && (n2 = n2.add(t4.doc), s = n2.indexOf(t4.doc.key)), {
                type: __PRIVATE_resultChangeType(t4.type),
                doc: r2,
                oldIndex: i,
                newIndex: s
              };
            });
          }
        }(this, t2), this._cachedChangesIncludeMetadataChanges = t2), this._cachedChanges;
      }
    }
    function __PRIVATE_resultChangeType(e) {
      switch (e) {
        case 0:
          return "added";
        case 2:
        case 3:
          return "modified";
        case 1:
          return "removed";
        default:
          return fail();
      }
    }
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getDoc(e) {
      e = __PRIVATE_cast(e, DocumentReference);
      const t2 = __PRIVATE_cast(e.firestore, Firestore);
      return __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(ensureFirestoreConfigured(t2), e._key).then((n2) => __PRIVATE_convertToDocSnapshot(t2, e, n2));
    }
    class __PRIVATE_ExpUserDataWriter extends AbstractUserDataWriter {
      constructor(e) {
        super(), this.firestore = e;
      }
      convertBytes(e) {
        return new Bytes(e);
      }
      convertReference(e) {
        const t2 = this.convertDocumentKey(e, this.firestore._databaseId);
        return new DocumentReference(
          this.firestore,
          /* converter= */
          null,
          t2
        );
      }
    }
    function getDocs(e) {
      e = __PRIVATE_cast(e, Query);
      const t2 = __PRIVATE_cast(e.firestore, Firestore), n2 = ensureFirestoreConfigured(t2), r2 = new __PRIVATE_ExpUserDataWriter(t2);
      return __PRIVATE_validateHasExplicitOrderByForLimitToLast(e._query), __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(n2, e._query).then((n3) => new QuerySnapshot(t2, r2, e, n3));
    }
    function setDoc(e, t2, n2) {
      e = __PRIVATE_cast(e, DocumentReference);
      const r2 = __PRIVATE_cast(e.firestore, Firestore), i = __PRIVATE_applyFirestoreDataConverter(e.converter, t2, n2);
      return executeWrite(r2, [__PRIVATE_parseSetData(__PRIVATE_newUserDataReader(r2), "setDoc", e._key, i, null !== e.converter, n2).toMutation(e._key, Precondition.none())]);
    }
    function updateDoc(e, t2, n2, ...r2) {
      e = __PRIVATE_cast(e, DocumentReference);
      const i = __PRIVATE_cast(e.firestore, Firestore), s = __PRIVATE_newUserDataReader(i);
      let o;
      o = "string" == typeof // For Compat types, we have to "extract" the underlying types before
      // performing validation.
      (t2 = getModularInstance(t2)) || t2 instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(s, "updateDoc", e._key, t2, n2, r2) : __PRIVATE_parseUpdateData(s, "updateDoc", e._key, t2);
      return executeWrite(i, [o.toMutation(e._key, Precondition.exists(true))]);
    }
    function addDoc(e, t2) {
      const n2 = __PRIVATE_cast(e.firestore, Firestore), r2 = doc(e), i = __PRIVATE_applyFirestoreDataConverter(e.converter, t2);
      return executeWrite(n2, [__PRIVATE_parseSetData(__PRIVATE_newUserDataReader(e.firestore), "addDoc", r2._key, i, null !== e.converter, {}).toMutation(r2._key, Precondition.exists(false))]).then(() => r2);
    }
    function executeWrite(e, t2) {
      return function __PRIVATE_firestoreClientWrite(e2, t3) {
        const n2 = new __PRIVATE_Deferred();
        return e2.asyncQueue.enqueueAndForget(() => __async(this, null, function* () {
          return __PRIVATE_syncEngineWrite(yield __PRIVATE_getSyncEngine(e2), t3, n2);
        })), n2.promise;
      }(ensureFirestoreConfigured(e), t2);
    }
    function __PRIVATE_convertToDocSnapshot(e, t2, n2) {
      const r2 = n2.docs.get(t2._key), i = new __PRIVATE_ExpUserDataWriter(e);
      return new DocumentSnapshot(e, i, t2._key, r2, new SnapshotMetadata(n2.hasPendingWrites, n2.fromCache), t2.converter);
    }
    function serverTimestamp() {
      return new __PRIVATE_ServerTimestampFieldValueImpl("serverTimestamp");
    }
    !function __PRIVATE_registerFirestore(e, t2 = true) {
      !function __PRIVATE_setSDKVersion(e2) {
        S = e2;
      }(SDK_VERSION$1), _registerComponent(new Component("firestore", (e2, { instanceIdentifier: n2, options: r2 }) => {
        const i = e2.getProvider("app").getImmediate(), s = new Firestore(new __PRIVATE_FirebaseAuthCredentialsProvider(e2.getProvider("auth-internal")), new __PRIVATE_FirebaseAppCheckTokenProvider(e2.getProvider("app-check-internal")), function __PRIVATE_databaseIdFromApp(e3, t3) {
          if (!Object.prototype.hasOwnProperty.apply(e3.options, ["projectId"])) throw new FirestoreError(D.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
          return new DatabaseId(e3.options.projectId, t3);
        }(i, n2), i);
        return r2 = Object.assign({
          useFetchStreams: t2
        }, r2), s._setSettings(r2), s;
      }, "PUBLIC").setMultipleInstances(true)), registerVersion(w, "4.7.3", e), // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
      registerVersion(w, "4.7.3", "esm2017");
    }();
    var define_process_env_default = {};
    const name = "@firebase/database";
    const version = "1.0.8";
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let SDK_VERSION = "";
    function setSDKVersion(version2) {
      SDK_VERSION = version2;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class DOMStorageWrapper {
      /**
       * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)
       */
      constructor(domStorage_) {
        this.domStorage_ = domStorage_;
        this.prefix_ = "firebase:";
      }
      /**
       * @param key - The key to save the value under
       * @param value - The value being stored, or null to remove the key.
       */
      set(key, value) {
        if (value == null) {
          this.domStorage_.removeItem(this.prefixedName_(key));
        } else {
          this.domStorage_.setItem(this.prefixedName_(key), stringify(value));
        }
      }
      /**
       * @returns The value that was stored under this key, or null
       */
      get(key) {
        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));
        if (storedVal == null) {
          return null;
        } else {
          return jsonEval(storedVal);
        }
      }
      remove(key) {
        this.domStorage_.removeItem(this.prefixedName_(key));
      }
      prefixedName_(name2) {
        return this.prefix_ + name2;
      }
      toString() {
        return this.domStorage_.toString();
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class MemoryStorage {
      constructor() {
        this.cache_ = {};
        this.isInMemoryStorage = true;
      }
      set(key, value) {
        if (value == null) {
          delete this.cache_[key];
        } else {
          this.cache_[key] = value;
        }
      }
      get(key) {
        if (contains(this.cache_, key)) {
          return this.cache_[key];
        }
        return null;
      }
      remove(key) {
        delete this.cache_[key];
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const createStoragefor = function(domStorageName) {
      try {
        if (typeof window !== "undefined" && typeof window[domStorageName] !== "undefined") {
          const domStorage = window[domStorageName];
          domStorage.setItem("firebase:sentinel", "cache");
          domStorage.removeItem("firebase:sentinel");
          return new DOMStorageWrapper(domStorage);
        }
      } catch (e) {
      }
      return new MemoryStorage();
    };
    const PersistentStorage = createStoragefor("localStorage");
    const SessionStorage = createStoragefor("sessionStorage");
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const logClient = new Logger("@firebase/database");
    const LUIDGenerator = /* @__PURE__ */ function() {
      let id2 = 1;
      return function() {
        return id2++;
      };
    }();
    const sha1 = function(str) {
      const utf8Bytes = stringToByteArray(str);
      const sha12 = new Sha1();
      sha12.update(utf8Bytes);
      const sha1Bytes = sha12.digest();
      return base64.encodeByteArray(sha1Bytes);
    };
    const buildLogMessage_ = function(...varArgs) {
      let message = "";
      for (let i = 0; i < varArgs.length; i++) {
        const arg = varArgs[i];
        if (Array.isArray(arg) || arg && typeof arg === "object" && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        typeof arg.length === "number") {
          message += buildLogMessage_.apply(null, arg);
        } else if (typeof arg === "object") {
          message += stringify(arg);
        } else {
          message += arg;
        }
        message += " ";
      }
      return message;
    };
    let logger = null;
    let firstLog_ = true;
    const enableLogging$1 = function(logger_, persistent) {
      assert(true, "Can't turn on custom loggers persistently.");
      {
        logClient.logLevel = LogLevel.VERBOSE;
        logger = logClient.log.bind(logClient);
      }
    };
    const log = function(...varArgs) {
      if (firstLog_ === true) {
        firstLog_ = false;
        if (logger === null && SessionStorage.get("logging_enabled") === true) {
          enableLogging$1();
        }
      }
      if (logger) {
        const message = buildLogMessage_.apply(null, varArgs);
        logger(message);
      }
    };
    const logWrapper = function(prefix) {
      return function(...varArgs) {
        log(prefix, ...varArgs);
      };
    };
    const error = function(...varArgs) {
      const message = "FIREBASE INTERNAL ERROR: " + buildLogMessage_(...varArgs);
      logClient.error(message);
    };
    const fatal = function(...varArgs) {
      const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;
      logClient.error(message);
      throw new Error(message);
    };
    const warn = function(...varArgs) {
      const message = "FIREBASE WARNING: " + buildLogMessage_(...varArgs);
      logClient.warn(message);
    };
    const warnIfPageIsSecure = function() {
      if (typeof window !== "undefined" && window.location && window.location.protocol && window.location.protocol.indexOf("https:") !== -1) {
        warn("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");
      }
    };
    const isInvalidJSONNumber = function(data) {
      return typeof data === "number" && (data !== data || // NaN
      data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);
    };
    const executeWhenDOMReady = function(fn) {
      if (document.readyState === "complete") {
        fn();
      } else {
        let called = false;
        const wrappedFn = function() {
          if (!document.body) {
            setTimeout(wrappedFn, Math.floor(10));
            return;
          }
          if (!called) {
            called = true;
            fn();
          }
        };
        if (document.addEventListener) {
          document.addEventListener("DOMContentLoaded", wrappedFn, false);
          window.addEventListener("load", wrappedFn, false);
        } else if (document.attachEvent) {
          document.attachEvent("onreadystatechange", () => {
            if (document.readyState === "complete") {
              wrappedFn();
            }
          });
          window.attachEvent("onload", wrappedFn);
        }
      }
    };
    const MIN_NAME = "[MIN_NAME]";
    const MAX_NAME = "[MAX_NAME]";
    const nameCompare = function(a, b2) {
      if (a === b2) {
        return 0;
      } else if (a === MIN_NAME || b2 === MAX_NAME) {
        return -1;
      } else if (b2 === MIN_NAME || a === MAX_NAME) {
        return 1;
      } else {
        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b2);
        if (aAsInt !== null) {
          if (bAsInt !== null) {
            return aAsInt - bAsInt === 0 ? a.length - b2.length : aAsInt - bAsInt;
          } else {
            return -1;
          }
        } else if (bAsInt !== null) {
          return 1;
        } else {
          return a < b2 ? -1 : 1;
        }
      }
    };
    const stringCompare = function(a, b2) {
      if (a === b2) {
        return 0;
      } else if (a < b2) {
        return -1;
      } else {
        return 1;
      }
    };
    const requireKey = function(key, obj) {
      if (obj && key in obj) {
        return obj[key];
      } else {
        throw new Error("Missing required key (" + key + ") in object: " + stringify(obj));
      }
    };
    const ObjectToUniqueKey = function(obj) {
      if (typeof obj !== "object" || obj === null) {
        return stringify(obj);
      }
      const keys = [];
      for (const k2 in obj) {
        keys.push(k2);
      }
      keys.sort();
      let key = "{";
      for (let i = 0; i < keys.length; i++) {
        if (i !== 0) {
          key += ",";
        }
        key += stringify(keys[i]);
        key += ":";
        key += ObjectToUniqueKey(obj[keys[i]]);
      }
      key += "}";
      return key;
    };
    const splitStringBySize = function(str, segsize) {
      const len = str.length;
      if (len <= segsize) {
        return [str];
      }
      const dataSegs = [];
      for (let c = 0; c < len; c += segsize) {
        if (c + segsize > len) {
          dataSegs.push(str.substring(c, len));
        } else {
          dataSegs.push(str.substring(c, c + segsize));
        }
      }
      return dataSegs;
    };
    function each(obj, fn) {
      for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
          fn(key, obj[key]);
        }
      }
    }
    const doubleToIEEE754String = function(v2) {
      assert(!isInvalidJSONNumber(v2), "Invalid JSON number");
      const ebits = 11, fbits = 52;
      const bias = (1 << ebits - 1) - 1;
      let s, e, f2, ln, i;
      if (v2 === 0) {
        e = 0;
        f2 = 0;
        s = 1 / v2 === -Infinity ? 1 : 0;
      } else {
        s = v2 < 0;
        v2 = Math.abs(v2);
        if (v2 >= Math.pow(2, 1 - bias)) {
          ln = Math.min(Math.floor(Math.log(v2) / Math.LN2), bias);
          e = ln + bias;
          f2 = Math.round(v2 * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
        } else {
          e = 0;
          f2 = Math.round(v2 / Math.pow(2, 1 - bias - fbits));
        }
      }
      const bits = [];
      for (i = fbits; i; i -= 1) {
        bits.push(f2 % 2 ? 1 : 0);
        f2 = Math.floor(f2 / 2);
      }
      for (i = ebits; i; i -= 1) {
        bits.push(e % 2 ? 1 : 0);
        e = Math.floor(e / 2);
      }
      bits.push(s ? 1 : 0);
      bits.reverse();
      const str = bits.join("");
      let hexByteString = "";
      for (i = 0; i < 64; i += 8) {
        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);
        if (hexByte.length === 1) {
          hexByte = "0" + hexByte;
        }
        hexByteString = hexByteString + hexByte;
      }
      return hexByteString.toLowerCase();
    };
    const isChromeExtensionContentScript = function() {
      return !!(typeof window === "object" && window["chrome"] && window["chrome"]["extension"] && !/^chrome/.test(window.location.href));
    };
    const isWindowsStoreApp = function() {
      return typeof Windows === "object" && typeof Windows.UI === "object";
    };
    const INTEGER_REGEXP_ = new RegExp("^-?(0*)\\d{1,10}$");
    const INTEGER_32_MIN = -2147483648;
    const INTEGER_32_MAX = 2147483647;
    const tryParseInt = function(str) {
      if (INTEGER_REGEXP_.test(str)) {
        const intVal = Number(str);
        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
          return intVal;
        }
      }
      return null;
    };
    const exceptionGuard = function(fn) {
      try {
        fn();
      } catch (e) {
        setTimeout(() => {
          const stack = e.stack || "";
          warn("Exception was thrown by user callback.", stack);
          throw e;
        }, Math.floor(0));
      }
    };
    const beingCrawled = function() {
      const userAgent = typeof window === "object" && window["navigator"] && window["navigator"]["userAgent"] || "";
      return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;
    };
    const setTimeoutNonBlocking = function(fn, time) {
      const timeout = setTimeout(fn, time);
      if (typeof timeout === "number" && // @ts-ignore Is only defined in Deno environments.
      typeof Deno !== "undefined" && // @ts-ignore Deno and unrefTimer are only defined in Deno environments.
      Deno["unrefTimer"]) {
        Deno.unrefTimer(timeout);
      } else if (typeof timeout === "object" && timeout["unref"]) {
        timeout["unref"]();
      }
      return timeout;
    };
    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AppCheckTokenProvider {
      constructor(appName_, appCheckProvider) {
        this.appName_ = appName_;
        this.appCheckProvider = appCheckProvider;
        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });
        if (!this.appCheck) {
          appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then((appCheck) => this.appCheck = appCheck);
        }
      }
      getToken(forceRefresh) {
        if (!this.appCheck) {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              if (this.appCheck) {
                this.getToken(forceRefresh).then(resolve, reject);
              } else {
                resolve(null);
              }
            }, 0);
          });
        }
        return this.appCheck.getToken(forceRefresh);
      }
      addTokenChangeListener(listener) {
        var _a;
        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then((appCheck) => appCheck.addTokenListener(listener));
      }
      notifyForInvalidToken() {
        warn(`Provided AppCheck credentials for the app named "${this.appName_}" are invalid. This usually indicates your app was not initialized correctly.`);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FirebaseAuthTokenProvider {
      constructor(appName_, firebaseOptions_, authProvider_) {
        this.appName_ = appName_;
        this.firebaseOptions_ = firebaseOptions_;
        this.authProvider_ = authProvider_;
        this.auth_ = null;
        this.auth_ = authProvider_.getImmediate({ optional: true });
        if (!this.auth_) {
          authProvider_.onInit((auth2) => this.auth_ = auth2);
        }
      }
      getToken(forceRefresh) {
        if (!this.auth_) {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              if (this.auth_) {
                this.getToken(forceRefresh).then(resolve, reject);
              } else {
                resolve(null);
              }
            }, 0);
          });
        }
        return this.auth_.getToken(forceRefresh).catch((error2) => {
          if (error2 && error2.code === "auth/token-not-initialized") {
            log("Got auth/token-not-initialized error.  Treating as null token.");
            return null;
          } else {
            return Promise.reject(error2);
          }
        });
      }
      addTokenChangeListener(listener) {
        if (this.auth_) {
          this.auth_.addAuthTokenListener(listener);
        } else {
          this.authProvider_.get().then((auth2) => auth2.addAuthTokenListener(listener));
        }
      }
      removeTokenChangeListener(listener) {
        this.authProvider_.get().then((auth2) => auth2.removeAuthTokenListener(listener));
      }
      notifyForInvalidToken() {
        let errorMessage = 'Provided authentication credentials for the app named "' + this.appName_ + '" are invalid. This usually indicates your app was not initialized correctly. ';
        if ("credential" in this.firebaseOptions_) {
          errorMessage += 'Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.';
        } else if ("serviceAccount" in this.firebaseOptions_) {
          errorMessage += 'Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.';
        } else {
          errorMessage += 'Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.';
        }
        warn(errorMessage);
      }
    }
    class EmulatorTokenProvider {
      constructor(accessToken) {
        this.accessToken = accessToken;
      }
      getToken(forceRefresh) {
        return Promise.resolve({
          accessToken: this.accessToken
        });
      }
      addTokenChangeListener(listener) {
        listener(this.accessToken);
      }
      removeTokenChangeListener(listener) {
      }
      notifyForInvalidToken() {
      }
    }
    EmulatorTokenProvider.OWNER = "owner";
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const PROTOCOL_VERSION = "5";
    const VERSION_PARAM = "v";
    const TRANSPORT_SESSION_PARAM = "s";
    const REFERER_PARAM = "r";
    const FORGE_REF = "f";
    const FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
    const LAST_SESSION_PARAM = "ls";
    const APPLICATION_ID_PARAM = "p";
    const APP_CHECK_TOKEN_PARAM = "ac";
    const WEBSOCKET = "websocket";
    const LONG_POLLING = "long_polling";
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class RepoInfo {
      /**
       * @param host - Hostname portion of the url for the repo
       * @param secure - Whether or not this repo is accessed over ssl
       * @param namespace - The namespace represented by the repo
       * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).
       * @param nodeAdmin - Whether this instance uses Admin SDK credentials
       * @param persistenceKey - Override the default session persistence storage key
       */
      constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = "", includeNamespaceInQueryParams = false, isUsingEmulator = false) {
        this.secure = secure;
        this.namespace = namespace;
        this.webSocketOnly = webSocketOnly;
        this.nodeAdmin = nodeAdmin;
        this.persistenceKey = persistenceKey;
        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
        this.isUsingEmulator = isUsingEmulator;
        this._host = host.toLowerCase();
        this._domain = this._host.substr(this._host.indexOf(".") + 1);
        this.internalHost = PersistentStorage.get("host:" + host) || this._host;
      }
      isCacheableHost() {
        return this.internalHost.substr(0, 2) === "s-";
      }
      isCustomHost() {
        return this._domain !== "firebaseio.com" && this._domain !== "firebaseio-demo.com";
      }
      get host() {
        return this._host;
      }
      set host(newHost) {
        if (newHost !== this.internalHost) {
          this.internalHost = newHost;
          if (this.isCacheableHost()) {
            PersistentStorage.set("host:" + this._host, this.internalHost);
          }
        }
      }
      toString() {
        let str = this.toURLString();
        if (this.persistenceKey) {
          str += "<" + this.persistenceKey + ">";
        }
        return str;
      }
      toURLString() {
        const protocol = this.secure ? "https://" : "http://";
        const query2 = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : "";
        return `${protocol}${this.host}/${query2}`;
      }
    }
    function repoInfoNeedsQueryParam(repoInfo) {
      return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;
    }
    function repoInfoConnectionURL(repoInfo, type, params) {
      assert(typeof type === "string", "typeof type must == string");
      assert(typeof params === "object", "typeof params must == object");
      let connURL;
      if (type === WEBSOCKET) {
        connURL = (repoInfo.secure ? "wss://" : "ws://") + repoInfo.internalHost + "/.ws?";
      } else if (type === LONG_POLLING) {
        connURL = (repoInfo.secure ? "https://" : "http://") + repoInfo.internalHost + "/.lp?";
      } else {
        throw new Error("Unknown connection type: " + type);
      }
      if (repoInfoNeedsQueryParam(repoInfo)) {
        params["ns"] = repoInfo.namespace;
      }
      const pairs = [];
      each(params, (key, value) => {
        pairs.push(key + "=" + value);
      });
      return connURL + pairs.join("&");
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class StatsCollection {
      constructor() {
        this.counters_ = {};
      }
      incrementCounter(name2, amount = 1) {
        if (!contains(this.counters_, name2)) {
          this.counters_[name2] = 0;
        }
        this.counters_[name2] += amount;
      }
      get() {
        return deepCopy(this.counters_);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const collections = {};
    const reporters = {};
    function statsManagerGetCollection(repoInfo) {
      const hashString = repoInfo.toString();
      if (!collections[hashString]) {
        collections[hashString] = new StatsCollection();
      }
      return collections[hashString];
    }
    function statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {
      const hashString = repoInfo.toString();
      if (!reporters[hashString]) {
        reporters[hashString] = creatorFunction();
      }
      return reporters[hashString];
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class PacketReceiver {
      /**
       * @param onMessage_
       */
      constructor(onMessage_) {
        this.onMessage_ = onMessage_;
        this.pendingResponses = [];
        this.currentResponseNum = 0;
        this.closeAfterResponse = -1;
        this.onClose = null;
      }
      closeAfter(responseNum, callback) {
        this.closeAfterResponse = responseNum;
        this.onClose = callback;
        if (this.closeAfterResponse < this.currentResponseNum) {
          this.onClose();
          this.onClose = null;
        }
      }
      /**
       * Each message from the server comes with a response number, and an array of data. The responseNumber
       * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
       * browsers will respond in the same order as the requests we sent
       */
      handleResponse(requestNum, data) {
        this.pendingResponses[requestNum] = data;
        while (this.pendingResponses[this.currentResponseNum]) {
          const toProcess = this.pendingResponses[this.currentResponseNum];
          delete this.pendingResponses[this.currentResponseNum];
          for (let i = 0; i < toProcess.length; ++i) {
            if (toProcess[i]) {
              exceptionGuard(() => {
                this.onMessage_(toProcess[i]);
              });
            }
          }
          if (this.currentResponseNum === this.closeAfterResponse) {
            if (this.onClose) {
              this.onClose();
              this.onClose = null;
            }
            break;
          }
          this.currentResponseNum++;
        }
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const FIREBASE_LONGPOLL_START_PARAM = "start";
    const FIREBASE_LONGPOLL_CLOSE_COMMAND = "close";
    const FIREBASE_LONGPOLL_COMMAND_CB_NAME = "pLPCommand";
    const FIREBASE_LONGPOLL_DATA_CB_NAME = "pRTLPCB";
    const FIREBASE_LONGPOLL_ID_PARAM = "id";
    const FIREBASE_LONGPOLL_PW_PARAM = "pw";
    const FIREBASE_LONGPOLL_SERIAL_PARAM = "ser";
    const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = "cb";
    const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = "seg";
    const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = "ts";
    const FIREBASE_LONGPOLL_DATA_PARAM = "d";
    const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = "dframe";
    const MAX_URL_DATA_SIZE = 1870;
    const SEG_HEADER_SIZE = 30;
    const MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
    const KEEPALIVE_REQUEST_INTERVAL = 25e3;
    const LP_CONNECT_TIMEOUT = 3e4;
    class BrowserPollConnection {
      /**
       * @param connId An identifier for this connection, used for logging
       * @param repoInfo The info for the endpoint to send data to.
       * @param applicationId The Firebase App ID for this project.
       * @param appCheckToken The AppCheck token for this client.
       * @param authToken The AuthToken to use for this connection.
       * @param transportSessionId Optional transportSessionid if we are
       * reconnecting for an existing transport session
       * @param lastSessionId Optional lastSessionId if the PersistentConnection has
       * already created a connection previously
       */
      constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
        this.connId = connId;
        this.repoInfo = repoInfo;
        this.applicationId = applicationId;
        this.appCheckToken = appCheckToken;
        this.authToken = authToken;
        this.transportSessionId = transportSessionId;
        this.lastSessionId = lastSessionId;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.everConnected_ = false;
        this.log_ = logWrapper(connId);
        this.stats_ = statsManagerGetCollection(repoInfo);
        this.urlFn = (params) => {
          if (this.appCheckToken) {
            params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
          }
          return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);
        };
      }
      /**
       * @param onMessage - Callback when messages arrive
       * @param onDisconnect - Callback with connection lost.
       */
      open(onMessage, onDisconnect2) {
        this.curSegmentNum = 0;
        this.onDisconnect_ = onDisconnect2;
        this.myPacketOrderer = new PacketReceiver(onMessage);
        this.isClosed_ = false;
        this.connectTimeoutTimer_ = setTimeout(() => {
          this.log_("Timed out trying to connect.");
          this.onClosed_();
          this.connectTimeoutTimer_ = null;
        }, Math.floor(LP_CONNECT_TIMEOUT));
        executeWhenDOMReady(() => {
          if (this.isClosed_) {
            return;
          }
          this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {
            const [command, arg1, arg2, arg3, arg4] = args;
            this.incrementIncomingBytes_(args);
            if (!this.scriptTagHolder) {
              return;
            }
            if (this.connectTimeoutTimer_) {
              clearTimeout(this.connectTimeoutTimer_);
              this.connectTimeoutTimer_ = null;
            }
            this.everConnected_ = true;
            if (command === FIREBASE_LONGPOLL_START_PARAM) {
              this.id = arg1;
              this.password = arg2;
            } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
              if (arg1) {
                this.scriptTagHolder.sendNewPolls = false;
                this.myPacketOrderer.closeAfter(arg1, () => {
                  this.onClosed_();
                });
              } else {
                this.onClosed_();
              }
            } else {
              throw new Error("Unrecognized command received: " + command);
            }
          }, (...args) => {
            const [pN, data] = args;
            this.incrementIncomingBytes_(args);
            this.myPacketOrderer.handleResponse(pN, data);
          }, () => {
            this.onClosed_();
          }, this.urlFn);
          const urlParams = {};
          urlParams[FIREBASE_LONGPOLL_START_PARAM] = "t";
          urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 1e8);
          if (this.scriptTagHolder.uniqueCallbackIdentifier) {
            urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;
          }
          urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
          if (this.transportSessionId) {
            urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;
          }
          if (this.lastSessionId) {
            urlParams[LAST_SESSION_PARAM] = this.lastSessionId;
          }
          if (this.applicationId) {
            urlParams[APPLICATION_ID_PARAM] = this.applicationId;
          }
          if (this.appCheckToken) {
            urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
          }
          if (typeof location !== "undefined" && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {
            urlParams[REFERER_PARAM] = FORGE_REF;
          }
          const connectURL = this.urlFn(urlParams);
          this.log_("Connecting via long-poll to " + connectURL);
          this.scriptTagHolder.addTag(connectURL, () => {
          });
        });
      }
      /**
       * Call this when a handshake has completed successfully and we want to consider the connection established
       */
      start() {
        this.scriptTagHolder.startLongPoll(this.id, this.password);
        this.addDisconnectPingFrame(this.id, this.password);
      }
      /**
       * Forces long polling to be considered as a potential transport
       */
      static forceAllow() {
        BrowserPollConnection.forceAllow_ = true;
      }
      /**
       * Forces longpolling to not be considered as a potential transport
       */
      static forceDisallow() {
        BrowserPollConnection.forceDisallow_ = true;
      }
      // Static method, use string literal so it can be accessed in a generic way
      static isAvailable() {
        if (BrowserPollConnection.forceAllow_) {
          return true;
        } else {
          return !BrowserPollConnection.forceDisallow_ && typeof document !== "undefined" && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();
        }
      }
      /**
       * No-op for polling
       */
      markConnectionHealthy() {
      }
      /**
       * Stops polling and cleans up the iframe
       */
      shutdown_() {
        this.isClosed_ = true;
        if (this.scriptTagHolder) {
          this.scriptTagHolder.close();
          this.scriptTagHolder = null;
        }
        if (this.myDisconnFrame) {
          document.body.removeChild(this.myDisconnFrame);
          this.myDisconnFrame = null;
        }
        if (this.connectTimeoutTimer_) {
          clearTimeout(this.connectTimeoutTimer_);
          this.connectTimeoutTimer_ = null;
        }
      }
      /**
       * Triggered when this transport is closed
       */
      onClosed_() {
        if (!this.isClosed_) {
          this.log_("Longpoll is closing itself");
          this.shutdown_();
          if (this.onDisconnect_) {
            this.onDisconnect_(this.everConnected_);
            this.onDisconnect_ = null;
          }
        }
      }
      /**
       * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
       * that we've left.
       */
      close() {
        if (!this.isClosed_) {
          this.log_("Longpoll is being closed.");
          this.shutdown_();
        }
      }
      /**
       * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
       * broken into chunks (since URLs have a small maximum length).
       * @param data - The JSON data to transmit.
       */
      send(data) {
        const dataStr = stringify(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter("bytes_sent", dataStr.length);
        const base64data = base64Encode(dataStr);
        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
        for (let i = 0; i < dataSegs.length; i++) {
          this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
          this.curSegmentNum++;
        }
      }
      /**
       * This is how we notify the server that we're leaving.
       * We aren't able to send requests with DHTML on a window close event, but we can
       * trigger XHR requests in some browsers (everything but Opera basically).
       */
      addDisconnectPingFrame(id2, pw) {
        this.myDisconnFrame = document.createElement("iframe");
        const urlParams = {};
        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = "t";
        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id2;
        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
        this.myDisconnFrame.src = this.urlFn(urlParams);
        this.myDisconnFrame.style.display = "none";
        document.body.appendChild(this.myDisconnFrame);
      }
      /**
       * Used to track the bytes received by this client
       */
      incrementIncomingBytes_(args) {
        const bytesReceived = stringify(args).length;
        this.bytesReceived += bytesReceived;
        this.stats_.incrementCounter("bytes_received", bytesReceived);
      }
    }
    class FirebaseIFrameScriptHolder {
      /**
       * @param commandCB - The callback to be called when control commands are received from the server.
       * @param onMessageCB - The callback to be triggered when responses arrive from the server.
       * @param onDisconnect - The callback to be triggered when this tag holder is closed
       * @param urlFn - A function that provides the URL of the endpoint to send data to.
       */
      constructor(commandCB, onMessageCB, onDisconnect2, urlFn) {
        this.onDisconnect = onDisconnect2;
        this.urlFn = urlFn;
        this.outstandingRequests = /* @__PURE__ */ new Set();
        this.pendingSegs = [];
        this.currentSerial = Math.floor(Math.random() * 1e8);
        this.sendNewPolls = true;
        {
          this.uniqueCallbackIdentifier = LUIDGenerator();
          window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
          window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
          this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
          let script = "";
          if (this.myIFrame.src && this.myIFrame.src.substr(0, "javascript:".length) === "javascript:") {
            const currentDomain = document.domain;
            script = '<script>document.domain="' + currentDomain + '";<\/script>';
          }
          const iframeContents = "<html><body>" + script + "</body></html>";
          try {
            this.myIFrame.doc.open();
            this.myIFrame.doc.write(iframeContents);
            this.myIFrame.doc.close();
          } catch (e) {
            log("frame writing exception");
            if (e.stack) {
              log(e.stack);
            }
            log(e);
          }
        }
      }
      /**
       * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
       * actually use.
       */
      static createIFrame_() {
        const iframe = document.createElement("iframe");
        iframe.style.display = "none";
        if (document.body) {
          document.body.appendChild(iframe);
          try {
            const a = iframe.contentWindow.document;
            if (!a) {
              log("No IE domain setting required");
            }
          } catch (e) {
            const domain = document.domain;
            iframe.src = "javascript:void((function(){document.open();document.domain='" + domain + "';document.close();})())";
          }
        } else {
          throw "Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
        }
        if (iframe.contentDocument) {
          iframe.doc = iframe.contentDocument;
        } else if (iframe.contentWindow) {
          iframe.doc = iframe.contentWindow.document;
        } else if (iframe.document) {
          iframe.doc = iframe.document;
        }
        return iframe;
      }
      /**
       * Cancel all outstanding queries and remove the frame.
       */
      close() {
        this.alive = false;
        if (this.myIFrame) {
          this.myIFrame.doc.body.textContent = "";
          setTimeout(() => {
            if (this.myIFrame !== null) {
              document.body.removeChild(this.myIFrame);
              this.myIFrame = null;
            }
          }, Math.floor(0));
        }
        const onDisconnect2 = this.onDisconnect;
        if (onDisconnect2) {
          this.onDisconnect = null;
          onDisconnect2();
        }
      }
      /**
       * Actually start the long-polling session by adding the first script tag(s) to the iframe.
       * @param id - The ID of this connection
       * @param pw - The password for this connection
       */
      startLongPoll(id2, pw) {
        this.myID = id2;
        this.myPW = pw;
        this.alive = true;
        while (this.newRequest_()) {
        }
      }
      /**
       * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
       * too many outstanding requests and we are still alive.
       *
       * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
       * needed.
       */
      newRequest_() {
        if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
          this.currentSerial++;
          const urlParams = {};
          urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
          urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
          urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
          let theURL = this.urlFn(urlParams);
          let curDataString = "";
          let i = 0;
          while (this.pendingSegs.length > 0) {
            const nextSeg = this.pendingSegs[0];
            if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {
              const theSeg = this.pendingSegs.shift();
              curDataString = curDataString + "&" + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + "=" + theSeg.seg + "&" + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + "=" + theSeg.ts + "&" + FIREBASE_LONGPOLL_DATA_PARAM + i + "=" + theSeg.d;
              i++;
            } else {
              break;
            }
          }
          theURL = theURL + curDataString;
          this.addLongPollTag_(theURL, this.currentSerial);
          return true;
        } else {
          return false;
        }
      }
      /**
       * Queue a packet for transmission to the server.
       * @param segnum - A sequential id for this packet segment used for reassembly
       * @param totalsegs - The total number of segments in this packet
       * @param data - The data for this segment.
       */
      enqueueSegment(segnum, totalsegs, data) {
        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
        if (this.alive) {
          this.newRequest_();
        }
      }
      /**
       * Add a script tag for a regular long-poll request.
       * @param url - The URL of the script tag.
       * @param serial - The serial number of the request.
       */
      addLongPollTag_(url, serial) {
        this.outstandingRequests.add(serial);
        const doNewRequest = () => {
          this.outstandingRequests.delete(serial);
          this.newRequest_();
        };
        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
        const readyStateCB = () => {
          clearTimeout(keepaliveTimeout);
          doNewRequest();
        };
        this.addTag(url, readyStateCB);
      }
      /**
       * Add an arbitrary script tag to the iframe.
       * @param url - The URL for the script tag source.
       * @param loadCB - A callback to be triggered once the script has loaded.
       */
      addTag(url, loadCB) {
        {
          setTimeout(() => {
            try {
              if (!this.sendNewPolls) {
                return;
              }
              const newScript = this.myIFrame.doc.createElement("script");
              newScript.type = "text/javascript";
              newScript.async = true;
              newScript.src = url;
              newScript.onload = newScript.onreadystatechange = function() {
                const rstate = newScript.readyState;
                if (!rstate || rstate === "loaded" || rstate === "complete") {
                  newScript.onload = newScript.onreadystatechange = null;
                  if (newScript.parentNode) {
                    newScript.parentNode.removeChild(newScript);
                  }
                  loadCB();
                }
              };
              newScript.onerror = () => {
                log("Long-poll script failed to load: " + url);
                this.sendNewPolls = false;
                this.close();
              };
              this.myIFrame.doc.body.appendChild(newScript);
            } catch (e) {
            }
          }, Math.floor(1));
        }
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const WEBSOCKET_MAX_FRAME_SIZE = 16384;
    const WEBSOCKET_KEEPALIVE_INTERVAL = 45e3;
    let WebSocketImpl = null;
    if (typeof MozWebSocket !== "undefined") {
      WebSocketImpl = MozWebSocket;
    } else if (typeof WebSocket !== "undefined") {
      WebSocketImpl = WebSocket;
    }
    class WebSocketConnection {
      /**
       * @param connId identifier for this transport
       * @param repoInfo The info for the websocket endpoint.
       * @param applicationId The Firebase App ID for this project.
       * @param appCheckToken The App Check Token for this client.
       * @param authToken The Auth Token for this client.
       * @param transportSessionId Optional transportSessionId if this is connecting
       * to an existing transport session
       * @param lastSessionId Optional lastSessionId if there was a previous
       * connection
       */
      constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
        this.connId = connId;
        this.applicationId = applicationId;
        this.appCheckToken = appCheckToken;
        this.authToken = authToken;
        this.keepaliveTimer = null;
        this.frames = null;
        this.totalFrames = 0;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.log_ = logWrapper(this.connId);
        this.stats_ = statsManagerGetCollection(repoInfo);
        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);
        this.nodeAdmin = repoInfo.nodeAdmin;
      }
      /**
       * @param repoInfo - The info for the websocket endpoint.
       * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport
       *                                         session
       * @param lastSessionId - Optional lastSessionId if there was a previous connection
       * @returns connection url
       */
      static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {
        const urlParams = {};
        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
        if (typeof location !== "undefined" && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {
          urlParams[REFERER_PARAM] = FORGE_REF;
        }
        if (transportSessionId) {
          urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
        }
        if (lastSessionId) {
          urlParams[LAST_SESSION_PARAM] = lastSessionId;
        }
        if (appCheckToken) {
          urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;
        }
        if (applicationId) {
          urlParams[APPLICATION_ID_PARAM] = applicationId;
        }
        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);
      }
      /**
       * @param onMessage - Callback when messages arrive
       * @param onDisconnect - Callback with connection lost.
       */
      open(onMessage, onDisconnect2) {
        this.onDisconnect = onDisconnect2;
        this.onMessage = onMessage;
        this.log_("Websocket connecting to " + this.connURL);
        this.everConnected_ = false;
        PersistentStorage.set("previous_websocket_failure", true);
        try {
          let options;
          if (isNodeSdk()) ;
          this.mySock = new WebSocketImpl(this.connURL, [], options);
        } catch (e) {
          this.log_("Error instantiating WebSocket.");
          const error2 = e.message || e.data;
          if (error2) {
            this.log_(error2);
          }
          this.onClosed_();
          return;
        }
        this.mySock.onopen = () => {
          this.log_("Websocket connected.");
          this.everConnected_ = true;
        };
        this.mySock.onclose = () => {
          this.log_("Websocket connection was disconnected.");
          this.mySock = null;
          this.onClosed_();
        };
        this.mySock.onmessage = (m2) => {
          this.handleIncomingFrame(m2);
        };
        this.mySock.onerror = (e) => {
          this.log_("WebSocket error.  Closing connection.");
          const error2 = e.message || e.data;
          if (error2) {
            this.log_(error2);
          }
          this.onClosed_();
        };
      }
      /**
       * No-op for websockets, we don't need to do anything once the connection is confirmed as open
       */
      start() {
      }
      static forceDisallow() {
        WebSocketConnection.forceDisallow_ = true;
      }
      static isAvailable() {
        let isOldAndroid = false;
        if (typeof navigator !== "undefined" && navigator.userAgent) {
          const oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
          const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
          if (oldAndroidMatch && oldAndroidMatch.length > 1) {
            if (parseFloat(oldAndroidMatch[1]) < 4.4) {
              isOldAndroid = true;
            }
          }
        }
        return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;
      }
      /**
       * Returns true if we previously failed to connect with this transport.
       */
      static previouslyFailed() {
        return PersistentStorage.isInMemoryStorage || PersistentStorage.get("previous_websocket_failure") === true;
      }
      markConnectionHealthy() {
        PersistentStorage.remove("previous_websocket_failure");
      }
      appendFrame_(data) {
        this.frames.push(data);
        if (this.frames.length === this.totalFrames) {
          const fullMess = this.frames.join("");
          this.frames = null;
          const jsonMess = jsonEval(fullMess);
          this.onMessage(jsonMess);
        }
      }
      /**
       * @param frameCount - The number of frames we are expecting from the server
       */
      handleNewFrameCount_(frameCount) {
        this.totalFrames = frameCount;
        this.frames = [];
      }
      /**
       * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
       * @returns Any remaining data to be process, or null if there is none
       */
      extractFrameCount_(data) {
        assert(this.frames === null, "We already have a frame buffer");
        if (data.length <= 6) {
          const frameCount = Number(data);
          if (!isNaN(frameCount)) {
            this.handleNewFrameCount_(frameCount);
            return null;
          }
        }
        this.handleNewFrameCount_(1);
        return data;
      }
      /**
       * Process a websocket frame that has arrived from the server.
       * @param mess - The frame data
       */
      handleIncomingFrame(mess) {
        if (this.mySock === null) {
          return;
        }
        const data = mess["data"];
        this.bytesReceived += data.length;
        this.stats_.incrementCounter("bytes_received", data.length);
        this.resetKeepAlive();
        if (this.frames !== null) {
          this.appendFrame_(data);
        } else {
          const remainingData = this.extractFrameCount_(data);
          if (remainingData !== null) {
            this.appendFrame_(remainingData);
          }
        }
      }
      /**
       * Send a message to the server
       * @param data - The JSON object to transmit
       */
      send(data) {
        this.resetKeepAlive();
        const dataStr = stringify(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter("bytes_sent", dataStr.length);
        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
        if (dataSegs.length > 1) {
          this.sendString_(String(dataSegs.length));
        }
        for (let i = 0; i < dataSegs.length; i++) {
          this.sendString_(dataSegs[i]);
        }
      }
      shutdown_() {
        this.isClosed_ = true;
        if (this.keepaliveTimer) {
          clearInterval(this.keepaliveTimer);
          this.keepaliveTimer = null;
        }
        if (this.mySock) {
          this.mySock.close();
          this.mySock = null;
        }
      }
      onClosed_() {
        if (!this.isClosed_) {
          this.log_("WebSocket is closing itself");
          this.shutdown_();
          if (this.onDisconnect) {
            this.onDisconnect(this.everConnected_);
            this.onDisconnect = null;
          }
        }
      }
      /**
       * External-facing close handler.
       * Close the websocket and kill the connection.
       */
      close() {
        if (!this.isClosed_) {
          this.log_("WebSocket is being closed");
          this.shutdown_();
        }
      }
      /**
       * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
       * the last activity.
       */
      resetKeepAlive() {
        clearInterval(this.keepaliveTimer);
        this.keepaliveTimer = setInterval(() => {
          if (this.mySock) {
            this.sendString_("0");
          }
          this.resetKeepAlive();
        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
      }
      /**
       * Send a string over the websocket.
       *
       * @param str - String to send.
       */
      sendString_(str) {
        try {
          this.mySock.send(str);
        } catch (e) {
          this.log_("Exception thrown from WebSocket.send():", e.message || e.data, "Closing connection.");
          setTimeout(this.onClosed_.bind(this), 0);
        }
      }
    }
    WebSocketConnection.responsesRequiredToBeHealthy = 2;
    WebSocketConnection.healthyTimeout = 3e4;
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class TransportManager {
      /**
       * @param repoInfo - Metadata around the namespace we're connecting to
       */
      constructor(repoInfo) {
        this.initTransports_(repoInfo);
      }
      static get ALL_TRANSPORTS() {
        return [BrowserPollConnection, WebSocketConnection];
      }
      /**
       * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after
       * TransportManager has already set up transports_
       */
      static get IS_TRANSPORT_INITIALIZED() {
        return this.globalTransportInitialized_;
      }
      initTransports_(repoInfo) {
        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection["isAvailable"]();
        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
        if (repoInfo.webSocketOnly) {
          if (!isWebSocketsAvailable) {
            warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
          }
          isSkipPollConnection = true;
        }
        if (isSkipPollConnection) {
          this.transports_ = [WebSocketConnection];
        } else {
          const transports = this.transports_ = [];
          for (const transport of TransportManager.ALL_TRANSPORTS) {
            if (transport && transport["isAvailable"]()) {
              transports.push(transport);
            }
          }
          TransportManager.globalTransportInitialized_ = true;
        }
      }
      /**
       * @returns The constructor for the initial transport to use
       */
      initialTransport() {
        if (this.transports_.length > 0) {
          return this.transports_[0];
        } else {
          throw new Error("No transports available");
        }
      }
      /**
       * @returns The constructor for the next transport, or null
       */
      upgradeTransport() {
        if (this.transports_.length > 1) {
          return this.transports_[1];
        } else {
          return null;
        }
      }
    }
    TransportManager.globalTransportInitialized_ = false;
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const UPGRADE_TIMEOUT = 6e4;
    const DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5e3;
    const BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
    const BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
    const MESSAGE_TYPE = "t";
    const MESSAGE_DATA = "d";
    const CONTROL_SHUTDOWN = "s";
    const CONTROL_RESET = "r";
    const CONTROL_ERROR = "e";
    const CONTROL_PONG = "o";
    const SWITCH_ACK = "a";
    const END_TRANSMISSION = "n";
    const PING = "p";
    const SERVER_HELLO = "h";
    class Connection {
      /**
       * @param id - an id for this connection
       * @param repoInfo_ - the info for the endpoint to connect to
       * @param applicationId_ - the Firebase App ID for this project
       * @param appCheckToken_ - The App Check Token for this device.
       * @param authToken_ - The auth token for this session.
       * @param onMessage_ - the callback to be triggered when a server-push message arrives
       * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
       * @param onDisconnect_ - the callback to be triggered when a connection was lost
       * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
       * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
       */
      constructor(id2, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
        this.id = id2;
        this.repoInfo_ = repoInfo_;
        this.applicationId_ = applicationId_;
        this.appCheckToken_ = appCheckToken_;
        this.authToken_ = authToken_;
        this.onMessage_ = onMessage_;
        this.onReady_ = onReady_;
        this.onDisconnect_ = onDisconnect_;
        this.onKill_ = onKill_;
        this.lastSessionId = lastSessionId;
        this.connectionCount = 0;
        this.pendingDataMessages = [];
        this.state_ = 0;
        this.log_ = logWrapper("c:" + this.id + ":");
        this.transportManager_ = new TransportManager(repoInfo_);
        this.log_("Connection created");
        this.start_();
      }
      /**
       * Starts a connection attempt
       */
      start_() {
        const conn = this.transportManager_.initialTransport();
        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);
        this.primaryResponsesRequired_ = conn["responsesRequiredToBeHealthy"] || 0;
        const onMessageReceived = this.connReceiver_(this.conn_);
        const onConnectionLost = this.disconnReceiver_(this.conn_);
        this.tx_ = this.conn_;
        this.rx_ = this.conn_;
        this.secondaryConn_ = null;
        this.isHealthy_ = false;
        setTimeout(() => {
          this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);
        }, Math.floor(0));
        const healthyTimeoutMS = conn["healthyTimeout"] || 0;
        if (healthyTimeoutMS > 0) {
          this.healthyTimeout_ = setTimeoutNonBlocking(() => {
            this.healthyTimeout_ = null;
            if (!this.isHealthy_) {
              if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                this.log_("Connection exceeded healthy timeout but has received " + this.conn_.bytesReceived + " bytes.  Marking connection healthy.");
                this.isHealthy_ = true;
                this.conn_.markConnectionHealthy();
              } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                this.log_("Connection exceeded healthy timeout but has sent " + this.conn_.bytesSent + " bytes.  Leaving connection alive.");
              } else {
                this.log_("Closing unhealthy connection after timeout.");
                this.close();
              }
            }
          }, Math.floor(healthyTimeoutMS));
        }
      }
      nextTransportId_() {
        return "c:" + this.id + ":" + this.connectionCount++;
      }
      disconnReceiver_(conn) {
        return (everConnected) => {
          if (conn === this.conn_) {
            this.onConnectionLost_(everConnected);
          } else if (conn === this.secondaryConn_) {
            this.log_("Secondary connection lost.");
            this.onSecondaryConnectionLost_();
          } else {
            this.log_("closing an old connection");
          }
        };
      }
      connReceiver_(conn) {
        return (message) => {
          if (this.state_ !== 2) {
            if (conn === this.rx_) {
              this.onPrimaryMessageReceived_(message);
            } else if (conn === this.secondaryConn_) {
              this.onSecondaryMessageReceived_(message);
            } else {
              this.log_("message on old connection");
            }
          }
        };
      }
      /**
       * @param dataMsg - An arbitrary data message to be sent to the server
       */
      sendRequest(dataMsg) {
        const msg = { t: "d", d: dataMsg };
        this.sendData_(msg);
      }
      tryCleanupConnection() {
        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
          this.log_("cleaning up and promoting a connection: " + this.secondaryConn_.connId);
          this.conn_ = this.secondaryConn_;
          this.secondaryConn_ = null;
        }
      }
      onSecondaryControl_(controlData) {
        if (MESSAGE_TYPE in controlData) {
          const cmd = controlData[MESSAGE_TYPE];
          if (cmd === SWITCH_ACK) {
            this.upgradeIfSecondaryHealthy_();
          } else if (cmd === CONTROL_RESET) {
            this.log_("Got a reset on secondary, closing it");
            this.secondaryConn_.close();
            if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {
              this.close();
            }
          } else if (cmd === CONTROL_PONG) {
            this.log_("got pong on secondary.");
            this.secondaryResponsesRequired_--;
            this.upgradeIfSecondaryHealthy_();
          }
        }
      }
      onSecondaryMessageReceived_(parsedData) {
        const layer = requireKey("t", parsedData);
        const data = requireKey("d", parsedData);
        if (layer === "c") {
          this.onSecondaryControl_(data);
        } else if (layer === "d") {
          this.pendingDataMessages.push(data);
        } else {
          throw new Error("Unknown protocol layer: " + layer);
        }
      }
      upgradeIfSecondaryHealthy_() {
        if (this.secondaryResponsesRequired_ <= 0) {
          this.log_("Secondary connection is healthy.");
          this.isHealthy_ = true;
          this.secondaryConn_.markConnectionHealthy();
          this.proceedWithUpgrade_();
        } else {
          this.log_("sending ping on secondary.");
          this.secondaryConn_.send({ t: "c", d: { t: PING, d: {} } });
        }
      }
      proceedWithUpgrade_() {
        this.secondaryConn_.start();
        this.log_("sending client ack on secondary");
        this.secondaryConn_.send({ t: "c", d: { t: SWITCH_ACK, d: {} } });
        this.log_("Ending transmission on primary");
        this.conn_.send({ t: "c", d: { t: END_TRANSMISSION, d: {} } });
        this.tx_ = this.secondaryConn_;
        this.tryCleanupConnection();
      }
      onPrimaryMessageReceived_(parsedData) {
        const layer = requireKey("t", parsedData);
        const data = requireKey("d", parsedData);
        if (layer === "c") {
          this.onControl_(data);
        } else if (layer === "d") {
          this.onDataMessage_(data);
        }
      }
      onDataMessage_(message) {
        this.onPrimaryResponse_();
        this.onMessage_(message);
      }
      onPrimaryResponse_() {
        if (!this.isHealthy_) {
          this.primaryResponsesRequired_--;
          if (this.primaryResponsesRequired_ <= 0) {
            this.log_("Primary connection is healthy.");
            this.isHealthy_ = true;
            this.conn_.markConnectionHealthy();
          }
        }
      }
      onControl_(controlData) {
        const cmd = requireKey(MESSAGE_TYPE, controlData);
        if (MESSAGE_DATA in controlData) {
          const payload = controlData[MESSAGE_DATA];
          if (cmd === SERVER_HELLO) {
            const handshakePayload = Object.assign({}, payload);
            if (this.repoInfo_.isUsingEmulator) {
              handshakePayload.h = this.repoInfo_.host;
            }
            this.onHandshake_(handshakePayload);
          } else if (cmd === END_TRANSMISSION) {
            this.log_("recvd end transmission on primary");
            this.rx_ = this.secondaryConn_;
            for (let i = 0; i < this.pendingDataMessages.length; ++i) {
              this.onDataMessage_(this.pendingDataMessages[i]);
            }
            this.pendingDataMessages = [];
            this.tryCleanupConnection();
          } else if (cmd === CONTROL_SHUTDOWN) {
            this.onConnectionShutdown_(payload);
          } else if (cmd === CONTROL_RESET) {
            this.onReset_(payload);
          } else if (cmd === CONTROL_ERROR) {
            error("Server Error: " + payload);
          } else if (cmd === CONTROL_PONG) {
            this.log_("got pong on primary.");
            this.onPrimaryResponse_();
            this.sendPingOnPrimaryIfNecessary_();
          } else {
            error("Unknown control packet command: " + cmd);
          }
        }
      }
      /**
       * @param handshake - The handshake data returned from the server
       */
      onHandshake_(handshake) {
        const timestamp = handshake.ts;
        const version2 = handshake.v;
        const host = handshake.h;
        this.sessionId = handshake.s;
        this.repoInfo_.host = host;
        if (this.state_ === 0) {
          this.conn_.start();
          this.onConnectionEstablished_(this.conn_, timestamp);
          if (PROTOCOL_VERSION !== version2) {
            warn("Protocol version mismatch detected");
          }
          this.tryStartUpgrade_();
        }
      }
      tryStartUpgrade_() {
        const conn = this.transportManager_.upgradeTransport();
        if (conn) {
          this.startUpgrade_(conn);
        }
      }
      startUpgrade_(conn) {
        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);
        this.secondaryResponsesRequired_ = conn["responsesRequiredToBeHealthy"] || 0;
        const onMessage = this.connReceiver_(this.secondaryConn_);
        const onDisconnect2 = this.disconnReceiver_(this.secondaryConn_);
        this.secondaryConn_.open(onMessage, onDisconnect2);
        setTimeoutNonBlocking(() => {
          if (this.secondaryConn_) {
            this.log_("Timed out trying to upgrade.");
            this.secondaryConn_.close();
          }
        }, Math.floor(UPGRADE_TIMEOUT));
      }
      onReset_(host) {
        this.log_("Reset packet received.  New host: " + host);
        this.repoInfo_.host = host;
        if (this.state_ === 1) {
          this.close();
        } else {
          this.closeConnections_();
          this.start_();
        }
      }
      onConnectionEstablished_(conn, timestamp) {
        this.log_("Realtime connection established.");
        this.conn_ = conn;
        this.state_ = 1;
        if (this.onReady_) {
          this.onReady_(timestamp, this.sessionId);
          this.onReady_ = null;
        }
        if (this.primaryResponsesRequired_ === 0) {
          this.log_("Primary connection is healthy.");
          this.isHealthy_ = true;
        } else {
          setTimeoutNonBlocking(() => {
            this.sendPingOnPrimaryIfNecessary_();
          }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
        }
      }
      sendPingOnPrimaryIfNecessary_() {
        if (!this.isHealthy_ && this.state_ === 1) {
          this.log_("sending ping on primary.");
          this.sendData_({ t: "c", d: { t: PING, d: {} } });
        }
      }
      onSecondaryConnectionLost_() {
        const conn = this.secondaryConn_;
        this.secondaryConn_ = null;
        if (this.tx_ === conn || this.rx_ === conn) {
          this.close();
        }
      }
      /**
       * @param everConnected - Whether or not the connection ever reached a server. Used to determine if
       * we should flush the host cache
       */
      onConnectionLost_(everConnected) {
        this.conn_ = null;
        if (!everConnected && this.state_ === 0) {
          this.log_("Realtime connection failed.");
          if (this.repoInfo_.isCacheableHost()) {
            PersistentStorage.remove("host:" + this.repoInfo_.host);
            this.repoInfo_.internalHost = this.repoInfo_.host;
          }
        } else if (this.state_ === 1) {
          this.log_("Realtime connection lost.");
        }
        this.close();
      }
      onConnectionShutdown_(reason) {
        this.log_("Connection shutdown command received. Shutting down...");
        if (this.onKill_) {
          this.onKill_(reason);
          this.onKill_ = null;
        }
        this.onDisconnect_ = null;
        this.close();
      }
      sendData_(data) {
        if (this.state_ !== 1) {
          throw "Connection is not connected";
        } else {
          this.tx_.send(data);
        }
      }
      /**
       * Cleans up this connection, calling the appropriate callbacks
       */
      close() {
        if (this.state_ !== 2) {
          this.log_("Closing realtime connection.");
          this.state_ = 2;
          this.closeConnections_();
          if (this.onDisconnect_) {
            this.onDisconnect_();
            this.onDisconnect_ = null;
          }
        }
      }
      closeConnections_() {
        this.log_("Shutting down all connections");
        if (this.conn_) {
          this.conn_.close();
          this.conn_ = null;
        }
        if (this.secondaryConn_) {
          this.secondaryConn_.close();
          this.secondaryConn_ = null;
        }
        if (this.healthyTimeout_) {
          clearTimeout(this.healthyTimeout_);
          this.healthyTimeout_ = null;
        }
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ServerActions {
      put(pathString, data, onComplete, hash) {
      }
      merge(pathString, data, onComplete, hash) {
      }
      /**
       * Refreshes the auth token for the current connection.
       * @param token - The authentication token
       */
      refreshAuthToken(token) {
      }
      /**
       * Refreshes the app check token for the current connection.
       * @param token The app check token
       */
      refreshAppCheckToken(token) {
      }
      onDisconnectPut(pathString, data, onComplete) {
      }
      onDisconnectMerge(pathString, data, onComplete) {
      }
      onDisconnectCancel(pathString, onComplete) {
      }
      reportStats(stats) {
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class EventEmitter {
      constructor(allowedEvents_) {
        this.allowedEvents_ = allowedEvents_;
        this.listeners_ = {};
        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, "Requires a non-empty array");
      }
      /**
       * To be called by derived classes to trigger events.
       */
      trigger(eventType, ...varArgs) {
        if (Array.isArray(this.listeners_[eventType])) {
          const listeners = [...this.listeners_[eventType]];
          for (let i = 0; i < listeners.length; i++) {
            listeners[i].callback.apply(listeners[i].context, varArgs);
          }
        }
      }
      on(eventType, callback, context) {
        this.validateEventType_(eventType);
        this.listeners_[eventType] = this.listeners_[eventType] || [];
        this.listeners_[eventType].push({ callback, context });
        const eventData = this.getInitialEvent(eventType);
        if (eventData) {
          callback.apply(context, eventData);
        }
      }
      off(eventType, callback, context) {
        this.validateEventType_(eventType);
        const listeners = this.listeners_[eventType] || [];
        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {
            listeners.splice(i, 1);
            return;
          }
        }
      }
      validateEventType_(eventType) {
        assert(this.allowedEvents_.find((et) => {
          return et === eventType;
        }), "Unknown event: " + eventType);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class OnlineMonitor extends EventEmitter {
      constructor() {
        super(["online"]);
        this.online_ = true;
        if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined" && !isMobileCordova()) {
          window.addEventListener("online", () => {
            if (!this.online_) {
              this.online_ = true;
              this.trigger("online", true);
            }
          }, false);
          window.addEventListener("offline", () => {
            if (this.online_) {
              this.online_ = false;
              this.trigger("online", false);
            }
          }, false);
        }
      }
      static getInstance() {
        return new OnlineMonitor();
      }
      getInitialEvent(eventType) {
        assert(eventType === "online", "Unknown event type: " + eventType);
        return [this.online_];
      }
      currentlyOnline() {
        return this.online_;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const MAX_PATH_DEPTH = 32;
    const MAX_PATH_LENGTH_BYTES = 768;
    class Path {
      /**
       * @param pathOrString - Path string to parse, or another path, or the raw
       * tokens array
       */
      constructor(pathOrString, pieceNum) {
        if (pieceNum === void 0) {
          this.pieces_ = pathOrString.split("/");
          let copyTo = 0;
          for (let i = 0; i < this.pieces_.length; i++) {
            if (this.pieces_[i].length > 0) {
              this.pieces_[copyTo] = this.pieces_[i];
              copyTo++;
            }
          }
          this.pieces_.length = copyTo;
          this.pieceNum_ = 0;
        } else {
          this.pieces_ = pathOrString;
          this.pieceNum_ = pieceNum;
        }
      }
      toString() {
        let pathString = "";
        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {
          if (this.pieces_[i] !== "") {
            pathString += "/" + this.pieces_[i];
          }
        }
        return pathString || "/";
      }
    }
    function newEmptyPath() {
      return new Path("");
    }
    function pathGetFront(path) {
      if (path.pieceNum_ >= path.pieces_.length) {
        return null;
      }
      return path.pieces_[path.pieceNum_];
    }
    function pathGetLength(path) {
      return path.pieces_.length - path.pieceNum_;
    }
    function pathPopFront(path) {
      let pieceNum = path.pieceNum_;
      if (pieceNum < path.pieces_.length) {
        pieceNum++;
      }
      return new Path(path.pieces_, pieceNum);
    }
    function pathGetBack(path) {
      if (path.pieceNum_ < path.pieces_.length) {
        return path.pieces_[path.pieces_.length - 1];
      }
      return null;
    }
    function pathToUrlEncodedString(path) {
      let pathString = "";
      for (let i = path.pieceNum_; i < path.pieces_.length; i++) {
        if (path.pieces_[i] !== "") {
          pathString += "/" + encodeURIComponent(String(path.pieces_[i]));
        }
      }
      return pathString || "/";
    }
    function pathSlice(path, begin = 0) {
      return path.pieces_.slice(path.pieceNum_ + begin);
    }
    function pathParent(path) {
      if (path.pieceNum_ >= path.pieces_.length) {
        return null;
      }
      const pieces = [];
      for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {
        pieces.push(path.pieces_[i]);
      }
      return new Path(pieces, 0);
    }
    function pathChild(path, childPathObj) {
      const pieces = [];
      for (let i = path.pieceNum_; i < path.pieces_.length; i++) {
        pieces.push(path.pieces_[i]);
      }
      if (childPathObj instanceof Path) {
        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
          pieces.push(childPathObj.pieces_[i]);
        }
      } else {
        const childPieces = childPathObj.split("/");
        for (let i = 0; i < childPieces.length; i++) {
          if (childPieces[i].length > 0) {
            pieces.push(childPieces[i]);
          }
        }
      }
      return new Path(pieces, 0);
    }
    function pathIsEmpty(path) {
      return path.pieceNum_ >= path.pieces_.length;
    }
    function newRelativePath(outerPath, innerPath) {
      const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);
      if (outer === null) {
        return innerPath;
      } else if (outer === inner) {
        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));
      } else {
        throw new Error("INTERNAL ERROR: innerPath (" + innerPath + ") is not within outerPath (" + outerPath + ")");
      }
    }
    function pathEquals(path, other) {
      if (pathGetLength(path) !== pathGetLength(other)) {
        return false;
      }
      for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {
        if (path.pieces_[i] !== other.pieces_[j]) {
          return false;
        }
      }
      return true;
    }
    function pathContains(path, other) {
      let i = path.pieceNum_;
      let j = other.pieceNum_;
      if (pathGetLength(path) > pathGetLength(other)) {
        return false;
      }
      while (i < path.pieces_.length) {
        if (path.pieces_[i] !== other.pieces_[j]) {
          return false;
        }
        ++i;
        ++j;
      }
      return true;
    }
    class ValidationPath {
      /**
       * @param path - Initial Path.
       * @param errorPrefix_ - Prefix for any error messages.
       */
      constructor(path, errorPrefix_) {
        this.errorPrefix_ = errorPrefix_;
        this.parts_ = pathSlice(path, 0);
        this.byteLength_ = Math.max(1, this.parts_.length);
        for (let i = 0; i < this.parts_.length; i++) {
          this.byteLength_ += stringLength(this.parts_[i]);
        }
        validationPathCheckValid(this);
      }
    }
    function validationPathPush(validationPath, child2) {
      if (validationPath.parts_.length > 0) {
        validationPath.byteLength_ += 1;
      }
      validationPath.parts_.push(child2);
      validationPath.byteLength_ += stringLength(child2);
      validationPathCheckValid(validationPath);
    }
    function validationPathPop(validationPath) {
      const last = validationPath.parts_.pop();
      validationPath.byteLength_ -= stringLength(last);
      if (validationPath.parts_.length > 0) {
        validationPath.byteLength_ -= 1;
      }
    }
    function validationPathCheckValid(validationPath) {
      if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {
        throw new Error(validationPath.errorPrefix_ + "has a key path longer than " + MAX_PATH_LENGTH_BYTES + " bytes (" + validationPath.byteLength_ + ").");
      }
      if (validationPath.parts_.length > MAX_PATH_DEPTH) {
        throw new Error(validationPath.errorPrefix_ + "path specified exceeds the maximum depth that can be written (" + MAX_PATH_DEPTH + ") or object contains a cycle " + validationPathToErrorString(validationPath));
      }
    }
    function validationPathToErrorString(validationPath) {
      if (validationPath.parts_.length === 0) {
        return "";
      }
      return "in property '" + validationPath.parts_.join(".") + "'";
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class VisibilityMonitor extends EventEmitter {
      constructor() {
        super(["visible"]);
        let hidden;
        let visibilityChange;
        if (typeof document !== "undefined" && typeof document.addEventListener !== "undefined") {
          if (typeof document["hidden"] !== "undefined") {
            visibilityChange = "visibilitychange";
            hidden = "hidden";
          } else if (typeof document["mozHidden"] !== "undefined") {
            visibilityChange = "mozvisibilitychange";
            hidden = "mozHidden";
          } else if (typeof document["msHidden"] !== "undefined") {
            visibilityChange = "msvisibilitychange";
            hidden = "msHidden";
          } else if (typeof document["webkitHidden"] !== "undefined") {
            visibilityChange = "webkitvisibilitychange";
            hidden = "webkitHidden";
          }
        }
        this.visible_ = true;
        if (visibilityChange) {
          document.addEventListener(visibilityChange, () => {
            const visible = !document[hidden];
            if (visible !== this.visible_) {
              this.visible_ = visible;
              this.trigger("visible", visible);
            }
          }, false);
        }
      }
      static getInstance() {
        return new VisibilityMonitor();
      }
      getInitialEvent(eventType) {
        assert(eventType === "visible", "Unknown event type: " + eventType);
        return [this.visible_];
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const RECONNECT_MIN_DELAY = 1e3;
    const RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1e3;
    const RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1e3;
    const RECONNECT_DELAY_MULTIPLIER = 1.3;
    const RECONNECT_DELAY_RESET_TIMEOUT = 3e4;
    const SERVER_KILL_INTERRUPT_REASON = "server_kill";
    const INVALID_TOKEN_THRESHOLD = 3;
    class PersistentConnection extends ServerActions {
      /**
       * @param repoInfo_ - Data about the namespace we are connecting to
       * @param applicationId_ - The Firebase App ID for this project
       * @param onDataUpdate_ - A callback for new data from the server
       */
      constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {
        super();
        this.repoInfo_ = repoInfo_;
        this.applicationId_ = applicationId_;
        this.onDataUpdate_ = onDataUpdate_;
        this.onConnectStatus_ = onConnectStatus_;
        this.onServerInfoUpdate_ = onServerInfoUpdate_;
        this.authTokenProvider_ = authTokenProvider_;
        this.appCheckTokenProvider_ = appCheckTokenProvider_;
        this.authOverride_ = authOverride_;
        this.id = PersistentConnection.nextPersistentConnectionId_++;
        this.log_ = logWrapper("p:" + this.id + ":");
        this.interruptReasons_ = {};
        this.listens = /* @__PURE__ */ new Map();
        this.outstandingPuts_ = [];
        this.outstandingGets_ = [];
        this.outstandingPutCount_ = 0;
        this.outstandingGetCount_ = 0;
        this.onDisconnectRequestQueue_ = [];
        this.connected_ = false;
        this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
        this.securityDebugCallback_ = null;
        this.lastSessionId = null;
        this.establishConnectionTimer_ = null;
        this.visible_ = false;
        this.requestCBHash_ = {};
        this.requestNumber_ = 0;
        this.realtime_ = null;
        this.authToken_ = null;
        this.appCheckToken_ = null;
        this.forceTokenRefresh_ = false;
        this.invalidAuthTokenCount_ = 0;
        this.invalidAppCheckTokenCount_ = 0;
        this.firstConnection_ = true;
        this.lastConnectionAttemptTime_ = null;
        this.lastConnectionEstablishedTime_ = null;
        if (authOverride_ && true) {
          throw new Error("Auth override specified in options, but not supported on non Node.js platforms");
        }
        VisibilityMonitor.getInstance().on("visible", this.onVisible_, this);
        if (repoInfo_.host.indexOf("fblocal") === -1) {
          OnlineMonitor.getInstance().on("online", this.onOnline_, this);
        }
      }
      sendRequest(action, body, onResponse) {
        const curReqNum = ++this.requestNumber_;
        const msg = { r: curReqNum, a: action, b: body };
        this.log_(stringify(msg));
        assert(this.connected_, "sendRequest call when we're not connected not allowed.");
        this.realtime_.sendRequest(msg);
        if (onResponse) {
          this.requestCBHash_[curReqNum] = onResponse;
        }
      }
      get(query2) {
        this.initConnection_();
        const deferred = new Deferred();
        const request = {
          p: query2._path.toString(),
          q: query2._queryObject
        };
        const outstandingGet = {
          action: "g",
          request,
          onComplete: (message) => {
            const payload = message["d"];
            if (message["s"] === "ok") {
              deferred.resolve(payload);
            } else {
              deferred.reject(payload);
            }
          }
        };
        this.outstandingGets_.push(outstandingGet);
        this.outstandingGetCount_++;
        const index = this.outstandingGets_.length - 1;
        if (this.connected_) {
          this.sendGet_(index);
        }
        return deferred.promise;
      }
      listen(query2, currentHashFn, tag, onComplete) {
        this.initConnection_();
        const queryId = query2._queryIdentifier;
        const pathString = query2._path.toString();
        this.log_("Listen called for " + pathString + " " + queryId);
        if (!this.listens.has(pathString)) {
          this.listens.set(pathString, /* @__PURE__ */ new Map());
        }
        assert(query2._queryParams.isDefault() || !query2._queryParams.loadsAllData(), "listen() called for non-default but complete query");
        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);
        const listenSpec = {
          onComplete,
          hashFn: currentHashFn,
          query: query2,
          tag
        };
        this.listens.get(pathString).set(queryId, listenSpec);
        if (this.connected_) {
          this.sendListen_(listenSpec);
        }
      }
      sendGet_(index) {
        const get2 = this.outstandingGets_[index];
        this.sendRequest("g", get2.request, (message) => {
          delete this.outstandingGets_[index];
          this.outstandingGetCount_--;
          if (this.outstandingGetCount_ === 0) {
            this.outstandingGets_ = [];
          }
          if (get2.onComplete) {
            get2.onComplete(message);
          }
        });
      }
      sendListen_(listenSpec) {
        const query2 = listenSpec.query;
        const pathString = query2._path.toString();
        const queryId = query2._queryIdentifier;
        this.log_("Listen on " + pathString + " for " + queryId);
        const req = {
          /*path*/
          p: pathString
        };
        const action = "q";
        if (listenSpec.tag) {
          req["q"] = query2._queryObject;
          req["t"] = listenSpec.tag;
        }
        req[
          /*hash*/
          "h"
        ] = listenSpec.hashFn();
        this.sendRequest(action, req, (message) => {
          const payload = message[
            /*data*/
            "d"
          ];
          const status = message[
            /*status*/
            "s"
          ];
          PersistentConnection.warnOnListenWarnings_(payload, query2);
          const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId);
          if (currentListenSpec === listenSpec) {
            this.log_("listen response", message);
            if (status !== "ok") {
              this.removeListen_(pathString, queryId);
            }
            if (listenSpec.onComplete) {
              listenSpec.onComplete(status, payload);
            }
          }
        });
      }
      static warnOnListenWarnings_(payload, query2) {
        if (payload && typeof payload === "object" && contains(payload, "w")) {
          const warnings = safeGet(payload, "w");
          if (Array.isArray(warnings) && ~warnings.indexOf("no_index")) {
            const indexSpec = '".indexOn": "' + query2._queryParams.getIndex().toString() + '"';
            const indexPath = query2._path.toString();
            warn(`Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding ${indexSpec} at ${indexPath} to your security rules for better performance.`);
          }
        }
      }
      refreshAuthToken(token) {
        this.authToken_ = token;
        this.log_("Auth token refreshed");
        if (this.authToken_) {
          this.tryAuth();
        } else {
          if (this.connected_) {
            this.sendRequest("unauth", {}, () => {
            });
          }
        }
        this.reduceReconnectDelayIfAdminCredential_(token);
      }
      reduceReconnectDelayIfAdminCredential_(credential) {
        const isFirebaseSecret = credential && credential.length === 40;
        if (isFirebaseSecret || isAdmin(credential)) {
          this.log_("Admin auth credential detected.  Reducing max reconnect time.");
          this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
        }
      }
      refreshAppCheckToken(token) {
        this.appCheckToken_ = token;
        this.log_("App check token refreshed");
        if (this.appCheckToken_) {
          this.tryAppCheck();
        } else {
          if (this.connected_) {
            this.sendRequest("unappeck", {}, () => {
            });
          }
        }
      }
      /**
       * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
       * a auth revoked (the connection is closed).
       */
      tryAuth() {
        if (this.connected_ && this.authToken_) {
          const token = this.authToken_;
          const authMethod = isValidFormat(token) ? "auth" : "gauth";
          const requestData = { cred: token };
          if (this.authOverride_ === null) {
            requestData["noauth"] = true;
          } else if (typeof this.authOverride_ === "object") {
            requestData["authvar"] = this.authOverride_;
          }
          this.sendRequest(authMethod, requestData, (res) => {
            const status = res[
              /*status*/
              "s"
            ];
            const data = res[
              /*data*/
              "d"
            ] || "error";
            if (this.authToken_ === token) {
              if (status === "ok") {
                this.invalidAuthTokenCount_ = 0;
              } else {
                this.onAuthRevoked_(status, data);
              }
            }
          });
        }
      }
      /**
       * Attempts to authenticate with the given token. If the authentication
       * attempt fails, it's triggered like the token was revoked (the connection is
       * closed).
       */
      tryAppCheck() {
        if (this.connected_ && this.appCheckToken_) {
          this.sendRequest("appcheck", { "token": this.appCheckToken_ }, (res) => {
            const status = res[
              /*status*/
              "s"
            ];
            const data = res[
              /*data*/
              "d"
            ] || "error";
            if (status === "ok") {
              this.invalidAppCheckTokenCount_ = 0;
            } else {
              this.onAppCheckRevoked_(status, data);
            }
          });
        }
      }
      /**
       * @inheritDoc
       */
      unlisten(query2, tag) {
        const pathString = query2._path.toString();
        const queryId = query2._queryIdentifier;
        this.log_("Unlisten called for " + pathString + " " + queryId);
        assert(query2._queryParams.isDefault() || !query2._queryParams.loadsAllData(), "unlisten() called for non-default but complete query");
        const listen = this.removeListen_(pathString, queryId);
        if (listen && this.connected_) {
          this.sendUnlisten_(pathString, queryId, query2._queryObject, tag);
        }
      }
      sendUnlisten_(pathString, queryId, queryObj, tag) {
        this.log_("Unlisten on " + pathString + " for " + queryId);
        const req = {
          /*path*/
          p: pathString
        };
        const action = "n";
        if (tag) {
          req["q"] = queryObj;
          req["t"] = tag;
        }
        this.sendRequest(action, req);
      }
      onDisconnectPut(pathString, data, onComplete) {
        this.initConnection_();
        if (this.connected_) {
          this.sendOnDisconnect_("o", pathString, data, onComplete);
        } else {
          this.onDisconnectRequestQueue_.push({
            pathString,
            action: "o",
            data,
            onComplete
          });
        }
      }
      onDisconnectMerge(pathString, data, onComplete) {
        this.initConnection_();
        if (this.connected_) {
          this.sendOnDisconnect_("om", pathString, data, onComplete);
        } else {
          this.onDisconnectRequestQueue_.push({
            pathString,
            action: "om",
            data,
            onComplete
          });
        }
      }
      onDisconnectCancel(pathString, onComplete) {
        this.initConnection_();
        if (this.connected_) {
          this.sendOnDisconnect_("oc", pathString, null, onComplete);
        } else {
          this.onDisconnectRequestQueue_.push({
            pathString,
            action: "oc",
            data: null,
            onComplete
          });
        }
      }
      sendOnDisconnect_(action, pathString, data, onComplete) {
        const request = {
          /*path*/
          p: pathString,
          /*data*/
          d: data
        };
        this.log_("onDisconnect " + action, request);
        this.sendRequest(action, request, (response) => {
          if (onComplete) {
            setTimeout(() => {
              onComplete(response[
                /*status*/
                "s"
              ], response[
                /* data */
                "d"
              ]);
            }, Math.floor(0));
          }
        });
      }
      put(pathString, data, onComplete, hash) {
        this.putInternal("p", pathString, data, onComplete, hash);
      }
      merge(pathString, data, onComplete, hash) {
        this.putInternal("m", pathString, data, onComplete, hash);
      }
      putInternal(action, pathString, data, onComplete, hash) {
        this.initConnection_();
        const request = {
          /*path*/
          p: pathString,
          /*data*/
          d: data
        };
        if (hash !== void 0) {
          request[
            /*hash*/
            "h"
          ] = hash;
        }
        this.outstandingPuts_.push({
          action,
          request,
          onComplete
        });
        this.outstandingPutCount_++;
        const index = this.outstandingPuts_.length - 1;
        if (this.connected_) {
          this.sendPut_(index);
        } else {
          this.log_("Buffering put: " + pathString);
        }
      }
      sendPut_(index) {
        const action = this.outstandingPuts_[index].action;
        const request = this.outstandingPuts_[index].request;
        const onComplete = this.outstandingPuts_[index].onComplete;
        this.outstandingPuts_[index].queued = this.connected_;
        this.sendRequest(action, request, (message) => {
          this.log_(action + " response", message);
          delete this.outstandingPuts_[index];
          this.outstandingPutCount_--;
          if (this.outstandingPutCount_ === 0) {
            this.outstandingPuts_ = [];
          }
          if (onComplete) {
            onComplete(message[
              /*status*/
              "s"
            ], message[
              /* data */
              "d"
            ]);
          }
        });
      }
      reportStats(stats) {
        if (this.connected_) {
          const request = {
            /*counters*/
            c: stats
          };
          this.log_("reportStats", request);
          this.sendRequest(
            /*stats*/
            "s",
            request,
            (result) => {
              const status = result[
                /*status*/
                "s"
              ];
              if (status !== "ok") {
                const errorReason = result[
                  /* data */
                  "d"
                ];
                this.log_("reportStats", "Error sending stats: " + errorReason);
              }
            }
          );
        }
      }
      onDataMessage_(message) {
        if ("r" in message) {
          this.log_("from server: " + stringify(message));
          const reqNum = message["r"];
          const onResponse = this.requestCBHash_[reqNum];
          if (onResponse) {
            delete this.requestCBHash_[reqNum];
            onResponse(message[
              /*body*/
              "b"
            ]);
          }
        } else if ("error" in message) {
          throw "A server-side error has occurred: " + message["error"];
        } else if ("a" in message) {
          this.onDataPush_(message["a"], message["b"]);
        }
      }
      onDataPush_(action, body) {
        this.log_("handleServerMessage", action, body);
        if (action === "d") {
          this.onDataUpdate_(
            body[
              /*path*/
              "p"
            ],
            body[
              /*data*/
              "d"
            ],
            /*isMerge*/
            false,
            body["t"]
          );
        } else if (action === "m") {
          this.onDataUpdate_(
            body[
              /*path*/
              "p"
            ],
            body[
              /*data*/
              "d"
            ],
            /*isMerge=*/
            true,
            body["t"]
          );
        } else if (action === "c") {
          this.onListenRevoked_(body[
            /*path*/
            "p"
          ], body[
            /*query*/
            "q"
          ]);
        } else if (action === "ac") {
          this.onAuthRevoked_(body[
            /*status code*/
            "s"
          ], body[
            /* explanation */
            "d"
          ]);
        } else if (action === "apc") {
          this.onAppCheckRevoked_(body[
            /*status code*/
            "s"
          ], body[
            /* explanation */
            "d"
          ]);
        } else if (action === "sd") {
          this.onSecurityDebugPacket_(body);
        } else {
          error("Unrecognized action received from server: " + stringify(action) + "\nAre you using the latest client?");
        }
      }
      onReady_(timestamp, sessionId) {
        this.log_("connection ready");
        this.connected_ = true;
        this.lastConnectionEstablishedTime_ = (/* @__PURE__ */ new Date()).getTime();
        this.handleTimestamp_(timestamp);
        this.lastSessionId = sessionId;
        if (this.firstConnection_) {
          this.sendConnectStats_();
        }
        this.restoreState_();
        this.firstConnection_ = false;
        this.onConnectStatus_(true);
      }
      scheduleConnect_(timeout) {
        assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
        if (this.establishConnectionTimer_) {
          clearTimeout(this.establishConnectionTimer_);
        }
        this.establishConnectionTimer_ = setTimeout(() => {
          this.establishConnectionTimer_ = null;
          this.establishConnection_();
        }, Math.floor(timeout));
      }
      initConnection_() {
        if (!this.realtime_ && this.firstConnection_) {
          this.scheduleConnect_(0);
        }
      }
      onVisible_(visible) {
        if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {
          this.log_("Window became visible.  Reducing delay.");
          this.reconnectDelay_ = RECONNECT_MIN_DELAY;
          if (!this.realtime_) {
            this.scheduleConnect_(0);
          }
        }
        this.visible_ = visible;
      }
      onOnline_(online) {
        if (online) {
          this.log_("Browser went online.");
          this.reconnectDelay_ = RECONNECT_MIN_DELAY;
          if (!this.realtime_) {
            this.scheduleConnect_(0);
          }
        } else {
          this.log_("Browser went offline.  Killing connection.");
          if (this.realtime_) {
            this.realtime_.close();
          }
        }
      }
      onRealtimeDisconnect_() {
        this.log_("data client disconnected");
        this.connected_ = false;
        this.realtime_ = null;
        this.cancelSentTransactions_();
        this.requestCBHash_ = {};
        if (this.shouldReconnect_()) {
          if (!this.visible_) {
            this.log_("Window isn't visible.  Delaying reconnect.");
            this.reconnectDelay_ = this.maxReconnectDelay_;
            this.lastConnectionAttemptTime_ = (/* @__PURE__ */ new Date()).getTime();
          } else if (this.lastConnectionEstablishedTime_) {
            const timeSinceLastConnectSucceeded = (/* @__PURE__ */ new Date()).getTime() - this.lastConnectionEstablishedTime_;
            if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            }
            this.lastConnectionEstablishedTime_ = null;
          }
          const timeSinceLastConnectAttempt = (/* @__PURE__ */ new Date()).getTime() - this.lastConnectionAttemptTime_;
          let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
          reconnectDelay = Math.random() * reconnectDelay;
          this.log_("Trying to reconnect in " + reconnectDelay + "ms");
          this.scheduleConnect_(reconnectDelay);
          this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
        }
        this.onConnectStatus_(false);
      }
      establishConnection_() {
        return __async(this, null, function* () {
          if (this.shouldReconnect_()) {
            this.log_("Making a connection attempt");
            this.lastConnectionAttemptTime_ = (/* @__PURE__ */ new Date()).getTime();
            this.lastConnectionEstablishedTime_ = null;
            const onDataMessage = this.onDataMessage_.bind(this);
            const onReady = this.onReady_.bind(this);
            const onDisconnect2 = this.onRealtimeDisconnect_.bind(this);
            const connId = this.id + ":" + PersistentConnection.nextConnectionId_++;
            const lastSessionId = this.lastSessionId;
            let canceled = false;
            let connection = null;
            const closeFn = function() {
              if (connection) {
                connection.close();
              } else {
                canceled = true;
                onDisconnect2();
              }
            };
            const sendRequestFn = function(msg) {
              assert(connection, "sendRequest call when we're not connected not allowed.");
              connection.sendRequest(msg);
            };
            this.realtime_ = {
              close: closeFn,
              sendRequest: sendRequestFn
            };
            const forceRefresh = this.forceTokenRefresh_;
            this.forceTokenRefresh_ = false;
            try {
              const [authToken, appCheckToken] = yield Promise.all([
                this.authTokenProvider_.getToken(forceRefresh),
                this.appCheckTokenProvider_.getToken(forceRefresh)
              ]);
              if (!canceled) {
                log("getToken() completed. Creating connection.");
                this.authToken_ = authToken && authToken.accessToken;
                this.appCheckToken_ = appCheckToken && appCheckToken.token;
                connection = new Connection(
                  connId,
                  this.repoInfo_,
                  this.applicationId_,
                  this.appCheckToken_,
                  this.authToken_,
                  onDataMessage,
                  onReady,
                  onDisconnect2,
                  /* onKill= */
                  (reason) => {
                    warn(reason + " (" + this.repoInfo_.toString() + ")");
                    this.interrupt(SERVER_KILL_INTERRUPT_REASON);
                  },
                  lastSessionId
                );
              } else {
                log("getToken() completed but was canceled");
              }
            } catch (error2) {
              this.log_("Failed to get token: " + error2);
              if (!canceled) {
                if (this.repoInfo_.nodeAdmin) {
                  warn(error2);
                }
                closeFn();
              }
            }
          }
        });
      }
      interrupt(reason) {
        log("Interrupting connection for reason: " + reason);
        this.interruptReasons_[reason] = true;
        if (this.realtime_) {
          this.realtime_.close();
        } else {
          if (this.establishConnectionTimer_) {
            clearTimeout(this.establishConnectionTimer_);
            this.establishConnectionTimer_ = null;
          }
          if (this.connected_) {
            this.onRealtimeDisconnect_();
          }
        }
      }
      resume(reason) {
        log("Resuming connection for reason: " + reason);
        delete this.interruptReasons_[reason];
        if (isEmpty$1(this.interruptReasons_)) {
          this.reconnectDelay_ = RECONNECT_MIN_DELAY;
          if (!this.realtime_) {
            this.scheduleConnect_(0);
          }
        }
      }
      handleTimestamp_(timestamp) {
        const delta = timestamp - (/* @__PURE__ */ new Date()).getTime();
        this.onServerInfoUpdate_({ serverTimeOffset: delta });
      }
      cancelSentTransactions_() {
        for (let i = 0; i < this.outstandingPuts_.length; i++) {
          const put = this.outstandingPuts_[i];
          if (put && /*hash*/
          "h" in put.request && put.queued) {
            if (put.onComplete) {
              put.onComplete("disconnect");
            }
            delete this.outstandingPuts_[i];
            this.outstandingPutCount_--;
          }
        }
        if (this.outstandingPutCount_ === 0) {
          this.outstandingPuts_ = [];
        }
      }
      onListenRevoked_(pathString, query2) {
        let queryId;
        if (!query2) {
          queryId = "default";
        } else {
          queryId = query2.map((q2) => ObjectToUniqueKey(q2)).join("$");
        }
        const listen = this.removeListen_(pathString, queryId);
        if (listen && listen.onComplete) {
          listen.onComplete("permission_denied");
        }
      }
      removeListen_(pathString, queryId) {
        const normalizedPathString = new Path(pathString).toString();
        let listen;
        if (this.listens.has(normalizedPathString)) {
          const map2 = this.listens.get(normalizedPathString);
          listen = map2.get(queryId);
          map2.delete(queryId);
          if (map2.size === 0) {
            this.listens.delete(normalizedPathString);
          }
        } else {
          listen = void 0;
        }
        return listen;
      }
      onAuthRevoked_(statusCode, explanation) {
        log("Auth token revoked: " + statusCode + "/" + explanation);
        this.authToken_ = null;
        this.forceTokenRefresh_ = true;
        this.realtime_.close();
        if (statusCode === "invalid_token" || statusCode === "permission_denied") {
          this.invalidAuthTokenCount_++;
          if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
            this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
            this.authTokenProvider_.notifyForInvalidToken();
          }
        }
      }
      onAppCheckRevoked_(statusCode, explanation) {
        log("App check token revoked: " + statusCode + "/" + explanation);
        this.appCheckToken_ = null;
        this.forceTokenRefresh_ = true;
        if (statusCode === "invalid_token" || statusCode === "permission_denied") {
          this.invalidAppCheckTokenCount_++;
          if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
            this.appCheckTokenProvider_.notifyForInvalidToken();
          }
        }
      }
      onSecurityDebugPacket_(body) {
        if (this.securityDebugCallback_) {
          this.securityDebugCallback_(body);
        } else {
          if ("msg" in body) {
            console.log("FIREBASE: " + body["msg"].replace("\n", "\nFIREBASE: "));
          }
        }
      }
      restoreState_() {
        this.tryAuth();
        this.tryAppCheck();
        for (const queries of this.listens.values()) {
          for (const listenSpec of queries.values()) {
            this.sendListen_(listenSpec);
          }
        }
        for (let i = 0; i < this.outstandingPuts_.length; i++) {
          if (this.outstandingPuts_[i]) {
            this.sendPut_(i);
          }
        }
        while (this.onDisconnectRequestQueue_.length) {
          const request = this.onDisconnectRequestQueue_.shift();
          this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
        }
        for (let i = 0; i < this.outstandingGets_.length; i++) {
          if (this.outstandingGets_[i]) {
            this.sendGet_(i);
          }
        }
      }
      /**
       * Sends client stats for first connection
       */
      sendConnectStats_() {
        const stats = {};
        let clientName = "js";
        stats["sdk." + clientName + "." + SDK_VERSION.replace(/\./g, "-")] = 1;
        if (isMobileCordova()) {
          stats["framework.cordova"] = 1;
        } else if (isReactNative()) {
          stats["framework.reactnative"] = 1;
        }
        this.reportStats(stats);
      }
      shouldReconnect_() {
        const online = OnlineMonitor.getInstance().currentlyOnline();
        return isEmpty$1(this.interruptReasons_) && online;
      }
    }
    PersistentConnection.nextPersistentConnectionId_ = 0;
    PersistentConnection.nextConnectionId_ = 0;
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class NamedNode {
      constructor(name2, node) {
        this.name = name2;
        this.node = node;
      }
      static Wrap(name2, node) {
        return new NamedNode(name2, node);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Index {
      /**
       * @returns A standalone comparison function for
       * this index
       */
      getCompare() {
        return this.compare.bind(this);
      }
      /**
       * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
       * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
       *
       *
       * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode
       */
      indexedValueChanged(oldNode, newNode) {
        const oldWrapped = new NamedNode(MIN_NAME, oldNode);
        const newWrapped = new NamedNode(MIN_NAME, newNode);
        return this.compare(oldWrapped, newWrapped) !== 0;
      }
      /**
       * @returns a node wrapper that will sort equal to or less than
       * any other node wrapper, using this index
       */
      minPost() {
        return NamedNode.MIN;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let __EMPTY_NODE;
    class KeyIndex extends Index {
      static get __EMPTY_NODE() {
        return __EMPTY_NODE;
      }
      static set __EMPTY_NODE(val) {
        __EMPTY_NODE = val;
      }
      compare(a, b2) {
        return nameCompare(a.name, b2.name);
      }
      isDefinedOn(node) {
        throw assertionError("KeyIndex.isDefinedOn not expected to be called.");
      }
      indexedValueChanged(oldNode, newNode) {
        return false;
      }
      minPost() {
        return NamedNode.MIN;
      }
      maxPost() {
        return new NamedNode(MAX_NAME, __EMPTY_NODE);
      }
      makePost(indexValue, name2) {
        assert(typeof indexValue === "string", "KeyIndex indexValue must always be a string.");
        return new NamedNode(indexValue, __EMPTY_NODE);
      }
      /**
       * @returns String representation for inclusion in a query spec
       */
      toString() {
        return ".key";
      }
    }
    const KEY_INDEX = new KeyIndex();
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class SortedMapIterator {
      /**
       * @param node - Node to iterate.
       * @param isReverse_ - Whether or not to iterate in reverse
       */
      constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {
        this.isReverse_ = isReverse_;
        this.resultGenerator_ = resultGenerator_;
        this.nodeStack_ = [];
        let cmp = 1;
        while (!node.isEmpty()) {
          node = node;
          cmp = startKey ? comparator(node.key, startKey) : 1;
          if (isReverse_) {
            cmp *= -1;
          }
          if (cmp < 0) {
            if (this.isReverse_) {
              node = node.left;
            } else {
              node = node.right;
            }
          } else if (cmp === 0) {
            this.nodeStack_.push(node);
            break;
          } else {
            this.nodeStack_.push(node);
            if (this.isReverse_) {
              node = node.right;
            } else {
              node = node.left;
            }
          }
        }
      }
      getNext() {
        if (this.nodeStack_.length === 0) {
          return null;
        }
        let node = this.nodeStack_.pop();
        let result;
        if (this.resultGenerator_) {
          result = this.resultGenerator_(node.key, node.value);
        } else {
          result = { key: node.key, value: node.value };
        }
        if (this.isReverse_) {
          node = node.left;
          while (!node.isEmpty()) {
            this.nodeStack_.push(node);
            node = node.right;
          }
        } else {
          node = node.right;
          while (!node.isEmpty()) {
            this.nodeStack_.push(node);
            node = node.left;
          }
        }
        return result;
      }
      hasNext() {
        return this.nodeStack_.length > 0;
      }
      peek() {
        if (this.nodeStack_.length === 0) {
          return null;
        }
        const node = this.nodeStack_[this.nodeStack_.length - 1];
        if (this.resultGenerator_) {
          return this.resultGenerator_(node.key, node.value);
        } else {
          return { key: node.key, value: node.value };
        }
      }
    }
    class LLRBNode {
      /**
       * @param key - Key associated with this node.
       * @param value - Value associated with this node.
       * @param color - Whether this node is red.
       * @param left - Left child.
       * @param right - Right child.
       */
      constructor(key, value, color, left, right) {
        this.key = key;
        this.value = value;
        this.color = color != null ? color : LLRBNode.RED;
        this.left = left != null ? left : SortedMap.EMPTY_NODE;
        this.right = right != null ? right : SortedMap.EMPTY_NODE;
      }
      /**
       * Returns a copy of the current node, optionally replacing pieces of it.
       *
       * @param key - New key for the node, or null.
       * @param value - New value for the node, or null.
       * @param color - New color for the node, or null.
       * @param left - New left child for the node, or null.
       * @param right - New right child for the node, or null.
       * @returns The node copy.
       */
      copy(key, value, color, left, right) {
        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
      }
      /**
       * @returns The total number of nodes in the tree.
       */
      count() {
        return this.left.count() + 1 + this.right.count();
      }
      /**
       * @returns True if the tree is empty.
       */
      isEmpty() {
        return false;
      }
      /**
       * Traverses the tree in key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       *   node.  If it returns true, traversal is aborted.
       * @returns The first truthy value returned by action, or the last falsey
       *   value returned by action
       */
      inorderTraversal(action) {
        return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);
      }
      /**
       * Traverses the tree in reverse key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @returns True if traversal was aborted.
       */
      reverseTraversal(action) {
        return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
      }
      /**
       * @returns The minimum node in the tree.
       */
      min_() {
        if (this.left.isEmpty()) {
          return this;
        } else {
          return this.left.min_();
        }
      }
      /**
       * @returns The maximum key in the tree.
       */
      minKey() {
        return this.min_().key;
      }
      /**
       * @returns The maximum key in the tree.
       */
      maxKey() {
        if (this.right.isEmpty()) {
          return this.key;
        } else {
          return this.right.maxKey();
        }
      }
      /**
       * @param key - Key to insert.
       * @param value - Value to insert.
       * @param comparator - Comparator.
       * @returns New tree, with the key/value added.
       */
      insert(key, value, comparator) {
        let n2 = this;
        const cmp = comparator(key, n2.key);
        if (cmp < 0) {
          n2 = n2.copy(null, null, null, n2.left.insert(key, value, comparator), null);
        } else if (cmp === 0) {
          n2 = n2.copy(null, value, null, null, null);
        } else {
          n2 = n2.copy(null, null, null, null, n2.right.insert(key, value, comparator));
        }
        return n2.fixUp_();
      }
      /**
       * @returns New tree, with the minimum key removed.
       */
      removeMin_() {
        if (this.left.isEmpty()) {
          return SortedMap.EMPTY_NODE;
        }
        let n2 = this;
        if (!n2.left.isRed_() && !n2.left.left.isRed_()) {
          n2 = n2.moveRedLeft_();
        }
        n2 = n2.copy(null, null, null, n2.left.removeMin_(), null);
        return n2.fixUp_();
      }
      /**
       * @param key - The key of the item to remove.
       * @param comparator - Comparator.
       * @returns New tree, with the specified item removed.
       */
      remove(key, comparator) {
        let n2, smallest;
        n2 = this;
        if (comparator(key, n2.key) < 0) {
          if (!n2.left.isEmpty() && !n2.left.isRed_() && !n2.left.left.isRed_()) {
            n2 = n2.moveRedLeft_();
          }
          n2 = n2.copy(null, null, null, n2.left.remove(key, comparator), null);
        } else {
          if (n2.left.isRed_()) {
            n2 = n2.rotateRight_();
          }
          if (!n2.right.isEmpty() && !n2.right.isRed_() && !n2.right.left.isRed_()) {
            n2 = n2.moveRedRight_();
          }
          if (comparator(key, n2.key) === 0) {
            if (n2.right.isEmpty()) {
              return SortedMap.EMPTY_NODE;
            } else {
              smallest = n2.right.min_();
              n2 = n2.copy(smallest.key, smallest.value, null, null, n2.right.removeMin_());
            }
          }
          n2 = n2.copy(null, null, null, null, n2.right.remove(key, comparator));
        }
        return n2.fixUp_();
      }
      /**
       * @returns Whether this is a RED node.
       */
      isRed_() {
        return this.color;
      }
      /**
       * @returns New tree after performing any needed rotations.
       */
      fixUp_() {
        let n2 = this;
        if (n2.right.isRed_() && !n2.left.isRed_()) {
          n2 = n2.rotateLeft_();
        }
        if (n2.left.isRed_() && n2.left.left.isRed_()) {
          n2 = n2.rotateRight_();
        }
        if (n2.left.isRed_() && n2.right.isRed_()) {
          n2 = n2.colorFlip_();
        }
        return n2;
      }
      /**
       * @returns New tree, after moveRedLeft.
       */
      moveRedLeft_() {
        let n2 = this.colorFlip_();
        if (n2.right.left.isRed_()) {
          n2 = n2.copy(null, null, null, null, n2.right.rotateRight_());
          n2 = n2.rotateLeft_();
          n2 = n2.colorFlip_();
        }
        return n2;
      }
      /**
       * @returns New tree, after moveRedRight.
       */
      moveRedRight_() {
        let n2 = this.colorFlip_();
        if (n2.left.left.isRed_()) {
          n2 = n2.rotateRight_();
          n2 = n2.colorFlip_();
        }
        return n2;
      }
      /**
       * @returns New tree, after rotateLeft.
       */
      rotateLeft_() {
        const nl2 = this.copy(null, null, LLRBNode.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, nl2, null);
      }
      /**
       * @returns New tree, after rotateRight.
       */
      rotateRight_() {
        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, nr);
      }
      /**
       * @returns Newt ree, after colorFlip.
       */
      colorFlip_() {
        const left = this.left.copy(null, null, !this.left.color, null, null);
        const right = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, left, right);
      }
      /**
       * For testing.
       *
       * @returns True if all is well.
       */
      checkMaxDepth_() {
        const blackDepth = this.check_();
        return Math.pow(2, blackDepth) <= this.count() + 1;
      }
      check_() {
        if (this.isRed_() && this.left.isRed_()) {
          throw new Error("Red node has red child(" + this.key + "," + this.value + ")");
        }
        if (this.right.isRed_()) {
          throw new Error("Right child of (" + this.key + "," + this.value + ") is red");
        }
        const blackDepth = this.left.check_();
        if (blackDepth !== this.right.check_()) {
          throw new Error("Black depths differ");
        } else {
          return blackDepth + (this.isRed_() ? 0 : 1);
        }
      }
    }
    LLRBNode.RED = true;
    LLRBNode.BLACK = false;
    class LLRBEmptyNode {
      /**
       * Returns a copy of the current node.
       *
       * @returns The node copy.
       */
      copy(key, value, color, left, right) {
        return this;
      }
      /**
       * Returns a copy of the tree, with the specified key/value added.
       *
       * @param key - Key to be added.
       * @param value - Value to be added.
       * @param comparator - Comparator.
       * @returns New tree, with item added.
       */
      insert(key, value, comparator) {
        return new LLRBNode(key, value, null);
      }
      /**
       * Returns a copy of the tree, with the specified key removed.
       *
       * @param key - The key to remove.
       * @param comparator - Comparator.
       * @returns New tree, with item removed.
       */
      remove(key, comparator) {
        return this;
      }
      /**
       * @returns The total number of nodes in the tree.
       */
      count() {
        return 0;
      }
      /**
       * @returns True if the tree is empty.
       */
      isEmpty() {
        return true;
      }
      /**
       * Traverses the tree in key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @returns True if traversal was aborted.
       */
      inorderTraversal(action) {
        return false;
      }
      /**
       * Traverses the tree in reverse key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @returns True if traversal was aborted.
       */
      reverseTraversal(action) {
        return false;
      }
      minKey() {
        return null;
      }
      maxKey() {
        return null;
      }
      check_() {
        return 0;
      }
      /**
       * @returns Whether this node is red.
       */
      isRed_() {
        return false;
      }
    }
    class SortedMap {
      /**
       * @param comparator_ - Key comparator.
       * @param root_ - Optional root node for the map.
       */
      constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {
        this.comparator_ = comparator_;
        this.root_ = root_;
      }
      /**
       * Returns a copy of the map, with the specified key/value added or replaced.
       * (TODO: We should perhaps rename this method to 'put')
       *
       * @param key - Key to be added.
       * @param value - Value to be added.
       * @returns New map, with item added.
       */
      insert(key, value) {
        return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
      }
      /**
       * Returns a copy of the map, with the specified key removed.
       *
       * @param key - The key to remove.
       * @returns New map, with item removed.
       */
      remove(key) {
        return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
      }
      /**
       * Returns the value of the node with the given key, or null.
       *
       * @param key - The key to look up.
       * @returns The value of the node with the given key, or null if the
       * key doesn't exist.
       */
      get(key) {
        let cmp;
        let node = this.root_;
        while (!node.isEmpty()) {
          cmp = this.comparator_(key, node.key);
          if (cmp === 0) {
            return node.value;
          } else if (cmp < 0) {
            node = node.left;
          } else if (cmp > 0) {
            node = node.right;
          }
        }
        return null;
      }
      /**
       * Returns the key of the item *before* the specified key, or null if key is the first item.
       * @param key - The key to find the predecessor of
       * @returns The predecessor key.
       */
      getPredecessorKey(key) {
        let cmp, node = this.root_, rightParent = null;
        while (!node.isEmpty()) {
          cmp = this.comparator_(key, node.key);
          if (cmp === 0) {
            if (!node.left.isEmpty()) {
              node = node.left;
              while (!node.right.isEmpty()) {
                node = node.right;
              }
              return node.key;
            } else if (rightParent) {
              return rightParent.key;
            } else {
              return null;
            }
          } else if (cmp < 0) {
            node = node.left;
          } else if (cmp > 0) {
            rightParent = node;
            node = node.right;
          }
        }
        throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?");
      }
      /**
       * @returns True if the map is empty.
       */
      isEmpty() {
        return this.root_.isEmpty();
      }
      /**
       * @returns The total number of nodes in the map.
       */
      count() {
        return this.root_.count();
      }
      /**
       * @returns The minimum key in the map.
       */
      minKey() {
        return this.root_.minKey();
      }
      /**
       * @returns The maximum key in the map.
       */
      maxKey() {
        return this.root_.maxKey();
      }
      /**
       * Traverses the map in key order and calls the specified action function
       * for each key/value pair.
       *
       * @param action - Callback function to be called
       * for each key/value pair.  If action returns true, traversal is aborted.
       * @returns The first truthy value returned by action, or the last falsey
       *   value returned by action
       */
      inorderTraversal(action) {
        return this.root_.inorderTraversal(action);
      }
      /**
       * Traverses the map in reverse key order and calls the specified action function
       * for each key/value pair.
       *
       * @param action - Callback function to be called
       * for each key/value pair.  If action returns true, traversal is aborted.
       * @returns True if the traversal was aborted.
       */
      reverseTraversal(action) {
        return this.root_.reverseTraversal(action);
      }
      /**
       * Returns an iterator over the SortedMap.
       * @returns The iterator.
       */
      getIterator(resultGenerator) {
        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
      }
      getIteratorFrom(key, resultGenerator) {
        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
      }
      getReverseIteratorFrom(key, resultGenerator) {
        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
      }
      getReverseIterator(resultGenerator) {
        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
      }
    }
    SortedMap.EMPTY_NODE = new LLRBEmptyNode();
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function NAME_ONLY_COMPARATOR(left, right) {
      return nameCompare(left.name, right.name);
    }
    function NAME_COMPARATOR(left, right) {
      return nameCompare(left, right);
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let MAX_NODE$2;
    function setMaxNode$1(val) {
      MAX_NODE$2 = val;
    }
    const priorityHashText = function(priority) {
      if (typeof priority === "number") {
        return "number:" + doubleToIEEE754String(priority);
      } else {
        return "string:" + priority;
      }
    };
    const validatePriorityNode = function(priorityNode) {
      if (priorityNode.isLeafNode()) {
        const val = priorityNode.val();
        assert(typeof val === "string" || typeof val === "number" || typeof val === "object" && contains(val, ".sv"), "Priority must be a string or number.");
      } else {
        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), "priority of unexpected type.");
      }
      assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
    };
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let __childrenNodeConstructor;
    class LeafNode {
      /**
       * @param value_ - The value to store in this leaf node. The object type is
       * possible in the event of a deferred value
       * @param priorityNode_ - The priority of this node.
       */
      constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
        this.value_ = value_;
        this.priorityNode_ = priorityNode_;
        this.lazyHash_ = null;
        assert(this.value_ !== void 0 && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
        validatePriorityNode(this.priorityNode_);
      }
      static set __childrenNodeConstructor(val) {
        __childrenNodeConstructor = val;
      }
      static get __childrenNodeConstructor() {
        return __childrenNodeConstructor;
      }
      /** @inheritDoc */
      isLeafNode() {
        return true;
      }
      /** @inheritDoc */
      getPriority() {
        return this.priorityNode_;
      }
      /** @inheritDoc */
      updatePriority(newPriorityNode) {
        return new LeafNode(this.value_, newPriorityNode);
      }
      /** @inheritDoc */
      getImmediateChild(childName) {
        if (childName === ".priority") {
          return this.priorityNode_;
        } else {
          return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
        }
      }
      /** @inheritDoc */
      getChild(path) {
        if (pathIsEmpty(path)) {
          return this;
        } else if (pathGetFront(path) === ".priority") {
          return this.priorityNode_;
        } else {
          return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
        }
      }
      hasChild() {
        return false;
      }
      /** @inheritDoc */
      getPredecessorChildName(childName, childNode) {
        return null;
      }
      /** @inheritDoc */
      updateImmediateChild(childName, newChildNode) {
        if (childName === ".priority") {
          return this.updatePriority(newChildNode);
        } else if (newChildNode.isEmpty() && childName !== ".priority") {
          return this;
        } else {
          return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
        }
      }
      /** @inheritDoc */
      updateChild(path, newChildNode) {
        const front = pathGetFront(path);
        if (front === null) {
          return newChildNode;
        } else if (newChildNode.isEmpty() && front !== ".priority") {
          return this;
        } else {
          assert(front !== ".priority" || pathGetLength(path) === 1, ".priority must be the last token in a path");
          return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));
        }
      }
      /** @inheritDoc */
      isEmpty() {
        return false;
      }
      /** @inheritDoc */
      numChildren() {
        return 0;
      }
      /** @inheritDoc */
      forEachChild(index, action) {
        return false;
      }
      val(exportFormat) {
        if (exportFormat && !this.getPriority().isEmpty()) {
          return {
            ".value": this.getValue(),
            ".priority": this.getPriority().val()
          };
        } else {
          return this.getValue();
        }
      }
      /** @inheritDoc */
      hash() {
        if (this.lazyHash_ === null) {
          let toHash = "";
          if (!this.priorityNode_.isEmpty()) {
            toHash += "priority:" + priorityHashText(this.priorityNode_.val()) + ":";
          }
          const type = typeof this.value_;
          toHash += type + ":";
          if (type === "number") {
            toHash += doubleToIEEE754String(this.value_);
          } else {
            toHash += this.value_;
          }
          this.lazyHash_ = sha1(toHash);
        }
        return this.lazyHash_;
      }
      /**
       * Returns the value of the leaf node.
       * @returns The value of the node.
       */
      getValue() {
        return this.value_;
      }
      compareTo(other) {
        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
          return 1;
        } else if (other instanceof LeafNode.__childrenNodeConstructor) {
          return -1;
        } else {
          assert(other.isLeafNode(), "Unknown node type");
          return this.compareToLeafNode_(other);
        }
      }
      /**
       * Comparison specifically for two leaf nodes
       */
      compareToLeafNode_(otherLeaf) {
        const otherLeafType = typeof otherLeaf.value_;
        const thisLeafType = typeof this.value_;
        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
        assert(otherIndex >= 0, "Unknown leaf type: " + otherLeafType);
        assert(thisIndex >= 0, "Unknown leaf type: " + thisLeafType);
        if (otherIndex === thisIndex) {
          if (thisLeafType === "object") {
            return 0;
          } else {
            if (this.value_ < otherLeaf.value_) {
              return -1;
            } else if (this.value_ === otherLeaf.value_) {
              return 0;
            } else {
              return 1;
            }
          }
        } else {
          return thisIndex - otherIndex;
        }
      }
      withIndex() {
        return this;
      }
      isIndexed() {
        return true;
      }
      equals(other) {
        if (other === this) {
          return true;
        } else if (other.isLeafNode()) {
          const otherLeaf = other;
          return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);
        } else {
          return false;
        }
      }
    }
    LeafNode.VALUE_TYPE_ORDER = ["object", "boolean", "number", "string"];
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let nodeFromJSON$1;
    let MAX_NODE$1;
    function setNodeFromJSON(val) {
      nodeFromJSON$1 = val;
    }
    function setMaxNode(val) {
      MAX_NODE$1 = val;
    }
    class PriorityIndex extends Index {
      compare(a, b2) {
        const aPriority = a.node.getPriority();
        const bPriority = b2.node.getPriority();
        const indexCmp = aPriority.compareTo(bPriority);
        if (indexCmp === 0) {
          return nameCompare(a.name, b2.name);
        } else {
          return indexCmp;
        }
      }
      isDefinedOn(node) {
        return !node.getPriority().isEmpty();
      }
      indexedValueChanged(oldNode, newNode) {
        return !oldNode.getPriority().equals(newNode.getPriority());
      }
      minPost() {
        return NamedNode.MIN;
      }
      maxPost() {
        return new NamedNode(MAX_NAME, new LeafNode("[PRIORITY-POST]", MAX_NODE$1));
      }
      makePost(indexValue, name2) {
        const priorityNode = nodeFromJSON$1(indexValue);
        return new NamedNode(name2, new LeafNode("[PRIORITY-POST]", priorityNode));
      }
      /**
       * @returns String representation for inclusion in a query spec
       */
      toString() {
        return ".priority";
      }
    }
    const PRIORITY_INDEX = new PriorityIndex();
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const LOG_2 = Math.log(2);
    class Base12Num {
      constructor(length) {
        const logBase2 = (num) => (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          parseInt(Math.log(num) / LOG_2, 10)
        );
        const bitMask = (bits) => parseInt(Array(bits + 1).join("1"), 2);
        this.count = logBase2(length + 1);
        this.current_ = this.count - 1;
        const mask = bitMask(this.count);
        this.bits_ = length + 1 & mask;
      }
      nextBitIsOne() {
        const result = !(this.bits_ & 1 << this.current_);
        this.current_--;
        return result;
      }
    }
    const buildChildSet = function(childList, cmp, keyFn, mapSortFn) {
      childList.sort(cmp);
      const buildBalancedTree = function(low, high) {
        const length = high - low;
        let namedNode;
        let key;
        if (length === 0) {
          return null;
        } else if (length === 1) {
          namedNode = childList[low];
          key = keyFn ? keyFn(namedNode) : namedNode;
          return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
        } else {
          const middle = parseInt(length / 2, 10) + low;
          const left = buildBalancedTree(low, middle);
          const right = buildBalancedTree(middle + 1, high);
          namedNode = childList[middle];
          key = keyFn ? keyFn(namedNode) : namedNode;
          return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
        }
      };
      const buildFrom12Array = function(base122) {
        let node = null;
        let root2 = null;
        let index = childList.length;
        const buildPennant = function(chunkSize, color) {
          const low = index - chunkSize;
          const high = index;
          index -= chunkSize;
          const childTree = buildBalancedTree(low + 1, high);
          const namedNode = childList[low];
          const key = keyFn ? keyFn(namedNode) : namedNode;
          attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
        };
        const attachPennant = function(pennant) {
          if (node) {
            node.left = pennant;
            node = pennant;
          } else {
            root2 = pennant;
            node = pennant;
          }
        };
        for (let i = 0; i < base122.count; ++i) {
          const isOne = base122.nextBitIsOne();
          const chunkSize = Math.pow(2, base122.count - (i + 1));
          if (isOne) {
            buildPennant(chunkSize, LLRBNode.BLACK);
          } else {
            buildPennant(chunkSize, LLRBNode.BLACK);
            buildPennant(chunkSize, LLRBNode.RED);
          }
        }
        return root2;
      };
      const base12 = new Base12Num(childList.length);
      const root = buildFrom12Array(base12);
      return new SortedMap(mapSortFn || cmp, root);
    };
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let _defaultIndexMap;
    const fallbackObject = {};
    class IndexMap {
      constructor(indexes_, indexSet_) {
        this.indexes_ = indexes_;
        this.indexSet_ = indexSet_;
      }
      /**
       * The default IndexMap for nodes without a priority
       */
      static get Default() {
        assert(fallbackObject && PRIORITY_INDEX, "ChildrenNode.ts has not been loaded");
        _defaultIndexMap = _defaultIndexMap || new IndexMap({ ".priority": fallbackObject }, { ".priority": PRIORITY_INDEX });
        return _defaultIndexMap;
      }
      get(indexKey) {
        const sortedMap = safeGet(this.indexes_, indexKey);
        if (!sortedMap) {
          throw new Error("No index defined for " + indexKey);
        }
        if (sortedMap instanceof SortedMap) {
          return sortedMap;
        } else {
          return null;
        }
      }
      hasIndex(indexDefinition) {
        return contains(this.indexSet_, indexDefinition.toString());
      }
      addIndex(indexDefinition, existingChildren) {
        assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
        const childList = [];
        let sawIndexedValue = false;
        const iter = existingChildren.getIterator(NamedNode.Wrap);
        let next = iter.getNext();
        while (next) {
          sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);
          childList.push(next);
          next = iter.getNext();
        }
        let newIndex;
        if (sawIndexedValue) {
          newIndex = buildChildSet(childList, indexDefinition.getCompare());
        } else {
          newIndex = fallbackObject;
        }
        const indexName = indexDefinition.toString();
        const newIndexSet = Object.assign({}, this.indexSet_);
        newIndexSet[indexName] = indexDefinition;
        const newIndexes = Object.assign({}, this.indexes_);
        newIndexes[indexName] = newIndex;
        return new IndexMap(newIndexes, newIndexSet);
      }
      /**
       * Ensure that this node is properly tracked in any indexes that we're maintaining
       */
      addToIndexes(namedNode, existingChildren) {
        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {
          const index = safeGet(this.indexSet_, indexName);
          assert(index, "Missing index implementation for " + indexName);
          if (indexedChildren === fallbackObject) {
            if (index.isDefinedOn(namedNode.node)) {
              const childList = [];
              const iter = existingChildren.getIterator(NamedNode.Wrap);
              let next = iter.getNext();
              while (next) {
                if (next.name !== namedNode.name) {
                  childList.push(next);
                }
                next = iter.getNext();
              }
              childList.push(namedNode);
              return buildChildSet(childList, index.getCompare());
            } else {
              return fallbackObject;
            }
          } else {
            const existingSnap = existingChildren.get(namedNode.name);
            let newChildren = indexedChildren;
            if (existingSnap) {
              newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
            }
            return newChildren.insert(namedNode, namedNode.node);
          }
        });
        return new IndexMap(newIndexes, this.indexSet_);
      }
      /**
       * Create a new IndexMap instance with the given value removed
       */
      removeFromIndexes(namedNode, existingChildren) {
        const newIndexes = map(this.indexes_, (indexedChildren) => {
          if (indexedChildren === fallbackObject) {
            return indexedChildren;
          } else {
            const existingSnap = existingChildren.get(namedNode.name);
            if (existingSnap) {
              return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
            } else {
              return indexedChildren;
            }
          }
        });
        return new IndexMap(newIndexes, this.indexSet_);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let EMPTY_NODE;
    class ChildrenNode {
      /**
       * @param children_ - List of children of this node..
       * @param priorityNode_ - The priority of this node (as a snapshot node).
       */
      constructor(children_, priorityNode_, indexMap_) {
        this.children_ = children_;
        this.priorityNode_ = priorityNode_;
        this.indexMap_ = indexMap_;
        this.lazyHash_ = null;
        if (this.priorityNode_) {
          validatePriorityNode(this.priorityNode_);
        }
        if (this.children_.isEmpty()) {
          assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), "An empty node cannot have a priority");
        }
      }
      static get EMPTY_NODE() {
        return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));
      }
      /** @inheritDoc */
      isLeafNode() {
        return false;
      }
      /** @inheritDoc */
      getPriority() {
        return this.priorityNode_ || EMPTY_NODE;
      }
      /** @inheritDoc */
      updatePriority(newPriorityNode) {
        if (this.children_.isEmpty()) {
          return this;
        } else {
          return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
        }
      }
      /** @inheritDoc */
      getImmediateChild(childName) {
        if (childName === ".priority") {
          return this.getPriority();
        } else {
          const child2 = this.children_.get(childName);
          return child2 === null ? EMPTY_NODE : child2;
        }
      }
      /** @inheritDoc */
      getChild(path) {
        const front = pathGetFront(path);
        if (front === null) {
          return this;
        }
        return this.getImmediateChild(front).getChild(pathPopFront(path));
      }
      /** @inheritDoc */
      hasChild(childName) {
        return this.children_.get(childName) !== null;
      }
      /** @inheritDoc */
      updateImmediateChild(childName, newChildNode) {
        assert(newChildNode, "We should always be passing snapshot nodes");
        if (childName === ".priority") {
          return this.updatePriority(newChildNode);
        } else {
          const namedNode = new NamedNode(childName, newChildNode);
          let newChildren, newIndexMap;
          if (newChildNode.isEmpty()) {
            newChildren = this.children_.remove(childName);
            newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
          } else {
            newChildren = this.children_.insert(childName, newChildNode);
            newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
          }
          const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
          return new ChildrenNode(newChildren, newPriority, newIndexMap);
        }
      }
      /** @inheritDoc */
      updateChild(path, newChildNode) {
        const front = pathGetFront(path);
        if (front === null) {
          return newChildNode;
        } else {
          assert(pathGetFront(path) !== ".priority" || pathGetLength(path) === 1, ".priority must be the last token in a path");
          const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);
          return this.updateImmediateChild(front, newImmediateChild);
        }
      }
      /** @inheritDoc */
      isEmpty() {
        return this.children_.isEmpty();
      }
      /** @inheritDoc */
      numChildren() {
        return this.children_.count();
      }
      /** @inheritDoc */
      val(exportFormat) {
        if (this.isEmpty()) {
          return null;
        }
        const obj = {};
        let numKeys = 0, maxKey = 0, allIntegerKeys = true;
        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {
          obj[key] = childNode.val(exportFormat);
          numKeys++;
          if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
            maxKey = Math.max(maxKey, Number(key));
          } else {
            allIntegerKeys = false;
          }
        });
        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
          const array = [];
          for (const key in obj) {
            array[key] = obj[key];
          }
          return array;
        } else {
          if (exportFormat && !this.getPriority().isEmpty()) {
            obj[".priority"] = this.getPriority().val();
          }
          return obj;
        }
      }
      /** @inheritDoc */
      hash() {
        if (this.lazyHash_ === null) {
          let toHash = "";
          if (!this.getPriority().isEmpty()) {
            toHash += "priority:" + priorityHashText(this.getPriority().val()) + ":";
          }
          this.forEachChild(PRIORITY_INDEX, (key, childNode) => {
            const childHash = childNode.hash();
            if (childHash !== "") {
              toHash += ":" + key + ":" + childHash;
            }
          });
          this.lazyHash_ = toHash === "" ? "" : sha1(toHash);
        }
        return this.lazyHash_;
      }
      /** @inheritDoc */
      getPredecessorChildName(childName, childNode, index) {
        const idx = this.resolveIndex_(index);
        if (idx) {
          const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
          return predecessor ? predecessor.name : null;
        } else {
          return this.children_.getPredecessorKey(childName);
        }
      }
      getFirstChildName(indexDefinition) {
        const idx = this.resolveIndex_(indexDefinition);
        if (idx) {
          const minKey = idx.minKey();
          return minKey && minKey.name;
        } else {
          return this.children_.minKey();
        }
      }
      getFirstChild(indexDefinition) {
        const minKey = this.getFirstChildName(indexDefinition);
        if (minKey) {
          return new NamedNode(minKey, this.children_.get(minKey));
        } else {
          return null;
        }
      }
      /**
       * Given an index, return the key name of the largest value we have, according to that index
       */
      getLastChildName(indexDefinition) {
        const idx = this.resolveIndex_(indexDefinition);
        if (idx) {
          const maxKey = idx.maxKey();
          return maxKey && maxKey.name;
        } else {
          return this.children_.maxKey();
        }
      }
      getLastChild(indexDefinition) {
        const maxKey = this.getLastChildName(indexDefinition);
        if (maxKey) {
          return new NamedNode(maxKey, this.children_.get(maxKey));
        } else {
          return null;
        }
      }
      forEachChild(index, action) {
        const idx = this.resolveIndex_(index);
        if (idx) {
          return idx.inorderTraversal((wrappedNode) => {
            return action(wrappedNode.name, wrappedNode.node);
          });
        } else {
          return this.children_.inorderTraversal(action);
        }
      }
      getIterator(indexDefinition) {
        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
      }
      getIteratorFrom(startPost, indexDefinition) {
        const idx = this.resolveIndex_(indexDefinition);
        if (idx) {
          return idx.getIteratorFrom(startPost, (key) => key);
        } else {
          const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
          let next = iterator.peek();
          while (next != null && indexDefinition.compare(next, startPost) < 0) {
            iterator.getNext();
            next = iterator.peek();
          }
          return iterator;
        }
      }
      getReverseIterator(indexDefinition) {
        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
      }
      getReverseIteratorFrom(endPost, indexDefinition) {
        const idx = this.resolveIndex_(indexDefinition);
        if (idx) {
          return idx.getReverseIteratorFrom(endPost, (key) => {
            return key;
          });
        } else {
          const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
          let next = iterator.peek();
          while (next != null && indexDefinition.compare(next, endPost) > 0) {
            iterator.getNext();
            next = iterator.peek();
          }
          return iterator;
        }
      }
      compareTo(other) {
        if (this.isEmpty()) {
          if (other.isEmpty()) {
            return 0;
          } else {
            return -1;
          }
        } else if (other.isLeafNode() || other.isEmpty()) {
          return 1;
        } else if (other === MAX_NODE) {
          return -1;
        } else {
          return 0;
        }
      }
      withIndex(indexDefinition) {
        if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {
          return this;
        } else {
          const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
          return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
        }
      }
      isIndexed(index) {
        return index === KEY_INDEX || this.indexMap_.hasIndex(index);
      }
      equals(other) {
        if (other === this) {
          return true;
        } else if (other.isLeafNode()) {
          return false;
        } else {
          const otherChildrenNode = other;
          if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
            return false;
          } else if (this.children_.count() === otherChildrenNode.children_.count()) {
            const thisIter = this.getIterator(PRIORITY_INDEX);
            const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
            let thisCurrent = thisIter.getNext();
            let otherCurrent = otherIter.getNext();
            while (thisCurrent && otherCurrent) {
              if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {
                return false;
              }
              thisCurrent = thisIter.getNext();
              otherCurrent = otherIter.getNext();
            }
            return thisCurrent === null && otherCurrent === null;
          } else {
            return false;
          }
        }
      }
      /**
       * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
       * instead.
       *
       */
      resolveIndex_(indexDefinition) {
        if (indexDefinition === KEY_INDEX) {
          return null;
        } else {
          return this.indexMap_.get(indexDefinition.toString());
        }
      }
    }
    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
    class MaxNode extends ChildrenNode {
      constructor() {
        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);
      }
      compareTo(other) {
        if (other === this) {
          return 0;
        } else {
          return 1;
        }
      }
      equals(other) {
        return other === this;
      }
      getPriority() {
        return this;
      }
      getImmediateChild(childName) {
        return ChildrenNode.EMPTY_NODE;
      }
      isEmpty() {
        return false;
      }
    }
    const MAX_NODE = new MaxNode();
    Object.defineProperties(NamedNode, {
      MIN: {
        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
      },
      MAX: {
        value: new NamedNode(MAX_NAME, MAX_NODE)
      }
    });
    KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
    LeafNode.__childrenNodeConstructor = ChildrenNode;
    setMaxNode$1(MAX_NODE);
    setMaxNode(MAX_NODE);
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const USE_HINZE = true;
    function nodeFromJSON(json, priority = null) {
      if (json === null) {
        return ChildrenNode.EMPTY_NODE;
      }
      if (typeof json === "object" && ".priority" in json) {
        priority = json[".priority"];
      }
      assert(priority === null || typeof priority === "string" || typeof priority === "number" || typeof priority === "object" && ".sv" in priority, "Invalid priority type found: " + typeof priority);
      if (typeof json === "object" && ".value" in json && json[".value"] !== null) {
        json = json[".value"];
      }
      if (typeof json !== "object" || ".sv" in json) {
        const jsonLeaf = json;
        return new LeafNode(jsonLeaf, nodeFromJSON(priority));
      }
      if (!(json instanceof Array) && USE_HINZE) {
        const children = [];
        let childrenHavePriority = false;
        const hinzeJsonObj = json;
        each(hinzeJsonObj, (key, child2) => {
          if (key.substring(0, 1) !== ".") {
            const childNode = nodeFromJSON(child2);
            if (!childNode.isEmpty()) {
              childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();
              children.push(new NamedNode(key, childNode));
            }
          }
        });
        if (children.length === 0) {
          return ChildrenNode.EMPTY_NODE;
        }
        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, (namedNode) => namedNode.name, NAME_COMPARATOR);
        if (childrenHavePriority) {
          const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());
          return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ ".priority": sortedChildSet }, { ".priority": PRIORITY_INDEX }));
        } else {
          return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);
        }
      } else {
        let node = ChildrenNode.EMPTY_NODE;
        each(json, (key, childData) => {
          if (contains(json, key)) {
            if (key.substring(0, 1) !== ".") {
              const childNode = nodeFromJSON(childData);
              if (childNode.isLeafNode() || !childNode.isEmpty()) {
                node = node.updateImmediateChild(key, childNode);
              }
            }
          }
        });
        return node.updatePriority(nodeFromJSON(priority));
      }
    }
    setNodeFromJSON(nodeFromJSON);
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class PathIndex extends Index {
      constructor(indexPath_) {
        super();
        this.indexPath_ = indexPath_;
        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== ".priority", "Can't create PathIndex with empty path or .priority key");
      }
      extractChild(snap) {
        return snap.getChild(this.indexPath_);
      }
      isDefinedOn(node) {
        return !node.getChild(this.indexPath_).isEmpty();
      }
      compare(a, b2) {
        const aChild = this.extractChild(a.node);
        const bChild = this.extractChild(b2.node);
        const indexCmp = aChild.compareTo(bChild);
        if (indexCmp === 0) {
          return nameCompare(a.name, b2.name);
        } else {
          return indexCmp;
        }
      }
      makePost(indexValue, name2) {
        const valueNode = nodeFromJSON(indexValue);
        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
        return new NamedNode(name2, node);
      }
      maxPost() {
        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);
        return new NamedNode(MAX_NAME, node);
      }
      toString() {
        return pathSlice(this.indexPath_, 0).join("/");
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ValueIndex extends Index {
      compare(a, b2) {
        const indexCmp = a.node.compareTo(b2.node);
        if (indexCmp === 0) {
          return nameCompare(a.name, b2.name);
        } else {
          return indexCmp;
        }
      }
      isDefinedOn(node) {
        return true;
      }
      indexedValueChanged(oldNode, newNode) {
        return !oldNode.equals(newNode);
      }
      minPost() {
        return NamedNode.MIN;
      }
      maxPost() {
        return NamedNode.MAX;
      }
      makePost(indexValue, name2) {
        const valueNode = nodeFromJSON(indexValue);
        return new NamedNode(name2, valueNode);
      }
      /**
       * @returns String representation for inclusion in a query spec
       */
      toString() {
        return ".value";
      }
    }
    const VALUE_INDEX = new ValueIndex();
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function changeValue(snapshotNode) {
      return { type: "value", snapshotNode };
    }
    function changeChildAdded(childName, snapshotNode) {
      return { type: "child_added", snapshotNode, childName };
    }
    function changeChildRemoved(childName, snapshotNode) {
      return { type: "child_removed", snapshotNode, childName };
    }
    function changeChildChanged(childName, snapshotNode, oldSnap) {
      return {
        type: "child_changed",
        snapshotNode,
        childName,
        oldSnap
      };
    }
    function changeChildMoved(childName, snapshotNode) {
      return { type: "child_moved", snapshotNode, childName };
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class QueryParams {
      constructor() {
        this.limitSet_ = false;
        this.startSet_ = false;
        this.startNameSet_ = false;
        this.startAfterSet_ = false;
        this.endSet_ = false;
        this.endNameSet_ = false;
        this.endBeforeSet_ = false;
        this.limit_ = 0;
        this.viewFrom_ = "";
        this.indexStartValue_ = null;
        this.indexStartName_ = "";
        this.indexEndValue_ = null;
        this.indexEndName_ = "";
        this.index_ = PRIORITY_INDEX;
      }
      hasStart() {
        return this.startSet_;
      }
      /**
       * @returns True if it would return from left.
       */
      isViewFromLeft() {
        if (this.viewFrom_ === "") {
          return this.startSet_;
        } else {
          return this.viewFrom_ === "l";
        }
      }
      /**
       * Only valid to call if hasStart() returns true
       */
      getIndexStartValue() {
        assert(this.startSet_, "Only valid if start has been set");
        return this.indexStartValue_;
      }
      /**
       * Only valid to call if hasStart() returns true.
       * Returns the starting key name for the range defined by these query parameters
       */
      getIndexStartName() {
        assert(this.startSet_, "Only valid if start has been set");
        if (this.startNameSet_) {
          return this.indexStartName_;
        } else {
          return MIN_NAME;
        }
      }
      hasEnd() {
        return this.endSet_;
      }
      /**
       * Only valid to call if hasEnd() returns true.
       */
      getIndexEndValue() {
        assert(this.endSet_, "Only valid if end has been set");
        return this.indexEndValue_;
      }
      /**
       * Only valid to call if hasEnd() returns true.
       * Returns the end key name for the range defined by these query parameters
       */
      getIndexEndName() {
        assert(this.endSet_, "Only valid if end has been set");
        if (this.endNameSet_) {
          return this.indexEndName_;
        } else {
          return MAX_NAME;
        }
      }
      hasLimit() {
        return this.limitSet_;
      }
      /**
       * @returns True if a limit has been set and it has been explicitly anchored
       */
      hasAnchoredLimit() {
        return this.limitSet_ && this.viewFrom_ !== "";
      }
      /**
       * Only valid to call if hasLimit() returns true
       */
      getLimit() {
        assert(this.limitSet_, "Only valid if limit has been set");
        return this.limit_;
      }
      getIndex() {
        return this.index_;
      }
      loadsAllData() {
        return !(this.startSet_ || this.endSet_ || this.limitSet_);
      }
      isDefault() {
        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
      }
      copy() {
        const copy = new QueryParams();
        copy.limitSet_ = this.limitSet_;
        copy.limit_ = this.limit_;
        copy.startSet_ = this.startSet_;
        copy.startAfterSet_ = this.startAfterSet_;
        copy.indexStartValue_ = this.indexStartValue_;
        copy.startNameSet_ = this.startNameSet_;
        copy.indexStartName_ = this.indexStartName_;
        copy.endSet_ = this.endSet_;
        copy.endBeforeSet_ = this.endBeforeSet_;
        copy.indexEndValue_ = this.indexEndValue_;
        copy.endNameSet_ = this.endNameSet_;
        copy.indexEndName_ = this.indexEndName_;
        copy.index_ = this.index_;
        copy.viewFrom_ = this.viewFrom_;
        return copy;
      }
    }
    function queryParamsToRestQueryStringParameters(queryParams) {
      const qs = {};
      if (queryParams.isDefault()) {
        return qs;
      }
      let orderBy2;
      if (queryParams.index_ === PRIORITY_INDEX) {
        orderBy2 = "$priority";
      } else if (queryParams.index_ === VALUE_INDEX) {
        orderBy2 = "$value";
      } else if (queryParams.index_ === KEY_INDEX) {
        orderBy2 = "$key";
      } else {
        assert(queryParams.index_ instanceof PathIndex, "Unrecognized index type!");
        orderBy2 = queryParams.index_.toString();
      }
      qs[
        "orderBy"
        /* REST_QUERY_CONSTANTS.ORDER_BY */
      ] = stringify(orderBy2);
      if (queryParams.startSet_) {
        const startParam = queryParams.startAfterSet_ ? "startAfter" : "startAt";
        qs[startParam] = stringify(queryParams.indexStartValue_);
        if (queryParams.startNameSet_) {
          qs[startParam] += "," + stringify(queryParams.indexStartName_);
        }
      }
      if (queryParams.endSet_) {
        const endParam = queryParams.endBeforeSet_ ? "endBefore" : "endAt";
        qs[endParam] = stringify(queryParams.indexEndValue_);
        if (queryParams.endNameSet_) {
          qs[endParam] += "," + stringify(queryParams.indexEndName_);
        }
      }
      if (queryParams.limitSet_) {
        if (queryParams.isViewFromLeft()) {
          qs[
            "limitToFirst"
            /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */
          ] = queryParams.limit_;
        } else {
          qs[
            "limitToLast"
            /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */
          ] = queryParams.limit_;
        }
      }
      return qs;
    }
    function queryParamsGetQueryObject(queryParams) {
      const obj = {};
      if (queryParams.startSet_) {
        obj[
          "sp"
          /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */
        ] = queryParams.indexStartValue_;
        if (queryParams.startNameSet_) {
          obj[
            "sn"
            /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */
          ] = queryParams.indexStartName_;
        }
        obj[
          "sin"
          /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */
        ] = !queryParams.startAfterSet_;
      }
      if (queryParams.endSet_) {
        obj[
          "ep"
          /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */
        ] = queryParams.indexEndValue_;
        if (queryParams.endNameSet_) {
          obj[
            "en"
            /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */
          ] = queryParams.indexEndName_;
        }
        obj[
          "ein"
          /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */
        ] = !queryParams.endBeforeSet_;
      }
      if (queryParams.limitSet_) {
        obj[
          "l"
          /* WIRE_PROTOCOL_CONSTANTS.LIMIT */
        ] = queryParams.limit_;
        let viewFrom = queryParams.viewFrom_;
        if (viewFrom === "") {
          if (queryParams.isViewFromLeft()) {
            viewFrom = "l";
          } else {
            viewFrom = "r";
          }
        }
        obj[
          "vf"
          /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */
        ] = viewFrom;
      }
      if (queryParams.index_ !== PRIORITY_INDEX) {
        obj[
          "i"
          /* WIRE_PROTOCOL_CONSTANTS.INDEX */
        ] = queryParams.index_.toString();
      }
      return obj;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ReadonlyRestClient extends ServerActions {
      /**
       * @param repoInfo_ - Data about the namespace we are connecting to
       * @param onDataUpdate_ - A callback for new data from the server
       */
      constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {
        super();
        this.repoInfo_ = repoInfo_;
        this.onDataUpdate_ = onDataUpdate_;
        this.authTokenProvider_ = authTokenProvider_;
        this.appCheckTokenProvider_ = appCheckTokenProvider_;
        this.log_ = logWrapper("p:rest:");
        this.listens_ = {};
      }
      reportStats(stats) {
        throw new Error("Method not implemented.");
      }
      static getListenId_(query2, tag) {
        if (tag !== void 0) {
          return "tag$" + tag;
        } else {
          assert(query2._queryParams.isDefault(), "should have a tag if it's not a default query.");
          return query2._path.toString();
        }
      }
      /** @inheritDoc */
      listen(query2, currentHashFn, tag, onComplete) {
        const pathString = query2._path.toString();
        this.log_("Listen called for " + pathString + " " + query2._queryIdentifier);
        const listenId = ReadonlyRestClient.getListenId_(query2, tag);
        const thisListen = {};
        this.listens_[listenId] = thisListen;
        const queryStringParameters = queryParamsToRestQueryStringParameters(query2._queryParams);
        this.restRequest_(pathString + ".json", queryStringParameters, (error2, result) => {
          let data = result;
          if (error2 === 404) {
            data = null;
            error2 = null;
          }
          if (error2 === null) {
            this.onDataUpdate_(
              pathString,
              data,
              /*isMerge=*/
              false,
              tag
            );
          }
          if (safeGet(this.listens_, listenId) === thisListen) {
            let status;
            if (!error2) {
              status = "ok";
            } else if (error2 === 401) {
              status = "permission_denied";
            } else {
              status = "rest_error:" + error2;
            }
            onComplete(status, null);
          }
        });
      }
      /** @inheritDoc */
      unlisten(query2, tag) {
        const listenId = ReadonlyRestClient.getListenId_(query2, tag);
        delete this.listens_[listenId];
      }
      get(query2) {
        const queryStringParameters = queryParamsToRestQueryStringParameters(query2._queryParams);
        const pathString = query2._path.toString();
        const deferred = new Deferred();
        this.restRequest_(pathString + ".json", queryStringParameters, (error2, result) => {
          let data = result;
          if (error2 === 404) {
            data = null;
            error2 = null;
          }
          if (error2 === null) {
            this.onDataUpdate_(
              pathString,
              data,
              /*isMerge=*/
              false,
              /*tag=*/
              null
            );
            deferred.resolve(data);
          } else {
            deferred.reject(new Error(data));
          }
        });
        return deferred.promise;
      }
      /** @inheritDoc */
      refreshAuthToken(token) {
      }
      /**
       * Performs a REST request to the given path, with the provided query string parameters,
       * and any auth credentials we have.
       */
      restRequest_(pathString, queryStringParameters = {}, callback) {
        queryStringParameters["format"] = "export";
        return Promise.all([
          this.authTokenProvider_.getToken(
            /*forceRefresh=*/
            false
          ),
          this.appCheckTokenProvider_.getToken(
            /*forceRefresh=*/
            false
          )
        ]).then(([authToken, appCheckToken]) => {
          if (authToken && authToken.accessToken) {
            queryStringParameters["auth"] = authToken.accessToken;
          }
          if (appCheckToken && appCheckToken.token) {
            queryStringParameters["ac"] = appCheckToken.token;
          }
          const url = (this.repoInfo_.secure ? "https://" : "http://") + this.repoInfo_.host + pathString + "?ns=" + this.repoInfo_.namespace + querystring(queryStringParameters);
          this.log_("Sending REST request for " + url);
          const xhr = new XMLHttpRequest();
          xhr.onreadystatechange = () => {
            if (callback && xhr.readyState === 4) {
              this.log_("REST Response for " + url + " received. status:", xhr.status, "response:", xhr.responseText);
              let res = null;
              if (xhr.status >= 200 && xhr.status < 300) {
                try {
                  res = jsonEval(xhr.responseText);
                } catch (e) {
                  warn("Failed to parse JSON response for " + url + ": " + xhr.responseText);
                }
                callback(null, res);
              } else {
                if (xhr.status !== 401 && xhr.status !== 404) {
                  warn("Got unsuccessful REST response for " + url + " Status: " + xhr.status);
                }
                callback(xhr.status);
              }
              callback = null;
            }
          };
          xhr.open(
            "GET",
            url,
            /*asynchronous=*/
            true
          );
          xhr.send();
        });
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class SnapshotHolder {
      constructor() {
        this.rootNode_ = ChildrenNode.EMPTY_NODE;
      }
      getNode(path) {
        return this.rootNode_.getChild(path);
      }
      updateSnapshot(path, newSnapshotNode) {
        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function newSparseSnapshotTree() {
      return {
        value: null,
        children: /* @__PURE__ */ new Map()
      };
    }
    function sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {
      if (pathIsEmpty(path)) {
        sparseSnapshotTree.value = data;
        sparseSnapshotTree.children.clear();
      } else if (sparseSnapshotTree.value !== null) {
        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);
      } else {
        const childKey = pathGetFront(path);
        if (!sparseSnapshotTree.children.has(childKey)) {
          sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());
        }
        const child2 = sparseSnapshotTree.children.get(childKey);
        path = pathPopFront(path);
        sparseSnapshotTreeRemember(child2, path, data);
      }
    }
    function sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {
      if (sparseSnapshotTree.value !== null) {
        func(prefixPath, sparseSnapshotTree.value);
      } else {
        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {
          const path = new Path(prefixPath.toString() + "/" + key);
          sparseSnapshotTreeForEachTree(tree, path, func);
        });
      }
    }
    function sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {
      sparseSnapshotTree.children.forEach((tree, key) => {
        func(key, tree);
      });
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class StatsListener {
      constructor(collection_) {
        this.collection_ = collection_;
        this.last_ = null;
      }
      get() {
        const newStats = this.collection_.get();
        const delta = Object.assign({}, newStats);
        if (this.last_) {
          each(this.last_, (stat, value) => {
            delta[stat] = delta[stat] - value;
          });
        }
        this.last_ = newStats;
        return delta;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const FIRST_STATS_MIN_TIME = 10 * 1e3;
    const FIRST_STATS_MAX_TIME = 30 * 1e3;
    const REPORT_STATS_INTERVAL = 5 * 60 * 1e3;
    class StatsReporter {
      constructor(collection2, server_) {
        this.server_ = server_;
        this.statsToReport_ = {};
        this.statsListener_ = new StatsListener(collection2);
        const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
      }
      reportStats_() {
        const stats = this.statsListener_.get();
        const reportedStats = {};
        let haveStatsToReport = false;
        each(stats, (stat, value) => {
          if (value > 0 && contains(this.statsToReport_, stat)) {
            reportedStats[stat] = value;
            haveStatsToReport = true;
          }
        });
        if (haveStatsToReport) {
          this.server_.reportStats(reportedStats);
        }
        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var OperationType;
    (function(OperationType2) {
      OperationType2[OperationType2["OVERWRITE"] = 0] = "OVERWRITE";
      OperationType2[OperationType2["MERGE"] = 1] = "MERGE";
      OperationType2[OperationType2["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
      OperationType2[OperationType2["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
    })(OperationType || (OperationType = {}));
    function newOperationSourceUser() {
      return {
        fromUser: true,
        fromServer: false,
        queryId: null,
        tagged: false
      };
    }
    function newOperationSourceServer() {
      return {
        fromUser: false,
        fromServer: true,
        queryId: null,
        tagged: false
      };
    }
    function newOperationSourceServerTaggedQuery(queryId) {
      return {
        fromUser: false,
        fromServer: true,
        queryId,
        tagged: true
      };
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AckUserWrite {
      /**
       * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.
       */
      constructor(path, affectedTree, revert) {
        this.path = path;
        this.affectedTree = affectedTree;
        this.revert = revert;
        this.type = OperationType.ACK_USER_WRITE;
        this.source = newOperationSourceUser();
      }
      operationForChild(childName) {
        if (!pathIsEmpty(this.path)) {
          assert(pathGetFront(this.path) === childName, "operationForChild called for unrelated child.");
          return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);
        } else if (this.affectedTree.value != null) {
          assert(this.affectedTree.children.isEmpty(), "affectedTree should not have overlapping affected paths.");
          return this;
        } else {
          const childTree = this.affectedTree.subtree(new Path(childName));
          return new AckUserWrite(newEmptyPath(), childTree, this.revert);
        }
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Overwrite {
      constructor(source, path, snap) {
        this.source = source;
        this.path = path;
        this.snap = snap;
        this.type = OperationType.OVERWRITE;
      }
      operationForChild(childName) {
        if (pathIsEmpty(this.path)) {
          return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));
        } else {
          return new Overwrite(this.source, pathPopFront(this.path), this.snap);
        }
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Merge {
      constructor(source, path, children) {
        this.source = source;
        this.path = path;
        this.children = children;
        this.type = OperationType.MERGE;
      }
      operationForChild(childName) {
        if (pathIsEmpty(this.path)) {
          const childTree = this.children.subtree(new Path(childName));
          if (childTree.isEmpty()) {
            return null;
          } else if (childTree.value) {
            return new Overwrite(this.source, newEmptyPath(), childTree.value);
          } else {
            return new Merge(this.source, newEmptyPath(), childTree);
          }
        } else {
          assert(pathGetFront(this.path) === childName, "Can't get a merge for a child not on the path of the operation");
          return new Merge(this.source, pathPopFront(this.path), this.children);
        }
      }
      toString() {
        return "Operation(" + this.path + ": " + this.source.toString() + " merge: " + this.children.toString() + ")";
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class CacheNode {
      constructor(node_, fullyInitialized_, filtered_) {
        this.node_ = node_;
        this.fullyInitialized_ = fullyInitialized_;
        this.filtered_ = filtered_;
      }
      /**
       * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
       */
      isFullyInitialized() {
        return this.fullyInitialized_;
      }
      /**
       * Returns whether this node is potentially missing children due to a filter applied to the node
       */
      isFiltered() {
        return this.filtered_;
      }
      isCompleteForPath(path) {
        if (pathIsEmpty(path)) {
          return this.isFullyInitialized() && !this.filtered_;
        }
        const childKey = pathGetFront(path);
        return this.isCompleteForChild(childKey);
      }
      isCompleteForChild(key) {
        return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);
      }
      getNode() {
        return this.node_;
      }
    }
    function eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {
      const events = [];
      const moves = [];
      changes.forEach((change) => {
        if (change.type === "child_changed" && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
          moves.push(changeChildMoved(change.childName, change.snapshotNode));
        }
      });
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_removed", changes, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_added", changes, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_moved", moves, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_changed", changes, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "value", changes, eventRegistrations, eventCache);
      return events;
    }
    function eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {
      const filteredChanges = changes.filter((change) => change.type === eventType);
      filteredChanges.sort((a, b2) => eventGeneratorCompareChanges(eventGenerator, a, b2));
      filteredChanges.forEach((change) => {
        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);
        registrations.forEach((registration) => {
          if (registration.respondsTo(change.type)) {
            events.push(registration.createEvent(materializedChange, eventGenerator.query_));
          }
        });
      });
    }
    function eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {
      if (change.type === "value" || change.type === "child_removed") {
        return change;
      } else {
        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);
        return change;
      }
    }
    function eventGeneratorCompareChanges(eventGenerator, a, b2) {
      if (a.childName == null || b2.childName == null) {
        throw assertionError("Should only compare child_ events.");
      }
      const aWrapped = new NamedNode(a.childName, a.snapshotNode);
      const bWrapped = new NamedNode(b2.childName, b2.snapshotNode);
      return eventGenerator.index_.compare(aWrapped, bWrapped);
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function newViewCache(eventCache, serverCache) {
      return { eventCache, serverCache };
    }
    function viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {
      return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);
    }
    function viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {
      return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));
    }
    function viewCacheGetCompleteEventSnap(viewCache) {
      return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;
    }
    function viewCacheGetCompleteServerSnap(viewCache) {
      return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let emptyChildrenSingleton;
    const EmptyChildren = () => {
      if (!emptyChildrenSingleton) {
        emptyChildrenSingleton = new SortedMap(stringCompare);
      }
      return emptyChildrenSingleton;
    };
    class ImmutableTree {
      constructor(value, children = EmptyChildren()) {
        this.value = value;
        this.children = children;
      }
      static fromObject(obj) {
        let tree = new ImmutableTree(null);
        each(obj, (childPath, childSnap) => {
          tree = tree.set(new Path(childPath), childSnap);
        });
        return tree;
      }
      /**
       * True if the value is empty and there are no children
       */
      isEmpty() {
        return this.value === null && this.children.isEmpty();
      }
      /**
       * Given a path and predicate, return the first node and the path to that node
       * where the predicate returns true.
       *
       * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`
       * objects on the way back out, it may be better to pass down a pathSoFar obj.
       *
       * @param relativePath - The remainder of the path
       * @param predicate - The predicate to satisfy to return a node
       */
      findRootMostMatchingPathAndValue(relativePath, predicate) {
        if (this.value != null && predicate(this.value)) {
          return { path: newEmptyPath(), value: this.value };
        } else {
          if (pathIsEmpty(relativePath)) {
            return null;
          } else {
            const front = pathGetFront(relativePath);
            const child2 = this.children.get(front);
            if (child2 !== null) {
              const childExistingPathAndValue = child2.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);
              if (childExistingPathAndValue != null) {
                const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);
                return { path: fullPath, value: childExistingPathAndValue.value };
              } else {
                return null;
              }
            } else {
              return null;
            }
          }
        }
      }
      /**
       * Find, if it exists, the shortest subpath of the given path that points a defined
       * value in the tree
       */
      findRootMostValueAndPath(relativePath) {
        return this.findRootMostMatchingPathAndValue(relativePath, () => true);
      }
      /**
       * @returns The subtree at the given path
       */
      subtree(relativePath) {
        if (pathIsEmpty(relativePath)) {
          return this;
        } else {
          const front = pathGetFront(relativePath);
          const childTree = this.children.get(front);
          if (childTree !== null) {
            return childTree.subtree(pathPopFront(relativePath));
          } else {
            return new ImmutableTree(null);
          }
        }
      }
      /**
       * Sets a value at the specified path.
       *
       * @param relativePath - Path to set value at.
       * @param toSet - Value to set.
       * @returns Resulting tree.
       */
      set(relativePath, toSet) {
        if (pathIsEmpty(relativePath)) {
          return new ImmutableTree(toSet, this.children);
        } else {
          const front = pathGetFront(relativePath);
          const child2 = this.children.get(front) || new ImmutableTree(null);
          const newChild = child2.set(pathPopFront(relativePath), toSet);
          const newChildren = this.children.insert(front, newChild);
          return new ImmutableTree(this.value, newChildren);
        }
      }
      /**
       * Removes the value at the specified path.
       *
       * @param relativePath - Path to value to remove.
       * @returns Resulting tree.
       */
      remove(relativePath) {
        if (pathIsEmpty(relativePath)) {
          if (this.children.isEmpty()) {
            return new ImmutableTree(null);
          } else {
            return new ImmutableTree(null, this.children);
          }
        } else {
          const front = pathGetFront(relativePath);
          const child2 = this.children.get(front);
          if (child2) {
            const newChild = child2.remove(pathPopFront(relativePath));
            let newChildren;
            if (newChild.isEmpty()) {
              newChildren = this.children.remove(front);
            } else {
              newChildren = this.children.insert(front, newChild);
            }
            if (this.value === null && newChildren.isEmpty()) {
              return new ImmutableTree(null);
            } else {
              return new ImmutableTree(this.value, newChildren);
            }
          } else {
            return this;
          }
        }
      }
      /**
       * Gets a value from the tree.
       *
       * @param relativePath - Path to get value for.
       * @returns Value at path, or null.
       */
      get(relativePath) {
        if (pathIsEmpty(relativePath)) {
          return this.value;
        } else {
          const front = pathGetFront(relativePath);
          const child2 = this.children.get(front);
          if (child2) {
            return child2.get(pathPopFront(relativePath));
          } else {
            return null;
          }
        }
      }
      /**
       * Replace the subtree at the specified path with the given new tree.
       *
       * @param relativePath - Path to replace subtree for.
       * @param newTree - New tree.
       * @returns Resulting tree.
       */
      setTree(relativePath, newTree) {
        if (pathIsEmpty(relativePath)) {
          return newTree;
        } else {
          const front = pathGetFront(relativePath);
          const child2 = this.children.get(front) || new ImmutableTree(null);
          const newChild = child2.setTree(pathPopFront(relativePath), newTree);
          let newChildren;
          if (newChild.isEmpty()) {
            newChildren = this.children.remove(front);
          } else {
            newChildren = this.children.insert(front, newChild);
          }
          return new ImmutableTree(this.value, newChildren);
        }
      }
      /**
       * Performs a depth first fold on this tree. Transforms a tree into a single
       * value, given a function that operates on the path to a node, an optional
       * current value, and a map of child names to folded subtrees
       */
      fold(fn) {
        return this.fold_(newEmptyPath(), fn);
      }
      /**
       * Recursive helper for public-facing fold() method
       */
      fold_(pathSoFar, fn) {
        const accum = {};
        this.children.inorderTraversal((childKey, childTree) => {
          accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);
        });
        return fn(pathSoFar, this.value, accum);
      }
      /**
       * Find the first matching value on the given path. Return the result of applying f to it.
       */
      findOnPath(path, f2) {
        return this.findOnPath_(path, newEmptyPath(), f2);
      }
      findOnPath_(pathToFollow, pathSoFar, f2) {
        const result = this.value ? f2(pathSoFar, this.value) : false;
        if (result) {
          return result;
        } else {
          if (pathIsEmpty(pathToFollow)) {
            return null;
          } else {
            const front = pathGetFront(pathToFollow);
            const nextChild = this.children.get(front);
            if (nextChild) {
              return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f2);
            } else {
              return null;
            }
          }
        }
      }
      foreachOnPath(path, f2) {
        return this.foreachOnPath_(path, newEmptyPath(), f2);
      }
      foreachOnPath_(pathToFollow, currentRelativePath, f2) {
        if (pathIsEmpty(pathToFollow)) {
          return this;
        } else {
          if (this.value) {
            f2(currentRelativePath, this.value);
          }
          const front = pathGetFront(pathToFollow);
          const nextChild = this.children.get(front);
          if (nextChild) {
            return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f2);
          } else {
            return new ImmutableTree(null);
          }
        }
      }
      /**
       * Calls the given function for each node in the tree that has a value.
       *
       * @param f - A function to be called with the path from the root of the tree to
       * a node, and the value at that node. Called in depth-first order.
       */
      foreach(f2) {
        this.foreach_(newEmptyPath(), f2);
      }
      foreach_(currentRelativePath, f2) {
        this.children.inorderTraversal((childName, childTree) => {
          childTree.foreach_(pathChild(currentRelativePath, childName), f2);
        });
        if (this.value) {
          f2(currentRelativePath, this.value);
        }
      }
      foreachChild(f2) {
        this.children.inorderTraversal((childName, childTree) => {
          if (childTree.value) {
            f2(childName, childTree.value);
          }
        });
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class CompoundWrite {
      constructor(writeTree_) {
        this.writeTree_ = writeTree_;
      }
      static empty() {
        return new CompoundWrite(new ImmutableTree(null));
      }
    }
    function compoundWriteAddWrite(compoundWrite, path, node) {
      if (pathIsEmpty(path)) {
        return new CompoundWrite(new ImmutableTree(node));
      } else {
        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
        if (rootmost != null) {
          const rootMostPath = rootmost.path;
          let value = rootmost.value;
          const relativePath = newRelativePath(rootMostPath, path);
          value = value.updateChild(relativePath, node);
          return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));
        } else {
          const subtree = new ImmutableTree(node);
          const newWriteTree2 = compoundWrite.writeTree_.setTree(path, subtree);
          return new CompoundWrite(newWriteTree2);
        }
      }
    }
    function compoundWriteAddWrites(compoundWrite, path, updates) {
      let newWrite = compoundWrite;
      each(updates, (childKey, node) => {
        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);
      });
      return newWrite;
    }
    function compoundWriteRemoveWrite(compoundWrite, path) {
      if (pathIsEmpty(path)) {
        return CompoundWrite.empty();
      } else {
        const newWriteTree2 = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));
        return new CompoundWrite(newWriteTree2);
      }
    }
    function compoundWriteHasCompleteWrite(compoundWrite, path) {
      return compoundWriteGetCompleteNode(compoundWrite, path) != null;
    }
    function compoundWriteGetCompleteNode(compoundWrite, path) {
      const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
      if (rootmost != null) {
        return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));
      } else {
        return null;
      }
    }
    function compoundWriteGetCompleteChildren(compoundWrite) {
      const children = [];
      const node = compoundWrite.writeTree_.value;
      if (node != null) {
        if (!node.isLeafNode()) {
          node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
            children.push(new NamedNode(childName, childNode));
          });
        }
      } else {
        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {
          if (childTree.value != null) {
            children.push(new NamedNode(childName, childTree.value));
          }
        });
      }
      return children;
    }
    function compoundWriteChildCompoundWrite(compoundWrite, path) {
      if (pathIsEmpty(path)) {
        return compoundWrite;
      } else {
        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);
        if (shadowingNode != null) {
          return new CompoundWrite(new ImmutableTree(shadowingNode));
        } else {
          return new CompoundWrite(compoundWrite.writeTree_.subtree(path));
        }
      }
    }
    function compoundWriteIsEmpty(compoundWrite) {
      return compoundWrite.writeTree_.isEmpty();
    }
    function compoundWriteApply(compoundWrite, node) {
      return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);
    }
    function applySubtreeWrite(relativePath, writeTree, node) {
      if (writeTree.value != null) {
        return node.updateChild(relativePath, writeTree.value);
      } else {
        let priorityWrite = null;
        writeTree.children.inorderTraversal((childKey, childTree) => {
          if (childKey === ".priority") {
            assert(childTree.value !== null, "Priority writes must always be leaf nodes");
            priorityWrite = childTree.value;
          } else {
            node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);
          }
        });
        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {
          node = node.updateChild(pathChild(relativePath, ".priority"), priorityWrite);
        }
        return node;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function writeTreeChildWrites(writeTree, path) {
      return newWriteTreeRef(path, writeTree);
    }
    function writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {
      assert(writeId > writeTree.lastWriteId, "Stacking an older write on top of newer ones");
      if (visible === void 0) {
        visible = true;
      }
      writeTree.allWrites.push({
        path,
        snap,
        writeId,
        visible
      });
      if (visible) {
        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);
      }
      writeTree.lastWriteId = writeId;
    }
    function writeTreeGetWrite(writeTree, writeId) {
      for (let i = 0; i < writeTree.allWrites.length; i++) {
        const record = writeTree.allWrites[i];
        if (record.writeId === writeId) {
          return record;
        }
      }
      return null;
    }
    function writeTreeRemoveWrite(writeTree, writeId) {
      const idx = writeTree.allWrites.findIndex((s) => {
        return s.writeId === writeId;
      });
      assert(idx >= 0, "removeWrite called with nonexistent writeId.");
      const writeToRemove = writeTree.allWrites[idx];
      writeTree.allWrites.splice(idx, 1);
      let removedWriteWasVisible = writeToRemove.visible;
      let removedWriteOverlapsWithOtherWrites = false;
      let i = writeTree.allWrites.length - 1;
      while (removedWriteWasVisible && i >= 0) {
        const currentWrite = writeTree.allWrites[i];
        if (currentWrite.visible) {
          if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {
            removedWriteWasVisible = false;
          } else if (pathContains(writeToRemove.path, currentWrite.path)) {
            removedWriteOverlapsWithOtherWrites = true;
          }
        }
        i--;
      }
      if (!removedWriteWasVisible) {
        return false;
      } else if (removedWriteOverlapsWithOtherWrites) {
        writeTreeResetTree_(writeTree);
        return true;
      } else {
        if (writeToRemove.snap) {
          writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);
        } else {
          const children = writeToRemove.children;
          each(children, (childName) => {
            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));
          });
        }
        return true;
      }
    }
    function writeTreeRecordContainsPath_(writeRecord, path) {
      if (writeRecord.snap) {
        return pathContains(writeRecord.path, path);
      } else {
        for (const childName in writeRecord.children) {
          if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {
            return true;
          }
        }
        return false;
      }
    }
    function writeTreeResetTree_(writeTree) {
      writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());
      if (writeTree.allWrites.length > 0) {
        writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;
      } else {
        writeTree.lastWriteId = -1;
      }
    }
    function writeTreeDefaultFilter_(write) {
      return write.visible;
    }
    function writeTreeLayerTree_(writes, filter, treeRoot) {
      let compoundWrite = CompoundWrite.empty();
      for (let i = 0; i < writes.length; ++i) {
        const write = writes[i];
        if (filter(write)) {
          const writePath = write.path;
          let relativePath;
          if (write.snap) {
            if (pathContains(treeRoot, writePath)) {
              relativePath = newRelativePath(treeRoot, writePath);
              compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);
            } else if (pathContains(writePath, treeRoot)) {
              relativePath = newRelativePath(writePath, treeRoot);
              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));
            } else ;
          } else if (write.children) {
            if (pathContains(treeRoot, writePath)) {
              relativePath = newRelativePath(treeRoot, writePath);
              compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);
            } else if (pathContains(writePath, treeRoot)) {
              relativePath = newRelativePath(writePath, treeRoot);
              if (pathIsEmpty(relativePath)) {
                compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);
              } else {
                const child2 = safeGet(write.children, pathGetFront(relativePath));
                if (child2) {
                  const deepNode = child2.getChild(pathPopFront(relativePath));
                  compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);
                }
              }
            } else ;
          } else {
            throw assertionError("WriteRecord should have .snap or .children");
          }
        }
      }
      return compoundWrite;
    }
    function writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
      if (!writeIdsToExclude && !includeHiddenWrites) {
        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
        if (shadowingNode != null) {
          return shadowingNode;
        } else {
          const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
          if (compoundWriteIsEmpty(subMerge)) {
            return completeServerCache;
          } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {
            return null;
          } else {
            const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
            return compoundWriteApply(subMerge, layeredCache);
          }
        }
      } else {
        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {
          return completeServerCache;
        } else {
          if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {
            return null;
          } else {
            const filter = function(write) {
              return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));
            };
            const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);
            const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
            return compoundWriteApply(mergeAtPath, layeredCache);
          }
        }
      }
    }
    function writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {
      let completeChildren = ChildrenNode.EMPTY_NODE;
      const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
      if (topLevelSet) {
        if (!topLevelSet.isLeafNode()) {
          topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {
            completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
          });
        }
        return completeChildren;
      } else if (completeServerChildren) {
        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
          const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);
          completeChildren = completeChildren.updateImmediateChild(childName, node);
        });
        compoundWriteGetCompleteChildren(merge).forEach((namedNode) => {
          completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
        });
        return completeChildren;
      } else {
        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        compoundWriteGetCompleteChildren(merge).forEach((namedNode) => {
          completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
        });
        return completeChildren;
      }
    }
    function writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {
      assert(existingEventSnap || existingServerSnap, "Either existingEventSnap or existingServerSnap must exist");
      const path = pathChild(treePath, childPath);
      if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {
        return null;
      } else {
        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
        if (compoundWriteIsEmpty(childMerge)) {
          return existingServerSnap.getChild(childPath);
        } else {
          return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));
        }
      }
    }
    function writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {
      const path = pathChild(treePath, childKey);
      const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
      if (shadowingNode != null) {
        return shadowingNode;
      } else {
        if (existingServerSnap.isCompleteForChild(childKey)) {
          const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
          return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));
        } else {
          return null;
        }
      }
    }
    function writeTreeShadowingWrite(writeTree, path) {
      return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
    }
    function writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {
      let toIterate;
      const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
      const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());
      if (shadowingNode != null) {
        toIterate = shadowingNode;
      } else if (completeServerData != null) {
        toIterate = compoundWriteApply(merge, completeServerData);
      } else {
        return [];
      }
      toIterate = toIterate.withIndex(index);
      if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
        const nodes = [];
        const cmp = index.getCompare();
        const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);
        let next = iter.getNext();
        while (next && nodes.length < count) {
          if (cmp(next, startPost) !== 0) {
            nodes.push(next);
          }
          next = iter.getNext();
        }
        return nodes;
      } else {
        return [];
      }
    }
    function newWriteTree() {
      return {
        visibleWrites: CompoundWrite.empty(),
        allWrites: [],
        lastWriteId: -1
      };
    }
    function writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
      return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);
    }
    function writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {
      return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);
    }
    function writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {
      return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);
    }
    function writeTreeRefShadowingWrite(writeTreeRef, path) {
      return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));
    }
    function writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {
      return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);
    }
    function writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {
      return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);
    }
    function writeTreeRefChild(writeTreeRef, childName) {
      return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);
    }
    function newWriteTreeRef(path, writeTree) {
      return {
        treePath: path,
        writeTree
      };
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ChildChangeAccumulator {
      constructor() {
        this.changeMap = /* @__PURE__ */ new Map();
      }
      trackChildChange(change) {
        const type = change.type;
        const childKey = change.childName;
        assert(type === "child_added" || type === "child_changed" || type === "child_removed", "Only child changes supported for tracking");
        assert(childKey !== ".priority", "Only non-priority child changes can be tracked.");
        const oldChange = this.changeMap.get(childKey);
        if (oldChange) {
          const oldType = oldChange.type;
          if (type === "child_added" && oldType === "child_removed") {
            this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));
          } else if (type === "child_removed" && oldType === "child_added") {
            this.changeMap.delete(childKey);
          } else if (type === "child_removed" && oldType === "child_changed") {
            this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));
          } else if (type === "child_changed" && oldType === "child_added") {
            this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));
          } else if (type === "child_changed" && oldType === "child_changed") {
            this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));
          } else {
            throw assertionError("Illegal combination of changes: " + change + " occurred after " + oldChange);
          }
        } else {
          this.changeMap.set(childKey, change);
        }
      }
      getChanges() {
        return Array.from(this.changeMap.values());
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class NoCompleteChildSource_ {
      getCompleteChild(childKey) {
        return null;
      }
      getChildAfterChild(index, child2, reverse) {
        return null;
      }
    }
    const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
    class WriteTreeCompleteChildSource {
      constructor(writes_, viewCache_, optCompleteServerCache_ = null) {
        this.writes_ = writes_;
        this.viewCache_ = viewCache_;
        this.optCompleteServerCache_ = optCompleteServerCache_;
      }
      getCompleteChild(childKey) {
        const node = this.viewCache_.eventCache;
        if (node.isCompleteForChild(childKey)) {
          return node.getNode().getImmediateChild(childKey);
        } else {
          const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;
          return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);
        }
      }
      getChildAfterChild(index, child2, reverse) {
        const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);
        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child2, 1, reverse, index);
        if (nodes.length === 0) {
          return null;
        } else {
          return nodes[0];
        }
      }
    }
    function viewProcessorAssertIndexed(viewProcessor, viewCache) {
      assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), "Event snap not indexed");
      assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), "Server snap not indexed");
    }
    function viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {
      const accumulator = new ChildChangeAccumulator();
      let newViewCache2, filterServerNode;
      if (operation.type === OperationType.OVERWRITE) {
        const overwrite = operation;
        if (overwrite.source.fromUser) {
          newViewCache2 = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
        } else {
          assert(overwrite.source.fromServer, "Unknown source.");
          filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);
          newViewCache2 = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
        }
      } else if (operation.type === OperationType.MERGE) {
        const merge = operation;
        if (merge.source.fromUser) {
          newViewCache2 = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
        } else {
          assert(merge.source.fromServer, "Unknown source.");
          filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();
          newViewCache2 = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
        }
      } else if (operation.type === OperationType.ACK_USER_WRITE) {
        const ackUserWrite = operation;
        if (!ackUserWrite.revert) {
          newViewCache2 = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
        } else {
          newViewCache2 = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
        }
      } else if (operation.type === OperationType.LISTEN_COMPLETE) {
        newViewCache2 = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);
      } else {
        throw assertionError("Unknown operation type: " + operation.type);
      }
      const changes = accumulator.getChanges();
      viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache2, changes);
      return { viewCache: newViewCache2, changes };
    }
    function viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache2, accumulator) {
      const eventSnap = newViewCache2.eventCache;
      if (eventSnap.isFullyInitialized()) {
        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);
        if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
          accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache2)));
        }
      }
    }
    function viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {
      const oldEventSnap = viewCache.eventCache;
      if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {
        return viewCache;
      } else {
        let newEventCache, serverNode;
        if (pathIsEmpty(changePath)) {
          assert(viewCache.serverCache.isFullyInitialized(), "If change path is empty, we must have complete server data");
          if (viewCache.serverCache.isFiltered()) {
            const serverCache = viewCacheGetCompleteServerSnap(viewCache);
            const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;
            const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);
            newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);
          } else {
            const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
            newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);
          }
        } else {
          const childKey = pathGetFront(changePath);
          if (childKey === ".priority") {
            assert(pathGetLength(changePath) === 1, "Can't have a priority with additional path components");
            const oldEventNode = oldEventSnap.getNode();
            serverNode = viewCache.serverCache.getNode();
            const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);
            if (updatedPriority != null) {
              newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);
            } else {
              newEventCache = oldEventSnap.getNode();
            }
          } else {
            const childChangePath = pathPopFront(changePath);
            let newEventChild;
            if (oldEventSnap.isCompleteForChild(childKey)) {
              serverNode = viewCache.serverCache.getNode();
              const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);
              if (eventChildUpdate != null) {
                newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);
              } else {
                newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
              }
            } else {
              newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
            }
            if (newEventChild != null) {
              newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
            } else {
              newEventCache = oldEventSnap.getNode();
            }
          }
        }
        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());
      }
    }
    function viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
      const oldServerSnap = oldViewCache.serverCache;
      let newServerCache;
      const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();
      if (pathIsEmpty(changePath)) {
        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
      } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
        const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);
        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
      } else {
        const childKey = pathGetFront(changePath);
        if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {
          return oldViewCache;
        }
        const childChangePath = pathPopFront(changePath);
        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);
        const newChildNode = childNode.updateChild(childChangePath, changedSnap);
        if (childKey === ".priority") {
          newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
        } else {
          newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
        }
      }
      const newViewCache2 = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());
      const source = new WriteTreeCompleteChildSource(writesCache, newViewCache2, completeCache);
      return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache2, changePath, writesCache, source, accumulator);
    }
    function viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
      const oldEventSnap = oldViewCache.eventCache;
      let newViewCache2, newEventCache;
      const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
      if (pathIsEmpty(changePath)) {
        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);
        newViewCache2 = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());
      } else {
        const childKey = pathGetFront(changePath);
        if (childKey === ".priority") {
          newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);
          newViewCache2 = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
        } else {
          const childChangePath = pathPopFront(changePath);
          const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
          let newChild;
          if (pathIsEmpty(childChangePath)) {
            newChild = changedSnap;
          } else {
            const childNode = source.getCompleteChild(childKey);
            if (childNode != null) {
              if (pathGetBack(childChangePath) === ".priority" && childNode.getChild(pathParent(childChangePath)).isEmpty()) {
                newChild = childNode;
              } else {
                newChild = childNode.updateChild(childChangePath, changedSnap);
              }
            } else {
              newChild = ChildrenNode.EMPTY_NODE;
            }
          }
          if (!oldChild.equals(newChild)) {
            const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
            newViewCache2 = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());
          } else {
            newViewCache2 = oldViewCache;
          }
        }
      }
      return newViewCache2;
    }
    function viewProcessorCacheHasChild(viewCache, childKey) {
      return viewCache.eventCache.isCompleteForChild(childKey);
    }
    function viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
      let curViewCache = viewCache;
      changedChildren.foreach((relativePath, childNode) => {
        const writePath = pathChild(path, relativePath);
        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
          curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
        }
      });
      changedChildren.foreach((relativePath, childNode) => {
        const writePath = pathChild(path, relativePath);
        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
          curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
        }
      });
      return curViewCache;
    }
    function viewProcessorApplyMerge(viewProcessor, node, merge) {
      merge.foreach((relativePath, childNode) => {
        node = node.updateChild(relativePath, childNode);
      });
      return node;
    }
    function viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
      if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {
        return viewCache;
      }
      let curViewCache = viewCache;
      let viewMergeTree;
      if (pathIsEmpty(path)) {
        viewMergeTree = changedChildren;
      } else {
        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);
      }
      const serverNode = viewCache.serverCache.getNode();
      viewMergeTree.children.inorderTraversal((childKey, childTree) => {
        if (serverNode.hasChild(childKey)) {
          const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
          const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);
          curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
        }
      });
      viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {
        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === null;
        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
          const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
          const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);
          curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
        }
      });
      return curViewCache;
    }
    function viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
      if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {
        return viewCache;
      }
      const filterServerNode = viewCache.serverCache.isFiltered();
      const serverCache = viewCache.serverCache;
      if (affectedTree.value != null) {
        if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {
          return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
        } else if (pathIsEmpty(ackPath)) {
          let changedChildren = new ImmutableTree(null);
          serverCache.getNode().forEachChild(KEY_INDEX, (name2, node) => {
            changedChildren = changedChildren.set(new Path(name2), node);
          });
          return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);
        } else {
          return viewCache;
        }
      } else {
        let changedChildren = new ImmutableTree(null);
        affectedTree.foreach((mergePath, value) => {
          const serverCachePath = pathChild(ackPath, mergePath);
          if (serverCache.isCompleteForPath(serverCachePath)) {
            changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));
          }
        });
        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);
      }
    }
    function viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {
      const oldServerNode = viewCache.serverCache;
      const newViewCache2 = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());
      return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache2, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
    }
    function viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {
      let complete;
      if (writeTreeRefShadowingWrite(writesCache, path) != null) {
        return viewCache;
      } else {
        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
        const oldEventCache = viewCache.eventCache.getNode();
        let newEventCache;
        if (pathIsEmpty(path) || pathGetFront(path) === ".priority") {
          let newNode;
          if (viewCache.serverCache.isFullyInitialized()) {
            newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
          } else {
            const serverChildren = viewCache.serverCache.getNode();
            assert(serverChildren instanceof ChildrenNode, "serverChildren would be complete if leaf node");
            newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);
          }
          newNode = newNode;
          newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);
        } else {
          const childKey = pathGetFront(path);
          let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
          if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {
            newChild = oldEventCache.getImmediateChild(childKey);
          }
          if (newChild != null) {
            newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);
          } else if (viewCache.eventCache.getNode().hasChild(childKey)) {
            newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);
          } else {
            newEventCache = oldEventCache;
          }
          if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {
            complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
            if (complete.isLeafNode()) {
              newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);
            }
          }
        }
        complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;
        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());
      }
    }
    function viewGetCompleteServerCache(view, path) {
      const cache = viewCacheGetCompleteServerSnap(view.viewCache_);
      if (cache) {
        if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {
          return cache.getChild(path);
        }
      }
      return null;
    }
    function viewApplyOperation(view, operation, writesCache, completeServerCache) {
      if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {
        assert(viewCacheGetCompleteServerSnap(view.viewCache_), "We should always have a full cache before handling merges");
        assert(viewCacheGetCompleteEventSnap(view.viewCache_), "Missing event cache, even though we have a server cache");
      }
      const oldViewCache = view.viewCache_;
      const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);
      viewProcessorAssertIndexed(view.processor_, result.viewCache);
      assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), "Once a server snap is complete, it should never go back");
      view.viewCache_ = result.viewCache;
      return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode());
    }
    function viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {
      const registrations = view.eventRegistrations_;
      return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let referenceConstructor$1;
    function syncPointSetReferenceConstructor(val) {
      assert(!referenceConstructor$1, "__referenceConstructor has already been defined");
      referenceConstructor$1 = val;
    }
    function syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {
      const queryId = operation.source.queryId;
      if (queryId !== null) {
        const view = syncPoint.views.get(queryId);
        assert(view != null, "SyncTree gave us an op for an invalid query.");
        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);
      } else {
        let events = [];
        for (const view of syncPoint.views.values()) {
          events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));
        }
        return events;
      }
    }
    function syncPointGetCompleteServerCache(syncPoint, path) {
      let serverCache = null;
      for (const view of syncPoint.views.values()) {
        serverCache = serverCache || viewGetCompleteServerCache(view, path);
      }
      return serverCache;
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let referenceConstructor;
    function syncTreeSetReferenceConstructor(val) {
      assert(!referenceConstructor, "__referenceConstructor has already been defined");
      referenceConstructor = val;
    }
    class SyncTree {
      /**
       * @param listenProvider_ - Used by SyncTree to start / stop listening
       *   to server data.
       */
      constructor(listenProvider_) {
        this.listenProvider_ = listenProvider_;
        this.syncPointTree_ = new ImmutableTree(null);
        this.pendingWriteTree_ = newWriteTree();
        this.tagToQueryMap = /* @__PURE__ */ new Map();
        this.queryToTagMap = /* @__PURE__ */ new Map();
      }
    }
    function syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {
      writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);
      if (!visible) {
        return [];
      } else {
        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));
      }
    }
    function syncTreeAckUserWrite(syncTree, writeId, revert = false) {
      const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);
      const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);
      if (!needToReevaluate) {
        return [];
      } else {
        let affectedTree = new ImmutableTree(null);
        if (write.snap != null) {
          affectedTree = affectedTree.set(newEmptyPath(), true);
        } else {
          each(write.children, (pathString) => {
            affectedTree = affectedTree.set(new Path(pathString), true);
          });
        }
        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));
      }
    }
    function syncTreeApplyServerOverwrite(syncTree, path, newData) {
      return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));
    }
    function syncTreeApplyServerMerge(syncTree, path, changedChildren) {
      const changeTree = ImmutableTree.fromObject(changedChildren);
      return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));
    }
    function syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {
      const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
      if (queryKey != null) {
        const r2 = syncTreeParseQueryKey_(queryKey);
        const queryPath = r2.path, queryId = r2.queryId;
        const relativePath = newRelativePath(queryPath, path);
        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);
        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
      } else {
        return [];
      }
    }
    function syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {
      const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
      if (queryKey) {
        const r2 = syncTreeParseQueryKey_(queryKey);
        const queryPath = r2.path, queryId = r2.queryId;
        const relativePath = newRelativePath(queryPath, path);
        const changeTree = ImmutableTree.fromObject(changedChildren);
        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);
        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
      } else {
        return [];
      }
    }
    function syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {
      const includeHiddenSets = true;
      const writeTree = syncTree.pendingWriteTree_;
      const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {
        const relativePath = newRelativePath(pathSoFar, path);
        const serverCache2 = syncPointGetCompleteServerCache(syncPoint, relativePath);
        if (serverCache2) {
          return serverCache2;
        }
      });
      return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);
    }
    function syncTreeApplyOperationToSyncPoints_(syncTree, operation) {
      return syncTreeApplyOperationHelper_(
        operation,
        syncTree.syncPointTree_,
        /*serverCache=*/
        null,
        writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())
      );
    }
    function syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {
      if (pathIsEmpty(operation.path)) {
        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
      } else {
        const syncPoint = syncPointTree.get(newEmptyPath());
        if (serverCache == null && syncPoint != null) {
          serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
        }
        let events = [];
        const childName = pathGetFront(operation.path);
        const childOperation = operation.operationForChild(childName);
        const childTree = syncPointTree.children.get(childName);
        if (childTree && childOperation) {
          const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
          const childWritesCache = writeTreeRefChild(writesCache, childName);
          events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
        }
        if (syncPoint) {
          events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
        }
        return events;
      }
    }
    function syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {
      const syncPoint = syncPointTree.get(newEmptyPath());
      if (serverCache == null && syncPoint != null) {
        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
      }
      let events = [];
      syncPointTree.children.inorderTraversal((childName, childTree) => {
        const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
        const childWritesCache = writeTreeRefChild(writesCache, childName);
        const childOperation = operation.operationForChild(childName);
        if (childOperation) {
          events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
        }
      });
      if (syncPoint) {
        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
      }
      return events;
    }
    function syncTreeQueryKeyForTag_(syncTree, tag) {
      return syncTree.tagToQueryMap.get(tag);
    }
    function syncTreeParseQueryKey_(queryKey) {
      const splitIndex = queryKey.indexOf("$");
      assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, "Bad queryKey.");
      return {
        queryId: queryKey.substr(splitIndex + 1),
        path: new Path(queryKey.substr(0, splitIndex))
      };
    }
    function syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {
      const syncPoint = syncTree.syncPointTree_.get(queryPath);
      assert(syncPoint, "Missing sync point for query tag that we're tracking");
      const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);
      return syncPointApplyOperation(syncPoint, operation, writesCache, null);
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ExistingValueProvider {
      constructor(node_) {
        this.node_ = node_;
      }
      getImmediateChild(childName) {
        const child2 = this.node_.getImmediateChild(childName);
        return new ExistingValueProvider(child2);
      }
      node() {
        return this.node_;
      }
    }
    class DeferredValueProvider {
      constructor(syncTree, path) {
        this.syncTree_ = syncTree;
        this.path_ = path;
      }
      getImmediateChild(childName) {
        const childPath = pathChild(this.path_, childName);
        return new DeferredValueProvider(this.syncTree_, childPath);
      }
      node() {
        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);
      }
    }
    const generateWithValues = function(values) {
      values = values || {};
      values["timestamp"] = values["timestamp"] || (/* @__PURE__ */ new Date()).getTime();
      return values;
    };
    const resolveDeferredLeafValue = function(value, existingVal, serverValues) {
      if (!value || typeof value !== "object") {
        return value;
      }
      assert(".sv" in value, "Unexpected leaf node or priority contents");
      if (typeof value[".sv"] === "string") {
        return resolveScalarDeferredValue(value[".sv"], existingVal, serverValues);
      } else if (typeof value[".sv"] === "object") {
        return resolveComplexDeferredValue(value[".sv"], existingVal);
      } else {
        assert(false, "Unexpected server value: " + JSON.stringify(value, null, 2));
      }
    };
    const resolveScalarDeferredValue = function(op, existing, serverValues) {
      switch (op) {
        case "timestamp":
          return serverValues["timestamp"];
        default:
          assert(false, "Unexpected server value: " + op);
      }
    };
    const resolveComplexDeferredValue = function(op, existing, unused) {
      if (!op.hasOwnProperty("increment")) {
        assert(false, "Unexpected server value: " + JSON.stringify(op, null, 2));
      }
      const delta = op["increment"];
      if (typeof delta !== "number") {
        assert(false, "Unexpected increment value: " + delta);
      }
      const existingNode = existing.node();
      assert(existingNode !== null && typeof existingNode !== "undefined", "Expected ChildrenNode.EMPTY_NODE for nulls");
      if (!existingNode.isLeafNode()) {
        return delta;
      }
      const leaf = existingNode;
      const existingVal = leaf.getValue();
      if (typeof existingVal !== "number") {
        return delta;
      }
      return existingVal + delta;
    };
    const resolveDeferredValueTree = function(path, node, syncTree, serverValues) {
      return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
    };
    const resolveDeferredValueSnapshot = function(node, existing, serverValues) {
      return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
    };
    function resolveDeferredValue(node, existingVal, serverValues) {
      const rawPri = node.getPriority().val();
      const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild(".priority"), serverValues);
      let newNode;
      if (node.isLeafNode()) {
        const leafNode = node;
        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
        if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {
          return new LeafNode(value, nodeFromJSON(priority));
        } else {
          return node;
        }
      } else {
        const childrenNode = node;
        newNode = childrenNode;
        if (priority !== childrenNode.getPriority().val()) {
          newNode = newNode.updatePriority(new LeafNode(priority));
        }
        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
          const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
          if (newChildNode !== childNode) {
            newNode = newNode.updateImmediateChild(childName, newChildNode);
          }
        });
        return newNode;
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Tree {
      /**
       * @param name - Optional name of the node.
       * @param parent - Optional parent node.
       * @param node - Optional node to wrap.
       */
      constructor(name2 = "", parent = null, node = { children: {}, childCount: 0 }) {
        this.name = name2;
        this.parent = parent;
        this.node = node;
      }
    }
    function treeSubTree(tree, pathObj) {
      let path = pathObj instanceof Path ? pathObj : new Path(pathObj);
      let child2 = tree, next = pathGetFront(path);
      while (next !== null) {
        const childNode = safeGet(child2.node.children, next) || {
          children: {},
          childCount: 0
        };
        child2 = new Tree(next, child2, childNode);
        path = pathPopFront(path);
        next = pathGetFront(path);
      }
      return child2;
    }
    function treeGetValue(tree) {
      return tree.node.value;
    }
    function treeSetValue(tree, value) {
      tree.node.value = value;
      treeUpdateParents(tree);
    }
    function treeHasChildren(tree) {
      return tree.node.childCount > 0;
    }
    function treeIsEmpty(tree) {
      return treeGetValue(tree) === void 0 && !treeHasChildren(tree);
    }
    function treeForEachChild(tree, action) {
      each(tree.node.children, (child2, childTree) => {
        action(new Tree(child2, tree, childTree));
      });
    }
    function treeForEachDescendant(tree, action, includeSelf, childrenFirst) {
      if (includeSelf && true) {
        action(tree);
      }
      treeForEachChild(tree, (child2) => {
        treeForEachDescendant(child2, action, true);
      });
    }
    function treeForEachAncestor(tree, action, includeSelf) {
      let node = tree.parent;
      while (node !== null) {
        if (action(node)) {
          return true;
        }
        node = node.parent;
      }
      return false;
    }
    function treeGetPath(tree) {
      return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + "/" + tree.name);
    }
    function treeUpdateParents(tree) {
      if (tree.parent !== null) {
        treeUpdateChild(tree.parent, tree.name, tree);
      }
    }
    function treeUpdateChild(tree, childName, child2) {
      const childEmpty = treeIsEmpty(child2);
      const childExists = contains(tree.node.children, childName);
      if (childEmpty && childExists) {
        delete tree.node.children[childName];
        tree.node.childCount--;
        treeUpdateParents(tree);
      } else if (!childEmpty && !childExists) {
        tree.node.children[childName] = child2.node;
        tree.node.childCount++;
        treeUpdateParents(tree);
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
    const INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
    const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
    const isValidKey = function(key) {
      return typeof key === "string" && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);
    };
    const isValidPathString = function(pathString) {
      return typeof pathString === "string" && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);
    };
    const isValidRootPathString = function(pathString) {
      if (pathString) {
        pathString = pathString.replace(/^\/*\.info(\/|$)/, "/");
      }
      return isValidPathString(pathString);
    };
    const validateFirebaseData = function(errorPrefix2, data, path_) {
      const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix2) : path_;
      if (data === void 0) {
        throw new Error(errorPrefix2 + "contains undefined " + validationPathToErrorString(path));
      }
      if (typeof data === "function") {
        throw new Error(errorPrefix2 + "contains a function " + validationPathToErrorString(path) + " with contents = " + data.toString());
      }
      if (isInvalidJSONNumber(data)) {
        throw new Error(errorPrefix2 + "contains " + data.toString() + " " + validationPathToErrorString(path));
      }
      if (typeof data === "string" && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {
        throw new Error(errorPrefix2 + "contains a string greater than " + MAX_LEAF_SIZE_ + " utf8 bytes " + validationPathToErrorString(path) + " ('" + data.substring(0, 50) + "...')");
      }
      if (data && typeof data === "object") {
        let hasDotValue = false;
        let hasActualChild = false;
        each(data, (key, value) => {
          if (key === ".value") {
            hasDotValue = true;
          } else if (key !== ".priority" && key !== ".sv") {
            hasActualChild = true;
            if (!isValidKey(key)) {
              throw new Error(errorPrefix2 + " contains an invalid key (" + key + ") " + validationPathToErrorString(path) + `.  Keys must be non-empty strings and can't contain ".", "#", "$", "/", "[", or "]"`);
            }
          }
          validationPathPush(path, key);
          validateFirebaseData(errorPrefix2, value, path);
          validationPathPop(path);
        });
        if (hasDotValue && hasActualChild) {
          throw new Error(errorPrefix2 + ' contains ".value" child ' + validationPathToErrorString(path) + " in addition to actual children.");
        }
      }
    };
    const validateUrl = function(fnName, parsedUrl) {
      const pathString = parsedUrl.path.toString();
      if (!(typeof parsedUrl.repoInfo.host === "string") || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(":")[0] !== "localhost" || pathString.length !== 0 && !isValidRootPathString(pathString)) {
        throw new Error(errorPrefix(fnName, "url") + `must be a valid firebase URL and the path can't contain ".", "#", "$", "[", or "]".`);
      }
    };
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class EventQueue {
      constructor() {
        this.eventLists_ = [];
        this.recursionDepth_ = 0;
      }
    }
    function eventQueueQueueEvents(eventQueue, eventDataList) {
      let currList = null;
      for (let i = 0; i < eventDataList.length; i++) {
        const data = eventDataList[i];
        const path = data.getPath();
        if (currList !== null && !pathEquals(path, currList.path)) {
          eventQueue.eventLists_.push(currList);
          currList = null;
        }
        if (currList === null) {
          currList = { events: [], path };
        }
        currList.events.push(data);
      }
      if (currList) {
        eventQueue.eventLists_.push(currList);
      }
    }
    function eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {
      eventQueueQueueEvents(eventQueue, eventDataList);
      eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, (eventPath) => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));
    }
    function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {
      eventQueue.recursionDepth_++;
      let sentAll = true;
      for (let i = 0; i < eventQueue.eventLists_.length; i++) {
        const eventList = eventQueue.eventLists_[i];
        if (eventList) {
          const eventPath = eventList.path;
          if (predicate(eventPath)) {
            eventListRaise(eventQueue.eventLists_[i]);
            eventQueue.eventLists_[i] = null;
          } else {
            sentAll = false;
          }
        }
      }
      if (sentAll) {
        eventQueue.eventLists_ = [];
      }
      eventQueue.recursionDepth_--;
    }
    function eventListRaise(eventList) {
      for (let i = 0; i < eventList.events.length; i++) {
        const eventData = eventList.events[i];
        if (eventData !== null) {
          eventList.events[i] = null;
          const eventFn = eventData.getEventRunner();
          if (logger) {
            log("event: " + eventData.toString());
          }
          exceptionGuard(eventFn);
        }
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const INTERRUPT_REASON = "repo_interrupt";
    const MAX_TRANSACTION_RETRIES = 25;
    class Repo {
      constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {
        this.repoInfo_ = repoInfo_;
        this.forceRestClient_ = forceRestClient_;
        this.authTokenProvider_ = authTokenProvider_;
        this.appCheckProvider_ = appCheckProvider_;
        this.dataUpdateCount = 0;
        this.statsListener_ = null;
        this.eventQueue_ = new EventQueue();
        this.nextWriteId_ = 1;
        this.interceptServerDataCallback_ = null;
        this.onDisconnect_ = newSparseSnapshotTree();
        this.transactionQueueTree_ = new Tree();
        this.persistentConnection_ = null;
        this.key = this.repoInfo_.toURLString();
      }
      /**
       * @returns The URL corresponding to the root of this Firebase.
       */
      toString() {
        return (this.repoInfo_.secure ? "https://" : "http://") + this.repoInfo_.host;
      }
    }
    function repoStart(repo, appId, authOverride) {
      repo.stats_ = statsManagerGetCollection(repo.repoInfo_);
      if (repo.forceRestClient_ || beingCrawled()) {
        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {
          repoOnDataUpdate(repo, pathString, data, isMerge, tag);
        }, repo.authTokenProvider_, repo.appCheckProvider_);
        setTimeout(() => repoOnConnectStatus(
          repo,
          /* connectStatus= */
          true
        ), 0);
      } else {
        if (typeof authOverride !== "undefined" && authOverride !== null) {
          if (typeof authOverride !== "object") {
            throw new Error("Only objects are supported for option databaseAuthVariableOverride");
          }
          try {
            stringify(authOverride);
          } catch (e) {
            throw new Error("Invalid authOverride provided: " + e);
          }
        }
        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {
          repoOnDataUpdate(repo, pathString, data, isMerge, tag);
        }, (connectStatus) => {
          repoOnConnectStatus(repo, connectStatus);
        }, (updates) => {
          repoOnServerInfoUpdate(repo, updates);
        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);
        repo.server_ = repo.persistentConnection_;
      }
      repo.authTokenProvider_.addTokenChangeListener((token) => {
        repo.server_.refreshAuthToken(token);
      });
      repo.appCheckProvider_.addTokenChangeListener((result) => {
        repo.server_.refreshAppCheckToken(result.token);
      });
      repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));
      repo.infoData_ = new SnapshotHolder();
      repo.infoSyncTree_ = new SyncTree({
        startListening: (query2, tag, currentHashFn, onComplete) => {
          let infoEvents = [];
          const node = repo.infoData_.getNode(query2._path);
          if (!node.isEmpty()) {
            infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query2._path, node);
            setTimeout(() => {
              onComplete("ok");
            }, 0);
          }
          return infoEvents;
        },
        stopListening: () => {
        }
      });
      repoUpdateInfo(repo, "connected", false);
      repo.serverSyncTree_ = new SyncTree({
        startListening: (query2, tag, currentHashFn, onComplete) => {
          repo.server_.listen(query2, currentHashFn, tag, (status, data) => {
            const events = onComplete(status, data);
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query2._path, events);
          });
          return [];
        },
        stopListening: (query2, tag) => {
          repo.server_.unlisten(query2, tag);
        }
      });
    }
    function repoServerTime(repo) {
      const offsetNode = repo.infoData_.getNode(new Path(".info/serverTimeOffset"));
      const offset = offsetNode.val() || 0;
      return (/* @__PURE__ */ new Date()).getTime() + offset;
    }
    function repoGenerateServerValues(repo) {
      return generateWithValues({
        timestamp: repoServerTime(repo)
      });
    }
    function repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
      repo.dataUpdateCount++;
      const path = new Path(pathString);
      data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;
      let events = [];
      if (tag) {
        if (isMerge) {
          const taggedChildren = map(data, (raw) => nodeFromJSON(raw));
          events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);
        } else {
          const taggedSnap = nodeFromJSON(data);
          events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);
        }
      } else if (isMerge) {
        const changedChildren = map(data, (raw) => nodeFromJSON(raw));
        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);
      } else {
        const snap = nodeFromJSON(data);
        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);
      }
      let affectedPath = path;
      if (events.length > 0) {
        affectedPath = repoRerunTransactions(repo, path);
      }
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);
    }
    function repoOnConnectStatus(repo, connectStatus) {
      repoUpdateInfo(repo, "connected", connectStatus);
      if (connectStatus === false) {
        repoRunOnDisconnectEvents(repo);
      }
    }
    function repoOnServerInfoUpdate(repo, updates) {
      each(updates, (key, value) => {
        repoUpdateInfo(repo, key, value);
      });
    }
    function repoUpdateInfo(repo, pathString, value) {
      const path = new Path("/.info/" + pathString);
      const newNode = nodeFromJSON(value);
      repo.infoData_.updateSnapshot(path, newNode);
      const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
    }
    function repoGetNextWriteId(repo) {
      return repo.nextWriteId_++;
    }
    function repoRunOnDisconnectEvents(repo) {
      repoLog(repo, "onDisconnectEvents");
      const serverValues = repoGenerateServerValues(repo);
      const resolvedOnDisconnectTree = newSparseSnapshotTree();
      sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {
        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);
        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);
      });
      let events = [];
      sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {
        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));
        const affectedPath = repoAbortTransactions(repo, path);
        repoRerunTransactions(repo, affectedPath);
      });
      repo.onDisconnect_ = newSparseSnapshotTree();
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);
    }
    function repoInterrupt(repo) {
      if (repo.persistentConnection_) {
        repo.persistentConnection_.interrupt(INTERRUPT_REASON);
      }
    }
    function repoLog(repo, ...varArgs) {
      let prefix = "";
      if (repo.persistentConnection_) {
        prefix = repo.persistentConnection_.id + ":";
      }
      log(prefix, ...varArgs);
    }
    function repoGetLatestState(repo, path, excludeSets) {
      return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;
    }
    function repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {
      if (!node) {
        repoPruneCompletedTransactionsBelowNode(repo, node);
      }
      if (treeGetValue(node)) {
        const queue = repoBuildTransactionQueue(repo, node);
        assert(queue.length > 0, "Sending zero length transaction queue");
        const allRun = queue.every(
          (transaction) => transaction.status === 0
          /* TransactionStatus.RUN */
        );
        if (allRun) {
          repoSendTransactionQueue(repo, treeGetPath(node), queue);
        }
      } else if (treeHasChildren(node)) {
        treeForEachChild(node, (childNode) => {
          repoSendReadyTransactions(repo, childNode);
        });
      }
    }
    function repoSendTransactionQueue(repo, path, queue) {
      const setsToIgnore = queue.map((txn) => {
        return txn.currentWriteId;
      });
      const latestState = repoGetLatestState(repo, path, setsToIgnore);
      let snapToSend = latestState;
      const latestHash = latestState.hash();
      for (let i = 0; i < queue.length; i++) {
        const txn = queue[i];
        assert(txn.status === 0, "tryToSendTransactionQueue_: items in queue should all be run.");
        txn.status = 1;
        txn.retryCount++;
        const relativePath = newRelativePath(path, txn.path);
        snapToSend = snapToSend.updateChild(relativePath, txn.currentOutputSnapshotRaw);
      }
      const dataToSend = snapToSend.val(true);
      const pathToSend = path;
      repo.server_.put(pathToSend.toString(), dataToSend, (status) => {
        repoLog(repo, "transaction put response", {
          path: pathToSend.toString(),
          status
        });
        let events = [];
        if (status === "ok") {
          const callbacks = [];
          for (let i = 0; i < queue.length; i++) {
            queue[i].status = 2;
            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));
            if (queue[i].onComplete) {
              callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));
            }
            queue[i].unwatcher();
          }
          repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));
          repoSendReadyTransactions(repo, repo.transactionQueueTree_);
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
          for (let i = 0; i < callbacks.length; i++) {
            exceptionGuard(callbacks[i]);
          }
        } else {
          if (status === "datastale") {
            for (let i = 0; i < queue.length; i++) {
              if (queue[i].status === 3) {
                queue[i].status = 4;
              } else {
                queue[i].status = 0;
              }
            }
          } else {
            warn("transaction at " + pathToSend.toString() + " failed: " + status);
            for (let i = 0; i < queue.length; i++) {
              queue[i].status = 4;
              queue[i].abortReason = status;
            }
          }
          repoRerunTransactions(repo, path);
        }
      }, latestHash);
    }
    function repoRerunTransactions(repo, changedPath) {
      const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);
      const path = treeGetPath(rootMostTransactionNode);
      const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);
      repoRerunTransactionQueue(repo, queue, path);
      return path;
    }
    function repoRerunTransactionQueue(repo, queue, path) {
      if (queue.length === 0) {
        return;
      }
      const callbacks = [];
      let events = [];
      const txnsToRerun = queue.filter((q2) => {
        return q2.status === 0;
      });
      const setsToIgnore = txnsToRerun.map((q2) => {
        return q2.currentWriteId;
      });
      for (let i = 0; i < queue.length; i++) {
        const transaction = queue[i];
        const relativePath = newRelativePath(path, transaction.path);
        let abortTransaction = false, abortReason;
        assert(relativePath !== null, "rerunTransactionsUnderNode_: relativePath should not be null.");
        if (transaction.status === 4) {
          abortTransaction = true;
          abortReason = transaction.abortReason;
          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
        } else if (transaction.status === 0) {
          if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
            abortTransaction = true;
            abortReason = "maxretry";
            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
          } else {
            const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);
            transaction.currentInputSnapshot = currentNode;
            const newData = queue[i].update(currentNode.val());
            if (newData !== void 0) {
              validateFirebaseData("transaction failed: Data returned ", newData, transaction.path);
              let newDataNode = nodeFromJSON(newData);
              const hasExplicitPriority = typeof newData === "object" && newData != null && contains(newData, ".priority");
              if (!hasExplicitPriority) {
                newDataNode = newDataNode.updatePriority(currentNode.getPriority());
              }
              const oldWriteId = transaction.currentWriteId;
              const serverValues = repoGenerateServerValues(repo);
              const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
              transaction.currentOutputSnapshotRaw = newDataNode;
              transaction.currentOutputSnapshotResolved = newNodeResolved;
              transaction.currentWriteId = repoGetNextWriteId(repo);
              setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
              events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
              events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));
            } else {
              abortTransaction = true;
              abortReason = "nodata";
              events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
            }
          }
        }
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
        events = [];
        if (abortTransaction) {
          queue[i].status = 2;
          (function(unwatcher) {
            setTimeout(unwatcher, Math.floor(0));
          })(queue[i].unwatcher);
          if (queue[i].onComplete) {
            if (abortReason === "nodata") {
              callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));
            } else {
              callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));
            }
          }
        }
      }
      repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);
      for (let i = 0; i < callbacks.length; i++) {
        exceptionGuard(callbacks[i]);
      }
      repoSendReadyTransactions(repo, repo.transactionQueueTree_);
    }
    function repoGetAncestorTransactionNode(repo, path) {
      let front;
      let transactionNode = repo.transactionQueueTree_;
      front = pathGetFront(path);
      while (front !== null && treeGetValue(transactionNode) === void 0) {
        transactionNode = treeSubTree(transactionNode, front);
        path = pathPopFront(path);
        front = pathGetFront(path);
      }
      return transactionNode;
    }
    function repoBuildTransactionQueue(repo, transactionNode) {
      const transactionQueue = [];
      repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);
      transactionQueue.sort((a, b2) => a.order - b2.order);
      return transactionQueue;
    }
    function repoAggregateTransactionQueuesForNode(repo, node, queue) {
      const nodeQueue = treeGetValue(node);
      if (nodeQueue) {
        for (let i = 0; i < nodeQueue.length; i++) {
          queue.push(nodeQueue[i]);
        }
      }
      treeForEachChild(node, (child2) => {
        repoAggregateTransactionQueuesForNode(repo, child2, queue);
      });
    }
    function repoPruneCompletedTransactionsBelowNode(repo, node) {
      const queue = treeGetValue(node);
      if (queue) {
        let to = 0;
        for (let from = 0; from < queue.length; from++) {
          if (queue[from].status !== 2) {
            queue[to] = queue[from];
            to++;
          }
        }
        queue.length = to;
        treeSetValue(node, queue.length > 0 ? queue : void 0);
      }
      treeForEachChild(node, (childNode) => {
        repoPruneCompletedTransactionsBelowNode(repo, childNode);
      });
    }
    function repoAbortTransactions(repo, path) {
      const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));
      const transactionNode = treeSubTree(repo.transactionQueueTree_, path);
      treeForEachAncestor(transactionNode, (node) => {
        repoAbortTransactionsOnNode(repo, node);
      });
      repoAbortTransactionsOnNode(repo, transactionNode);
      treeForEachDescendant(transactionNode, (node) => {
        repoAbortTransactionsOnNode(repo, node);
      });
      return affectedPath;
    }
    function repoAbortTransactionsOnNode(repo, node) {
      const queue = treeGetValue(node);
      if (queue) {
        const callbacks = [];
        let events = [];
        let lastSent = -1;
        for (let i = 0; i < queue.length; i++) {
          if (queue[i].status === 3) ;
          else if (queue[i].status === 1) {
            assert(lastSent === i - 1, "All SENT items should be at beginning of queue.");
            lastSent = i;
            queue[i].status = 3;
            queue[i].abortReason = "set";
          } else {
            assert(queue[i].status === 0, "Unexpected transaction status in abort");
            queue[i].unwatcher();
            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));
            if (queue[i].onComplete) {
              callbacks.push(queue[i].onComplete.bind(null, new Error("set"), false, null));
            }
          }
        }
        if (lastSent === -1) {
          treeSetValue(node, void 0);
        } else {
          queue.length = lastSent + 1;
        }
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);
        for (let i = 0; i < callbacks.length; i++) {
          exceptionGuard(callbacks[i]);
        }
      }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function decodePath(pathString) {
      let pathStringDecoded = "";
      const pieces = pathString.split("/");
      for (let i = 0; i < pieces.length; i++) {
        if (pieces[i].length > 0) {
          let piece = pieces[i];
          try {
            piece = decodeURIComponent(piece.replace(/\+/g, " "));
          } catch (e) {
          }
          pathStringDecoded += "/" + piece;
        }
      }
      return pathStringDecoded;
    }
    function decodeQuery(queryString) {
      const results = {};
      if (queryString.charAt(0) === "?") {
        queryString = queryString.substring(1);
      }
      for (const segment of queryString.split("&")) {
        if (segment.length === 0) {
          continue;
        }
        const kv = segment.split("=");
        if (kv.length === 2) {
          results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
        } else {
          warn(`Invalid query segment '${segment}' in query '${queryString}'`);
        }
      }
      return results;
    }
    const parseRepoInfo = function(dataURL, nodeAdmin) {
      const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
      if (parsedUrl.domain === "firebase.com") {
        fatal(parsedUrl.host + " is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");
      }
      if ((!namespace || namespace === "undefined") && parsedUrl.domain !== "localhost") {
        fatal("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");
      }
      if (!parsedUrl.secure) {
        warnIfPageIsSecure();
      }
      const webSocketOnly = parsedUrl.scheme === "ws" || parsedUrl.scheme === "wss";
      return {
        repoInfo: new RepoInfo(
          parsedUrl.host,
          parsedUrl.secure,
          namespace,
          webSocketOnly,
          nodeAdmin,
          /*persistenceKey=*/
          "",
          /*includeNamespaceInQueryParams=*/
          namespace !== parsedUrl.subdomain
        ),
        path: new Path(parsedUrl.pathString)
      };
    };
    const parseDatabaseURL = function(dataURL) {
      let host = "", domain = "", subdomain = "", pathString = "", namespace = "";
      let secure = true, scheme = "https", port = 443;
      if (typeof dataURL === "string") {
        let colonInd = dataURL.indexOf("//");
        if (colonInd >= 0) {
          scheme = dataURL.substring(0, colonInd - 1);
          dataURL = dataURL.substring(colonInd + 2);
        }
        let slashInd = dataURL.indexOf("/");
        if (slashInd === -1) {
          slashInd = dataURL.length;
        }
        let questionMarkInd = dataURL.indexOf("?");
        if (questionMarkInd === -1) {
          questionMarkInd = dataURL.length;
        }
        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
        if (slashInd < questionMarkInd) {
          pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
        }
        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
        colonInd = host.indexOf(":");
        if (colonInd >= 0) {
          secure = scheme === "https" || scheme === "wss";
          port = parseInt(host.substring(colonInd + 1), 10);
        } else {
          colonInd = host.length;
        }
        const hostWithoutPort = host.slice(0, colonInd);
        if (hostWithoutPort.toLowerCase() === "localhost") {
          domain = "localhost";
        } else if (hostWithoutPort.split(".").length <= 2) {
          domain = hostWithoutPort;
        } else {
          const dotInd = host.indexOf(".");
          subdomain = host.substring(0, dotInd).toLowerCase();
          domain = host.substring(dotInd + 1);
          namespace = subdomain;
        }
        if ("ns" in queryParams) {
          namespace = queryParams["ns"];
        }
      }
      return {
        host,
        port,
        domain,
        subdomain,
        secure,
        scheme,
        pathString,
        namespace
      };
    };
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class QueryImpl {
      /**
       * @hideconstructor
       */
      constructor(_repo, _path, _queryParams, _orderByCalled) {
        this._repo = _repo;
        this._path = _path;
        this._queryParams = _queryParams;
        this._orderByCalled = _orderByCalled;
      }
      get key() {
        if (pathIsEmpty(this._path)) {
          return null;
        } else {
          return pathGetBack(this._path);
        }
      }
      get ref() {
        return new ReferenceImpl(this._repo, this._path);
      }
      get _queryIdentifier() {
        const obj = queryParamsGetQueryObject(this._queryParams);
        const id2 = ObjectToUniqueKey(obj);
        return id2 === "{}" ? "default" : id2;
      }
      /**
       * An object representation of the query parameters used by this Query.
       */
      get _queryObject() {
        return queryParamsGetQueryObject(this._queryParams);
      }
      isEqual(other) {
        other = getModularInstance(other);
        if (!(other instanceof QueryImpl)) {
          return false;
        }
        const sameRepo = this._repo === other._repo;
        const samePath = pathEquals(this._path, other._path);
        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;
        return sameRepo && samePath && sameQueryIdentifier;
      }
      toJSON() {
        return this.toString();
      }
      toString() {
        return this._repo.toString() + pathToUrlEncodedString(this._path);
      }
    }
    class ReferenceImpl extends QueryImpl {
      /** @hideconstructor */
      constructor(repo, path) {
        super(repo, path, new QueryParams(), false);
      }
      get parent() {
        const parentPath = pathParent(this._path);
        return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);
      }
      get root() {
        let ref2 = this;
        while (ref2.parent !== null) {
          ref2 = ref2.parent;
        }
        return ref2;
      }
    }
    syncPointSetReferenceConstructor(ReferenceImpl);
    syncTreeSetReferenceConstructor(ReferenceImpl);
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const FIREBASE_DATABASE_EMULATOR_HOST_VAR = "FIREBASE_DATABASE_EMULATOR_HOST";
    const repos = {};
    let useRestClient = false;
    function repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {
      repo.repoInfo_ = new RepoInfo(
        `${host}:${port}`,
        /* secure= */
        false,
        repo.repoInfo_.namespace,
        repo.repoInfo_.webSocketOnly,
        repo.repoInfo_.nodeAdmin,
        repo.repoInfo_.persistenceKey,
        repo.repoInfo_.includeNamespaceInQueryParams,
        /*isUsingEmulator=*/
        true
      );
      if (tokenProvider) {
        repo.authTokenProvider_ = tokenProvider;
      }
    }
    function repoManagerDatabaseFromApp(app2, authProvider, appCheckProvider, url, nodeAdmin) {
      let dbUrl = url || app2.options.databaseURL;
      if (dbUrl === void 0) {
        if (!app2.options.projectId) {
          fatal("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp().");
        }
        log("Using default host for project ", app2.options.projectId);
        dbUrl = `${app2.options.projectId}-default-rtdb.firebaseio.com`;
      }
      let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
      let repoInfo = parsedUrl.repoInfo;
      let dbEmulatorHost = void 0;
      if (typeof process !== "undefined" && define_process_env_default) {
        dbEmulatorHost = define_process_env_default[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
      }
      if (dbEmulatorHost) {
        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;
        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
        repoInfo = parsedUrl.repoInfo;
      } else {
        !parsedUrl.repoInfo.secure;
      }
      const authTokenProvider = new FirebaseAuthTokenProvider(app2.name, app2.options, authProvider);
      validateUrl("Invalid Firebase Database URL", parsedUrl);
      if (!pathIsEmpty(parsedUrl.path)) {
        fatal("Database URL must point to the root of a Firebase Database (not including a child path).");
      }
      const repo = repoManagerCreateRepo(repoInfo, app2, authTokenProvider, new AppCheckTokenProvider(app2.name, appCheckProvider));
      return new Database(repo, app2);
    }
    function repoManagerDeleteRepo(repo, appName) {
      const appRepos = repos[appName];
      if (!appRepos || appRepos[repo.key] !== repo) {
        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);
      }
      repoInterrupt(repo);
      delete appRepos[repo.key];
    }
    function repoManagerCreateRepo(repoInfo, app2, authTokenProvider, appCheckProvider) {
      let appRepos = repos[app2.name];
      if (!appRepos) {
        appRepos = {};
        repos[app2.name] = appRepos;
      }
      let repo = appRepos[repoInfo.toURLString()];
      if (repo) {
        fatal("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.");
      }
      repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);
      appRepos[repoInfo.toURLString()] = repo;
      return repo;
    }
    class Database {
      /** @hideconstructor */
      constructor(_repoInternal, app2) {
        this._repoInternal = _repoInternal;
        this.app = app2;
        this["type"] = "database";
        this._instanceStarted = false;
      }
      get _repo() {
        if (!this._instanceStarted) {
          repoStart(this._repoInternal, this.app.options.appId, this.app.options["databaseAuthVariableOverride"]);
          this._instanceStarted = true;
        }
        return this._repoInternal;
      }
      get _root() {
        if (!this._rootInternal) {
          this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());
        }
        return this._rootInternal;
      }
      _delete() {
        if (this._rootInternal !== null) {
          repoManagerDeleteRepo(this._repo, this.app.name);
          this._repoInternal = null;
          this._rootInternal = null;
        }
        return Promise.resolve();
      }
      _checkNotDeleted(apiName) {
        if (this._rootInternal === null) {
          fatal("Cannot call " + apiName + " on a deleted database.");
        }
      }
    }
    function getDatabase(app2 = getApp(), url) {
      const db2 = _getProvider(app2, "database").getImmediate({
        identifier: url
      });
      if (!db2._instanceStarted) {
        const emulator = getDefaultEmulatorHostnameAndPort("database");
        if (emulator) {
          connectDatabaseEmulator(db2, ...emulator);
        }
      }
      return db2;
    }
    function connectDatabaseEmulator(db2, host, port, options = {}) {
      db2 = getModularInstance(db2);
      db2._checkNotDeleted("useEmulator");
      if (db2._instanceStarted) {
        fatal("Cannot call useEmulator() after instance has already been initialized.");
      }
      const repo = db2._repoInternal;
      let tokenProvider = void 0;
      if (repo.repoInfo_.nodeAdmin) {
        if (options.mockUserToken) {
          fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".');
        }
        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);
      } else if (options.mockUserToken) {
        const token = typeof options.mockUserToken === "string" ? options.mockUserToken : createMockUserToken(options.mockUserToken, db2.app.options.projectId);
        tokenProvider = new EmulatorTokenProvider(token);
      }
      repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);
    }
    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerDatabase(variant) {
      setSDKVersion(SDK_VERSION$1);
      _registerComponent(new Component(
        "database",
        (container, { instanceIdentifier: url }) => {
          const app2 = container.getProvider("app").getImmediate();
          const authProvider = container.getProvider("auth-internal");
          const appCheckProvider = container.getProvider("app-check-internal");
          return repoManagerDatabaseFromApp(app2, authProvider, appCheckProvider, url);
        },
        "PUBLIC"
        /* ComponentType.PUBLIC */
      ).setMultipleInstances(true));
      registerVersion(name, version, variant);
      registerVersion(name, version, "esm2017");
    }
    PersistentConnection.prototype.simpleListen = function(pathString, onComplete) {
      this.sendRequest("q", { p: pathString }, onComplete);
    };
    PersistentConnection.prototype.echo = function(data, onEcho) {
      this.sendRequest("echo", { d: data }, onEcho);
    };
    registerDatabase();
    const firebaseConfig = {
      apiKey: "AIzaSyBrAL5pz0IwE_w3hskBKcKBF4oDZlV_W1k",
      authDomain: "diggin-a08f8.firebaseapp.com",
      projectId: "diggin-a08f8",
      storageBucket: "diggin-a08f8.firebasestorage.app",
      messagingSenderId: "492982442570",
      appId: "1:492982442570:web:d71209728947131f8d64b3",
      databaseURL: "https://diggin-35c8e-default-rtdb.firebaseio.com"
    };
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);
    getDatabase(app);
    const createHole = (userId, name2, icon) => __async(exports, null, function* () {
      try {
        const holesCollection = collection(db, "holes");
        const now = serverTimestamp();
        const docRef = yield addDoc(holesCollection, {
          userId,
          name: name2,
          icon,
          createdAt: now,
          updatedAt: now
        });
        return docRef.id;
      } catch (error2) {
        console.error("Error creating hole:", error2);
        throw error2;
      }
    });
    const getHole = (holeId) => __async(exports, null, function* () {
      try {
        const docRef = doc(db, "holes", holeId);
        const docSnap = yield getDoc(docRef);
        if (docSnap.exists()) {
          return __spreadValues({ id: docSnap.id }, docSnap.data());
        } else {
          return null;
        }
      } catch (error2) {
        console.error("Error getting hole:", error2);
        throw error2;
      }
    });
    const getUserHoles = (userId) => __async(exports, null, function* () {
      try {
        const holesQuery = query(
          collection(db, "holes"),
          where("userId", "==", userId),
          orderBy("updatedAt", "desc")
        );
        const querySnapshot = yield getDocs(holesQuery);
        const holes = [];
        querySnapshot.forEach((doc2) => {
          holes.push(__spreadValues({ id: doc2.id }, doc2.data()));
        });
        return holes;
      } catch (error2) {
        console.error("Error getting user holes:", error2);
        throw error2;
      }
    });
    const WEB_CLIENT_ID = "492982442570-28e3lccep11l5a37ib4e8g2t2pnjcf2l.apps.googleusercontent.com";
    const isChromeAvailable = () => {
      return typeof window !== "undefined" && !!window.chrome;
    };
    const isChromeIdentityAvailable = () => {
      var _a;
      return isChromeAvailable() && !!((_a = window.chrome) == null ? void 0 : _a.identity);
    };
    const isChromeRuntimeAvailable = () => {
      var _a;
      return isChromeAvailable() && !!((_a = window.chrome) == null ? void 0 : _a.runtime);
    };
    const signInWithGoogle = () => __async(exports, null, function* () {
      try {
        console.log("Starting Google sign-in with web auth flow");
        if (!isChromeIdentityAvailable() || !isChromeRuntimeAvailable()) {
          throw new Error("Chrome identity 또는 runtime API를 사용할 수 없습니다.");
        }
        const authURL = new URL("https://accounts.google.com/o/oauth2/auth");
        authURL.searchParams.append("client_id", WEB_CLIENT_ID);
        authURL.searchParams.append("response_type", "token id_token");
        authURL.searchParams.append("redirect_uri", `https://${chrome.runtime.id}.chromiumapp.org/`);
        authURL.searchParams.append("scope", "email profile openid");
        const responseUrl = yield new Promise((resolve, reject) => {
          chrome.identity.launchWebAuthFlow(
            { url: authURL.toString(), interactive: true },
            (responseUrl2) => {
              if (chrome.runtime.lastError) {
                console.error("Identity API error:", chrome.runtime.lastError);
                reject(chrome.runtime.lastError);
                return;
              }
              if (!responseUrl2) {
                reject(new Error("인증 응답을 받지 못했습니다."));
                return;
              }
              resolve(responseUrl2);
            }
          );
        });
        const url = new URL(responseUrl);
        const params = new URLSearchParams(url.hash.substring(1));
        const idToken = params.get("id_token");
        if (!idToken) {
          throw new Error("ID 토큰을 찾을 수 없습니다.");
        }
        console.log("Got id_token from Google Auth");
        const credential = GoogleAuthProvider.credential(idToken);
        const userCredential = yield signInWithCredential(auth, credential);
        const user = userCredential.user;
        console.log("Firebase authentication successful");
        yield setDoc(doc(db, "users", user.uid), {
          uid: user.uid,
          email: user.email,
          displayName: user.displayName,
          photoURL: user.photoURL,
          lastLogin: serverTimestamp()
        }, { merge: true });
        console.log("User document updated in Firestore");
        return user;
      } catch (error2) {
        console.error("Error signing in with Google:", error2);
        throw error2;
      }
    });
    const onAuthStateChange = (callback) => {
      return onAuthStateChanged(auth, (user) => __async(exports, null, function* () {
        console.log("Auth state changed:", user ? "User logged in" : "No user");
        callback(user);
      }));
    };
    const isExtensionEnvironment$1 = () => {
      var _a, _b;
      return typeof window !== "undefined" && !!((_a = window.chrome) == null ? void 0 : _a.runtime) && !!((_b = window.chrome) == null ? void 0 : _b.identity);
    };
    const LoginPage = () => {
      const navigate = useNavigate();
      const [loading, setLoading] = reactExports.useState(false);
      const [error2, setError] = reactExports.useState(null);
      const handleGoogleLogin = () => __async(exports, null, function* () {
        try {
          setLoading(true);
          setError(null);
          let user;
          if (isExtensionEnvironment$1()) {
            console.log("Using Chrome extension auth flow");
            user = yield signInWithGoogle();
          } else {
            console.log("Using web auth flow");
            const provider = new GoogleAuthProvider();
            const result = yield signInWithPopup(auth, provider);
            user = result.user;
          }
          if (!user) {
            throw new Error("No user returned from authentication");
          }
          console.log("로그인 성공:", user);
          yield setDoc(doc(db, "users", user.uid), {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName,
            photoURL: user.photoURL,
            lastLogin: serverTimestamp()
          }, { merge: true });
          const userHoles = yield getUserHoles(user.uid);
          if (userHoles.length > 0) {
            navigate("/hole-list");
          } else {
            navigate("/main");
          }
        } catch (err) {
          console.error("로그인 실패:", err);
          setError("로그인에 실패했습니다. 다시 시도해주세요.");
        } finally {
          setLoading(false);
        }
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] px-2 pb-2 bg-color-surface-bg inline-flex flex-col justify-between items-center font-pretendard", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex-1 flex flex-col justify-center items-center gap-6", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-40 h-40 bg-gray-200 rounded-[100px]" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-body-lg-md text-center justify-center leading-snug text-text-primary-light", children: [
            "To start diggin,",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            "log in with your Google account."
          ] }),
          error2 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-red-500 text-sm text-center px-4", children: error2 })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "primary",
            size: "lg",
            onClick: handleGoogleLogin,
            disabled: loading,
            className: "self-stretch",
            children: loading ? "로그인 중..." : "Log in with Google"
          }
        )
      ] });
    };
    /**
     * @license lucide-react v0.487.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
    const toCamelCase = (string) => string.replace(
      /^([A-Z])|[\s-_]+(\w)/g,
      (match, p1, p2) => p2 ? p2.toUpperCase() : p1.toLowerCase()
    );
    const toPascalCase = (string) => {
      const camelCase = toCamelCase(string);
      return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);
    };
    const mergeClasses = (...classes) => classes.filter((className, index, array) => {
      return Boolean(className) && className.trim() !== "" && array.indexOf(className) === index;
    }).join(" ").trim();
    /**
     * @license lucide-react v0.487.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    var defaultAttributes = {
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    };
    /**
     * @license lucide-react v0.487.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const Icon = reactExports.forwardRef(
      (_d, ref) => {
        var _e2 = _d, {
          color = "currentColor",
          size = 24,
          strokeWidth = 2,
          absoluteStrokeWidth,
          className = "",
          children,
          iconNode
        } = _e2, rest = __objRest(_e2, [
          "color",
          "size",
          "strokeWidth",
          "absoluteStrokeWidth",
          "className",
          "children",
          "iconNode"
        ]);
        return reactExports.createElement(
          "svg",
          __spreadValues(__spreadProps(__spreadValues({
            ref
          }, defaultAttributes), {
            width: size,
            height: size,
            stroke: color,
            strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
            className: mergeClasses("lucide", className)
          }), rest),
          [
            ...iconNode.map(([tag, attrs]) => reactExports.createElement(tag, attrs)),
            ...Array.isArray(children) ? children : [children]
          ]
        );
      }
    );
    /**
     * @license lucide-react v0.487.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const createLucideIcon = (iconName, iconNode) => {
      const Component2 = reactExports.forwardRef(
        (_a, ref) => {
          var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
          return reactExports.createElement(Icon, __spreadValues({
            ref,
            iconNode,
            className: mergeClasses(
              `lucide-${toKebabCase(toPascalCase(iconName))}`,
              `lucide-${iconName}`,
              className
            )
          }, props));
        }
      );
      Component2.displayName = toPascalCase(iconName);
      return Component2;
    };
    /**
     * @license lucide-react v0.487.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode = [
      ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
      ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
    ];
    const X = createLucideIcon("x", __iconNode);
    const sizeStyles = {
      sm: "h-8 text-body-md-rg pl-3 pr-[40px]",
      // 32px height, left: 12px, right: 40px (12px + 28px)
      md: "h-10 text-body-md-rg pl-3 pr-[40px]",
      // 40px height, left: 12px, right: 40px (12px + 28px)
      lg: "h-12 text-body-md-rg pl-3 pr-[44px]"
      // 48px height, left: 12px, right: 44px (16px + 28px)
    };
    const iconPositionStyles = {
      sm: "right-3",
      // 12px from right
      md: "right-3",
      // 12px from right
      lg: "right-4"
      // 16px from right
    };
    const statusStyles = {
      default: "bg-fill-onsurface-light dark:bg-fill-onsurface-dark text-text-primary-light dark:text-text-primary-dark placeholder:text-text-tertiary-light dark:placeholder:text-text-tertiary-dark",
      disabled: "bg-fill-disabled-light dark:bg-fill-disabled-dark placeholder:text-text-disabled-light dark:placeholder:text-text-disabled-dark cursor-not-allowed"
    };
    const SingleLineTextField = reactExports.forwardRef(
      (_f, ref) => {
        var _g = _f, { size = "md", className, isDisabled, error: error2, onChange, value, defaultValue } = _g, props = __objRest(_g, ["size", "className", "isDisabled", "error", "onChange", "value", "defaultValue"]);
        const [inputValue, setInputValue] = reactExports.useState(value || defaultValue || "");
        const handleChange = (e) => {
          setInputValue(e.target.value);
          onChange == null ? void 0 : onChange(e);
        };
        const handleClear = () => {
          setInputValue("");
          const event = new Event("input", { bubbles: true });
          const input = ref;
          if (input.current) {
            Object.defineProperty(event, "target", { value: input.current });
            input.current.value = "";
            input.current.dispatchEvent(event);
          }
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-full", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            __spreadValues({
              ref,
              type: "text",
              value: inputValue,
              onChange: handleChange,
              className: cn$1(
                // Base styles
                "w-full rounded-lg outline-none transition-colors",
                // Size styles
                sizeStyles[size],
                // Status styles
                isDisabled ? statusStyles.disabled : statusStyles.default,
                // Error styles
                error2 && "border-border-error-light dark:border-border-error-dark",
                className
              ),
              disabled: isDisabled
            }, props)
          ),
          inputValue && !isDisabled && /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              onClick: handleClear,
              className: cn$1(
                "absolute top-1/2 -translate-y-1/2",
                iconPositionStyles[size],
                "text-icon-secondary-light dark:text-icon-secondary-dark",
                "focus:outline-none"
              ),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { className: "w-4 h-4" })
            }
          )
        ] });
      }
    );
    SingleLineTextField.displayName = "SingleLineTextField";
    const TextField = React.forwardRef(
      (props, ref) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(SingleLineTextField, __spreadProps(__spreadValues({}, props), { ref }));
      }
    );
    TextField.displayName = "TextField";
    const signOut = () => __async(exports, null, function* () {
      try {
        yield signOut$1(auth);
      } catch (error2) {
        console.error("Error signing out:", error2);
        throw error2;
      }
    });
    const LogOutIcon = (_h) => {
      var _i = _h, { className } = _i, props = __objRest(_i, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M2 16.2002V7.79981C2 6.97632 1.99898 6.29843 2.04395 5.74805C2.08988 5.18599 2.18827 4.6689 2.43555 4.1836L2.58985 3.90821C2.97414 3.2817 3.52513 2.7711 4.1836 2.43555L4.36719 2.34961C4.79892 2.16442 5.2562 2.08414 5.74805 2.04395C6.29843 1.99898 6.97632 2 7.79981 2H9L9.10254 2.00488C9.60667 2.05622 10 2.48232 10 3C10 3.51768 9.60667 3.94379 9.10254 3.99512L9 4H7.79981C6.94342 4 6.36117 4.00035 5.91113 4.03711C5.58253 4.06396 5.37418 4.10762 5.22461 4.16113L5.0918 4.21778C4.76256 4.38555 4.48707 4.64085 4.29492 4.9541L4.21778 5.0918C4.13809 5.2482 4.07293 5.47272 4.03711 5.91113C4.00035 6.36117 4 6.94342 4 7.79981V16.2002C4 17.0566 4.00035 17.6388 4.03711 18.0889C4.07293 18.5273 4.13809 18.7518 4.21778 18.9082L4.29492 19.0459C4.48707 19.3592 4.76256 19.6145 5.0918 19.7822L5.22461 19.8389C5.37418 19.8924 5.58253 19.936 5.91113 19.9629C6.36117 19.9997 6.94342 20 7.79981 20H9L9.10254 20.0049C9.60667 20.0562 10 20.4823 10 21C10 21.5177 9.60667 21.9438 9.10254 21.9951L9 22H7.79981C6.97632 22 6.29843 22.001 5.74805 21.9561C5.2562 21.9159 4.79892 21.8356 4.36719 21.6504L4.1836 21.5645C3.52513 21.2289 2.97414 20.7183 2.58985 20.0918L2.43555 19.8164C2.18827 19.3311 2.08988 18.814 2.04395 18.252C1.99898 17.7016 2 17.0237 2 16.2002ZM15.293 6.29297C15.6591 5.92685 16.2381 5.90426 16.6309 6.22461L16.707 6.29297L21.707 11.293C22.0976 11.6835 22.0976 12.3165 21.707 12.707L16.707 17.707C16.3165 18.0976 15.6835 18.0976 15.293 17.707C14.9024 17.3165 14.9024 16.6835 15.293 16.293L18.5859 13H9C8.44772 13 8 12.5523 8 12C8 11.4477 8.44772 11 9 11H18.5859L15.293 7.70703L15.2246 7.63086C14.9043 7.23809 14.9269 6.65909 15.293 6.29297Z", fill: "black" }) });
    };
    const AddIcon = (_j) => {
      var _k = _j, { className } = _k, props = __objRest(_k, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M12 4C12.5523 4 13 4.44772 13 5V11H19C19.5523 11 20 11.4477 20 12C20 12.5523 19.5523 13 19 13H13V19C13 19.5523 12.5523 20 12 20C11.4477 20 11 19.5523 11 19V13H5C4.44772 13 4 12.5523 4 12C4 11.4477 4.44772 11 5 11H11V5C11 4.44772 11.4477 4 12 4Z", fill: "currnetColor" }) });
    };
    const ArchiveIcon = (_l) => {
      var _m = _l, { className } = _m, props = __objRest(_m, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M5.10561 3.00004C5.13078 3.00006 5.15619 3.00008 5.18187 3.00008H18.8181C18.8438 3.00008 18.8692 3.00006 18.8944 3.00004C19.2405 2.99977 19.5385 2.99953 19.8047 3.05196C20.8866 3.26501 21.7323 4.10227 21.9475 5.17332C22.0005 5.4369 22.0002 5.73195 22 6.07458C21.9999 6.09949 21.9999 6.12465 21.9999 6.15006C21.9999 6.17548 21.9999 6.20064 22 6.22555C22.0002 6.56818 22.0005 6.86323 21.9475 7.1268C21.758 8.06989 21.0797 8.8317 20.1818 9.14573V15.8172C20.1818 16.5417 20.1818 17.1396 20.1416 17.6267C20.0998 18.1325 20.0102 18.5976 19.7854 19.0344C19.4368 19.7118 18.8805 20.2625 18.1963 20.6076C17.7551 20.8302 17.2853 20.9189 16.7743 20.9602C16.2824 21 15.6784 21 14.9466 21H9.05336C8.32159 21 7.71764 21 7.22565 20.9602C6.71466 20.9189 6.24493 20.8302 5.80372 20.6076C5.1195 20.2625 4.56321 19.7118 4.21458 19.0344C3.98978 18.5976 3.90017 18.1325 3.85842 17.6267C3.81823 17.1396 3.81823 16.5417 3.81825 15.8172L3.81825 9.14573C2.92029 8.8317 2.24197 8.06989 2.05248 7.1268C1.99953 6.86324 1.99976 6.56819 2.00004 6.22556C2.00006 6.20065 2.00008 6.17549 2.00008 6.15006C2.00008 6.12464 2.00006 6.09948 2.00004 6.07457C1.99976 5.73194 1.99953 5.43689 2.05248 5.17333C2.26768 4.10227 3.1134 3.26501 4.19527 3.05196C4.4615 2.99953 4.75953 2.99977 5.10561 3.00004ZM5.63641 9.30005V15.78C5.63641 16.5509 5.63712 17.075 5.67055 17.4801C5.70311 17.8747 5.76214 18.0764 5.83458 18.2172C6.0089 18.5559 6.28704 18.8313 6.62915 19.0038C6.77133 19.0755 6.97515 19.134 7.37371 19.1662C7.78288 19.1993 8.31223 19.2 9.09093 19.2H14.9091C15.6878 19.2 16.2171 19.1993 16.6263 19.1662C17.0248 19.134 17.2287 19.0755 17.3708 19.0038C17.713 18.8312 17.9911 18.5559 18.1654 18.2172C18.2379 18.0764 18.2969 17.8747 18.3294 17.4801C18.3629 17.075 18.3636 16.5509 18.3636 15.78V9.30005H5.63641ZM19.1974 7.50006H4.80259C4.78546 7.49866 4.76818 7.49774 4.75078 7.49729C4.62029 7.49396 4.57209 7.48712 4.54998 7.48277C4.18935 7.41175 3.90745 7.13266 3.83571 6.77564C3.82265 6.71062 3.81825 6.61139 3.81825 6.15006C3.81825 5.68874 3.82265 5.58951 3.83571 5.52449C3.90745 5.16747 4.18935 4.88838 4.54998 4.81736C4.61566 4.80443 4.71589 4.80007 5.18187 4.80007H18.8181C19.2841 4.80007 19.3843 4.80443 19.45 4.81736C19.8106 4.88838 20.0926 5.16747 20.1643 5.52449C20.1774 5.58951 20.1818 5.68874 20.1818 6.15006C20.1818 6.61139 20.1774 6.71062 20.1643 6.77564C20.0926 7.13266 19.8106 7.41175 19.45 7.48277C19.4279 7.48712 19.3797 7.49396 19.2492 7.49729C19.2318 7.49774 19.2145 7.49866 19.1974 7.50006ZM9.27275 12.9C9.27275 12.403 9.67976 12 10.1818 12H13.8182C14.3202 12 14.7273 12.403 14.7273 12.9C14.7273 13.3971 14.3202 13.8 13.8182 13.8H10.1818C9.67976 13.8 9.27275 13.3971 9.27275 12.9Z", fill: "currentColor" }) });
    };
    const BackIcon = (_n) => {
      var _o = _n, { className } = _o, props = __objRest(_o, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M16.6339 4.33474C17.122 4.78105 17.122 5.50467 16.6339 5.95098L10.0178 12L16.6339 18.049C17.122 18.4953 17.122 19.219 16.6339 19.6653C16.1457 20.1116 15.3543 20.1116 14.8661 19.6653L7.36612 12.8081C6.87796 12.3618 6.87796 11.6382 7.36612 11.1919L14.8661 4.33474C15.3543 3.88842 16.1457 3.88842 16.6339 4.33474Z", fill: "currentColor" }) });
    };
    const CheckIcon = (_p) => {
      var _q = _p, { className } = _q, props = __objRest(_q, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M21.6746 4.33795C22.1085 4.78856 22.1085 5.51913 21.6746 5.96974L9.45234 18.662C9.01843 19.1127 8.31491 19.1127 7.88099 18.662L2.32544 12.8928C1.89152 12.4422 1.89152 11.7116 2.32544 11.261C2.75935 10.8104 3.46287 10.8104 3.89679 11.261L8.66667 16.2144L20.1032 4.33795C20.5371 3.88735 21.2406 3.88735 21.6746 4.33795Z", fill: "currentColor" }) });
    };
    const ChevronRightIcon = (_r) => {
      var _s = _r, { className } = _s, props = __objRest(_s, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M8.29289 5.29289C8.68342 4.90237 9.31658 4.90237 9.70711 5.29289L15.7071 11.2929C16.0976 11.6834 16.0976 12.3166 15.7071 12.7071L9.70711 18.7071C9.31658 19.0976 8.68342 19.0976 8.29289 18.7071C7.90237 18.3166 7.90237 17.6834 8.29289 17.2929L13.5858 12L8.29289 6.70711C7.90237 6.31658 7.90237 5.68342 8.29289 5.29289Z", fill: "currentColor" }) });
    };
    const CloseIcon = (_t) => {
      var _u = _t, { className } = _u, props = __objRest(_u, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M5.29289 5.29289C5.68342 4.90237 6.31658 4.90237 6.70711 5.29289L12 10.5858L17.2929 5.29289C17.6834 4.90237 18.3166 4.90237 18.7071 5.29289C19.0976 5.68342 19.0976 6.31658 18.7071 6.70711L13.4142 12L18.7071 17.2929C19.0976 17.6834 19.0976 18.3166 18.7071 18.7071C18.3166 19.0976 17.6834 19.0976 17.2929 18.7071L12 13.4142L6.70711 18.7071C6.31658 19.0976 5.68342 19.0976 5.29289 18.7071C4.90237 18.3166 4.90237 17.6834 5.29289 17.2929L10.5858 12L5.29289 6.70711C4.90237 6.31658 4.90237 5.68342 5.29289 5.29289Z", fill: "currentColor" }) });
    };
    const EditIcon = (_v) => {
      var _w = _v, { className } = _w, props = __objRest(_w, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M15.793 2.79287C17.0119 1.57393 18.9882 1.57392 20.2072 2.79287C21.4261 4.01183 21.4261 5.98814 20.2072 7.20709L7.64443 19.7698C7.62463 19.7896 7.60501 19.8093 7.58555 19.8288C7.29811 20.1168 7.04467 20.3707 6.73914 20.5579C6.47072 20.7224 6.17809 20.8436 5.87198 20.9171C5.52354 21.0007 5.16479 21.0004 4.7579 21C4.73035 21 4.70258 21 4.67458 21H3.00004C2.44776 21 2.00004 20.5523 2.00004 20V18.3255C2.00004 18.2975 2.00001 18.2697 1.99999 18.2422C1.99961 17.8353 1.99928 17.4765 2.08293 17.1281C2.15642 16.822 2.27763 16.5293 2.44212 16.2609C2.62936 15.9554 2.88326 15.7019 3.17125 15.4145C3.19074 15.395 3.2104 15.3754 3.23019 15.3556L15.793 2.79287ZM18.793 4.20709C18.3551 3.76919 17.6451 3.76919 17.2072 4.20709L4.64441 16.7698C4.26484 17.1494 4.19486 17.2285 4.1474 17.3059C4.09257 17.3954 4.05217 17.4929 4.02767 17.595C4.00647 17.6833 4.00004 17.7887 4.00004 18.3255V19H4.67458C5.21137 19 5.31677 18.9936 5.40509 18.9724C5.50712 18.9479 5.60467 18.9075 5.69414 18.8526C5.77158 18.8052 5.85066 18.7352 6.23022 18.3556L18.793 5.79288C19.2309 5.35497 19.2309 4.64499 18.793 4.20709ZM11 20C11 19.4477 11.4477 19 12 19H21C21.5523 19 22 19.4477 22 20C22 20.5523 21.5523 21 21 21H12C11.4477 21 11 20.5523 11 20Z", fill: "currentColor" }) });
    };
    const FilterIcon = (_x) => {
      var _y = _x, { className } = _y, props = __objRest(_y, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M2 6C2 5.44772 2.44772 5 3 5H21C21.5523 5 22 5.44772 22 6C22 6.55228 21.5523 7 21 7H3C2.44772 7 2 6.55228 2 6ZM5 12C5 11.4477 5.44772 11 6 11H18C18.5523 11 19 11.4477 19 12C19 12.5523 18.5523 13 18 13H6C5.44772 13 5 12.5523 5 12ZM8 18C8 17.4477 8.44772 17 9 17H15C15.5523 17 16 17.4477 16 18C16 18.5523 15.5523 19 15 19H9C8.44772 19 8 18.5523 8 18Z", fill: "currentColor" }) });
    };
    const HideTabIcon = (_z) => {
      var _A = _z, { className } = _A, props = __objRest(_A, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M2 12C2 11.4477 2.44772 11 3 11L14.5858 11L10.2929 6.70711C9.90237 6.31658 9.90237 5.68342 10.2929 5.2929C10.6834 4.90237 11.3166 4.90237 11.7071 5.2929L17.7071 11.2929C18.0976 11.6834 18.0976 12.3166 17.7071 12.7071L11.7071 18.7071C11.3166 19.0976 10.6834 19.0976 10.2929 18.7071C9.90237 18.3166 9.90237 17.6834 10.2929 17.2929L14.5858 13L3 13C2.44772 13 2 12.5523 2 12ZM21 22C20.4477 22 20 21.5523 20 21L20 3C20 2.44772 20.4477 2 21 2C21.5523 2 22 2.44772 22 3L22 21C22 21.5523 21.5523 22 21 22Z", fill: "currentColor" }) });
    };
    const HighlightIcon = (_B) => {
      var _C = _B, { className } = _C, props = __objRest(_C, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M12 2C12.6137 2 13.1111 2.49746 13.1111 3.11111V9.31754L17.881 4.54766C18.3149 4.11374 19.0184 4.11374 19.4523 4.54766C19.8863 4.98158 19.8863 5.68509 19.4523 6.11901L14.6825 10.8889H20.8889C21.5025 10.8889 22 11.3864 22 12C22 12.6137 21.5025 13.1111 20.8889 13.1111H14.6825L19.4523 17.881C19.8863 18.3149 19.8863 19.0184 19.4523 19.4523C19.0184 19.8863 18.3149 19.8863 17.881 19.4523L13.1111 14.6825V20.8889C13.1111 21.5025 12.6137 22 12 22C11.3864 22 10.8889 21.5025 10.8889 20.8889V14.6825L6.11901 19.4523C5.68509 19.8863 4.98158 19.8863 4.54766 19.4523C4.11374 19.0184 4.11374 18.3149 4.54766 17.881L9.31754 13.1111H3.11111C2.49746 13.1111 2 12.6137 2 12C2 11.3864 2.49746 10.8889 3.11111 10.8889H9.31754L4.54766 6.11901C4.11374 5.68509 4.11374 4.98158 4.54766 4.54766C4.98158 4.11374 5.68509 4.11374 6.11901 4.54766L10.8889 9.31754V3.11111C10.8889 2.49746 11.3864 2 12 2Z", fill: "currentColor" }) });
    };
    const HourglassIcon = (_D) => {
      var _E = _D, { className } = _E, props = __objRest(_E, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M4 2.83744C4 1.82265 4.82265 1 5.83744 1H18.1626C19.1773 1 20 1.82265 20 2.83744C20 5.7679 18.8359 8.57833 16.7637 10.6505L15.5445 11.8697C15.4805 11.9337 15.4455 11.9688 15.4206 11.9951C15.4188 11.9969 15.4173 11.9985 15.4159 12C15.4173 12.0015 15.4188 12.0031 15.4206 12.0049C15.4455 12.0312 15.4805 12.0663 15.5445 12.1303L16.7637 13.3495C18.8359 15.4217 20 18.2321 20 21.1626C20 22.1774 19.1773 23 18.1626 23H5.83744C4.82265 23 4 22.1773 4 21.1626C4 18.2321 5.16412 15.4217 7.23627 13.3495L8.45545 12.1303L9.16256 12.8374L8.45545 12.1303C8.51952 12.0663 8.55448 12.0312 8.57945 12.0049C8.58115 12.0031 8.58271 12.0015 8.58412 12C8.58271 11.9985 8.58115 11.9969 8.57945 11.9951C8.55448 11.9688 8.51952 11.9337 8.45545 11.8697L7.23626 10.6505C5.16412 8.57833 4 5.7679 4 2.83744ZM6.00146 3C6.04347 5.34119 6.99176 7.57754 8.65048 9.23626L9.86966 10.4555C9.87827 10.4641 9.8871 10.4729 9.89614 10.4819C9.98812 10.5735 10.1003 10.6854 10.1892 10.8046L9.41382 11.3827L10.1892 10.8046C10.718 11.5138 10.718 12.4862 10.1892 13.1954L9.41382 12.6173L10.1892 13.1954C10.1003 13.3146 9.98812 13.4265 9.89613 13.5181C9.8871 13.5271 9.87826 13.5359 9.86966 13.5445L8.65048 14.7637C6.99176 16.4225 6.04347 18.6588 6.00146 21H17.9985C17.9565 18.6588 17.0082 16.4225 15.3495 14.7637L14.1303 13.5445C14.1217 13.5359 14.1129 13.5271 14.1039 13.5181C14.0119 13.4265 13.8997 13.3146 13.8108 13.1954C13.282 12.4862 13.282 11.5138 13.8108 10.8046C13.8997 10.6854 14.0119 10.5735 14.1039 10.4819C14.1129 10.4729 14.1217 10.4641 14.1303 10.4555L15.3495 9.23626C17.0082 7.57754 17.9565 5.34119 17.9985 3H6.00146Z", fill: "currentColor" }) });
    };
    const InfoIcon = (_F) => {
      var _G = _F, { className } = _G, props = __objRest(_G, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3ZM1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM11 8C11 7.44772 11.4477 7 12 7H12.01C12.5623 7 13.01 7.44772 13.01 8C13.01 8.55228 12.5623 9 12.01 9H12C11.4477 9 11 8.55228 11 8ZM12 11C12.5523 11 13 11.4477 13 12V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V12C11 11.4477 11.4477 11 12 11Z", fill: "currentColor" }) });
    };
    const LightbulbIcon = (_H) => {
      var _I = _H, { className } = _I, props = __objRest(_I, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M5 9.27273C5 5.25611 8.13401 2 12 2C15.866 2 19 5.25611 19 9.27273C19 11.966 17.5909 14.3157 15.5 15.5723V15.6654C15.5 16.0642 15.5 16.4083 15.4813 16.6931C15.4616 16.9929 15.4183 17.2928 15.3002 17.5891C15.0338 18.2574 14.5227 18.7883 13.8795 19.0651C13.5944 19.1879 13.3057 19.2329 13.0171 19.2533C12.743 19.2727 12.4118 19.2727 12.028 19.2727H11.972C11.5882 19.2727 11.257 19.2727 10.9829 19.2533C10.6943 19.2329 10.4056 19.1879 10.1205 19.0651C9.47726 18.7883 8.96624 18.2574 8.69982 17.5891C8.58169 17.2928 8.53837 16.9929 8.51868 16.6931C8.49998 16.4083 8.49999 16.0642 8.5 15.6654L8.5 15.5723C6.40908 14.3157 5 11.966 5 9.27273ZM12 3.81818C9.1005 3.81818 6.75 6.26026 6.75 9.27273C6.75 11.4473 7.97471 13.3264 9.75046 14.2028C10.0556 14.3534 10.25 14.673 10.25 15.024V15.6364C10.25 16.0724 10.2505 16.3539 10.2646 16.5693C10.2782 16.7766 10.3015 16.8555 10.3166 16.8933C10.4054 17.1161 10.5758 17.2931 10.7902 17.3853C10.8266 17.401 10.9025 17.4252 11.102 17.4394C11.3094 17.4541 11.5803 17.4545 12 17.4545C12.4197 17.4545 12.6906 17.4541 12.898 17.4394C13.0975 17.4252 13.1734 17.401 13.2098 17.3853C13.4242 17.2931 13.5946 17.1161 13.6834 16.8933C13.6985 16.8555 13.7218 16.7766 13.7354 16.5693C13.7495 16.3539 13.75 16.0724 13.75 15.6364V15.024C13.75 14.673 13.9444 14.3534 14.2495 14.2028C16.0253 13.3264 17.25 11.4473 17.25 9.27273C17.25 6.26026 14.8995 3.81818 12 3.81818ZM8.9375 21.0909C8.9375 20.5888 9.32925 20.1818 9.8125 20.1818H14.1875C14.6707 20.1818 15.0625 20.5888 15.0625 21.0909C15.0625 21.593 14.6707 22 14.1875 22H9.8125C9.32925 22 8.9375 21.593 8.9375 21.0909Z", fill: "currentColor" }) });
    };
    const LinkIcon = (_J) => {
      var _K = _J, { className } = _K, props = __objRest(_K, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M14 3C14 2.44772 14.4477 2 15 2H21C21.5523 2 22 2.44771 22 3L22 9C22 9.55228 21.5523 10 21 10C20.4477 10 20 9.55229 20 9L20 5.41421L13.7071 11.7071C13.3166 12.0976 12.6834 12.0976 12.2929 11.7071C11.9024 11.3166 11.9024 10.6834 12.2929 10.2929L18.5858 4H15C14.4477 4 14 3.55228 14 3ZM7.7587 4L10 4C10.5523 4 11 4.44772 11 5C11 5.55228 10.5523 6 10 6H7.8C6.94342 6 6.36113 6.00078 5.91104 6.03755C5.47262 6.07337 5.24842 6.1383 5.09202 6.21799C4.7157 6.40973 4.40973 6.71569 4.21799 7.09202C4.1383 7.24842 4.07337 7.47262 4.03755 7.91104C4.00078 8.36113 4 8.94342 4 9.8V16.2C4 17.0566 4.00078 17.6389 4.03755 18.089C4.07337 18.5274 4.1383 18.7516 4.21799 18.908C4.40973 19.2843 4.7157 19.5903 5.09202 19.782C5.24842 19.8617 5.47262 19.9266 5.91104 19.9624C6.36113 19.9992 6.94342 20 7.8 20H14.2C15.0566 20 15.6389 19.9992 16.089 19.9624C16.5274 19.9266 16.7516 19.8617 16.908 19.782C17.2843 19.5903 17.5903 19.2843 17.782 18.908C17.8617 18.7516 17.9266 18.5274 17.9624 18.089C17.9992 17.6389 18 17.0566 18 16.2V14C18 13.4477 18.4477 13 19 13C19.5523 13 20 13.4477 20 14V16.2413C20 17.0463 20 17.7106 19.9558 18.2518C19.9099 18.8139 19.8113 19.3306 19.564 19.816C19.1805 20.5686 18.5686 21.1805 17.816 21.564C17.3306 21.8113 16.8139 21.9099 16.2518 21.9558C15.7106 22 15.0463 22 14.2413 22H7.75868C6.95372 22 6.28936 22 5.74817 21.9558C5.18608 21.9099 4.66937 21.8113 4.18404 21.564C3.43139 21.1805 2.81947 20.5686 2.43597 19.816C2.18868 19.3306 2.09012 18.8139 2.04419 18.2518C1.99998 17.7106 1.99999 17.0463 2 16.2413V9.7587C1.99999 8.95373 1.99998 8.28937 2.04419 7.74817C2.09012 7.18608 2.18868 6.66937 2.43597 6.18404C2.81947 5.43139 3.43139 4.81947 4.18404 4.43597C4.66937 4.18868 5.18608 4.09012 5.74818 4.04419C6.28937 3.99998 6.95373 3.99999 7.7587 4Z", fill: "currentColor" }) });
    };
    const OverflowIcon = (_L) => {
      var _M = _L, { className } = _M, props = __objRest(_M, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M10 5C10 3.89543 10.8954 3 12 3C13.1046 3 14 3.89543 14 5C14 6.10457 13.1046 7 12 7C10.8954 7 10 6.10457 10 5ZM10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12ZM10 19C10 17.8954 10.8954 17 12 17C13.1046 17 14 17.8954 14 19C14 20.1046 13.1046 21 12 21C10.8954 21 10 20.1046 10 19Z", fill: "currentColor" }) });
    };
    const PauseIcon = (_N) => {
      var _O = _N, { className } = _O, props = __objRest(_O, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 4.5C6 3.67157 6.67157 3 7.5 3H9C9.82843 3 10.5 3.67157 10.5 4.5V19.5C10.5 20.3284 9.82843 21 9 21H7.5C6.67157 21 6 20.3284 6 19.5V4.5Z", fill: "currentColor" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M13.5 4.5C13.5 3.67157 14.1716 3 15 3H16.5C17.3284 3 18 3.67157 18 4.5V19.5C18 20.3284 17.3284 21 16.5 21H15C14.1716 21 13.5 20.3284 13.5 19.5V4.5Z", fill: "currentColor" })
      ] });
    };
    const PlayIcon = (_P) => {
      var _Q = _P, { className } = _Q, props = __objRest(_Q, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 4.98963C6 4.01847 6 3.53289 6.20249 3.26522C6.37889 3.03203 6.64852 2.88773 6.9404 2.8703C7.27544 2.8503 7.67946 3.11965 8.48752 3.65835L19.0031 10.6687C19.6708 11.1139 20.0046 11.3364 20.1209 11.6169C20.2227 11.8622 20.2227 12.1378 20.1209 12.3831C20.0046 12.6636 19.6708 12.8862 19.0031 13.3313L8.48752 20.3417C7.67946 20.8804 7.27544 21.1497 6.9404 21.1297C6.64852 21.1123 6.37889 20.968 6.20249 20.7348C6 20.4671 6 19.9815 6 19.0104V4.98963Z", fill: "currentColor" }) });
    };
    const ReorderIcon = (_R) => {
      var _S = _R, { className } = _S, props = __objRest(_S, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M2 8.5C2 7.94772 2.44772 7.5 3 7.5H21C21.5523 7.5 22 7.94772 22 8.5C22 9.05228 21.5523 9.5 21 9.5H3C2.44772 9.5 2 9.05228 2 8.5ZM2 15.5C2 14.9477 2.44772 14.5 3 14.5H21C21.5523 14.5 22 14.9477 22 15.5C22 16.0523 21.5523 16.5 21 16.5H3C2.44772 16.5 2 16.0523 2 15.5Z", fill: "currentColor" }) });
    };
    const SearchIcon = ({ className }) => /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M10 4C6.68629 4 4 6.68629 4 10C4 13.3137 6.68629 16 10 16C13.3137 16 16 13.3137 16 10C16 6.68629 13.3137 4 10 4ZM2 10C2 5.58172 5.58172 2 10 2C14.4183 2 18 5.58172 18 10C18 11.8487 17.3729 13.5509 16.3199 14.9056L21.7071 20.2929C22.0976 20.6834 22.0976 21.3166 21.7071 21.7071C21.3166 22.0976 20.6834 22.0976 20.2929 21.7071L14.9057 16.3198C13.551 17.3729 11.8487 18 10 18C5.58172 18 2 14.4183 2 10Z", fill: "currentColor" }) });
    const SettingIcon = (_T) => {
      var _U = _T, { className } = _U, props = __objRest(_U, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M18 6C16.8954 6 16 6.89543 16 8C16 9.10457 16.8954 10 18 10C19.1046 10 20 9.10457 20 8C20 6.89543 19.1046 6 18 6ZM14.126 7C14.5701 5.27477 16.1362 4 18 4C20.2091 4 22 5.79086 22 8C22 10.2091 20.2091 12 18 12C16.1362 12 14.5701 10.7252 14.126 9L3 9C2.44772 9 2 8.55228 2 8C2 7.44772 2.44772 7 3 7L14.126 7ZM6 14C4.89543 14 4 14.8954 4 16C4 17.1046 4.89543 18 6 18C7.10457 18 8 17.1046 8 16C8 14.8954 7.10457 14 6 14ZM2 16C2 13.7909 3.79086 12 6 12C7.86384 12 9.42994 13.2748 9.87398 15L21 15C21.5523 15 22 15.4477 22 16C22 16.5523 21.5523 17 21 17L9.87398 17C9.42994 18.7252 7.86384 20 6 20C3.79086 20 2 18.2091 2 16Z", fill: "currentColor" }) });
    };
    const SortIcon = (_V) => {
      var _W = _V, { className } = _W, props = __objRest(_W, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M6.29289 3.29289C6.68342 2.90237 7.31658 2.90237 7.70711 3.29289L11.7071 7.29289C12.0976 7.68342 12.0976 8.31658 11.7071 8.70711C11.3166 9.09763 10.6834 9.09763 10.2929 8.70711L8 6.41421V20C8 20.5523 7.55228 21 7 21C6.44772 21 6 20.5523 6 20V6.41421L3.70711 8.70711C3.31658 9.09763 2.68342 9.09763 2.29289 8.70711C1.90237 8.31658 1.90237 7.68342 2.29289 7.29289L6.29289 3.29289ZM16 17.5858V4C16 3.44772 16.4477 3 17 3C17.5523 3 18 3.44772 18 4V17.5858L20.2929 15.2929C20.6834 14.9024 21.3166 14.9024 21.7071 15.2929C22.0976 15.6834 22.0976 16.3166 21.7071 16.7071L17.7071 20.7071C17.3166 21.0976 16.6834 21.0976 16.2929 20.7071L12.2929 16.7071C11.9024 16.3166 11.9024 15.6834 12.2929 15.2929C12.6834 14.9024 13.3166 14.9024 13.7071 15.2929L16 17.5858Z", fill: "currentColor" }) });
    };
    const StopIcon = (_X) => {
      var _Y = _X, { className } = _Y, props = __objRest(_Y, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { className: "", d: "M3 7.8C3 6.11984 3 5.27976 3.32698 4.63803C3.6146 4.07354 4.07354 3.6146 4.63803 3.32698C5.27976 3 6.11984 3 7.8 3H16.2C17.8802 3 18.7202 3 19.362 3.32698C19.9265 3.6146 20.3854 4.07354 20.673 4.63803C21 5.27976 21 6.11984 21 7.8V16.2C21 17.8802 21 18.7202 20.673 19.362C20.3854 19.9265 19.9265 20.3854 19.362 20.673C18.7202 21 17.8802 21 16.2 21H7.8C6.11984 21 5.27976 21 4.63803 20.673C4.07354 20.3854 3.6146 19.9265 3.32698 19.362C3 18.7202 3 17.8802 3 16.2V7.8Z", fill: "currentColor" }) });
    };
    const TimeIcon = (_Z) => {
      var __ = _Z, { className } = __, props = __objRest(__, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M12 3.81818C7.48131 3.81818 3.81818 7.48131 3.81818 12C3.81818 16.5187 7.48131 20.1818 12 20.1818C16.5187 20.1818 20.1818 16.5187 20.1818 12C20.1818 7.48131 16.5187 3.81818 12 3.81818ZM2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM12 5.63636C12.5021 5.63636 12.9091 6.04338 12.9091 6.54545V11.4382L16.0429 13.0051C16.492 13.2296 16.674 13.7757 16.4495 14.2247C16.2249 14.6738 15.6789 14.8558 15.2298 14.6313L11.5934 12.8131C11.2855 12.6591 11.0909 12.3443 11.0909 12V6.54545C11.0909 6.04338 11.4979 5.63636 12 5.63636Z", fill: "currentColor" }) });
    };
    const TrashIcon = (_$) => {
      var _aa = _$, { className } = _aa, props = __objRest(_aa, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M8 3C8 2.44772 8.44772 2 9 2H15C15.5523 2 16 2.44772 16 3C16 3.55228 15.5523 4 15 4H9C8.44772 4 8 3.55228 8 3ZM4.99224 5H3C2.44772 5 2 5.44772 2 6C2 6.55228 2.44772 7 3 7H4.06445L4.70614 16.6254C4.75649 17.3809 4.79816 18.006 4.87287 18.5149C4.95066 19.0447 5.07405 19.5288 5.33109 19.98C5.73123 20.6824 6.33479 21.247 7.06223 21.5996C7.52952 21.826 8.0208 21.917 8.55459 21.9593C9.06728 22 9.69383 22 10.4509 22H13.5491C14.3062 22 14.9327 22 15.4454 21.9593C15.9792 21.917 16.4705 21.826 16.9378 21.5996C17.6652 21.247 18.2688 20.6824 18.6689 19.98C18.926 19.5288 19.0493 19.0447 19.1271 18.5149C19.2018 18.006 19.2435 17.3808 19.2939 16.6253L19.9356 7H21C21.5523 7 22 6.55228 22 6C22 5.44772 21.5523 5 21 5H19.0078C19.0019 4.99995 18.9961 4.99995 18.9903 5H5.00974C5.00392 4.99995 4.99809 4.99995 4.99224 5ZM17.9311 7H6.06889L6.69907 16.4528C6.75274 17.2578 6.78984 17.8034 6.85166 18.2243C6.9117 18.6333 6.98505 18.8429 7.06888 18.99C7.26895 19.3412 7.57072 19.6235 7.93444 19.7998C8.08684 19.8736 8.30086 19.9329 8.71286 19.9656C9.13703 19.9993 9.68385 20 10.4907 20H13.5093C14.3161 20 14.863 19.9993 15.2871 19.9656C15.6991 19.9329 15.9132 19.8736 16.0656 19.7998C16.4293 19.6235 16.7311 19.3412 16.9311 18.99C17.015 18.8429 17.0883 18.6333 17.1483 18.2243C17.2102 17.8034 17.2473 17.2578 17.3009 16.4528L17.9311 7Z", fill: "currentColor" }) });
    };
    const TripleStarsIcon = (_ba) => {
      var _ca = _ba, { className } = _ca, props = __objRest(_ca, ["className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M5.18182 2C5.6839 2 6.09091 2.40701 6.09091 2.90909V4.27273H7.45455C7.95662 4.27273 8.36364 4.67974 8.36364 5.18182C8.36364 5.6839 7.95662 6.09091 7.45455 6.09091H6.09091V7.45455C6.09091 7.95662 5.6839 8.36364 5.18182 8.36364C4.67974 8.36364 4.27273 7.95662 4.27273 7.45455V6.09091H2.90909C2.40701 6.09091 2 5.6839 2 5.18182C2 4.67974 2.40701 4.27273 2.90909 4.27273H4.27273V2.90909C4.27273 2.40701 4.67974 2 5.18182 2ZM12.9091 2.90909C13.2852 2.90909 13.6226 3.14075 13.7576 3.49184L15.3341 7.5908C15.6072 8.30084 15.693 8.50545 15.8104 8.67054C15.9282 8.83618 16.0729 8.9809 16.2386 9.09869C16.4036 9.21607 16.6082 9.30189 17.3183 9.57498L21.4173 11.1515C21.7683 11.2865 22 11.6238 22 12C22 12.3762 21.7683 12.7135 21.4173 12.8485L17.3183 14.425C16.6082 14.6981 16.4036 14.7839 16.2386 14.9013C16.0729 15.0191 15.9282 15.1638 15.8104 15.3295C15.693 15.4945 15.6072 15.6992 15.3341 16.4092L13.7576 20.5082C13.6226 20.8592 13.2852 21.0909 12.9091 21.0909C12.5329 21.0909 12.1956 20.8592 12.0606 20.5082L10.4841 16.4092C10.211 15.6992 10.1252 15.4945 10.0078 15.3295C9.88999 15.1638 9.74527 15.0191 9.57963 14.9013C9.41455 14.7839 9.20994 14.6981 8.4999 14.425L4.40093 12.8485C4.04984 12.7135 3.81818 12.3762 3.81818 12C3.81818 11.6238 4.04984 11.2865 4.40093 11.1515L8.49989 9.57498C9.20994 9.30189 9.41454 9.21607 9.57963 9.09869C9.74527 8.9809 9.89 8.83618 10.0078 8.67054C10.1252 8.50545 10.211 8.30084 10.4841 7.5908L12.0606 3.49184C12.1956 3.14075 12.5329 2.90909 12.9091 2.90909ZM12.9091 6.35062L12.1811 8.24349C12.169 8.27483 12.1571 8.30576 12.1454 8.3363C11.924 8.9129 11.7567 9.34846 11.4896 9.72416C11.254 10.0555 10.9645 10.3449 10.6333 10.5805C10.2575 10.8476 9.82199 11.0149 9.24539 11.2363C9.21486 11.248 9.18392 11.2599 9.15258 11.272L7.25971 12L9.15258 12.728C9.18392 12.7401 9.21486 12.752 9.24539 12.7637C9.82199 12.9851 10.2575 13.1524 10.6333 13.4195C10.9645 13.6551 11.254 13.9445 11.4896 14.2758C11.7567 14.6515 11.924 15.0871 12.1454 15.6637C12.1571 15.6942 12.169 15.7252 12.1811 15.7565L12.9091 17.6494L13.6371 15.7565C13.6492 15.7252 13.6611 15.6942 13.6728 15.6637C13.8942 15.0871 14.0615 14.6515 14.3286 14.2758C14.5642 13.9446 14.8536 13.6551 15.1849 13.4195C15.5606 13.1524 15.9962 12.9851 16.5728 12.7637C16.6033 12.752 16.6343 12.7401 16.6656 12.728L18.5585 12L16.6656 11.272C16.6343 11.2599 16.6033 11.248 16.5728 11.2363C15.9962 11.0149 15.5606 10.8476 15.1849 10.5805C14.8536 10.3449 14.5642 10.0555 14.3286 9.72416C14.0615 9.34846 13.8942 8.9129 13.6728 8.3363C13.6611 8.30577 13.6492 8.27483 13.6371 8.24349L12.9091 6.35062ZM5.18182 15.6364C5.6839 15.6364 6.09091 16.0434 6.09091 16.5455V17.9091H7.45455C7.95662 17.9091 8.36364 18.3161 8.36364 18.8182C8.36364 19.3203 7.95662 19.7273 7.45455 19.7273H6.09091V21.0909C6.09091 21.593 5.6839 22 5.18182 22C4.67974 22 4.27273 21.593 4.27273 21.0909V19.7273H2.90909C2.40701 19.7273 2 19.3203 2 18.8182C2 18.3161 2.40701 17.9091 2.90909 17.9091H4.27273V16.5455C4.27273 16.0434 4.67974 15.6364 5.18182 15.6364Z", fill: "currentColor" }) });
    };
    const MainPage = () => {
      const navigate = useNavigate();
      const location2 = useLocation();
      const state = location2.state;
      const [holeName, setHoleName] = reactExports.useState("");
      const [loading, setLoading] = reactExports.useState(true);
      const [selectedHole, setSelectedHole] = reactExports.useState(null);
      reactExports.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => __async(exports, null, function* () {
          if (!user) {
            navigate("/", { replace: true });
            return;
          }
          try {
            if (state == null ? void 0 : state.holeId) {
              const hole = yield getHole(state.holeId);
              setSelectedHole(hole);
            }
          } catch (err) {
            console.error("Hole 정보 가져오기 실패:", err);
          } finally {
            setLoading(false);
          }
        }));
        return () => unsubscribe();
      }, [navigate, state]);
      const handleHoleNameChange = (e) => {
        setHoleName(e.target.value);
      };
      const handleCreateHole = () => {
        if (holeName.trim()) {
          navigate("/select-icon", { state: { holeName } });
        }
      };
      const handleBackClick = () => {
        navigate("/hole-list");
      };
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 h-[400px] flex items-center justify-center bg-Surface-Main", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-body-lg-md", children: "로딩 중..." }) });
      }
      if (selectedHole) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 h-[400px] pt-8 bg-Surface-Main inline-flex flex-col justify-start items-start overflow-hidden font-pretendard", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex-1 rounded-2xl flex flex-col justify-between items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full flex justify-between items-center px-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full text-body-lg-md text-center justify-center text-text-primary-light text-base leading-snug", children: "What do you diggin?" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex-1 flex flex-col justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-40 h-40 bg-gray-200 rounded-[100px]" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch px-2 pb-2 flex flex-col justify-start items-start gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              TextField,
              {
                size: "lg",
                isDisabled: false,
                error: false,
                placeholder: "Write a new hole name",
                value: holeName,
                onChange: handleHoleNameChange,
                className: "self-stretch"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "primary",
                size: "lg",
                disabled: !holeName.trim(),
                onClick: handleCreateHole,
                className: "self-stretch",
                children: "Create a Hole"
              }
            )
          ] })
        ] }) });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-Surface-Main inline-flex flex-col justify-start items-start overflow-hidden font-pretendard", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch h-[52px] px-3 border-b border-line-tertiary-light dark:border-line-tertiary-dark inline-flex justify-between items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rounded flex justify-start items-center gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              size: "sm",
              isIconOnly: true,
              onClick: handleBackClick,
              leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {}),
              showLeftIcon: true
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-start items-center gap-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-base font-medium leading-snug", children: "What do you diggin?" }) })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex-1 rounded-2xl flex flex-col justify-between items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex-1 flex flex-col justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-40 h-40 bg-gray-200 rounded-[100px]" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch px-2 pb-2 flex flex-col justify-start items-start gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              TextField,
              {
                size: "lg",
                isDisabled: false,
                error: false,
                placeholder: "Write a new hole name",
                value: holeName,
                onChange: handleHoleNameChange,
                className: "self-stretch"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "primary",
                size: "lg",
                disabled: !holeName.trim(),
                onClick: handleCreateHole,
                className: "self-stretch",
                children: "Create a Hole"
              }
            )
          ] })
        ] })
      ] });
    };
    const IconSelector = React.forwardRef((_da, ref) => {
      var _ea = _da, { icon, selected = false, className } = _ea, props = __objRest(_ea, ["icon", "selected", "className"]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        __spreadProps(__spreadValues({
          ref,
          className: cn$1(
            "group relative flex h-[52px] w-[52px] cursor-pointer items-center justify-center rounded-[8px] transition-all",
            selected ? "border border-line-primary-light dark:border-line-primary-dark" : "border border-line-tertiary-light dark:border-line-tertiary-dark hover:border-line-secondary-light dark:hover:border-line-secondary-dark",
            className
          )
        }, props), {
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              className: cn$1(
                "flex h-[20px] w-[20px] items-center justify-center",
                selected ? "[&>svg]:text-icon-primary-light dark:[&>svg]:text-icon-primary-dark" : "[&>svg]:text-icon-secondary-light dark:[&>svg]:text-icon-secondary-dark group-hover:[&>svg]:text-icon-primary-light dark:group-hover:[&>svg]:text-icon-primary-dark"
              ),
              children: icon
            }
          )
        })
      );
    });
    IconSelector.displayName = "IconSelector";
    const iconCategories = [
      {
        id: "utility",
        name: "Utility",
        icons: [
          { id: "utility-1", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(SearchIcon, {}) },
          { id: "utility-2", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(AddIcon, {}) },
          { id: "utility-3", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(EditIcon, {}) },
          { id: "utility-4", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(TrashIcon, {}) },
          { id: "utility-5", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(CheckIcon, {}) },
          { id: "utility-6", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {}) },
          { id: "utility-7", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(InfoIcon, {}) },
          { id: "utility-8", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(LinkIcon, {}) },
          { id: "utility-9", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(SettingIcon, {}) },
          { id: "utility-10", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FilterIcon, {}) }
        ]
      },
      {
        id: "media",
        name: "Media",
        icons: [
          { id: "media-1", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(PlayIcon, {}) },
          { id: "media-2", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(PauseIcon, {}) },
          { id: "media-3", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(StopIcon, {}) },
          { id: "media-4", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchiveIcon, {}) },
          { id: "media-5", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(HideTabIcon, {}) },
          { id: "media-6", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(HighlightIcon, {}) },
          { id: "media-7", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(SortIcon, {}) },
          { id: "media-8", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(ReorderIcon, {}) },
          { id: "media-9", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(OverflowIcon, {}) },
          { id: "media-10", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRightIcon, {}) }
        ]
      },
      {
        id: "other",
        name: "Other",
        icons: [
          { id: "other-1", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(TimeIcon, {}) },
          { id: "other-2", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(HourglassIcon, {}) },
          { id: "other-3", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(LightbulbIcon, {}) },
          { id: "other-4", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(TripleStarsIcon, {}) },
          { id: "other-5", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {}) }
        ]
      }
    ];
    const SelectIconPage = () => {
      const navigate = useNavigate();
      const location2 = useLocation();
      const state = location2.state;
      const [selectedIcon, setSelectedIcon] = reactExports.useState(null);
      const [selectedIconData, setSelectedIconData] = reactExports.useState(null);
      const [holeName, setHoleName] = reactExports.useState("");
      const [loading, setLoading] = reactExports.useState(true);
      reactExports.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => {
          setLoading(false);
          if (!user) {
            navigate("/", { replace: true });
            return;
          }
          if (state == null ? void 0 : state.holeName) {
            setHoleName(state.holeName);
          } else {
            navigate("/main", { replace: true });
          }
        });
        return () => unsubscribe();
      }, [state, navigate]);
      const handleIconSelect = (icon) => {
        console.log("Selected icon:", icon);
        setSelectedIcon(icon.id);
        setSelectedIconData(icon);
      };
      const handleBackClick = () => {
        console.log("Going back to previous page");
        navigate(-1);
      };
      const handleSelectClick = () => {
        console.log("Selected icon ID:", selectedIcon);
        console.log("Sending state to create-hole:", { selectedIconId: selectedIcon, holeName });
        navigate("/create-hole", {
          state: {
            selectedIconId: selectedIcon,
            holeName
          },
          replace: true
        });
      };
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "dark w-80 h-[400px] bg-surface-bg-dark flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-text-primary-dark", children: "로딩 중..." }) });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "dark w-80 h-[400px] bg-surface-bg-dark inline-flex flex-col justify-between items-center overflow-hidden", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch h-13 px-3 py-3 border-b border-line-tertiary-dark inline-flex justify-between items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              size: "sm",
              isIconOnly: true,
              onClick: handleBackClick,
              leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {}),
              showLeftIcon: true
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-body-lg-md", children: "Select Icon" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-7 h-7" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex-1 overflow-hidden", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full flex mr-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full pl-3 pt-4 flex-1 overflow-y-auto custom-scrollbar", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-[292px] flex flex-col justify-start items-start gap-6 pb-4 pr-4", children: iconCategories.map((category) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-[292px] flex flex-col justify-start items-start gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-caption-md-md", children: category.name }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-[292px] inline-flex justify-start items-start gap-2 flex-wrap content-start", children: category.icons.map((icon) => /* @__PURE__ */ jsxRuntimeExports.jsx(
            IconSelector,
            {
              icon: icon.icon,
              selected: selectedIcon === icon.id,
              onClick: () => handleIconSelect(icon)
            },
            icon.id
          )) })
        ] }, category.id)) }) }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch px-2 pb-2 flex flex-col justify-start items-start gap-2.5", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "primary",
            size: "lg",
            disabled: !selectedIcon,
            onClick: handleSelectClick,
            className: "self-stretch",
            children: "Select"
          }
        ) })
      ] });
    };
    const getIconById$2 = (iconId) => {
      console.log("Getting icon by ID:", iconId);
      if (iconId === "utility-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(SearchIcon, {});
      if (iconId === "utility-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(AddIcon, {});
      if (iconId === "utility-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(EditIcon, {});
      if (iconId === "utility-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(TrashIcon, {});
      if (iconId === "utility-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckIcon, {});
      if (iconId === "utility-6") return /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {});
      if (iconId === "utility-7") return /* @__PURE__ */ jsxRuntimeExports.jsx(InfoIcon, {});
      if (iconId === "utility-8") return /* @__PURE__ */ jsxRuntimeExports.jsx(LinkIcon, {});
      if (iconId === "utility-9") return /* @__PURE__ */ jsxRuntimeExports.jsx(SettingIcon, {});
      if (iconId === "utility-10") return /* @__PURE__ */ jsxRuntimeExports.jsx(FilterIcon, {});
      if (iconId === "media-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(PlayIcon, {});
      if (iconId === "media-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(PauseIcon, {});
      if (iconId === "media-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(StopIcon, {});
      if (iconId === "media-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(ArchiveIcon, {});
      if (iconId === "media-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(HideTabIcon, {});
      if (iconId === "media-6") return /* @__PURE__ */ jsxRuntimeExports.jsx(HighlightIcon, {});
      if (iconId === "media-7") return /* @__PURE__ */ jsxRuntimeExports.jsx(SortIcon, {});
      if (iconId === "media-8") return /* @__PURE__ */ jsxRuntimeExports.jsx(ReorderIcon, {});
      if (iconId === "media-9") return /* @__PURE__ */ jsxRuntimeExports.jsx(OverflowIcon, {});
      if (iconId === "media-10") return /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRightIcon, {});
      if (iconId === "other-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(TimeIcon, {});
      if (iconId === "other-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(HourglassIcon, {});
      if (iconId === "other-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(LightbulbIcon, {});
      if (iconId === "other-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(TripleStarsIcon, {});
      if (iconId === "other-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {});
      console.warn("Icon ID not found:", iconId);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(InfoIcon, {});
    };
    const CreateHolePage = () => {
      const navigate = useNavigate();
      const location2 = useLocation();
      const state = location2.state;
      const [holeName, setHoleName] = reactExports.useState((state == null ? void 0 : state.holeName) || "");
      const [icon, setIcon] = reactExports.useState((state == null ? void 0 : state.selectedIconId) || null);
      const [loading, setLoading] = reactExports.useState(true);
      const [creating, setCreating] = reactExports.useState(false);
      const [error2, setError] = reactExports.useState(null);
      reactExports.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => {
          setLoading(false);
          if (!user) {
            navigate("/", { replace: true });
            return;
          }
          if (state == null ? void 0 : state.selectedIconId) {
            setIcon(state.selectedIconId);
          } else {
            navigate("/select-icon", {
              state: { holeName: (state == null ? void 0 : state.holeName) || "" },
              replace: true
            });
          }
          if (state == null ? void 0 : state.holeName) {
            setHoleName(state.holeName);
          }
        });
        return () => unsubscribe();
      }, [state, navigate]);
      const handleHoleNameChange = (e) => {
        setHoleName(e.target.value);
      };
      const handleCreateHole = () => __async(exports, null, function* () {
        if (holeName.trim() && icon && auth.currentUser) {
          try {
            setCreating(true);
            setError(null);
            yield createHole(auth.currentUser.uid, holeName, icon);
            navigate("/hole-list", { replace: true });
          } catch (err) {
            console.error("홀 생성 실패:", err);
            setError("홀 생성에 실패했습니다. 다시 시도해주세요.");
          } finally {
            setCreating(false);
          }
        }
      });
      const handleSelectIcon = () => {
        navigate("/select-icon", { state: { holeName } });
      };
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "dark w-80 h-[400px] bg-surface-bg-light dark:bg-surface-bg-dark flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-text-primary-light dark:text-text-primary-dark", children: "로딩 중..." }) });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 h-[400px] pt-8 bg-surface-bg-light dark:bg-surface-bg-dark inline-flex flex-col justify-start items-start overflow-hidden font-pretendard", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex-1 rounded-2xl flex flex-col justify-between items-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-body-lg-md", children: "What do you diggin?" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex-1 flex flex-col justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: "w-40 h-40 bg-gray-200 rounded-[100px] flex items-center justify-center cursor-pointer",
            onClick: handleSelectIcon,
            children: icon && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-24 h-24 flex items-center justify-center", children: getIconById$2(icon) })
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch px-2 pb-2 flex flex-col justify-start items-start gap-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            TextField,
            {
              size: "lg",
              isDisabled: creating,
              error: false,
              placeholder: "Write a new hole name",
              value: holeName,
              onChange: handleHoleNameChange,
              className: "self-stretch"
            }
          ),
          error2 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-red-500 text-sm w-full text-center mb-2", children: error2 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              size: "lg",
              disabled: !holeName.trim() || !icon || creating,
              onClick: handleCreateHole,
              className: "self-stretch",
              children: creating ? "생성 중..." : "Create a Hole"
            }
          )
        ] })
      ] }) });
    };
    const cn = (...classes) => {
      return classes.filter(Boolean).join(" ");
    };
    const DBList = React.forwardRef(
      ({ icon: Icon2, name: name2, insightCount = 0, selected = false, onClick, className }, ref) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            ref,
            className: cn(
              "flex items-center justify-between px-3 w-[304px] h-12 cursor-pointer transition-colors rounded-[8px]",
              "bg-fill-secondary-light dark:bg-fill-secondary-dark hover:bg-fill-hover-secondary-light dark:hover:bg-fill-hover-secondary-dark",
              selected ? "bg-fill-selected-secondary-light dark:bg-fill-selected-secondary-dark" : "bg-fill-secondary-light dark:bg-fill-secondary-dark",
              className
            ),
            onClick,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-3", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "div",
                {
                  className: cn(
                    "flex h-[20px] w-[20px] items-center justify-center",
                    "[&>svg]:text-icon-primary-light dark:[&>svg]:text-icon-primary-dark"
                  ),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon2, {})
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-start gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-body-md-md text-text-primary-light dark:text-text-primary-dark", children: name2 }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-body-md-md text-text-tertiary-light dark:text-text-tertiary-dark", children: insightCount })
              ] })
            ] })
          }
        );
      }
    );
    DBList.displayName = "DBList";
    const createSession = (holeId, name2) => __async(exports, null, function* () {
      try {
        const sessionsCollection = collection(db, "sessions");
        const now = serverTimestamp();
        const docRef = yield addDoc(sessionsCollection, {
          holeId,
          name: name2,
          startTime: now,
          endTime: null,
          isActive: true,
          totalDuration: 0,
          updatedAt: now
        });
        return docRef.id;
      } catch (error2) {
        console.error("Error creating session:", error2);
        throw error2;
      }
    });
    const getSession = (sessionId) => __async(exports, null, function* () {
      try {
        const docRef = doc(db, "sessions", sessionId);
        const docSnap = yield getDoc(docRef);
        if (docSnap.exists()) {
          return __spreadValues({ id: docSnap.id }, docSnap.data());
        } else {
          return null;
        }
      } catch (error2) {
        console.error("Error getting session:", error2);
        throw error2;
      }
    });
    const getHoleSessions = (holeId) => __async(exports, null, function* () {
      try {
        const sessionsQuery = query(
          collection(db, "sessions"),
          where("holeId", "==", holeId),
          orderBy("startTime", "desc")
        );
        const querySnapshot = yield getDocs(sessionsQuery);
        const sessions = [];
        querySnapshot.forEach((doc2) => {
          sessions.push(__spreadValues({ id: doc2.id }, doc2.data()));
        });
        return sessions;
      } catch (error2) {
        console.error("Error getting hole sessions:", error2);
        throw error2;
      }
    });
    const updateSessionDuration = (sessionId, durationInSeconds) => __async(exports, null, function* () {
      try {
        const docRef = doc(db, "sessions", sessionId);
        yield updateDoc(docRef, {
          totalDuration: durationInSeconds,
          updatedAt: serverTimestamp()
        });
      } catch (error2) {
        console.error("Error updating session duration:", error2);
        throw error2;
      }
    });
    const updateSessionActiveStatus = (sessionId, isActive) => __async(exports, null, function* () {
      try {
        const docRef = doc(db, "sessions", sessionId);
        if (isActive) {
          yield updateDoc(docRef, {
            isActive: true,
            updatedAt: serverTimestamp()
          });
        } else {
          yield updateDoc(docRef, {
            isActive: false,
            updatedAt: serverTimestamp()
          });
        }
      } catch (error2) {
        console.error("Error updating session active status:", error2);
        throw error2;
      }
    });
    const getSessionEntries = (sessionId, pageSize = 20, lastDoc) => __async(exports, null, function* () {
      try {
        console.log("🔍 [DEBUG] getSessionEntries called with:");
        console.log("  sessionId:", sessionId, "type:", typeof sessionId);
        console.log("  pageSize:", pageSize, "type:", typeof pageSize);
        console.log("  lastDoc:", !!lastDoc);
        if (!sessionId) {
          console.error("❌ [ERROR] getSessionEntries: sessionId is falsy!", { sessionId, type: typeof sessionId });
          throw new Error(`getSessionEntries: Invalid sessionId: ${sessionId}`);
        }
        if (typeof sessionId !== "string") {
          console.error("❌ [ERROR] getSessionEntries: sessionId is not a string!", { sessionId, type: typeof sessionId });
          throw new Error(`getSessionEntries: sessionId must be string, got ${typeof sessionId}`);
        }
        if (sessionId.trim() === "") {
          console.error("❌ [ERROR] getSessionEntries: sessionId is empty string!");
          throw new Error("getSessionEntries: sessionId cannot be empty");
        }
        console.log("✅ [DEBUG] getSessionEntries: sessionId validation passed");
        if (pageSize === 0) {
          console.log("🔄 [DEBUG] getSessionEntries: pageSize is 0, returning empty array for session initialization");
          return {
            entries: [],
            lastDoc: null,
            hasMore: false
          };
        }
        let entriesQuery = query(
          collection(db, "textEntries"),
          where("sessionId", "==", sessionId),
          orderBy("capturedAt", "desc"),
          limit(pageSize + 1)
          // Get one extra to check if there are more
        );
        if (lastDoc) ;
        console.log("🔍 [DEBUG] getSessionEntries: About to execute Firebase query with sessionId:", sessionId);
        const querySnapshot = yield getDocs(entriesQuery);
        console.log("✅ [DEBUG] getSessionEntries: Firebase query completed, docs count:", querySnapshot.docs.length);
        const entries = [];
        const hasMore = querySnapshot.docs.length > pageSize;
        const docsToProcess = hasMore ? querySnapshot.docs.slice(0, pageSize) : querySnapshot.docs;
        docsToProcess.forEach((doc2) => {
          entries.push(__spreadValues({ id: doc2.id }, doc2.data()));
        });
        const newLastDoc = querySnapshot.docs.length > 0 ? querySnapshot.docs[querySnapshot.docs.length - 1] : null;
        console.log("✅ [DEBUG] getSessionEntries: Returning", entries.length, "entries");
        return {
          entries,
          lastDoc: newLastDoc,
          hasMore
        };
      } catch (error2) {
        console.error("Error getting session entries:", error2);
        console.error("🔍 [DEBUG] getSessionEntries error details:");
        console.error("  sessionId at error:", sessionId, "type:", typeof sessionId);
        console.error("  pageSize at error:", pageSize);
        console.error("  Error stack:", error2 instanceof Error ? error2.stack : "No stack available");
        throw error2;
      }
    });
    const getSessionEntriesCount = (sessionId) => __async(exports, null, function* () {
      try {
        console.log("🔍 [DEBUG] getSessionEntriesCount called with sessionId:", sessionId);
        if (!sessionId) {
          console.error("❌ [ERROR] getSessionEntriesCount: sessionId is falsy!", { sessionId, type: typeof sessionId });
          throw new Error(`getSessionEntriesCount: Invalid sessionId: ${sessionId}`);
        }
        if (typeof sessionId !== "string") {
          console.error("❌ [ERROR] getSessionEntriesCount: sessionId is not a string!", { sessionId, type: typeof sessionId });
          throw new Error(`getSessionEntriesCount: sessionId must be string, got ${typeof sessionId}`);
        }
        if (sessionId.trim() === "") {
          console.error("❌ [ERROR] getSessionEntriesCount: sessionId is empty string!");
          throw new Error("getSessionEntriesCount: sessionId cannot be empty");
        }
        const entriesQuery = query(
          collection(db, "textEntries"),
          where("sessionId", "==", sessionId)
        );
        console.log("🔍 [DEBUG] getSessionEntriesCount: About to execute Firebase count query");
        const querySnapshot = yield getDocs(entriesQuery);
        const count = querySnapshot.docs.length;
        console.log(`✅ [DEBUG] getSessionEntriesCount: Found ${count} entries for session ${sessionId}`);
        return count;
      } catch (error2) {
        console.error("Error getting session entries count:", error2);
        console.error("🔍 [DEBUG] getSessionEntriesCount error details:");
        console.error("  sessionId at error:", sessionId, "type:", typeof sessionId);
        throw error2;
      }
    });
    const getIconById$1 = (iconId) => {
      if (iconId === "utility-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(SearchIcon, {});
      if (iconId === "utility-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(AddIcon, {});
      if (iconId === "utility-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(EditIcon, {});
      if (iconId === "utility-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(TrashIcon, {});
      if (iconId === "utility-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckIcon, {});
      if (iconId === "utility-6") return /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {});
      if (iconId === "utility-7") return /* @__PURE__ */ jsxRuntimeExports.jsx(InfoIcon, {});
      if (iconId === "utility-8") return /* @__PURE__ */ jsxRuntimeExports.jsx(LinkIcon, {});
      if (iconId === "utility-9") return /* @__PURE__ */ jsxRuntimeExports.jsx(SettingIcon, {});
      if (iconId === "utility-10") return /* @__PURE__ */ jsxRuntimeExports.jsx(FilterIcon, {});
      if (iconId === "media-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(PlayIcon, {});
      if (iconId === "media-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(PauseIcon, {});
      if (iconId === "media-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(StopIcon, {});
      if (iconId === "media-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(ArchiveIcon, {});
      if (iconId === "media-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(HideTabIcon, {});
      if (iconId === "media-6") return /* @__PURE__ */ jsxRuntimeExports.jsx(HighlightIcon, {});
      if (iconId === "media-7") return /* @__PURE__ */ jsxRuntimeExports.jsx(SortIcon, {});
      if (iconId === "media-8") return /* @__PURE__ */ jsxRuntimeExports.jsx(ReorderIcon, {});
      if (iconId === "media-9") return /* @__PURE__ */ jsxRuntimeExports.jsx(OverflowIcon, {});
      if (iconId === "media-10") return /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRightIcon, {});
      if (iconId === "other-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(TimeIcon, {});
      if (iconId === "other-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(HourglassIcon, {});
      if (iconId === "other-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(LightbulbIcon, {});
      if (iconId === "other-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(TripleStarsIcon, {});
      if (iconId === "other-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {});
      console.warn("Icon ID not found:", iconId);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(InfoIcon, {});
    };
    const HoleListPage = () => {
      const navigate = useNavigate();
      const [selectedHole, setSelectedHole] = reactExports.useState(null);
      const [holes, setHoles] = reactExports.useState([]);
      const [holeInsightCounts, setHoleInsightCounts] = reactExports.useState({});
      const [loading, setLoading] = reactExports.useState(true);
      const [error2, setError] = reactExports.useState(null);
      const loadInsightCounts = (holesData) => __async(exports, null, function* () {
        const initialCounts = {};
        holesData.forEach((hole) => {
          initialCounts[hole.id] = 0;
        });
        setHoleInsightCounts(initialCounts);
        const promises = holesData.map((hole) => __async(exports, null, function* () {
          try {
            const sessions = yield getHoleSessions(hole.id);
            if (sessions.length === 0) return { holeId: hole.id, count: 0 };
            const countPromises = sessions.map((session) => getSessionEntriesCount(session.id));
            const sessionCounts = yield Promise.all(countPromises);
            const totalInsights = sessionCounts.reduce((sum, count) => sum + count, 0);
            return { holeId: hole.id, count: totalInsights };
          } catch (error22) {
            console.error(`Hole ${hole.id} 카운트 로딩 실패:`, error22);
            return { holeId: hole.id, count: 0 };
          }
        }));
        promises.forEach((promise) => __async(exports, null, function* () {
          const { holeId, count } = yield promise;
          setHoleInsightCounts((prev) => __spreadProps(__spreadValues({}, prev), { [holeId]: count }));
        }));
      });
      reactExports.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => __async(exports, null, function* () {
          if (!user) {
            navigate("/", { replace: true });
            return;
          }
          try {
            const userHoles = yield getUserHoles(user.uid);
            setHoles(userHoles);
            yield loadInsightCounts(userHoles);
            if (userHoles.length === 0) {
              navigate("/main", { replace: true });
            }
          } catch (err) {
            console.error("Hole 목록 가져오기 실패:", err);
            setError("Hole 목록을 불러오는데 실패했습니다.");
          } finally {
            setLoading(false);
          }
        }));
        return () => unsubscribe();
      }, [navigate]);
      const handleHoleSelect = (holeId) => {
        setSelectedHole(holeId);
      };
      const handleLogout = () => __async(exports, null, function* () {
        try {
          yield signOut();
          navigate("/", { replace: true });
        } catch (err) {
          console.error("로그아웃 실패:", err);
        }
      });
      const handleNext = () => __async(exports, null, function* () {
        if (selectedHole) {
          try {
            const sessions = yield getHoleSessions(selectedHole);
            if (sessions.length > 0) {
              navigate("/create-session", { state: { holeId: selectedHole } });
            } else {
              navigate("/empty-session", { state: { holeId: selectedHole } });
            }
          } catch (error22) {
            console.error("세션 목록 가져오기 실패:", error22);
            navigate("/empty-session", { state: { holeId: selectedHole } });
          }
        }
      });
      const handleFilterClick = () => {
        console.log("Filter clicked");
      };
      const handleAddClick = () => {
        navigate("/main");
      };
      const getIconComponent = (iconId) => {
        return () => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-5 h-5 relative overflow-hidden flex items-center justify-center", children: getIconById$1(iconId) });
      };
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-text-primary-light dark:text-text-primary-dark", children: "Loading" }) });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black inline-flex flex-col justify-between items-center overflow-hidden", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch h-[52px] pl-5 pr-3 border-b border-color-line-tertiary inline-flex justify-between items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-base font-medium leading-snug", children: "Diggin" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-[8px]", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button$1,
              {
                variant: "tertiary",
                size: "sm",
                isIconOnly: true,
                onClick: handleFilterClick,
                leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(FilterIcon, {}),
                showLeftIcon: true
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button$1,
              {
                variant: "tertiary",
                size: "sm",
                isIconOnly: true,
                onClick: handleAddClick,
                leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(AddIcon, {}),
                showLeftIcon: true
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button$1,
              {
                variant: "tertiary",
                size: "sm",
                isIconOnly: true,
                onClick: handleLogout,
                leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(LogOutIcon, {}),
                showLeftIcon: true
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex-1 overflow-hidden", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full flex mr-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full w-full overflow-y-auto custom-scrollbar", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-2 flex flex-col justify-start items-start gap-2", children: error2 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-red-500 text-sm text-center px-4 py-8 w-full", children: error2 }) : holes.length > 0 ? holes.map((hole) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          DBList,
          {
            icon: getIconComponent(hole.icon),
            name: hole.name,
            insightCount: holeInsightCounts[hole.id] || 0,
            selected: selectedHole === hole.id,
            onClick: () => handleHoleSelect(hole.id),
            className: "rounded-lg w-full"
          },
          hole.id
        )) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch py-8 flex justify-center items-center w-full", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-text-secondary-light dark:text-text-secondary-dark", children: "No holes found. Create a new one!" }) }) }) }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch px-2 pb-2 flex flex-col justify-start items-start gap-2.5", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button$1,
          {
            variant: "primary",
            size: "lg",
            disabled: !selectedHole,
            onClick: handleNext,
            className: "self-stretch",
            children: "Next"
          }
        ) })
      ] });
    };
    const EmptySessionPage = () => {
      const navigate = useNavigate();
      const location2 = useLocation();
      const state = location2.state;
      const [hole, setHole] = reactExports.useState(null);
      const [loading, setLoading] = reactExports.useState(true);
      const [error2, setError] = reactExports.useState(null);
      reactExports.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => __async(exports, null, function* () {
          if (!user) {
            navigate("/", { replace: true });
            return;
          }
          if (!(state == null ? void 0 : state.holeId)) {
            navigate("/hole-list", { replace: true });
            return;
          }
          try {
            const holeData = yield getHole(state.holeId);
            if (!holeData) {
              throw new Error("Hole not found");
            }
            setHole(holeData);
          } catch (err) {
            console.error("홀 정보 가져오기 실패:", err);
            setError("홀 정보를 불러오는데 실패했습니다.");
          } finally {
            setLoading(false);
          }
        }));
        return () => unsubscribe();
      }, [navigate, state]);
      const handleBackClick = () => {
        navigate("/hole-list");
      };
      const handleCreateSession = () => {
        navigate("/create-session", { state: { holeId: state.holeId } });
      };
      const handleSeeAllTemplates = () => {
        navigate("/template-list", { state: { holeId: state.holeId } });
      };
      const handleTemplateSelect = (templateId) => {
        console.log("Selected template:", templateId);
      };
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-text-primary-light dark:text-text-primary-dark", children: "로딩 중..." }) });
      }
      if (error2 || !hole) {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex flex-col items-center justify-center p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 mb-4", children: error2 || "홀을 찾을 수 없습니다." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "secondary", size: "md", onClick: handleBackClick, children: "Back to Holes" })
        ] });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black inline-flex flex-col justify-start items-start overflow-hidden", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch h-12 px-3 border-b border-color-line-tertiary inline-flex justify-start items-center gap-2.5", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rounded flex justify-start items-center gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              size: "sm",
              isIconOnly: true,
              onClick: handleBackClick,
              leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {}),
              showLeftIcon: true
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-start items-center gap-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-base font-medium leading-snug", children: hole.name }) })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex-1 rounded-2xl flex flex-col justify-between items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex-1 flex flex-col justify-center items-center gap-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              size: "sm",
              onClick: handleCreateSession,
              leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(AddIcon, {}),
              showLeftIcon: true,
              children: "Create a session"
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch p-3 flex flex-col justify-start items-start gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch inline-flex justify-between items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-sm font-medium leading-none", children: "Templates" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "flex justify-center items-center gap-0.5 cursor-pointer",
                  onClick: handleSeeAllTemplates,
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-secondary-light dark:text-text-secondary-dark text-xs font-medium leading-none", children: "See all" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 relative overflow-hidden", children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRightIcon, { className: "w-4 h-4 text-text-secondary-light dark:text-text-secondary-dark" }) })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch inline-flex justify-start items-center gap-3 overflow-x-auto", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "w-36 h-[100px] p-3 bg-surface-bg-light dark:bg-surface-bg-dark rounded-lg outline outline-1 outline-offset-[-1px] outline-line-tertiary-light dark:outline-line-tertiary-dark inline-flex flex-col justify-start items-start gap-2 cursor-pointer",
                  onClick: () => handleTemplateSelect("design-thinking"),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex flex-col justify-start items-start gap-1", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-md self-stretch justify-center text-text-primary-light dark:text-text-primary-dark leading-none truncate", children: "🎨 💭" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-md self-stretch justify-center text-text-primary-light dark:text-text-primary-dark leading-none truncate", children: "Design Thinking" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-rg self-stretch h-8 justify-center text-text-secondary-light dark:text-text-secondary-dark leading-none line-clamp-2 overflow-hidden", children: "Empathize, Define, Ideate, Prototype, Test" })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "w-36 h-[100px] p-3 bg-surface-bg-light dark:bg-surface-bg-dark rounded-lg outline outline-1 outline-offset-[-1px] outline-line-tertiary-light dark:outline-line-tertiary-dark inline-flex flex-col justify-start items-start gap-2 cursor-pointer",
                  onClick: () => handleTemplateSelect("double-diamond"),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex flex-col justify-start items-start gap-1", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-md self-stretch justify-center text-text-primary-light dark:text-text-primary-dark leading-none truncate", children: "💎 💎" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch justify-center text-text-primary-light dark:text-text-primary-dark text-caption-md-md leading-none truncate", children: "Double Diamond" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-rg self-stretch h-8 justify-center text-text-secondary-light dark:text-text-secondary-dark leading-none line-clamp-2 overflow-hidden", children: "Discover, Define, Develop, Deliver" })
                  ]
                }
              )
            ] })
          ] })
        ] })
      ] });
    };
    const ExtensionList = reactExports.forwardRef(
      ({
        type = "default",
        state = "default",
        label,
        count = 0,
        placeholder = "Write a new session name",
        onSubmit,
        onCancel,
        onChange,
        onClick,
        value = "",
        className
      }, ref) => {
        if (type === "default") {
          return /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              ref,
              className: cn(
                "w-full h-12 min-w-[240px] px-3 rounded-lg flex justify-between items-center transition-colors",
                state === "hover" ? "bg-fill-hover-secondary-light dark:bg-fill-hover-secondary-dark cursor-pointer" : state === "selected" ? "bg-fill-selected-secondary-light dark:bg-fill-selected-secondary-dark cursor-pointer" : "bg-fill-secondary-light dark:bg-fill-secondary-dark hover:bg-fill-hover-secondary-light dark:hover:bg-fill-hover-secondary-dark cursor-pointer",
                className
              ),
              onClick,
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-start gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-body-md-md text-text-primary-light dark:text-text-primary-dark leading-none", children: label }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-body-md-md text-text-tertiary-light dark:text-text-tertiary-dark leading-none", children: count })
              ] })
            }
          );
        }
        if (type === "add") {
          state === "active" || (value == null ? void 0 : value.length) > 0;
          return /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "div",
            {
              ref,
              className: cn(
                "w-full h-12 min-w-[240px] px-3 rounded-lg flex justify-between items-center gap-2",
                "bg-fill-onsurface-light dark:bg-fill-onsurface-dark",
                className
              ),
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-start items-center flex-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    type: "text",
                    className: "bg-transparent text-body-md-md w-full outline-none text-text-primary-light dark:text-text-primary-dark placeholder:text-text-tertiary-light dark:placeholder:text-text-tertiary-dark",
                    placeholder,
                    value,
                    onChange
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button$1,
                    {
                      variant: "tertiary",
                      size: "sm",
                      isIconOnly: true,
                      disabled: !value,
                      onClick: () => value && (onSubmit == null ? void 0 : onSubmit(value)),
                      leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(CheckIcon, {})
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button$1,
                    {
                      variant: "tertiary",
                      size: "sm",
                      isIconOnly: true,
                      disabled: false,
                      onClick: onCancel,
                      leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {})
                    }
                  )
                ] })
              ]
            }
          );
        }
        if (type === "manage") {
          return /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              ref,
              className: cn(
                "w-full h-12 min-w-[240px] pl-3 pr-2.5 rounded-lg flex justify-start items-center gap-4 transition-colors",
                state === "hover" ? "bg-fill-hover-secondary-light dark:bg-fill-hover-secondary-dark cursor-pointer" : state === "selected" ? "bg-fill-selected-secondary-light dark:bg-fill-selected-secondary-dark cursor-pointer" : "bg-fill-secondary-light dark:bg-fill-secondary-dark hover:bg-fill-hover-secondary-light dark:hover:bg-fill-hover-secondary-dark cursor-pointer",
                className
              ),
              onClick,
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(ReorderIcon, { className: "w-4 h-4 text-icon-secondary-light dark:text-icon-secondary-dark" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-body-md-md text-text-primary-light dark:text-text-primary-dark leading-none", children: label })
              ] })
            }
          );
        }
        return null;
      }
    );
    ExtensionList.displayName = "ExtensionList";
    const List = ExtensionList;
    const CreateSessionPage = () => {
      const navigate = useNavigate();
      const location2 = useLocation();
      const state = location2.state;
      const [hole, setHole] = reactExports.useState(null);
      const [loading, setLoading] = reactExports.useState(true);
      const [error2, setError] = reactExports.useState(null);
      const [sessionName, setSessionName] = reactExports.useState("");
      const [isCreatingMode, setIsCreatingMode] = reactExports.useState(true);
      const [sessions, setSessions] = reactExports.useState([]);
      const [listHoverState, setListHoverState] = reactExports.useState(null);
      const [submitting, setSubmitting] = reactExports.useState(false);
      reactExports.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => __async(exports, null, function* () {
          if (!user) {
            navigate("/", { replace: true });
            return;
          }
          if (!(state == null ? void 0 : state.holeId)) {
            navigate("/hole-list", { replace: true });
            return;
          }
          try {
            setLoading(true);
            const holeData = yield getHole(state.holeId);
            if (!holeData) {
              throw new Error("Hole not found");
            }
            setHole(holeData);
            const sessionsList = yield getHoleSessions(state.holeId);
            const sessionItems = sessionsList.map((session) => ({
              id: session.id,
              name: session.name,
              insightCount: 0
              // TODO: insight 수를 가져오는 로직 추가 필요
            }));
            setSessions(sessionItems);
            if (sessionItems.length > 0) {
              setIsCreatingMode(false);
            }
          } catch (err) {
            console.error("홀 정보 가져오기 실패:", err);
            setError("홀 정보를 불러오는데 실패했습니다.");
          } finally {
            setLoading(false);
          }
        }));
        return () => unsubscribe();
      }, [navigate, state]);
      const handleBackClick = () => {
        navigate("/hole-list");
      };
      const handleSessionNameChange = (e) => {
        setSessionName(e.target.value);
      };
      const handleCancelClick = () => {
        setSessionName("");
      };
      const handleSubmitClick = (value) => __async(exports, null, function* () {
        if (value.trim() && !submitting && hole) {
          try {
            setSubmitting(true);
            const sessionId = yield createSession(hole.id, value.trim());
            const newSession = {
              id: sessionId,
              name: value.trim(),
              insightCount: 0
            };
            setSessions((prevSessions) => [...prevSessions, newSession]);
            setSessionName("");
            setIsCreatingMode(false);
          } catch (error22) {
            console.error("세션 생성 실패:", error22);
            alert("세션을 생성하는데 실패했습니다.");
          } finally {
            setSubmitting(false);
          }
        }
      });
      const handleStartDiggin = () => {
        if (sessions.length > 0) {
          const lastSession = sessions[sessions.length - 1];
          navigate("/session", {
            state: {
              holeId: state.holeId,
              sessionId: lastSession.id,
              sessionName: lastSession.name
            }
          });
        }
      };
      const handleAddClick = () => {
        setIsCreatingMode(true);
      };
      const handleListClick = (id2) => {
        setListHoverState((prevState) => prevState === id2 ? null : id2);
      };
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-text-primary-light dark:text-text-primary-dark", children: "로딩 중..." }) });
      }
      if (error2 || !hole) {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex flex-col items-center justify-center p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 mb-4", children: error2 || "홀을 찾을 수 없습니다." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "secondary", size: "md", onClick: handleBackClick, children: "Back" })
        ] });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black inline-flex flex-col justify-start items-start overflow-hidden", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch h-[52px] px-3 border-b border-color-line-tertiary inline-flex justify-between items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rounded flex justify-start items-center gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                size: "sm",
                isIconOnly: true,
                onClick: handleBackClick,
                leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {}),
                showLeftIcon: true
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-start items-center gap-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-base font-medium leading-snug", children: hole.name }) })
          ] }),
          !isCreatingMode && sessions.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                size: "sm",
                isIconOnly: true,
                onClick: handleAddClick,
                leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(AddIcon, {}),
                showLeftIcon: true
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                size: "sm",
                isIconOnly: true,
                onClick: () => {
                },
                leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(OverflowIcon, {}),
                showLeftIcon: true
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-[348px] rounded-2xl flex flex-col justify-between items-center w-full", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex-1 overflow-hidden", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full flex mr-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full w-full overflow-y-auto custom-scrollbar", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-2 flex flex-col justify-start items-start gap-2", children: [
            isCreatingMode ? /* @__PURE__ */ jsxRuntimeExports.jsx(
              List,
              {
                type: "add",
                state: sessionName ? "active" : "default",
                label: "",
                value: sessionName,
                onChange: handleSessionNameChange,
                onCancel: handleCancelClick,
                onSubmit: handleSubmitClick,
                placeholder: "Write a new session name"
              }
            ) : null,
            sessions.map((session) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              List,
              {
                type: "default",
                state: listHoverState === session.id ? "hover" : "default",
                label: session.name,
                count: session.insightCount,
                onClick: () => handleListClick(session.id)
              },
              session.id
            ))
          ] }) }) }) }),
          !isCreatingMode && sessions.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch px-2 pb-2 flex flex-col justify-start items-start gap-2.5", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              size: "lg",
              onClick: handleStartDiggin,
              className: "self-stretch h-12 min-w-[240px] px-5 rounded-lg flex justify-center items-center",
              children: "Start Diggin"
            }
          ) })
        ] })
      ] });
    };
    const SessionListPage = () => {
      const navigate = useNavigate();
      const location2 = useLocation();
      const state = location2.state;
      const [hole, setHole] = reactExports.useState(null);
      const [loading, setLoading] = reactExports.useState(true);
      const [error2, setError] = reactExports.useState(null);
      const [sessions, setSessions] = reactExports.useState([]);
      const [selectedSessionId, setSelectedSessionId] = reactExports.useState(null);
      const [listHoverState, setListHoverState] = reactExports.useState(null);
      const loadSessionInsightCounts = (sessionsList) => __async(exports, null, function* () {
        console.log("🔍 [DEBUG] SessionListPage: Starting to load insight counts for", sessionsList.length, "sessions");
        try {
          const sessionCountPromises = sessionsList.map((session) => __async(exports, null, function* () {
            console.log(`🔍 [DEBUG] SessionListPage: Loading count for session ${session.id} (${session.name})`);
            try {
              const count = yield getSessionEntriesCount(session.id);
              console.log(`✅ [DEBUG] SessionListPage: Session ${session.id} has ${count} insights`);
              return {
                id: session.id,
                name: session.name,
                insightCount: count
              };
            } catch (error22) {
              console.error(`❌ [DEBUG] SessionListPage: Failed to load count for session ${session.id}:`, error22);
              return {
                id: session.id,
                name: session.name,
                insightCount: 0
              };
            }
          }));
          const sessionsWithCounts = yield Promise.all(sessionCountPromises);
          console.log("✅ [DEBUG] SessionListPage: All session counts loaded, setting sessions");
          setSessions(sessionsWithCounts);
        } catch (error22) {
          console.error("❌ [DEBUG] SessionListPage: Failed to load session counts:", error22);
          const fallbackSessions = sessionsList.map((session) => ({
            id: session.id,
            name: session.name,
            insightCount: 0
          }));
          setSessions(fallbackSessions);
        }
      });
      reactExports.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => __async(exports, null, function* () {
          if (!user) {
            navigate("/", { replace: true });
            return;
          }
          if (!(state == null ? void 0 : state.holeId)) {
            navigate("/hole-list", { replace: true });
            return;
          }
          try {
            setLoading(true);
            const holeData = yield getHole(state.holeId);
            if (!holeData) {
              throw new Error("Hole not found");
            }
            setHole(holeData);
            const sessionsList = yield getHoleSessions(state.holeId);
            yield loadSessionInsightCounts(sessionsList);
          } catch (err) {
            console.error("홀 정보 가져오기 실패:", err);
            setError("홀 정보를 불러오는데 실패했습니다.");
          } finally {
            setLoading(false);
          }
        }));
        return () => unsubscribe();
      }, [navigate, state]);
      const handleBackClick = () => {
        navigate("/hole-list");
      };
      const handleAddClick = () => {
        navigate("/create-session", { state: { holeId: state.holeId } });
      };
      const handleSessionClick = (id2) => {
        setSelectedSessionId(id2 === selectedSessionId ? null : id2);
        setListHoverState((prevState) => prevState === id2 ? null : id2);
      };
      const handleStartDiggin = () => {
        if (selectedSessionId) {
          const selectedSession = sessions.find((s) => s.id === selectedSessionId);
          if (selectedSession) {
            navigate("/session", {
              state: {
                holeId: state.holeId,
                sessionId: selectedSession.id,
                sessionName: selectedSession.name
              }
            });
          }
        }
      };
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-text-primary-light dark:text-text-primary-dark", children: "로딩 중..." }) });
      }
      if (error2 || !hole) {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex flex-col items-center justify-center p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 mb-4", children: error2 || "홀을 찾을 수 없습니다." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "secondary", size: "md", onClick: handleBackClick, children: "Back" })
        ] });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black inline-flex flex-col justify-start items-start overflow-hidden", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch h-12 px-3 border-b border-line-tertiary-light dark:border-line-tertiary-dark inline-flex justify-between items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rounded flex justify-start items-center gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                size: "sm",
                isIconOnly: true,
                onClick: handleBackClick,
                leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {}),
                showLeftIcon: true
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-start items-center gap-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-base font-medium leading-snug", children: hole.name }) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                size: "sm",
                isIconOnly: true,
                onClick: handleAddClick,
                leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(AddIcon, {}),
                showLeftIcon: true
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                size: "sm",
                isIconOnly: true,
                onClick: () => {
                },
                leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(OverflowIcon, {}),
                showLeftIcon: true
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-80 rounded-2xl flex flex-col justify-between items-center w-full", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 flex-1 inline-flex justify-center items-start", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 px-2 pt-2 inline-flex flex-col justify-start items-start gap-2 overflow-auto max-h-full", children: sessions.map((session) => /* @__PURE__ */ jsxRuntimeExports.jsx(
            List,
            {
              type: "default",
              state: selectedSessionId === session.id ? "selected" : listHoverState === session.id ? "hover" : "default",
              label: session.name,
              count: session.insightCount,
              onClick: () => handleSessionClick(session.id)
            },
            session.id
          )) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch px-2 pb-2 flex flex-col justify-start items-start gap-2.5", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              size: "lg",
              disabled: !selectedSessionId,
              onClick: handleStartDiggin,
              className: "self-stretch h-12 min-w-[240px] px-5 rounded-lg flex justify-center items-center",
              children: "Start Diggin"
            }
          ) })
        ] })
      ] });
    };
    const OnSessionPage = () => {
      const navigate = useNavigate();
      const location2 = useLocation();
      const state = location2.state;
      const [hole, setHole] = reactExports.useState(null);
      const [session, setSession] = reactExports.useState(null);
      const [loading, setLoading] = reactExports.useState(true);
      const [error2, setError] = reactExports.useState(null);
      const [isActive, setIsActive] = reactExports.useState(true);
      const [displayDuration, setDisplayDuration] = reactExports.useState(0);
      const [insights, setInsights] = reactExports.useState([]);
      const [insightCount, setInsightCount] = reactExports.useState(0);
      const [isFirstStart, setIsFirstStart] = reactExports.useState(true);
      const timerRef = reactExports.useRef(null);
      const savedDurationRef = reactExports.useRef(0);
      const sessionStartTimeRef = reactExports.useRef(/* @__PURE__ */ new Date());
      const sessionIntentionallyEndedRef = reactExports.useRef(false);
      const calculateCurrentDuration = reactExports.useCallback(() => {
        if (!isActive || !sessionStartTimeRef.current) {
          return savedDurationRef.current;
        }
        const currentTime = Date.now();
        const sessionElapsedMs = currentTime - sessionStartTimeRef.current.getTime();
        const sessionElapsedSeconds = Math.floor(sessionElapsedMs / 1e3);
        return savedDurationRef.current + sessionElapsedSeconds;
      }, [isActive]);
      const formatDuration2 = (seconds) => {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor(seconds % 3600 / 60);
        const secs = seconds % 60;
        const formattedTime = [
          hours.toString().padStart(2, "0"),
          minutes.toString().padStart(2, "0"),
          secs.toString().padStart(2, "0")
        ].join(":");
        return formattedTime;
      };
      const isChromeRuntimeAvailable2 = () => {
        try {
          return typeof chrome !== "undefined" && !!chrome.runtime && !!chrome.runtime.sendMessage;
        } catch (error22) {
          console.warn("[DIGGIN] OnSessionPage: Chrome runtime not available:", error22);
          return false;
        }
      };
      const safeChromeMessage = (message, callback) => {
        return new Promise((resolve) => {
          if (!isChromeRuntimeAvailable2()) {
            console.warn("[DIGGIN] OnSessionPage: Chrome runtime not available, skipping message:", JSON.stringify(message));
            resolve(null);
            return;
          }
          try {
            chrome.runtime.sendMessage(message, (response) => {
              if (chrome.runtime.lastError) {
                const errorMessage = chrome.runtime.lastError.message || "Unknown Chrome runtime error";
                console.warn("[DIGGIN] OnSessionPage: Chrome runtime error:", errorMessage);
                const errorDetails = {
                  message: JSON.stringify(message),
                  error: errorMessage,
                  timestamp: (/* @__PURE__ */ new Date()).toISOString()
                };
                console.warn("[DIGGIN] OnSessionPage: Error details:", JSON.stringify(errorDetails));
                resolve(null);
              } else {
                if (callback) ;
                resolve(response);
              }
            });
            setTimeout(() => {
              console.warn("[DIGGIN] OnSessionPage: Message timeout after 2 seconds:", JSON.stringify(message));
              resolve(null);
            }, 2e3);
          } catch (error22) {
            const errorMessage = error22 instanceof Error ? error22.message : String(error22);
            console.error("[DIGGIN] OnSessionPage: Error sending Chrome message:", errorMessage);
            const errorDetails = {
              message: JSON.stringify(message),
              error: errorMessage,
              timestamp: (/* @__PURE__ */ new Date()).toISOString()
            };
            console.error("[DIGGIN] OnSessionPage: Error details:", JSON.stringify(errorDetails));
            resolve(null);
          }
        });
      };
      reactExports.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => __async(exports, null, function* () {
          if (!user) {
            navigate("/", { replace: true });
            return;
          }
          if (!(state == null ? void 0 : state.holeId) || !(state == null ? void 0 : state.sessionId)) {
            navigate("/hole-list", { replace: true });
            return;
          }
          try {
            setLoading(true);
            const getBackgroundSessionState = () => __async(exports, null, function* () {
              if (!isChromeRuntimeAvailable2()) {
                console.warn("[DIGGIN] OnSessionPage: Chrome runtime not available, skipping background session check");
                return null;
              }
              try {
                const response = yield safeChromeMessage({
                  action: "GET_SESSION_STATUS",
                  sessionId: state.sessionId
                });
                console.log("Background session status response:", response);
                if (response && response.sessionId === state.sessionId) {
                  return {
                    isActive: response.isActive,
                    duration: response.duration
                  };
                }
                return null;
              } catch (error22) {
                console.error("[DIGGIN] OnSessionPage: Error getting background session state:", error22);
                return null;
              }
            });
            const backgroundState = yield getBackgroundSessionState();
            const holeData = yield getHole(state.holeId);
            if (!holeData) {
              throw new Error("Hole not found");
            }
            setHole(holeData);
            const sessionData = yield getSession(state.sessionId);
            if (!sessionData) {
              throw new Error("Session not found");
            }
            setSession(sessionData);
            let initialDuration = 0;
            if (backgroundState && typeof backgroundState.duration === "number") {
              console.log(`Using duration from background: ${backgroundState.duration} seconds`);
              initialDuration = backgroundState.duration;
            }
            if (typeof sessionData.totalDuration === "number") {
              console.log(`Using duration from Firestore: ${sessionData.totalDuration} seconds`);
              initialDuration = Math.max(initialDuration, sessionData.totalDuration);
            }
            console.log(`Setting initial duration to ${initialDuration} seconds`);
            savedDurationRef.current = initialDuration;
            setDisplayDuration(initialDuration);
            const isAlreadyActive = backgroundState ? backgroundState.isActive : false;
            if (!isAlreadyActive) {
              yield updateSessionActiveStatus(state.sessionId, true);
              setIsActive(true);
              sessionStartTimeRef.current = /* @__PURE__ */ new Date();
              const startResponse = yield safeChromeMessage({
                action: "START_SESSION",
                data: {
                  sessionId: state.sessionId,
                  holeId: state.holeId,
                  sessionName: state.sessionName,
                  savedDuration: initialDuration
                }
              });
              if (startResponse && startResponse.success) {
                console.log("[DIGGIN] OnSessionPage: Session started in background script");
                setIsFirstStart(false);
              } else {
                console.warn("[DIGGIN] OnSessionPage: Failed to start session in background, continuing without extension features");
              }
            } else {
              setIsActive(true);
              sessionStartTimeRef.current = /* @__PURE__ */ new Date();
              console.log("Session is already active in background, syncing state");
              yield safeChromeMessage({
                action: "SESSION_CONTINUE",
                data: {
                  sessionId: state.sessionId,
                  holeId: state.holeId,
                  sessionName: state.sessionName,
                  savedDuration: initialDuration
                }
              });
            }
            console.log("🔍 [DEBUG] About to initialize insights - sessionId:", state.sessionId, "session:", !!session);
            console.log("🔍 [DEBUG] State object:", state);
            console.log("🔍 [DEBUG] Session object:", session);
            if (!state.sessionId) {
              console.error("❌ [ERROR] state.sessionId is undefined!");
              setError("세션 ID가 없습니다. 다시 세션을 시작해주세요.");
              navigate("/");
              return;
            }
            console.log("🔄 [DEBUG] Initializing session with empty insights array");
            const sessionIdToUse = (sessionData == null ? void 0 : sessionData.id) || state.sessionId;
            console.log("🔍 [DEBUG] Using sessionId:", sessionIdToUse);
            if (!sessionIdToUse) {
              console.error("❌ [ERROR] No valid sessionId available!");
              setError("세션 ID가 없습니다. 다시 세션을 시작해주세요.");
              navigate("/");
              return;
            }
            console.log("🔄 [DEBUG] Getting actual insight count from Firebase");
            try {
              const actualCount = yield getSessionEntriesCount(sessionIdToUse);
              console.log(`✅ [DEBUG] Found ${actualCount} existing insights in Firebase`);
              setInsightCount(actualCount);
            } catch (countError) {
              console.error("❌ [ERROR] Failed to get insight count from Firebase:", countError);
              setInsightCount(0);
            }
            const insightData = yield getSessionEntries(sessionIdToUse, 0);
            setInsights(insightData.entries);
            console.log("✅ [DEBUG] Session initialized with empty insights array but real Firebase count");
            if (insightData.entries.length > 0) {
              console.log("📋 Detailed insights list:");
              const entriesCollection = collection(db, "textEntries");
              for (const [index, entry] of insightData.entries.entries()) {
                console.log(`  ${index + 1}. Content: "${entry.content.substring(0, 100)}${entry.content.length > 100 ? "..." : ""}"`);
                console.log(`     URL: ${entry.sourceUrl || "No URL"}`);
                console.log(`     Domain: ${entry.sourceDomain || "No domain"}`);
                console.log(`     Timestamp: ${entry.capturedAt ? new Date(entry.capturedAt.toDate()).toLocaleString() : "No timestamp"}`);
                console.log(`     Entry ID: ${entry.id || "No ID"}`);
                console.log("     ---");
                try {
                  const docRef = yield addDoc(entriesCollection, {
                    sessionId: sessionData.id,
                    holeId: holeData.id,
                    content: `${entry.content || "No content"}`,
                    sourceUrl: `${entry.sourceUrl || "No URL"}`,
                    sourceDomain: `${entry.sourceDomain || "No domain"}`,
                    capturedAt: serverTimestamp(),
                    isBookmarked: false
                  });
                  console.log(`✅ Successfully saved entry ${index + 1} with ID: ${docRef.id}`);
                } catch (error22) {
                  console.error(`❌ Failed to save entry ${index + 1}:`, error22);
                }
              }
            } else {
              console.log("📋 No insights found in the list");
            }
          } catch (err) {
            console.error("데이터 로드 실패:", err);
            setError("세션 정보를 불러오는데 실패했습니다.");
          } finally {
            setLoading(false);
          }
        }));
        return () => unsubscribe();
      }, [navigate, state]);
      const startTimer = reactExports.useCallback(() => {
        if (timerRef.current !== null) {
          console.log("Timer already running, clearing previous timer");
          window.clearInterval(timerRef.current);
        }
        const startingDuration = savedDurationRef.current;
        console.log(`Starting timer with saved duration: ${startingDuration} seconds`);
        setDisplayDuration(startingDuration);
        timerRef.current = window.setInterval(() => {
          setDisplayDuration((prev) => {
            const newDuration = prev + 1;
            if (newDuration % 60 === 0) {
              if (session == null ? void 0 : session.id) {
                updateSessionDuration(session.id, newDuration).catch(console.error);
              }
              savedDurationRef.current = newDuration;
            }
            return newDuration;
          });
        }, 1e3);
        console.log("Timer started with interval ID:", timerRef.current);
      }, [session]);
      const handleBackClick = () => {
        if (session && isActive) {
          updateSessionDuration(session.id, displayDuration).catch(console.error);
        }
        navigate("/session-list", { state: { holeId: state.holeId } });
      };
      const saveCurrentTime = () => __async(exports, null, function* () {
        if (!session) return;
        try {
          const currentDuration = calculateCurrentDuration();
          yield updateSessionDuration(session.id, currentDuration);
          savedDurationRef.current = currentDuration;
        } catch (err) {
          console.error("시간 저장 실패:", err);
        }
      });
      const finishSession = () => __async(exports, null, function* () {
        try {
          sessionIntentionallyEndedRef.current = true;
          console.log("[DIGGIN] OnSessionPage: Session intentionally ended by user (Stop button)");
          setLoading(true);
          if (timerRef.current) {
            clearInterval(timerRef.current);
            timerRef.current = null;
          }
          setIsActive(false);
          localStorage.removeItem("activeSession");
          localStorage.setItem("sessionEnded", "true");
          setTimeout(() => {
            localStorage.removeItem("sessionEnded");
            console.log("[DIGGIN] OnSessionPage: Cleared sessionEnded flag after timeout");
          }, 6e4);
          const sessionRef = doc(db, "sessions", state.sessionId);
          let finalDuration = savedDurationRef.current;
          if (sessionStartTimeRef.current) {
            const now = /* @__PURE__ */ new Date();
            finalDuration += Math.floor((now.getTime() - sessionStartTimeRef.current.getTime()) / 1e3);
          }
          yield updateDoc(sessionRef, {
            totalDuration: finalDuration,
            isActive: false,
            endedAt: Timestamp.now()
          });
          const endResponse = yield safeChromeMessage({
            action: "END_SESSION",
            data: { sessionId: state.sessionId }
          });
          if (endResponse == null ? void 0 : endResponse.success) {
            console.log("[DIGGIN] OnSessionPage: Session ended with final duration:", endResponse.finalDuration);
          } else {
            console.warn("[DIGGIN] OnSessionPage: Extension not available, session ended locally only");
          }
          navigate("/finish-session", {
            state: {
              holeId: state.holeId,
              sessionId: state.sessionId,
              sessionName: state.sessionName,
              duration: finalDuration,
              insightCount
            }
          });
        } catch (error22) {
          console.error("[DIGGIN] OnSessionPage: Error finishing session:", error22);
          setError("Failed to finish the session");
        } finally {
          setLoading(false);
        }
      });
      const toggleSession = reactExports.useCallback(() => __async(exports, null, function* () {
        if (!session) return;
        try {
          if (isActive) {
            setIsActive(false);
            if (timerRef.current) {
              clearInterval(timerRef.current);
              timerRef.current = null;
            }
            const currentTime = /* @__PURE__ */ new Date();
            const startTime = new Date(sessionStartTimeRef.current);
            const elapsedTime = Math.floor((currentTime.getTime() - startTime.getTime()) / 1e3);
            const totalDuration = savedDurationRef.current + elapsedTime;
            savedDurationRef.current = totalDuration;
            console.log("[DIGGIN] OnSessionPage: Updating Firestore - Setting session inactive, duration:", totalDuration);
            yield updateSessionActiveStatus(session.id, false);
            yield updateSessionDuration(session.id, totalDuration);
            console.log("[DIGGIN] OnSessionPage: Firestore update completed - Session paused");
            console.log("[DIGGIN] OnSessionPage: Sending PAUSE_SESSION to Realtime Database");
            const pauseResponse = yield safeChromeMessage({
              action: "PAUSE_SESSION",
              data: {
                sessionId: session.id,
                holeId: (hole == null ? void 0 : hole.id) || "",
                sessionName: session.name
              }
            });
            if (pauseResponse && pauseResponse.savedDuration !== void 0) {
              savedDurationRef.current = pauseResponse.savedDuration;
              console.log("[DIGGIN] OnSessionPage: Updated savedDuration from Realtime DB:", pauseResponse.savedDuration);
            }
            yield safeChromeMessage({ action: "GET_SESSION_STATE" });
          } else {
            setIsActive(true);
            sessionStartTimeRef.current = /* @__PURE__ */ new Date();
            if (!timerRef.current) {
              timerRef.current = setInterval(() => {
                const now = /* @__PURE__ */ new Date();
                const startTime = new Date(sessionStartTimeRef.current);
                const elapsedTime = Math.floor((now.getTime() - startTime.getTime()) / 1e3);
                const totalDuration = savedDurationRef.current + elapsedTime;
                setDisplayDuration(totalDuration);
              }, 1e3);
            }
            console.log("[DIGGIN] OnSessionPage: Updating Firestore - Setting session active");
            yield updateSessionActiveStatus(session.id, true);
            console.log("[DIGGIN] OnSessionPage: Firestore update completed - Session resumed");
            console.log("[DIGGIN] OnSessionPage: Sending RESUME_SESSION to Realtime Database");
            yield safeChromeMessage({
              action: "RESUME_SESSION",
              data: {
                sessionId: session.id,
                holeId: (hole == null ? void 0 : hole.id) || "",
                sessionName: session.name,
                savedDuration: savedDurationRef.current
              }
            });
            yield safeChromeMessage({ action: "GET_SESSION_STATE" });
          }
        } catch (err) {
          console.error("세션 상태 변경 실패:", err);
          alert("세션 상태를 변경하는데 실패했습니다.");
        }
      }), [isActive, session, saveCurrentTime]);
      reactExports.useCallback(() => __async(exports, null, function* () {
        if (!session) return;
        try {
          setIsActive(false);
          if (timerRef.current) {
            clearInterval(timerRef.current);
            timerRef.current = null;
          }
          const currentTime = /* @__PURE__ */ new Date();
          let totalDuration = savedDurationRef.current;
          if (isActive && sessionStartTimeRef.current) {
            const startTime = new Date(sessionStartTimeRef.current);
            const elapsedTime = Math.floor((currentTime.getTime() - startTime.getTime()) / 1e3);
            totalDuration += elapsedTime;
          }
          yield updateSessionActiveStatus(session.id, false);
          yield updateSessionDuration(session.id, totalDuration);
          const stopResponse = yield safeChromeMessage({
            action: "END_SESSION",
            data: {
              sessionId: session.id,
              holeId: (hole == null ? void 0 : hole.id) || ""
            }
          });
          if (stopResponse && stopResponse.finalDuration !== void 0) {
            const finalDuration = stopResponse.finalDuration;
            console.log("[DIGGIN] OnSessionPage: Final session duration:", finalDuration);
          }
          if (isChromeRuntimeAvailable2()) {
            try {
              const port = chrome.runtime.connect({ name: "clipboard" });
              port.postMessage({
                action: "CONNECTION_TEST",
                timestamp: Date.now()
              });
              console.log("[DIGGIN] OnSessionPage: Clipboard connection established before unmount");
            } catch (err) {
              console.error("[DIGGIN] OnSessionPage: Failed to establish clipboard connection:", err);
            }
          }
        } catch (err) {
          console.error("Failed to stop timer:", err);
        }
      }), [isActive, session, navigate]);
      reactExports.useEffect(() => {
        console.log("Session timer effect triggered", {
          hasSession: !!session,
          loading,
          isActive,
          timerRunning: timerRef.current !== null
        });
        if (session && !loading && isActive) {
          console.log("Starting timer from effect");
          startTimer();
        }
        return () => {
          if (timerRef.current !== null) {
            console.log("Clearing timer on unmount from timer effect");
            window.clearInterval(timerRef.current);
            timerRef.current = null;
          }
        };
      }, [session, loading, isActive, startTimer]);
      reactExports.useEffect(() => {
        const handleVisibilityChange = () => {
          if (document.hidden) {
            if (session && isActive) {
              console.log(`Saving duration on visibility change: ${displayDuration} seconds`);
              updateSessionDuration(session.id, displayDuration).catch(console.error);
              savedDurationRef.current = displayDuration;
            }
          }
        };
        document.addEventListener("visibilitychange", handleVisibilityChange);
        return () => {
          document.removeEventListener("visibilitychange", handleVisibilityChange);
        };
      }, [session, isActive, displayDuration]);
      const handleCopy = reactExports.useCallback((e) => __async(exports, null, function* () {
        var _a;
        console.log("Copy event detected!");
        if (!session || !hole || !auth.currentUser) {
          console.log("Missing required data:", {
            hasSession: !!session,
            hasHole: !!hole,
            hasUser: !!auth.currentUser
          });
          return;
        }
        try {
          let copiedText;
          try {
            copiedText = yield navigator.clipboard.readText();
          } catch (clipboardError) {
            console.log("Failed to read clipboard:", clipboardError);
            copiedText = (_a = e.clipboardData) == null ? void 0 : _a.getData("text/plain");
          }
          if (!copiedText) {
            console.log("No text content found in clipboard");
            return;
          }
          console.log("Copied text:", copiedText);
          const currentUrl = window.location.href;
          let sourceDomain;
          try {
            sourceDomain = new URL(currentUrl).hostname;
          } catch (error22) {
            console.error("Failed to extract domain:", error22);
            sourceDomain = "unknown";
          }
          console.log("Current URL:", currentUrl, "Domain:", sourceDomain);
          console.log("💾 [DEBUG] Adding new insight to local state");
          const entriesCollection = collection(db, "textEntries");
          const docRef = yield addDoc(entriesCollection, {
            sessionId: session.id,
            holeId: hole.id,
            content: copiedText,
            sourceUrl: currentUrl,
            sourceDomain,
            capturedAt: serverTimestamp(),
            isBookmarked: false
          });
          console.log("✅ [DEBUG] Text entry successfully saved to Firebase with ID:", docRef.id);
          const newEntry = {
            id: docRef.id,
            sessionId: session.id,
            holeId: hole.id,
            content: copiedText,
            sourceUrl: currentUrl,
            sourceDomain,
            capturedAt: /* @__PURE__ */ new Date(),
            // 임시로 현재 시간 사용
            isBookmarked: false
          };
          setInsights((prev) => [newEntry, ...prev]);
          try {
            const updatedCount = yield getSessionEntriesCount(session.id);
            console.log(`🔄 [DEBUG] Updated insight count from Firebase: ${updatedCount}`);
            setInsightCount(updatedCount);
          } catch (countError) {
            console.error("❌ [ERROR] Failed to get updated insight count:", countError);
            setInsightCount((prev) => prev + 1);
          }
          console.log("✅ [DEBUG] New insight added to local state with Firebase count update:", {
            entryId: docRef.id,
            content: copiedText.substring(0, 50) + "...",
            firebaseCount: "updated from server"
          });
        } catch (err) {
          console.error("Failed to save copied text:", err);
        }
      }), [session, hole]);
      reactExports.useEffect(() => {
        if (isActive) {
          document.addEventListener("copy", handleCopy);
        }
        return () => {
          document.removeEventListener("copy", handleCopy);
        };
      }, [isActive, handleCopy]);
      const processPendingItems = reactExports.useCallback(() => __async(exports, null, function* () {
        var _a, _b;
        console.log("🔍 [DEBUG] processPendingItems called in OnSessionPage");
        if (!((_b = (_a = window.chrome) == null ? void 0 : _a.runtime) == null ? void 0 : _b.sendMessage)) {
          console.log("🚫 [DEBUG] Chrome extension API not available");
          return;
        }
        console.log("✅ [DEBUG] Chrome extension API is available");
        if (!session || !hole) {
          console.log("❌ [DEBUG] No session or hole data available:", { hasSession: !!session, hasHole: !!hole });
          return;
        }
        console.log("✅ [DEBUG] Session and hole data available");
        try {
          console.log("🔄 [DEBUG] Starting to process pending items...");
          console.log("📤 [DEBUG] Sending GET_PENDING_ITEMS message to background");
          const response = yield new Promise((resolve) => {
            window.chrome.runtime.sendMessage(
              { action: "GET_PENDING_ITEMS" },
              (response2) => {
                console.log("📥 [DEBUG] Received response from background:", response2);
                resolve(response2);
              }
            );
          });
          if (!(response == null ? void 0 : response.success)) {
            console.log("❌ [DEBUG] Response not successful:", response);
            return;
          }
          if (!response.pendingItems) {
            console.log("📋 [DEBUG] No pendingItems in response");
            return;
          }
          if (!response.pendingItems.length) {
            console.log("📋 [DEBUG] pendingItems array is empty");
            return;
          }
          console.log(`📋 [DEBUG] Found ${response.pendingItems.length} pending items to process`);
          console.log("📋 [DEBUG] Pending items:", response.pendingItems);
          let successCount = 0;
          let failCount = 0;
          console.log(`🎯 [DEBUG] Target session ID: ${session.id}`);
          for (const item of response.pendingItems) {
            try {
              console.log(`⚙️ [DEBUG] Processing item: ${item.content.substring(0, 50)}...`);
              console.log(`⚙️ [DEBUG] Item URL: ${item.url || "No URL"}`);
              const entriesCollection = collection(db, "textEntries");
              const docRef = yield addDoc(entriesCollection, {
                sessionId: session.id,
                holeId: hole.id,
                content: item.content,
                sourceUrl: item.url || "",
                sourceDomain: item.url ? new URL(item.url).hostname : "unknown",
                capturedAt: serverTimestamp(),
                isBookmarked: false
              });
              successCount++;
              console.log(`✅ [DEBUG] Successfully processed item with ID ${docRef.id}: ${item.content.substring(0, 30)}...`);
            } catch (error22) {
              failCount++;
              console.error(`❌ [DEBUG] Failed to process item: ${item.content.substring(0, 30)}...`, error22);
            }
          }
          console.log(`📊 [DEBUG] Processing complete: ${successCount} success, ${failCount} failed`);
          if (failCount === 0) {
            console.log("🧹 [DEBUG] Clearing pending items from storage...");
            yield new Promise((resolve) => {
              window.chrome.runtime.sendMessage(
                { action: "CLEAR_PENDING_ITEMS" },
                (clearResponse) => {
                  console.log("🧹 [DEBUG] Clear response:", clearResponse);
                  if (clearResponse == null ? void 0 : clearResponse.success) {
                    console.log("✅ [DEBUG] Pending items cleared from storage");
                  } else {
                    console.error("❌ [DEBUG] Failed to clear pending items:", clearResponse == null ? void 0 : clearResponse.error);
                  }
                  resolve();
                }
              );
            });
            console.log("🔄 [DEBUG] Refreshing insights list...");
            try {
              const updatedCount = yield getSessionEntriesCount(session.id);
              console.log(`✅ [DEBUG] Updated insight count from Firebase: ${updatedCount}`);
              setInsightCount(updatedCount);
            } catch (countError) {
              console.error("❌ [ERROR] Failed to get updated insight count:", countError);
              const insightData = yield getSessionEntries(session.id);
              setInsights(insightData.entries);
              setInsightCount(insightData.entries.length);
            }
          }
        } catch (error22) {
          console.error("💥 [DEBUG] Error processing pending items:", error22);
        }
      }), [session, hole]);
      reactExports.useEffect(() => {
        console.log("🔍 [DEBUG] useEffect for processPendingItems triggered in OnSessionPage");
        console.log("🔍 [DEBUG] Conditions - session:", !!session, "hole:", !!hole, "loading:", loading);
        if (session && hole && !loading) {
          console.log("✅ [DEBUG] All conditions met, calling processPendingItems in OnSessionPage");
          processPendingItems();
        } else {
          console.log("❌ [DEBUG] Conditions not met for processPendingItems in OnSessionPage");
        }
      }, [session, hole, loading, processPendingItems]);
      reactExports.useEffect(() => {
        console.log("[DIGGIN] OnSessionPage: Component mounted");
        function initSession() {
          return __async(this, null, function* () {
            let sessionId = state == null ? void 0 : state.sessionId;
            let holeId = state == null ? void 0 : state.holeId;
            let sessionName = state == null ? void 0 : state.sessionName;
            if (!sessionId || !holeId) {
              console.log("[DIGGIN] OnSessionPage: Missing state, checking for active session");
              try {
                const activeSession = yield safeChromeMessage({ action: "CHECK_ACTIVE_SESSION" });
                if ((activeSession == null ? void 0 : activeSession.success) && (activeSession == null ? void 0 : activeSession.hasActiveSession) && (activeSession == null ? void 0 : activeSession.activeSession)) {
                  const sessionData = activeSession.activeSession;
                  sessionId = sessionData.sessionId;
                  holeId = sessionData.holeId;
                  sessionName = sessionData.sessionName || "";
                  console.log("[DIGGIN] OnSessionPage: Using active session data:", { sessionId, holeId, sessionName });
                } else {
                  console.log("[DIGGIN] OnSessionPage: No active session found");
                  navigate("/");
                  return;
                }
              } catch (error22) {
                console.error("[DIGGIN] OnSessionPage: Error getting active session:", error22);
                navigate("/");
                return;
              }
            }
            yield safeChromeMessage({ action: "GET_SESSION_STATE" });
            const startResponse = yield safeChromeMessage({
              action: "START_SESSION",
              data: {
                sessionId,
                holeId,
                sessionName
              }
            });
            if (startResponse == null ? void 0 : startResponse.success) {
              console.log("[DIGGIN] OnSessionPage: Session started in Realtime Database successfully");
            } else {
              console.warn("[DIGGIN] OnSessionPage: Extension not available, continuing without extension features");
            }
          });
        }
        initSession();
        return () => {
          console.log("[DIGGIN] OnSessionPage: Component unmounting");
          if (sessionIntentionallyEndedRef.current) {
            console.log("[DIGGIN] OnSessionPage: Session was intentionally ended, not sending SESSION_CONTINUE");
            return;
          }
          console.log("[DIGGIN] OnSessionPage: Session was not ended, sending SESSION_CONTINUE");
          if (!session) {
            console.log("[DIGGIN] OnSessionPage: No session data available on unmount");
            if (state == null ? void 0 : state.sessionId) {
              safeChromeMessage({
                action: "SESSION_CONTINUE",
                data: {
                  sessionId: state.sessionId,
                  holeId: state.holeId,
                  sessionName: state.sessionName
                }
              });
            }
            return;
          }
          const finalDuration = calculateCurrentDuration();
          console.log("[DIGGIN] OnSessionPage: Final duration on unmount:", finalDuration, "seconds");
          if (session.id) {
            updateSessionDuration(session.id, finalDuration).then(() => {
              console.log("[DIGGIN] OnSessionPage: Duration saved to Firestore on unmount");
            }).catch((error22) => {
              console.error("[DIGGIN] OnSessionPage: Error saving duration to Firestore on unmount:", error22);
            });
          }
          safeChromeMessage({
            action: "SESSION_CONTINUE",
            data: {
              sessionId: session.id,
              holeId: (hole == null ? void 0 : hole.id) || (state == null ? void 0 : state.holeId),
              sessionName: session.name || (state == null ? void 0 : state.sessionName),
              savedDuration: finalDuration
            }
          });
          if (isChromeRuntimeAvailable2()) {
            try {
              const port = chrome.runtime.connect({ name: "clipboard" });
              port.postMessage({
                action: "CONNECTION_TEST",
                timestamp: Date.now()
              });
              console.log("[DIGGIN] OnSessionPage: Clipboard connection established before unmount");
            } catch (err) {
              console.error("[DIGGIN] OnSessionPage: Failed to establish clipboard connection:", err);
            }
          }
        };
      }, [calculateCurrentDuration, navigate, state, session, hole]);
      const getIconById2 = (iconId) => {
        if (iconId === "utility-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(SearchIcon, {});
        if (iconId === "utility-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(AddIcon, {});
        if (iconId === "utility-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(EditIcon, {});
        if (iconId === "utility-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(TrashIcon, {});
        if (iconId === "utility-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckIcon, {});
        if (iconId === "utility-6") return /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {});
        if (iconId === "utility-7") return /* @__PURE__ */ jsxRuntimeExports.jsx(InfoIcon, {});
        if (iconId === "utility-8") return /* @__PURE__ */ jsxRuntimeExports.jsx(LinkIcon, {});
        if (iconId === "utility-9") return /* @__PURE__ */ jsxRuntimeExports.jsx(SettingIcon, {});
        if (iconId === "utility-10") return /* @__PURE__ */ jsxRuntimeExports.jsx(FilterIcon, {});
        if (iconId === "media-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(PlayIcon, {});
        if (iconId === "media-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(PauseIcon, {});
        if (iconId === "media-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(StopIcon, {});
        if (iconId === "media-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(ArchiveIcon, {});
        if (iconId === "media-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(HideTabIcon, {});
        if (iconId === "media-6") return /* @__PURE__ */ jsxRuntimeExports.jsx(HighlightIcon, {});
        if (iconId === "media-7") return /* @__PURE__ */ jsxRuntimeExports.jsx(SortIcon, {});
        if (iconId === "media-8") return /* @__PURE__ */ jsxRuntimeExports.jsx(ReorderIcon, {});
        if (iconId === "media-9") return /* @__PURE__ */ jsxRuntimeExports.jsx(OverflowIcon, {});
        if (iconId === "media-10") return /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRightIcon, {});
        if (iconId === "other-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(TimeIcon, {});
        if (iconId === "other-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(HourglassIcon, {});
        if (iconId === "other-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(LightbulbIcon, {});
        if (iconId === "other-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(TripleStarsIcon, {});
        if (iconId === "other-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {});
        return /* @__PURE__ */ jsxRuntimeExports.jsx(InfoIcon, {});
      };
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-text-primary-light dark:text-text-primary-dark", children: "로딩 중..." }) });
      }
      if (error2 || !hole || !session) {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex flex-col items-center justify-center p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 mb-4", children: error2 || "세션 정보를 찾을 수 없습니다." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "secondary", size: "md", onClick: handleBackClick, children: "Back" })
        ] });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black inline-flex flex-col justify-start items-start overflow-hidden", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch h-12 px-3 border-b border-line-tertiary-light dark:border-line-tertiary-dark inline-flex justify-between items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-start items-center gap-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rounded flex justify-start items-center gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              size: "sm",
              isIconOnly: true,
              onClick: handleBackClick,
              leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {}),
              showLeftIcon: true
            }
          ) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-5 h-5 relative overflow-hidden flex items-center justify-center", children: hole.icon && getIconById2(hole.icon) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-base font-medium leading-snug", children: hole.name })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rounded flex justify-start items-center gap-2" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex-1 py-5 rounded-2xl flex flex-col justify-center items-center gap-10", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex-1 flex flex-col justify-start items-center gap-5", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch text-center text-text-secondary-light dark:text-text-secondary-dark text-base font-medium leading-snug", children: session.name }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex-1 flex flex-col justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-28 h-28 bg-gray-200 rounded-[100px]" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex flex-col justify-start items-center gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch px-2 inline-flex justify-start items-start gap-2 flex-wrap content-start", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 px-3 py-2 bg-fill-onsurface-light dark:bg-fill-onsurface-dark rounded-lg inline-flex flex-col justify-start items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "inline-flex justify-center items-center gap-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 relative flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(TimeIcon, { className: "w-3.5 h-3.5 text-icon-secondary-light dark:text-icon-secondary-dark" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center text-text-secondary-light dark:text-text-secondary-dark text-xs font-medium leading-none", children: "Time Spent" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `text-center text-base font-medium leading-snug ${isActive ? "text-text-primary-light dark:text-text-primary-dark" : "text-text-tertiary-light dark:text-text-tertiary-dark"}`, children: formatDuration2(displayDuration) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 px-3 py-2 bg-fill-onsurface-light dark:bg-fill-onsurface-dark rounded-lg inline-flex flex-col justify-start items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "inline-flex justify-center items-center gap-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4 relative flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(LightbulbIcon, { className: "w-3.5 h-3.5 text-icon-secondary-light dark:text-icon-secondary-dark" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center text-text-secondary-light dark:text-text-secondary-dark text-xs font-medium leading-none", children: "Insights Collected" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `text-center text-base font-medium leading-snug ${isActive ? "text-text-primary-light dark:text-text-primary-dark" : "text-text-tertiary-light dark:text-text-tertiary-dark"}`, children: insightCount })
            ] })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "inline-flex justify-start items-center gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: toggleSession,
                className: "w-12 h-12 p-3 bg-fill-primary-light dark:bg-fill-primary-dark text-icon-inverted-light dark:text-icon-inverted-dark rounded-[20px] flex justify-center items-center gap-2.5",
                children: isActive ? /* @__PURE__ */ jsxRuntimeExports.jsx(PauseIcon, { className: "w-6 h-6 text-icon-inverted-light dark:text-icon-inverted-dark" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(PlayIcon, { className: "w-6 h-6 text-icon-inverted-light dark:text-icon-inverted-dark" })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                className: "w-12 h-12 p-3 bg-fill-onsurface-light dark:bg-fill-onsurface-dark rounded-[20px] flex justify-center items-center",
                onClick: finishSession,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(StopIcon, { className: "w-6 h-6 text-icon-inverted-light dark:text-icon-inverted-dark" })
              }
            )
          ] })
        ] }) })
      ] });
    };
    const formatDuration = (seconds) => {
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor(seconds % 3600 / 60);
      const secs = seconds % 60;
      return [
        hours.toString().padStart(2, "0"),
        minutes.toString().padStart(2, "0"),
        secs.toString().padStart(2, "0")
      ].join(":");
    };
    const getIconById = (iconId) => {
      if (iconId === "utility-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(SearchIcon, {});
      if (iconId === "utility-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(AddIcon, {});
      if (iconId === "utility-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(EditIcon, {});
      if (iconId === "utility-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(TrashIcon, {});
      if (iconId === "utility-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckIcon, {});
      if (iconId === "utility-6") return /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {});
      if (iconId === "utility-7") return /* @__PURE__ */ jsxRuntimeExports.jsx(InfoIcon, {});
      if (iconId === "utility-8") return /* @__PURE__ */ jsxRuntimeExports.jsx(LinkIcon, {});
      if (iconId === "utility-9") return /* @__PURE__ */ jsxRuntimeExports.jsx(SettingIcon, {});
      if (iconId === "utility-10") return /* @__PURE__ */ jsxRuntimeExports.jsx(FilterIcon, {});
      if (iconId === "media-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(PlayIcon, {});
      if (iconId === "media-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(PauseIcon, {});
      if (iconId === "media-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(StopIcon, {});
      if (iconId === "media-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(ArchiveIcon, {});
      if (iconId === "media-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(HideTabIcon, {});
      if (iconId === "media-6") return /* @__PURE__ */ jsxRuntimeExports.jsx(HighlightIcon, {});
      if (iconId === "media-7") return /* @__PURE__ */ jsxRuntimeExports.jsx(SortIcon, {});
      if (iconId === "media-8") return /* @__PURE__ */ jsxRuntimeExports.jsx(ReorderIcon, {});
      if (iconId === "media-9") return /* @__PURE__ */ jsxRuntimeExports.jsx(OverflowIcon, {});
      if (iconId === "media-10") return /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRightIcon, {});
      if (iconId === "other-1") return /* @__PURE__ */ jsxRuntimeExports.jsx(TimeIcon, {});
      if (iconId === "other-2") return /* @__PURE__ */ jsxRuntimeExports.jsx(HourglassIcon, {});
      if (iconId === "other-3") return /* @__PURE__ */ jsxRuntimeExports.jsx(LightbulbIcon, {});
      if (iconId === "other-4") return /* @__PURE__ */ jsxRuntimeExports.jsx(TripleStarsIcon, {});
      if (iconId === "other-5") return /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {});
      return /* @__PURE__ */ jsxRuntimeExports.jsx(InfoIcon, {});
    };
    const FinishSessionPage = () => {
      const navigate = useNavigate();
      const location2 = useLocation();
      const state = location2.state;
      const [hole, setHole] = reactExports.useState(null);
      const [loading, setLoading] = reactExports.useState(true);
      const [error2, setError] = reactExports.useState(null);
      reactExports.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => __async(exports, null, function* () {
          if (!user) {
            navigate("/", { replace: true });
            return;
          }
          if (!(state == null ? void 0 : state.holeId) || !(state == null ? void 0 : state.sessionId)) {
            navigate("/hole-list", { replace: true });
            return;
          }
          try {
            setLoading(true);
            const holeData = yield getHole(state.holeId);
            if (!holeData) {
              throw new Error("Hole not found");
            }
            setHole(holeData);
          } catch (err) {
            console.error("홀 정보 가져오기 실패:", err);
            setError("홀 정보를 불러오는데 실패했습니다.");
          } finally {
            setLoading(false);
          }
        }));
        return () => unsubscribe();
      }, [navigate, state]);
      const handleBackClick = () => {
        navigate("/hole-list");
      };
      const handleCheckHoleClick = () => {
        var _a;
        if (state == null ? void 0 : state.holeId) {
          const webUrl = `https://famous-donut-955ac6.netlify.app/holes/${state.holeId}/insights`;
          if ((_a = chrome == null ? void 0 : chrome.tabs) == null ? void 0 : _a.create) {
            chrome.tabs.create({ url: webUrl });
          } else {
            window.open(webUrl, "_blank");
          }
        }
      };
      const handleBackToHomeClick = () => {
        navigate("/hole-list");
      };
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-text-primary-light dark:text-text-primary-dark", children: "로딩 중..." }) });
      }
      if (error2 || !hole) {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex flex-col items-center justify-center p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 mb-4", children: error2 || "홀을 찾을 수 없습니다." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "secondary", size: "md", onClick: handleBackClick, children: "Back" })
        ] });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black inline-flex flex-col justify-start items-center overflow-hidden", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch h-12 px-3 inline-flex justify-between items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-center items-center gap-3 flex-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-5 h-5 relative overflow-hidden flex items-center justify-center", children: hole.icon && getIconById(hole.icon) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-base font-medium leading-snug", children: hole.name })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-[348px] rounded-2xl flex flex-col justify-between items-center w-full", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch flex-1 p-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch px-3 py-2 bg-gray-50 rounded-lg flex flex-col justify-start items-center gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-body-lg-md\n             leading-none", children: state.sessionName }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "inline-flex justify-center items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-center items-center gap-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(TimeIcon, { className: "w-3.5 h-3.5 text-icon-secondary-light dark:text-icon-secondary-dark" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-secondary-light dark:text-text-secondary-dark text-body-md-md leading-none", children: "Time Spent" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-body-md-md leading-none", children: formatDuration(state.duration) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "inline-flex justify-center items-center gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-center items-center gap-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-4 h-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(TripleStarsIcon, { className: "w-3.5 h-3.5 text-icon-secondary-light dark:text-icon-secondary-dark" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center text-text-secondary-light dark:text-text-secondary-dark text-body-md-md leading-none", children: "Insights Collected" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-body-md-md leading-none", children: state.insightCount })
            ] })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch px-2 pb-2 flex flex-col justify-start items-center gap-2.5", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "primary",
                size: "lg",
                onClick: handleCheckHoleClick,
                className: "w-[304px] h-12 px-5 rounded-lg flex justify-center items-center",
                children: "Check the hole"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                size: "lg",
                onClick: handleBackToHomeClick,
                className: "w-[304px] h-12 px-5 rounded-lg flex justify-center items-center",
                children: "Back to home"
              }
            )
          ] })
        ] })
      ] });
    };
    const TEMPLATE_SESSIONS = {
      "design-thinking": [
        "Empathize",
        "Define",
        "Ideate",
        "Prototype",
        "Test"
      ],
      "double-diamond": [
        "Discover",
        "Define",
        "Develop",
        "Deliver"
      ],
      "bm-canvas": [
        "Customer Segments",
        "Value Propositions",
        "Channels",
        "Customer Relationships",
        "Revenue Streams",
        "Key Activities",
        "Key Resources",
        "Key Partners",
        "Cost Structure"
      ],
      "jtbd": [
        "Situations",
        "Motivations",
        "Desired Outcomes",
        "Functional Jobs",
        "Emotional Jobs",
        "Social Jobs"
      ]
    };
    const TemplateListPage = () => {
      const navigate = useNavigate();
      const location2 = useLocation();
      const state = location2.state;
      const [hole, setHole] = reactExports.useState(null);
      const [loading, setLoading] = reactExports.useState(true);
      const [error2, setError] = reactExports.useState(null);
      const [sessions, setSessions] = reactExports.useState([]);
      const [selectedSessionId, setSelectedSessionId] = reactExports.useState(null);
      const [listHoverState, setListHoverState] = reactExports.useState(null);
      const [selectedTemplateId, setSelectedTemplateId] = reactExports.useState(null);
      const [isCreating, setIsCreating] = reactExports.useState(false);
      reactExports.useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => __async(exports, null, function* () {
          if (!user) {
            navigate("/", { replace: true });
            return;
          }
          if (!(state == null ? void 0 : state.holeId)) {
            navigate("/hole-list", { replace: true });
            return;
          }
          try {
            setLoading(true);
            const holeData = yield getHole(state.holeId);
            if (!holeData) {
              throw new Error("Hole not found");
            }
            setHole(holeData);
            const sessionsList = yield getHoleSessions(state.holeId);
            const sessionItems = sessionsList.map((session) => ({
              id: session.id,
              name: session.name,
              insightCount: 0
              // TODO: insight 수를 가져오는 로직 추가 필요
            }));
            setSessions(sessionItems);
          } catch (err) {
            console.error("홀 정보 가져오기 실패:", err);
            setError("홀 정보를 불러오는데 실패했습니다.");
          } finally {
            setLoading(false);
          }
        }));
        return () => unsubscribe();
      }, [navigate, state]);
      const handleBackClick = () => {
        navigate("/empty-session", { state: { holeId: state.holeId } });
      };
      const handleStartDiggin = () => __async(exports, null, function* () {
        if (!selectedTemplateId || !hole) return;
        try {
          setIsCreating(true);
          const sessions2 = TEMPLATE_SESSIONS[selectedTemplateId];
          console.log(sessions2);
          for (const sessionName of sessions2) {
            try {
              yield createSession(hole.id, sessionName);
              console.log(sessionName);
            } catch (err) {
              console.error(`세션 "${sessionName}" 생성 실패:`, err);
              throw err;
            }
          }
          navigate("/session-list", {
            state: {
              holeId: hole.id,
              refresh: true
              // 세션 목록을 새로고침하도록 표시
            }
          });
        } catch (err) {
          console.error("세션 생성 실패:", err);
          setError("세션 생성에 실패했습니다.");
        } finally {
          setIsCreating(false);
        }
      });
      const handleTemplateSelect = (templateId) => {
        setSelectedTemplateId(templateId === selectedTemplateId ? null : templateId);
      };
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-text-primary-light dark:text-text-primary-dark", children: "로딩 중..." }) });
      }
      if (error2 || !hole) {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black flex flex-col items-center justify-center p-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-red-500 mb-4", children: error2 || "홀을 찾을 수 없습니다." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "secondary", size: "md", onClick: handleBackClick, children: "Back" })
        ] });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-80 h-[400px] bg-white dark:bg-black inline-flex flex-col justify-start items-start overflow-hidden", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch h-12 px-3 border-b border-line-tertiary-light dark:border-line-tertiary-dark inline-flex justify-between items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center gap-3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rounded flex justify-start items-center gap-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              size: "sm",
              isIconOnly: true,
              onClick: handleBackClick,
              leftIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(BackIcon, {}),
              showLeftIcon: true
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-start items-center gap-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center justify-center text-text-primary-light dark:text-text-primary-dark text-base font-medium leading-snug", children: hole.name }) })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-80 rounded-2xl flex flex-col justify-between items-center w-full", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-80 flex-1 inline-flex justify-center items-start", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 px-3 pt-3 inline-flex flex-col justify-start items-start gap-2 overflow-auto max-h-full", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-3 w-full", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: `w-full h-[100px] p-3 bg-surface-bg-light dark:bg-surface-bg-dark rounded-lg outline outline-1 outline-offset-[-1px] outline-line-tertiary-light dark:outline-line-tertiary-dark inline-flex flex-col justify-start items-start gap-2 cursor-pointer ${selectedTemplateId === "design-thinking" ? "bg-gray-50 outline-line-secondary-light" : ""}`,
                onClick: () => handleTemplateSelect("design-thinking"),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex flex-col justify-start items-start gap-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-md self-stretch justify-center text-text-primary-light dark:text-text-primary-dark leading-none truncate", children: "🎨 💭" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-md self-stretch justify-center text-text-primary-light dark:text-text-primary-dark leading-none truncate", children: "Design Thinking" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-rg self-stretch h-[32px] justify-center text-text-secondary-light dark:text-text-secondary-dark leading-none line-clamp-2 overflow-hidden", children: "Empathize, Define, Ideate, Prototype, Test" })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: `w-full h-[100px] p-3 bg-surface-bg-light dark:bg-surface-bg-dark rounded-lg outline outline-1 outline-offset-[-1px] outline-line-tertiary-light dark:outline-line-tertiary-dark inline-flex flex-col justify-start items-start gap-2 cursor-pointer ${selectedTemplateId === "double-diamond" ? "bg-gray-50 outline-line-secondary-light" : ""}`,
                onClick: () => handleTemplateSelect("double-diamond"),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex flex-col justify-start items-start gap-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-md self-stretch justify-center text-text-primary-light dark:text-text-primary-dark leading-none truncate", children: "💎 💎" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch justify-center text-text-primary-light dark:text-text-primary-dark text-caption-md-md leading-none truncate", children: "Double Diamond" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-rg self-stretch h-8 justify-center text-text-secondary-light dark:text-text-secondary-dark leading-none line-clamp-2 overflow-hidden", children: "Discover, Define, Develop, Deliver" })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: `w-full h-[100px] p-3 bg-surface-bg-light dark:bg-surface-bg-dark rounded-lg outline outline-1 outline-offset-[-1px] outline-line-tertiary-light dark:outline-line-tertiary-dark inline-flex flex-col justify-start items-start gap-2 cursor-pointer ${selectedTemplateId === "bm-canvas" ? "bg-gray-50 outline-line-secondary-light" : ""}`,
                onClick: () => handleTemplateSelect("bm-canvas"),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex flex-col justify-start items-start gap-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-md self-stretch justify-center text-text-primary-light dark:text-text-primary-dark leading-none truncate", children: "💼 📋" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch justify-center text-text-primary-light dark:text-text-primary-dark text-caption-md-md leading-none truncate", children: "BM Canvas" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-rg self-stretch h-8 justify-center text-text-secondary-light dark:text-text-secondary-dark leading-none line-clamp-2 overflow-hidden", children: "Customer Segments, Value Propositions, Channels, Customer Relationships, Revenue Streams, Key Activities, Key Resources, Key Partners, Cost Structure" })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: `w-full h-[100px] p-3 bg-surface-bg-light dark:bg-surface-bg-dark rounded-lg outline outline-1 outline-offset-[-1px] outline-line-tertiary-light dark:outline-line-tertiary-dark inline-flex flex-col justify-start items-start gap-2 cursor-pointer ${selectedTemplateId === "jtbd" ? "bg-gray-50 outline-line-secondary-light" : ""}`,
                onClick: () => handleTemplateSelect("jtbd"),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "self-stretch flex flex-col justify-start items-start gap-1", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-md self-stretch justify-center text-text-primary-light dark:text-text-primary-dark leading-none truncate", children: "📎 ✅" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch justify-center text-text-primary-light dark:text-text-primary-dark text-caption-md-md leading-none truncate", children: "JTBD" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-caption-md-rg self-stretch h-8 justify-center text-text-secondary-light dark:text-text-secondary-dark leading-none line-clamp-2 overflow-hidden", children: "Situations, Motivations, Desired Outcomes, Functional Jobs, Emotional Jobs, Social Jobs" })
                ]
              }
            )
          ] }) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "self-stretch px-2 pb-2 flex flex-col justify-start items-start gap-2.5", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              size: "lg",
              disabled: !selectedTemplateId || isCreating,
              onClick: handleStartDiggin,
              className: "self-stretch h-12 min-w-[240px] px-5 rounded-lg flex justify-center items-center",
              children: isCreating ? "Creating Sessions..." : "Select"
            }
          ) })
        ] })
      ] });
    };
    function isExtensionEnvironment() {
      return typeof chrome !== "undefined" && chrome.runtime && chrome.runtime.id;
    }
    function checkActiveSession() {
      return new Promise((resolve, reject) => {
        if (!isExtensionEnvironment()) {
          console.log("Not in extension environment, skipping active session check");
          resolve({ hasActiveSession: false });
          return;
        }
        chrome.runtime.sendMessage({
          action: "CHECK_ACTIVE_SESSION"
        }, (response) => {
          var _a, _b, _c2, _d;
          if (chrome.runtime.lastError) {
            const errorMessage = chrome.runtime.lastError.message || "Unknown Chrome runtime error";
            console.error("Error checking active session:", errorMessage);
            console.error("Error details:", {
              action: "CHECK_ACTIVE_SESSION",
              error: errorMessage,
              timestamp: (/* @__PURE__ */ new Date()).toISOString()
            });
            reject(new Error(errorMessage));
            return;
          }
          if (response == null ? void 0 : response.success) {
            resolve({
              hasActiveSession: response.hasActiveSession,
              sessionId: (_a = response.activeSession) == null ? void 0 : _a.sessionId,
              holeId: (_b = response.activeSession) == null ? void 0 : _b.holeId,
              sessionName: (_c2 = response.activeSession) == null ? void 0 : _c2.sessionName,
              elapsedTimeInSeconds: (_d = response.activeSession) == null ? void 0 : _d.elapsedTimeInSeconds
            });
          } else {
            const errorMessage = (response == null ? void 0 : response.error) || "Unknown error checking active session";
            console.error("Failed to check active session:", errorMessage);
            console.error("Response details:", {
              response,
              timestamp: (/* @__PURE__ */ new Date()).toISOString()
            });
            resolve({ hasActiveSession: false });
          }
        });
      });
    }
    const App = () => {
      var _a;
      const [user, setUser] = reactExports.useState(null);
      const [loading, setLoading] = reactExports.useState(true);
      const [initialRoute, setInitialRoute] = reactExports.useState("/");
      const [activeSession, setActiveSession] = reactExports.useState(null);
      console.log("App 컴포넌트 렌더링", {
        isExtension: isExtensionEnvironment(),
        hasRuntime: !!((_a = window.chrome) == null ? void 0 : _a.runtime)
      });
      reactExports.useEffect(() => {
        console.log("App useEffect 실행");
        const checkAuth = () => __async(exports, null, function* () {
          console.log("직접 Firebase 인증 상태 확인");
          try {
            const unsubscribe = onAuthStateChange(handleAuthChange);
            const timeoutId = setTimeout(() => {
              console.log("🚨 Auth check timed out after 5 seconds, forcing loading to false");
              setLoading(false);
            }, 5e3);
            return () => {
              unsubscribe();
              clearTimeout(timeoutId);
            };
          } catch (error2) {
            console.error("Error checking auth state:", error2);
            setLoading(false);
          }
        });
        const handleAuthChange = (currentUser) => __async(exports, null, function* () {
          console.log("Auth state changed:", currentUser ? "Logged in" : "Logged out");
          setUser(currentUser);
          if (currentUser) {
            try {
              console.log("[DIGGIN] App: Checking for active session...");
              const activeSessionResult = yield checkActiveSession();
              if (activeSessionResult.hasActiveSession && activeSessionResult.sessionId) {
                console.log("[DIGGIN] App: Found active session:", activeSessionResult);
                const sessionData = {
                  sessionId: activeSessionResult.sessionId,
                  holeId: activeSessionResult.holeId,
                  sessionName: activeSessionResult.sessionName,
                  elapsedTimeInSeconds: activeSessionResult.elapsedTimeInSeconds
                };
                setActiveSession(sessionData);
                console.log("[DIGGIN] App: Redirecting to active session page with data:", sessionData);
                setInitialRoute("/session");
                setLoading(false);
                return;
              } else {
                console.log("[DIGGIN] App: No active session found");
              }
            } catch (error2) {
              console.error("[DIGGIN] App: Error checking active session:", error2);
            }
            try {
              console.log("Fetching user holes in handleAuthChange...");
              const userHoles = yield getUserHoles(currentUser.uid);
              console.log("User holes in handleAuthChange:", userHoles);
              if (userHoles.length > 0) {
                console.log("User has holes, navigating to /hole-list");
                setInitialRoute("/hole-list");
              } else {
                console.log("User has no holes, navigating to /main");
                setInitialRoute("/main");
              }
            } catch (error2) {
              console.error("Error checking user holes:", error2);
              setInitialRoute("/");
            }
          } else {
            console.log("No user, navigating to /");
            setInitialRoute("/");
          }
          console.log("Setting loading to false in handleAuthChange");
          setLoading(false);
        });
        checkAuth();
      }, []);
      console.log("App 렌더링 상태:", { loading, user, initialRoute, activeSession });
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-[320px] h-[400px] font-pretendard flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Loading..." }) });
      }
      let initialEntryState = null;
      if (initialRoute === "/session" && activeSession) {
        initialEntryState = {
          pathname: "/session",
          state: {
            sessionId: activeSession.sessionId,
            holeId: activeSession.holeId,
            sessionName: activeSession.sessionName || ""
          }
        };
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(MemoryRouter, { initialEntries: initialEntryState ? [initialEntryState] : [initialRoute], children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-[320px] h-[400px] font-pretendard", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Routes, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/", element: user ? /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: initialRoute, replace: true }) : /* @__PURE__ */ jsxRuntimeExports.jsx(LoginPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/main", element: user ? /* @__PURE__ */ jsxRuntimeExports.jsx(MainPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/", replace: true }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/hole-list", element: user ? activeSession && activeSession.sessionId && !localStorage.getItem("sessionEnded") ? /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/session", state: {
          sessionId: activeSession.sessionId,
          holeId: activeSession.holeId,
          sessionName: activeSession.sessionName
        }, replace: true }) : /* @__PURE__ */ jsxRuntimeExports.jsx(HoleListPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/", replace: true }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/select-icon", element: user ? /* @__PURE__ */ jsxRuntimeExports.jsx(SelectIconPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/", replace: true }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/create-hole", element: user ? /* @__PURE__ */ jsxRuntimeExports.jsx(CreateHolePage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/", replace: true }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/empty-session", element: user ? /* @__PURE__ */ jsxRuntimeExports.jsx(EmptySessionPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/", replace: true }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/create-session", element: user ? /* @__PURE__ */ jsxRuntimeExports.jsx(CreateSessionPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/", replace: true }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/session-list", element: user ? /* @__PURE__ */ jsxRuntimeExports.jsx(SessionListPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/", replace: true }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/session", element: user ? /* @__PURE__ */ jsxRuntimeExports.jsx(OnSessionPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/", replace: true }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/finish-session", element: user ? /* @__PURE__ */ jsxRuntimeExports.jsx(FinishSessionPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/", replace: true }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/template-list", element: /* @__PURE__ */ jsxRuntimeExports.jsx(TemplateListPage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "*", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: user ? initialRoute : "/", replace: true }) })
      ] }) }) });
    };
    client.createRoot(document.getElementById("root")).render(
      /* @__PURE__ */ jsxRuntimeExports.jsx(React.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) })
    );
  }
});
export default require_index_001();
